"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b ||= {})
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/lodash/lodash.js"(exports, module2) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _10.defaults(root.Object(), context, _10.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove2(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy2(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone3 = wrapperClone(parent2);
            clone3.__index__ = 0;
            clone3.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone3;
            } else {
              result2 = clone3;
            }
            var previous = clone3;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every2(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some2(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone2(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove2;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy2;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone2;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every2;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some2;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _10 = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _10;
        define(function() {
          return _10;
        });
      } else if (freeModule) {
        (freeModule.exports = _10)._ = _10;
        freeExports._ = _10;
      } else {
        root._ = _10;
      }
    }).call(exports);
  }
});

// node_modules/language-subtag-registry/data/json/index.json
var require_json = __commonJS({
  "node_modules/language-subtag-registry/data/json/index.json"(exports, module2) {
    module2.exports = {
      "142": {
        region: 8885
      },
      "143": {
        region: 8886
      },
      "145": {
        region: 8887
      },
      "150": {
        region: 8888
      },
      "151": {
        region: 8889
      },
      "154": {
        region: 8890
      },
      "155": {
        region: 8891
      },
      "202": {
        region: 8892
      },
      "419": {
        region: 8893
      },
      "1901": {
        variant: 8896
      },
      "1994": {
        variant: 8898
      },
      "1996": {
        variant: 8899
      },
      aa: {
        language: 0,
        region: 8590
      },
      ab: {
        language: 1
      },
      ae: {
        language: 2,
        region: 8593
      },
      af: {
        language: 3,
        region: 8594
      },
      ak: {
        language: 4
      },
      am: {
        language: 5,
        region: 8598
      },
      an: {
        language: 6,
        region: 8599
      },
      ar: {
        language: 7,
        region: 8602
      },
      as: {
        language: 8,
        region: 8603
      },
      av: {
        language: 9
      },
      ay: {
        language: 10
      },
      az: {
        language: 11,
        region: 8608
      },
      ba: {
        language: 12,
        region: 8609
      },
      be: {
        language: 13,
        region: 8612
      },
      bg: {
        language: 14,
        region: 8614
      },
      bh: {
        language: 15,
        region: 8615
      },
      bi: {
        language: 16,
        region: 8616
      },
      bm: {
        language: 17,
        region: 8619
      },
      bn: {
        language: 18,
        region: 8620
      },
      bo: {
        language: 19,
        region: 8621
      },
      br: {
        language: 20,
        region: 8623
      },
      bs: {
        language: 21,
        region: 8624
      },
      ca: {
        language: 22,
        region: 8631
      },
      ce: {
        language: 23
      },
      ch: {
        language: 24,
        region: 8636
      },
      co: {
        language: 25,
        region: 8642
      },
      cr: {
        language: 26,
        region: 8644
      },
      cs: {
        language: 27,
        region: 8645
      },
      cu: {
        language: 28,
        region: 8646
      },
      cv: {
        language: 29,
        region: 8647
      },
      cy: {
        language: 30,
        region: 8650
      },
      da: {
        language: 31
      },
      de: {
        language: 32,
        region: 8653
      },
      dv: {
        language: 33
      },
      dz: {
        language: 34,
        region: 8659
      },
      ee: {
        language: 35,
        region: 8662
      },
      el: {
        language: 36
      },
      en: {
        language: 37
      },
      eo: {
        language: 38
      },
      es: {
        language: 39,
        region: 8666
      },
      et: {
        language: 40,
        region: 8667
      },
      eu: {
        language: 41,
        region: 8668
      },
      fa: {
        language: 42
      },
      ff: {
        language: 43
      },
      fi: {
        language: 44,
        region: 8670
      },
      fj: {
        language: 45,
        region: 8671
      },
      fo: {
        language: 46,
        region: 8674
      },
      fr: {
        language: 47,
        region: 8675
      },
      fy: {
        language: 48
      },
      ga: {
        language: 49,
        region: 8677
      },
      gd: {
        language: 50,
        region: 8679
      },
      gl: {
        language: 51,
        region: 8685
      },
      gn: {
        language: 52,
        region: 8687
      },
      gu: {
        language: 53,
        region: 8693
      },
      gv: {
        language: 54
      },
      ha: {
        language: 55
      },
      he: {
        language: 56
      },
      hi: {
        language: 57
      },
      ho: {
        language: 58
      },
      hr: {
        language: 59,
        region: 8699
      },
      ht: {
        language: 60,
        region: 8700
      },
      hu: {
        language: 61,
        region: 8701
      },
      hy: {
        language: 62
      },
      hz: {
        language: 63
      },
      ia: {
        language: 64
      },
      id: {
        language: 65,
        region: 8703
      },
      ie: {
        language: 66,
        region: 8704
      },
      ig: {
        language: 67
      },
      ii: {
        language: 68
      },
      ik: {
        language: 69
      },
      in: {
        language: 70,
        region: 8707
      },
      io: {
        language: 71,
        region: 8708
      },
      is: {
        language: 72,
        region: 8711
      },
      it: {
        language: 73,
        region: 8712
      },
      iu: {
        language: 74
      },
      iw: {
        language: 75
      },
      ja: {
        language: 76
      },
      ji: {
        language: 77
      },
      jv: {
        language: 78
      },
      jw: {
        language: 79
      },
      ka: {
        language: 80
      },
      kg: {
        language: 81,
        region: 8718
      },
      ki: {
        language: 82,
        region: 8720
      },
      kj: {
        language: 83
      },
      kk: {
        language: 84
      },
      kl: {
        language: 85
      },
      km: {
        language: 86,
        region: 8721
      },
      kn: {
        language: 87,
        region: 8722
      },
      ko: {
        language: 88
      },
      kr: {
        language: 89,
        region: 8724
      },
      ks: {
        language: 90
      },
      ku: {
        language: 91
      },
      kv: {
        language: 92
      },
      kw: {
        language: 93,
        region: 8725
      },
      ky: {
        language: 94,
        region: 8726
      },
      la: {
        language: 95,
        region: 8728
      },
      lb: {
        language: 96,
        region: 8729
      },
      lg: {
        language: 97
      },
      li: {
        language: 98,
        region: 8731
      },
      ln: {
        language: 99
      },
      lo: {
        language: 100
      },
      lt: {
        language: 101,
        region: 8735
      },
      lu: {
        language: 102,
        region: 8736
      },
      lv: {
        language: 103,
        region: 8737
      },
      mg: {
        language: 104,
        region: 8744
      },
      mh: {
        language: 105,
        region: 8745
      },
      mi: {
        language: 106
      },
      mk: {
        language: 107,
        region: 8746
      },
      ml: {
        language: 108,
        region: 8747
      },
      mn: {
        language: 109,
        region: 8749
      },
      mo: {
        language: 110,
        region: 8750
      },
      mr: {
        language: 111,
        region: 8753
      },
      ms: {
        language: 112,
        region: 8754
      },
      mt: {
        language: 113,
        region: 8755
      },
      my: {
        language: 114,
        region: 8760
      },
      na: {
        language: 115,
        region: 8762
      },
      nb: {
        language: 116
      },
      nd: {
        language: 117
      },
      ne: {
        language: 118,
        region: 8764
      },
      ng: {
        language: 119,
        region: 8766
      },
      nl: {
        language: 120,
        region: 8768
      },
      nn: {
        language: 121
      },
      no: {
        language: 122,
        region: 8769
      },
      nr: {
        language: 123,
        region: 8771
      },
      nv: {
        language: 124
      },
      ny: {
        language: 125
      },
      oc: {
        language: 126
      },
      oj: {
        language: 127
      },
      om: {
        language: 128,
        region: 8775
      },
      or: {
        language: 129
      },
      os: {
        language: 130
      },
      pa: {
        language: 131,
        region: 8776
      },
      pi: {
        language: 132
      },
      pl: {
        language: 133,
        region: 8782
      },
      ps: {
        language: 134,
        region: 8786
      },
      pt: {
        language: 135,
        region: 8787
      },
      qu: {
        language: 136
      },
      rm: {
        language: 137
      },
      rn: {
        language: 138
      },
      ro: {
        language: 139,
        region: 8793
      },
      ru: {
        language: 140,
        region: 8795
      },
      rw: {
        language: 141,
        region: 8796
      },
      sa: {
        language: 142,
        region: 8797
      },
      sc: {
        language: 143,
        region: 8799
      },
      sd: {
        language: 144,
        region: 8800
      },
      se: {
        language: 145,
        region: 8801
      },
      sg: {
        language: 146,
        region: 8802
      },
      sh: {
        language: 147,
        region: 8803
      },
      si: {
        language: 148,
        region: 8804
      },
      sk: {
        language: 149,
        region: 8806
      },
      sl: {
        language: 150,
        region: 8807
      },
      sm: {
        language: 151,
        region: 8808
      },
      sn: {
        language: 152,
        region: 8809
      },
      so: {
        language: 153,
        region: 8810
      },
      sq: {
        language: 154
      },
      sr: {
        language: 155,
        region: 8811
      },
      ss: {
        language: 156,
        region: 8812
      },
      st: {
        language: 157,
        region: 8813
      },
      su: {
        language: 158,
        region: 8814
      },
      sv: {
        language: 159,
        region: 8815
      },
      sw: {
        language: 160
      },
      ta: {
        language: 161,
        region: 8819
      },
      te: {
        language: 162
      },
      tg: {
        language: 163,
        region: 8823
      },
      th: {
        language: 164,
        region: 8824
      },
      ti: {
        language: 165
      },
      tk: {
        language: 166,
        region: 8826
      },
      tl: {
        language: 167,
        region: 8827
      },
      tn: {
        language: 168,
        region: 8829
      },
      to: {
        language: 169,
        region: 8830
      },
      tr: {
        language: 170,
        region: 8832
      },
      ts: {
        language: 171
      },
      tt: {
        language: 172,
        region: 8833
      },
      tw: {
        language: 173,
        region: 8835
      },
      ty: {
        language: 174
      },
      ug: {
        language: 175,
        region: 8838
      },
      uk: {
        language: 176
      },
      ur: {
        language: 177
      },
      uz: {
        language: 178,
        region: 8843
      },
      ve: {
        language: 179,
        region: 8846
      },
      vi: {
        language: 180,
        region: 8848
      },
      vo: {
        language: 181
      },
      wa: {
        language: 182
      },
      wo: {
        language: 183
      },
      xh: {
        language: 184
      },
      yi: {
        language: 185
      },
      yo: {
        language: 186
      },
      za: {
        language: 187,
        region: 8858
      },
      zh: {
        language: 188
      },
      zu: {
        language: 189
      },
      aaa: {
        language: 190
      },
      aab: {
        language: 191
      },
      aac: {
        language: 192
      },
      aad: {
        language: 193
      },
      aae: {
        language: 194
      },
      aaf: {
        language: 195
      },
      aag: {
        language: 196
      },
      aah: {
        language: 197
      },
      aai: {
        language: 198
      },
      aak: {
        language: 199
      },
      aal: {
        language: 200
      },
      aam: {
        language: 201
      },
      aan: {
        language: 202
      },
      aao: {
        language: 203,
        extlang: 8152
      },
      aap: {
        language: 204
      },
      aaq: {
        language: 205
      },
      aas: {
        language: 206
      },
      aat: {
        language: 207
      },
      aau: {
        language: 208
      },
      aav: {
        language: 209
      },
      aaw: {
        language: 210
      },
      aax: {
        language: 211
      },
      aaz: {
        language: 212
      },
      aba: {
        language: 213
      },
      abb: {
        language: 214
      },
      abc: {
        language: 215
      },
      abd: {
        language: 216
      },
      abe: {
        language: 217
      },
      abf: {
        language: 218
      },
      abg: {
        language: 219
      },
      abh: {
        language: 220,
        extlang: 8153
      },
      abi: {
        language: 221
      },
      abj: {
        language: 222
      },
      abl: {
        language: 223
      },
      abm: {
        language: 224
      },
      abn: {
        language: 225
      },
      abo: {
        language: 226
      },
      abp: {
        language: 227
      },
      abq: {
        language: 228
      },
      abr: {
        language: 229
      },
      abs: {
        language: 230
      },
      abt: {
        language: 231
      },
      abu: {
        language: 232
      },
      abv: {
        language: 233,
        extlang: 8154
      },
      abw: {
        language: 234
      },
      abx: {
        language: 235
      },
      aby: {
        language: 236
      },
      abz: {
        language: 237
      },
      aca: {
        language: 238
      },
      acb: {
        language: 239
      },
      acd: {
        language: 240
      },
      ace: {
        language: 241
      },
      acf: {
        language: 242
      },
      ach: {
        language: 243
      },
      aci: {
        language: 244
      },
      ack: {
        language: 245
      },
      acl: {
        language: 246
      },
      acm: {
        language: 247,
        extlang: 8155
      },
      acn: {
        language: 248
      },
      acp: {
        language: 249
      },
      acq: {
        language: 250,
        extlang: 8156
      },
      acr: {
        language: 251
      },
      acs: {
        language: 252
      },
      act: {
        language: 253
      },
      acu: {
        language: 254
      },
      acv: {
        language: 255
      },
      acw: {
        language: 256,
        extlang: 8157
      },
      acx: {
        language: 257,
        extlang: 8158
      },
      acy: {
        language: 258,
        extlang: 8159
      },
      acz: {
        language: 259
      },
      ada: {
        language: 260
      },
      adb: {
        language: 261
      },
      add: {
        language: 262
      },
      ade: {
        language: 263
      },
      adf: {
        language: 264,
        extlang: 8160
      },
      adg: {
        language: 265
      },
      adh: {
        language: 266
      },
      adi: {
        language: 267
      },
      adj: {
        language: 268
      },
      adl: {
        language: 269
      },
      adn: {
        language: 270
      },
      ado: {
        language: 271
      },
      adp: {
        language: 272
      },
      adq: {
        language: 273
      },
      adr: {
        language: 274
      },
      ads: {
        language: 275,
        extlang: 8161
      },
      adt: {
        language: 276
      },
      adu: {
        language: 277
      },
      adw: {
        language: 278
      },
      adx: {
        language: 279
      },
      ady: {
        language: 280
      },
      adz: {
        language: 281
      },
      aea: {
        language: 282
      },
      aeb: {
        language: 283,
        extlang: 8162
      },
      aec: {
        language: 284,
        extlang: 8163
      },
      aed: {
        language: 285,
        extlang: 8164
      },
      aee: {
        language: 286
      },
      aek: {
        language: 287
      },
      ael: {
        language: 288
      },
      aem: {
        language: 289
      },
      aen: {
        language: 290,
        extlang: 8165
      },
      aeq: {
        language: 291
      },
      aer: {
        language: 292
      },
      aes: {
        language: 293
      },
      aeu: {
        language: 294
      },
      aew: {
        language: 295
      },
      aey: {
        language: 296
      },
      aez: {
        language: 297
      },
      afa: {
        language: 298
      },
      afb: {
        language: 299,
        extlang: 8166
      },
      afd: {
        language: 300
      },
      afe: {
        language: 301
      },
      afg: {
        language: 302,
        extlang: 8167
      },
      afh: {
        language: 303
      },
      afi: {
        language: 304
      },
      afk: {
        language: 305
      },
      afn: {
        language: 306
      },
      afo: {
        language: 307
      },
      afp: {
        language: 308
      },
      afs: {
        language: 309
      },
      aft: {
        language: 310
      },
      afu: {
        language: 311
      },
      afz: {
        language: 312
      },
      aga: {
        language: 313
      },
      agb: {
        language: 314
      },
      agc: {
        language: 315
      },
      agd: {
        language: 316
      },
      age: {
        language: 317
      },
      agf: {
        language: 318
      },
      agg: {
        language: 319
      },
      agh: {
        language: 320
      },
      agi: {
        language: 321
      },
      agj: {
        language: 322
      },
      agk: {
        language: 323
      },
      agl: {
        language: 324
      },
      agm: {
        language: 325
      },
      agn: {
        language: 326
      },
      ago: {
        language: 327
      },
      agp: {
        language: 328
      },
      agq: {
        language: 329
      },
      agr: {
        language: 330
      },
      ags: {
        language: 331
      },
      agt: {
        language: 332
      },
      agu: {
        language: 333
      },
      agv: {
        language: 334
      },
      agw: {
        language: 335
      },
      agx: {
        language: 336
      },
      agy: {
        language: 337
      },
      agz: {
        language: 338
      },
      aha: {
        language: 339
      },
      ahb: {
        language: 340
      },
      ahg: {
        language: 341
      },
      ahh: {
        language: 342
      },
      ahi: {
        language: 343
      },
      ahk: {
        language: 344
      },
      ahl: {
        language: 345
      },
      ahm: {
        language: 346
      },
      ahn: {
        language: 347
      },
      aho: {
        language: 348
      },
      ahp: {
        language: 349
      },
      ahr: {
        language: 350
      },
      ahs: {
        language: 351
      },
      aht: {
        language: 352
      },
      aia: {
        language: 353
      },
      aib: {
        language: 354
      },
      aic: {
        language: 355
      },
      aid: {
        language: 356
      },
      aie: {
        language: 357
      },
      aif: {
        language: 358
      },
      aig: {
        language: 359
      },
      aih: {
        language: 360
      },
      aii: {
        language: 361
      },
      aij: {
        language: 362
      },
      aik: {
        language: 363
      },
      ail: {
        language: 364
      },
      aim: {
        language: 365
      },
      ain: {
        language: 366
      },
      aio: {
        language: 367
      },
      aip: {
        language: 368
      },
      aiq: {
        language: 369
      },
      air: {
        language: 370
      },
      ais: {
        language: 371
      },
      ait: {
        language: 372
      },
      aiw: {
        language: 373
      },
      aix: {
        language: 374
      },
      aiy: {
        language: 375
      },
      aja: {
        language: 376
      },
      ajg: {
        language: 377
      },
      aji: {
        language: 378
      },
      ajn: {
        language: 379
      },
      ajp: {
        language: 380,
        extlang: 8168
      },
      ajt: {
        language: 381
      },
      aju: {
        language: 382
      },
      ajw: {
        language: 383
      },
      ajz: {
        language: 384
      },
      akb: {
        language: 385
      },
      akc: {
        language: 386
      },
      akd: {
        language: 387
      },
      ake: {
        language: 388
      },
      akf: {
        language: 389
      },
      akg: {
        language: 390
      },
      akh: {
        language: 391
      },
      aki: {
        language: 392
      },
      akj: {
        language: 393
      },
      akk: {
        language: 394
      },
      akl: {
        language: 395
      },
      akm: {
        language: 396
      },
      ako: {
        language: 397
      },
      akp: {
        language: 398
      },
      akq: {
        language: 399
      },
      akr: {
        language: 400
      },
      aks: {
        language: 401
      },
      akt: {
        language: 402
      },
      aku: {
        language: 403
      },
      akv: {
        language: 404
      },
      akw: {
        language: 405
      },
      akx: {
        language: 406
      },
      aky: {
        language: 407
      },
      akz: {
        language: 408
      },
      ala: {
        language: 409
      },
      alc: {
        language: 410
      },
      ald: {
        language: 411
      },
      ale: {
        language: 412
      },
      alf: {
        language: 413
      },
      alg: {
        language: 414
      },
      alh: {
        language: 415
      },
      ali: {
        language: 416
      },
      alj: {
        language: 417
      },
      alk: {
        language: 418
      },
      all: {
        language: 419
      },
      alm: {
        language: 420
      },
      aln: {
        language: 421
      },
      alo: {
        language: 422
      },
      alp: {
        language: 423
      },
      alq: {
        language: 424
      },
      alr: {
        language: 425
      },
      als: {
        language: 426
      },
      alt: {
        language: 427
      },
      alu: {
        language: 428
      },
      alv: {
        language: 429
      },
      alw: {
        language: 430
      },
      alx: {
        language: 431
      },
      aly: {
        language: 432
      },
      alz: {
        language: 433
      },
      ama: {
        language: 434
      },
      amb: {
        language: 435
      },
      amc: {
        language: 436
      },
      ame: {
        language: 437
      },
      amf: {
        language: 438
      },
      amg: {
        language: 439
      },
      ami: {
        language: 440
      },
      amj: {
        language: 441
      },
      amk: {
        language: 442
      },
      aml: {
        language: 443
      },
      amm: {
        language: 444
      },
      amn: {
        language: 445
      },
      amo: {
        language: 446
      },
      amp: {
        language: 447
      },
      amq: {
        language: 448
      },
      amr: {
        language: 449
      },
      ams: {
        language: 450
      },
      amt: {
        language: 451
      },
      amu: {
        language: 452
      },
      amv: {
        language: 453
      },
      amw: {
        language: 454
      },
      amx: {
        language: 455
      },
      amy: {
        language: 456
      },
      amz: {
        language: 457
      },
      ana: {
        language: 458
      },
      anb: {
        language: 459
      },
      anc: {
        language: 460
      },
      and: {
        language: 461
      },
      ane: {
        language: 462
      },
      anf: {
        language: 463
      },
      ang: {
        language: 464
      },
      anh: {
        language: 465
      },
      ani: {
        language: 466
      },
      anj: {
        language: 467
      },
      ank: {
        language: 468
      },
      anl: {
        language: 469
      },
      anm: {
        language: 470
      },
      ann: {
        language: 471
      },
      ano: {
        language: 472
      },
      anp: {
        language: 473
      },
      anq: {
        language: 474
      },
      anr: {
        language: 475
      },
      ans: {
        language: 476
      },
      ant: {
        language: 477
      },
      anu: {
        language: 478
      },
      anv: {
        language: 479
      },
      anw: {
        language: 480
      },
      anx: {
        language: 481
      },
      any: {
        language: 482
      },
      anz: {
        language: 483
      },
      aoa: {
        language: 484
      },
      aob: {
        language: 485
      },
      aoc: {
        language: 486
      },
      aod: {
        language: 487
      },
      aoe: {
        language: 488
      },
      aof: {
        language: 489
      },
      aog: {
        language: 490
      },
      aoh: {
        language: 491
      },
      aoi: {
        language: 492
      },
      aoj: {
        language: 493
      },
      aok: {
        language: 494
      },
      aol: {
        language: 495
      },
      aom: {
        language: 496
      },
      aon: {
        language: 497
      },
      aor: {
        language: 498
      },
      aos: {
        language: 499
      },
      aot: {
        language: 500
      },
      aou: {
        language: 501
      },
      aox: {
        language: 502
      },
      aoz: {
        language: 503
      },
      apa: {
        language: 504
      },
      apb: {
        language: 505
      },
      apc: {
        language: 506,
        extlang: 8169
      },
      apd: {
        language: 507,
        extlang: 8170
      },
      ape: {
        language: 508
      },
      apf: {
        language: 509
      },
      apg: {
        language: 510
      },
      aph: {
        language: 511
      },
      api: {
        language: 512
      },
      apj: {
        language: 513
      },
      apk: {
        language: 514
      },
      apl: {
        language: 515
      },
      apm: {
        language: 516
      },
      apn: {
        language: 517
      },
      apo: {
        language: 518
      },
      app: {
        language: 519
      },
      apq: {
        language: 520
      },
      apr: {
        language: 521
      },
      aps: {
        language: 522
      },
      apt: {
        language: 523
      },
      apu: {
        language: 524
      },
      apv: {
        language: 525
      },
      apw: {
        language: 526
      },
      apx: {
        language: 527
      },
      apy: {
        language: 528
      },
      apz: {
        language: 529
      },
      aqa: {
        language: 530
      },
      aqc: {
        language: 531
      },
      aqd: {
        language: 532
      },
      aqg: {
        language: 533
      },
      aql: {
        language: 534
      },
      aqm: {
        language: 535
      },
      aqn: {
        language: 536
      },
      aqp: {
        language: 537
      },
      aqr: {
        language: 538
      },
      aqt: {
        language: 539
      },
      aqz: {
        language: 540
      },
      arb: {
        language: 541,
        extlang: 8171
      },
      arc: {
        language: 542
      },
      ard: {
        language: 543
      },
      are: {
        language: 544
      },
      arh: {
        language: 545
      },
      ari: {
        language: 546
      },
      arj: {
        language: 547
      },
      ark: {
        language: 548
      },
      arl: {
        language: 549
      },
      arn: {
        language: 550
      },
      aro: {
        language: 551
      },
      arp: {
        language: 552
      },
      arq: {
        language: 553,
        extlang: 8172
      },
      arr: {
        language: 554
      },
      ars: {
        language: 555,
        extlang: 8173
      },
      art: {
        language: 556
      },
      aru: {
        language: 557
      },
      arv: {
        language: 558
      },
      arw: {
        language: 559
      },
      arx: {
        language: 560
      },
      ary: {
        language: 561,
        extlang: 8174
      },
      arz: {
        language: 562,
        extlang: 8175
      },
      asa: {
        language: 563
      },
      asb: {
        language: 564
      },
      asc: {
        language: 565
      },
      asd: {
        language: 566
      },
      ase: {
        language: 567,
        extlang: 8176
      },
      asf: {
        language: 568,
        extlang: 8177
      },
      asg: {
        language: 569
      },
      ash: {
        language: 570
      },
      asi: {
        language: 571
      },
      asj: {
        language: 572
      },
      ask: {
        language: 573
      },
      asl: {
        language: 574
      },
      asn: {
        language: 575
      },
      aso: {
        language: 576
      },
      asp: {
        language: 577,
        extlang: 8178
      },
      asq: {
        language: 578,
        extlang: 8179
      },
      asr: {
        language: 579
      },
      ass: {
        language: 580
      },
      ast: {
        language: 581
      },
      asu: {
        language: 582
      },
      asv: {
        language: 583
      },
      asw: {
        language: 584,
        extlang: 8180
      },
      asx: {
        language: 585
      },
      asy: {
        language: 586
      },
      asz: {
        language: 587
      },
      ata: {
        language: 588
      },
      atb: {
        language: 589
      },
      atc: {
        language: 590
      },
      atd: {
        language: 591
      },
      ate: {
        language: 592
      },
      atg: {
        language: 593
      },
      ath: {
        language: 594
      },
      ati: {
        language: 595
      },
      atj: {
        language: 596
      },
      atk: {
        language: 597
      },
      atl: {
        language: 598
      },
      atm: {
        language: 599
      },
      atn: {
        language: 600
      },
      ato: {
        language: 601
      },
      atp: {
        language: 602
      },
      atq: {
        language: 603
      },
      atr: {
        language: 604
      },
      ats: {
        language: 605
      },
      att: {
        language: 606
      },
      atu: {
        language: 607
      },
      atv: {
        language: 608
      },
      atw: {
        language: 609
      },
      atx: {
        language: 610
      },
      aty: {
        language: 611
      },
      atz: {
        language: 612
      },
      aua: {
        language: 613
      },
      aub: {
        language: 614
      },
      auc: {
        language: 615
      },
      aud: {
        language: 616
      },
      aue: {
        language: 617
      },
      auf: {
        language: 618
      },
      aug: {
        language: 619
      },
      auh: {
        language: 620
      },
      aui: {
        language: 621
      },
      auj: {
        language: 622
      },
      auk: {
        language: 623
      },
      aul: {
        language: 624
      },
      aum: {
        language: 625
      },
      aun: {
        language: 626
      },
      auo: {
        language: 627
      },
      aup: {
        language: 628
      },
      auq: {
        language: 629
      },
      aur: {
        language: 630
      },
      aus: {
        language: 631
      },
      aut: {
        language: 632
      },
      auu: {
        language: 633
      },
      auw: {
        language: 634
      },
      aux: {
        language: 635
      },
      auy: {
        language: 636
      },
      auz: {
        language: 637,
        extlang: 8181
      },
      avb: {
        language: 638
      },
      avd: {
        language: 639
      },
      avi: {
        language: 640
      },
      avk: {
        language: 641
      },
      avl: {
        language: 642,
        extlang: 8182
      },
      avm: {
        language: 643
      },
      avn: {
        language: 644
      },
      avo: {
        language: 645
      },
      avs: {
        language: 646
      },
      avt: {
        language: 647
      },
      avu: {
        language: 648
      },
      avv: {
        language: 649
      },
      awa: {
        language: 650
      },
      awb: {
        language: 651
      },
      awc: {
        language: 652
      },
      awd: {
        language: 653
      },
      awe: {
        language: 654
      },
      awg: {
        language: 655
      },
      awh: {
        language: 656
      },
      awi: {
        language: 657
      },
      awk: {
        language: 658
      },
      awm: {
        language: 659
      },
      awn: {
        language: 660
      },
      awo: {
        language: 661
      },
      awr: {
        language: 662
      },
      aws: {
        language: 663
      },
      awt: {
        language: 664
      },
      awu: {
        language: 665
      },
      awv: {
        language: 666
      },
      aww: {
        language: 667
      },
      awx: {
        language: 668
      },
      awy: {
        language: 669
      },
      axb: {
        language: 670
      },
      axe: {
        language: 671
      },
      axg: {
        language: 672
      },
      axk: {
        language: 673
      },
      axl: {
        language: 674
      },
      axm: {
        language: 675
      },
      axx: {
        language: 676
      },
      aya: {
        language: 677
      },
      ayb: {
        language: 678
      },
      ayc: {
        language: 679
      },
      ayd: {
        language: 680
      },
      aye: {
        language: 681
      },
      ayg: {
        language: 682
      },
      ayh: {
        language: 683,
        extlang: 8183
      },
      ayi: {
        language: 684
      },
      ayk: {
        language: 685
      },
      ayl: {
        language: 686,
        extlang: 8184
      },
      ayn: {
        language: 687,
        extlang: 8185
      },
      ayo: {
        language: 688
      },
      ayp: {
        language: 689,
        extlang: 8186
      },
      ayq: {
        language: 690
      },
      ayr: {
        language: 691
      },
      ays: {
        language: 692
      },
      ayt: {
        language: 693
      },
      ayu: {
        language: 694
      },
      ayx: {
        language: 695
      },
      ayy: {
        language: 696
      },
      ayz: {
        language: 697
      },
      aza: {
        language: 698
      },
      azb: {
        language: 699
      },
      azc: {
        language: 700
      },
      azd: {
        language: 701
      },
      azg: {
        language: 702
      },
      azj: {
        language: 703
      },
      azm: {
        language: 704
      },
      azn: {
        language: 705
      },
      azo: {
        language: 706
      },
      azt: {
        language: 707
      },
      azz: {
        language: 708
      },
      baa: {
        language: 709
      },
      bab: {
        language: 710
      },
      bac: {
        language: 711
      },
      bad: {
        language: 712
      },
      bae: {
        language: 713
      },
      baf: {
        language: 714
      },
      bag: {
        language: 715
      },
      bah: {
        language: 716
      },
      bai: {
        language: 717
      },
      baj: {
        language: 718
      },
      bal: {
        language: 719
      },
      ban: {
        language: 720
      },
      bao: {
        language: 721
      },
      bap: {
        language: 722
      },
      bar: {
        language: 723
      },
      bas: {
        language: 724
      },
      bat: {
        language: 725
      },
      bau: {
        language: 726
      },
      bav: {
        language: 727
      },
      baw: {
        language: 728
      },
      bax: {
        language: 729
      },
      bay: {
        language: 730
      },
      baz: {
        language: 731
      },
      bba: {
        language: 732
      },
      bbb: {
        language: 733
      },
      bbc: {
        language: 734
      },
      bbd: {
        language: 735
      },
      bbe: {
        language: 736
      },
      bbf: {
        language: 737
      },
      bbg: {
        language: 738
      },
      bbh: {
        language: 739
      },
      bbi: {
        language: 740
      },
      bbj: {
        language: 741
      },
      bbk: {
        language: 742
      },
      bbl: {
        language: 743
      },
      bbm: {
        language: 744
      },
      bbn: {
        language: 745
      },
      bbo: {
        language: 746
      },
      bbp: {
        language: 747
      },
      bbq: {
        language: 748
      },
      bbr: {
        language: 749
      },
      bbs: {
        language: 750
      },
      bbt: {
        language: 751
      },
      bbu: {
        language: 752
      },
      bbv: {
        language: 753
      },
      bbw: {
        language: 754
      },
      bbx: {
        language: 755
      },
      bby: {
        language: 756
      },
      bbz: {
        language: 757,
        extlang: 8187
      },
      bca: {
        language: 758
      },
      bcb: {
        language: 759
      },
      bcc: {
        language: 760
      },
      bcd: {
        language: 761
      },
      bce: {
        language: 762
      },
      bcf: {
        language: 763
      },
      bcg: {
        language: 764
      },
      bch: {
        language: 765
      },
      bci: {
        language: 766
      },
      bcj: {
        language: 767
      },
      bck: {
        language: 768
      },
      bcl: {
        language: 769
      },
      bcm: {
        language: 770
      },
      bcn: {
        language: 771
      },
      bco: {
        language: 772
      },
      bcp: {
        language: 773
      },
      bcq: {
        language: 774
      },
      bcr: {
        language: 775
      },
      bcs: {
        language: 776
      },
      bct: {
        language: 777
      },
      bcu: {
        language: 778
      },
      bcv: {
        language: 779
      },
      bcw: {
        language: 780
      },
      bcy: {
        language: 781
      },
      bcz: {
        language: 782
      },
      bda: {
        language: 783
      },
      bdb: {
        language: 784
      },
      bdc: {
        language: 785
      },
      bdd: {
        language: 786
      },
      bde: {
        language: 787
      },
      bdf: {
        language: 788
      },
      bdg: {
        language: 789
      },
      bdh: {
        language: 790
      },
      bdi: {
        language: 791
      },
      bdj: {
        language: 792
      },
      bdk: {
        language: 793
      },
      bdl: {
        language: 794
      },
      bdm: {
        language: 795
      },
      bdn: {
        language: 796
      },
      bdo: {
        language: 797
      },
      bdp: {
        language: 798
      },
      bdq: {
        language: 799
      },
      bdr: {
        language: 800
      },
      bds: {
        language: 801
      },
      bdt: {
        language: 802
      },
      bdu: {
        language: 803
      },
      bdv: {
        language: 804
      },
      bdw: {
        language: 805
      },
      bdx: {
        language: 806
      },
      bdy: {
        language: 807
      },
      bdz: {
        language: 808
      },
      bea: {
        language: 809
      },
      beb: {
        language: 810
      },
      bec: {
        language: 811
      },
      bed: {
        language: 812
      },
      bee: {
        language: 813
      },
      bef: {
        language: 814
      },
      beg: {
        language: 815
      },
      beh: {
        language: 816
      },
      bei: {
        language: 817
      },
      bej: {
        language: 818
      },
      bek: {
        language: 819
      },
      bem: {
        language: 820
      },
      beo: {
        language: 821
      },
      bep: {
        language: 822
      },
      beq: {
        language: 823
      },
      ber: {
        language: 824
      },
      bes: {
        language: 825
      },
      bet: {
        language: 826
      },
      beu: {
        language: 827
      },
      bev: {
        language: 828
      },
      bew: {
        language: 829
      },
      bex: {
        language: 830
      },
      bey: {
        language: 831
      },
      bez: {
        language: 832
      },
      bfa: {
        language: 833
      },
      bfb: {
        language: 834
      },
      bfc: {
        language: 835
      },
      bfd: {
        language: 836
      },
      bfe: {
        language: 837
      },
      bff: {
        language: 838
      },
      bfg: {
        language: 839
      },
      bfh: {
        language: 840
      },
      bfi: {
        language: 841,
        extlang: 8188
      },
      bfj: {
        language: 842
      },
      bfk: {
        language: 843,
        extlang: 8189
      },
      bfl: {
        language: 844
      },
      bfm: {
        language: 845
      },
      bfn: {
        language: 846
      },
      bfo: {
        language: 847
      },
      bfp: {
        language: 848
      },
      bfq: {
        language: 849
      },
      bfr: {
        language: 850
      },
      bfs: {
        language: 851
      },
      bft: {
        language: 852
      },
      bfu: {
        language: 853
      },
      bfw: {
        language: 854
      },
      bfx: {
        language: 855
      },
      bfy: {
        language: 856
      },
      bfz: {
        language: 857
      },
      bga: {
        language: 858
      },
      bgb: {
        language: 859
      },
      bgc: {
        language: 860
      },
      bgd: {
        language: 861
      },
      bge: {
        language: 862
      },
      bgf: {
        language: 863
      },
      bgg: {
        language: 864
      },
      bgi: {
        language: 865
      },
      bgj: {
        language: 866
      },
      bgk: {
        language: 867
      },
      bgl: {
        language: 868
      },
      bgm: {
        language: 869
      },
      bgn: {
        language: 870
      },
      bgo: {
        language: 871
      },
      bgp: {
        language: 872
      },
      bgq: {
        language: 873
      },
      bgr: {
        language: 874
      },
      bgs: {
        language: 875
      },
      bgt: {
        language: 876
      },
      bgu: {
        language: 877
      },
      bgv: {
        language: 878
      },
      bgw: {
        language: 879
      },
      bgx: {
        language: 880
      },
      bgy: {
        language: 881
      },
      bgz: {
        language: 882
      },
      bha: {
        language: 883
      },
      bhb: {
        language: 884
      },
      bhc: {
        language: 885
      },
      bhd: {
        language: 886
      },
      bhe: {
        language: 887
      },
      bhf: {
        language: 888
      },
      bhg: {
        language: 889
      },
      bhh: {
        language: 890
      },
      bhi: {
        language: 891
      },
      bhj: {
        language: 892
      },
      bhk: {
        language: 893
      },
      bhl: {
        language: 894
      },
      bhm: {
        language: 895
      },
      bhn: {
        language: 896
      },
      bho: {
        language: 897
      },
      bhp: {
        language: 898
      },
      bhq: {
        language: 899
      },
      bhr: {
        language: 900
      },
      bhs: {
        language: 901
      },
      bht: {
        language: 902
      },
      bhu: {
        language: 903
      },
      bhv: {
        language: 904
      },
      bhw: {
        language: 905
      },
      bhx: {
        language: 906
      },
      bhy: {
        language: 907
      },
      bhz: {
        language: 908
      },
      bia: {
        language: 909
      },
      bib: {
        language: 910
      },
      bic: {
        language: 911
      },
      bid: {
        language: 912
      },
      bie: {
        language: 913
      },
      bif: {
        language: 914
      },
      big: {
        language: 915
      },
      bij: {
        language: 916
      },
      bik: {
        language: 917
      },
      bil: {
        language: 918
      },
      bim: {
        language: 919
      },
      bin: {
        language: 920
      },
      bio: {
        language: 921
      },
      bip: {
        language: 922
      },
      biq: {
        language: 923
      },
      bir: {
        language: 924
      },
      bit: {
        language: 925
      },
      biu: {
        language: 926
      },
      biv: {
        language: 927
      },
      biw: {
        language: 928
      },
      bix: {
        language: 929
      },
      biy: {
        language: 930
      },
      biz: {
        language: 931
      },
      bja: {
        language: 932
      },
      bjb: {
        language: 933
      },
      bjc: {
        language: 934
      },
      bjd: {
        language: 935
      },
      bje: {
        language: 936
      },
      bjf: {
        language: 937
      },
      bjg: {
        language: 938
      },
      bjh: {
        language: 939
      },
      bji: {
        language: 940
      },
      bjj: {
        language: 941
      },
      bjk: {
        language: 942
      },
      bjl: {
        language: 943
      },
      bjm: {
        language: 944
      },
      bjn: {
        language: 945,
        extlang: 8190
      },
      bjo: {
        language: 946
      },
      bjp: {
        language: 947
      },
      bjq: {
        language: 948
      },
      bjr: {
        language: 949
      },
      bjs: {
        language: 950
      },
      bjt: {
        language: 951
      },
      bju: {
        language: 952
      },
      bjv: {
        language: 953
      },
      bjw: {
        language: 954
      },
      bjx: {
        language: 955
      },
      bjy: {
        language: 956
      },
      bjz: {
        language: 957
      },
      bka: {
        language: 958
      },
      bkb: {
        language: 959
      },
      bkc: {
        language: 960
      },
      bkd: {
        language: 961
      },
      bkf: {
        language: 962
      },
      bkg: {
        language: 963
      },
      bkh: {
        language: 964
      },
      bki: {
        language: 965
      },
      bkj: {
        language: 966
      },
      bkk: {
        language: 967
      },
      bkl: {
        language: 968
      },
      bkm: {
        language: 969
      },
      bkn: {
        language: 970
      },
      bko: {
        language: 971
      },
      bkp: {
        language: 972
      },
      bkq: {
        language: 973
      },
      bkr: {
        language: 974
      },
      bks: {
        language: 975
      },
      bkt: {
        language: 976
      },
      bku: {
        language: 977
      },
      bkv: {
        language: 978
      },
      bkw: {
        language: 979
      },
      bkx: {
        language: 980
      },
      bky: {
        language: 981
      },
      bkz: {
        language: 982
      },
      bla: {
        language: 983
      },
      blb: {
        language: 984
      },
      blc: {
        language: 985
      },
      bld: {
        language: 986
      },
      ble: {
        language: 987
      },
      blf: {
        language: 988
      },
      blg: {
        language: 989
      },
      blh: {
        language: 990
      },
      bli: {
        language: 991
      },
      blj: {
        language: 992
      },
      blk: {
        language: 993
      },
      bll: {
        language: 994
      },
      blm: {
        language: 995
      },
      bln: {
        language: 996
      },
      blo: {
        language: 997
      },
      blp: {
        language: 998
      },
      blq: {
        language: 999
      },
      blr: {
        language: 1e3
      },
      bls: {
        language: 1001
      },
      blt: {
        language: 1002
      },
      blv: {
        language: 1003
      },
      blw: {
        language: 1004
      },
      blx: {
        language: 1005
      },
      bly: {
        language: 1006
      },
      blz: {
        language: 1007
      },
      bma: {
        language: 1008
      },
      bmb: {
        language: 1009
      },
      bmc: {
        language: 1010
      },
      bmd: {
        language: 1011
      },
      bme: {
        language: 1012
      },
      bmf: {
        language: 1013
      },
      bmg: {
        language: 1014
      },
      bmh: {
        language: 1015
      },
      bmi: {
        language: 1016
      },
      bmj: {
        language: 1017
      },
      bmk: {
        language: 1018
      },
      bml: {
        language: 1019
      },
      bmm: {
        language: 1020
      },
      bmn: {
        language: 1021
      },
      bmo: {
        language: 1022
      },
      bmp: {
        language: 1023
      },
      bmq: {
        language: 1024
      },
      bmr: {
        language: 1025
      },
      bms: {
        language: 1026
      },
      bmt: {
        language: 1027
      },
      bmu: {
        language: 1028
      },
      bmv: {
        language: 1029
      },
      bmw: {
        language: 1030
      },
      bmx: {
        language: 1031
      },
      bmy: {
        language: 1032
      },
      bmz: {
        language: 1033
      },
      bna: {
        language: 1034
      },
      bnb: {
        language: 1035
      },
      bnc: {
        language: 1036
      },
      bnd: {
        language: 1037
      },
      bne: {
        language: 1038
      },
      bnf: {
        language: 1039
      },
      bng: {
        language: 1040
      },
      bni: {
        language: 1041
      },
      bnj: {
        language: 1042
      },
      bnk: {
        language: 1043
      },
      bnl: {
        language: 1044
      },
      bnm: {
        language: 1045
      },
      bnn: {
        language: 1046
      },
      bno: {
        language: 1047
      },
      bnp: {
        language: 1048
      },
      bnq: {
        language: 1049
      },
      bnr: {
        language: 1050
      },
      bns: {
        language: 1051
      },
      bnt: {
        language: 1052
      },
      bnu: {
        language: 1053
      },
      bnv: {
        language: 1054
      },
      bnw: {
        language: 1055
      },
      bnx: {
        language: 1056
      },
      bny: {
        language: 1057
      },
      bnz: {
        language: 1058
      },
      boa: {
        language: 1059
      },
      bob: {
        language: 1060
      },
      boe: {
        language: 1061
      },
      bof: {
        language: 1062
      },
      bog: {
        language: 1063,
        extlang: 8191
      },
      boh: {
        language: 1064
      },
      boi: {
        language: 1065
      },
      boj: {
        language: 1066
      },
      bok: {
        language: 1067
      },
      bol: {
        language: 1068
      },
      bom: {
        language: 1069
      },
      bon: {
        language: 1070
      },
      boo: {
        language: 1071
      },
      bop: {
        language: 1072
      },
      boq: {
        language: 1073
      },
      bor: {
        language: 1074
      },
      bot: {
        language: 1075
      },
      bou: {
        language: 1076
      },
      bov: {
        language: 1077
      },
      bow: {
        language: 1078
      },
      box: {
        language: 1079
      },
      boy: {
        language: 1080
      },
      boz: {
        language: 1081
      },
      bpa: {
        language: 1082
      },
      bpb: {
        language: 1083
      },
      bpd: {
        language: 1084
      },
      bpg: {
        language: 1085
      },
      bph: {
        language: 1086
      },
      bpi: {
        language: 1087
      },
      bpj: {
        language: 1088
      },
      bpk: {
        language: 1089
      },
      bpl: {
        language: 1090
      },
      bpm: {
        language: 1091
      },
      bpn: {
        language: 1092
      },
      bpo: {
        language: 1093
      },
      bpp: {
        language: 1094
      },
      bpq: {
        language: 1095
      },
      bpr: {
        language: 1096
      },
      bps: {
        language: 1097
      },
      bpt: {
        language: 1098
      },
      bpu: {
        language: 1099
      },
      bpv: {
        language: 1100
      },
      bpw: {
        language: 1101
      },
      bpx: {
        language: 1102
      },
      bpy: {
        language: 1103
      },
      bpz: {
        language: 1104
      },
      bqa: {
        language: 1105
      },
      bqb: {
        language: 1106
      },
      bqc: {
        language: 1107
      },
      bqd: {
        language: 1108
      },
      bqf: {
        language: 1109
      },
      bqg: {
        language: 1110
      },
      bqh: {
        language: 1111
      },
      bqi: {
        language: 1112
      },
      bqj: {
        language: 1113
      },
      bqk: {
        language: 1114
      },
      bql: {
        language: 1115
      },
      bqm: {
        language: 1116
      },
      bqn: {
        language: 1117,
        extlang: 8192
      },
      bqo: {
        language: 1118
      },
      bqp: {
        language: 1119
      },
      bqq: {
        language: 1120
      },
      bqr: {
        language: 1121
      },
      bqs: {
        language: 1122
      },
      bqt: {
        language: 1123
      },
      bqu: {
        language: 1124
      },
      bqv: {
        language: 1125
      },
      bqw: {
        language: 1126
      },
      bqx: {
        language: 1127
      },
      bqy: {
        language: 1128,
        extlang: 8193
      },
      bqz: {
        language: 1129
      },
      bra: {
        language: 1130
      },
      brb: {
        language: 1131
      },
      brc: {
        language: 1132
      },
      brd: {
        language: 1133
      },
      brf: {
        language: 1134
      },
      brg: {
        language: 1135
      },
      brh: {
        language: 1136
      },
      bri: {
        language: 1137
      },
      brj: {
        language: 1138
      },
      brk: {
        language: 1139
      },
      brl: {
        language: 1140
      },
      brm: {
        language: 1141
      },
      brn: {
        language: 1142
      },
      bro: {
        language: 1143
      },
      brp: {
        language: 1144
      },
      brq: {
        language: 1145
      },
      brr: {
        language: 1146
      },
      brs: {
        language: 1147
      },
      brt: {
        language: 1148
      },
      bru: {
        language: 1149
      },
      brv: {
        language: 1150
      },
      brw: {
        language: 1151
      },
      brx: {
        language: 1152
      },
      bry: {
        language: 1153
      },
      brz: {
        language: 1154
      },
      bsa: {
        language: 1155
      },
      bsb: {
        language: 1156
      },
      bsc: {
        language: 1157
      },
      bse: {
        language: 1158
      },
      bsf: {
        language: 1159
      },
      bsg: {
        language: 1160
      },
      bsh: {
        language: 1161
      },
      bsi: {
        language: 1162
      },
      bsj: {
        language: 1163
      },
      bsk: {
        language: 1164
      },
      bsl: {
        language: 1165
      },
      bsm: {
        language: 1166
      },
      bsn: {
        language: 1167
      },
      bso: {
        language: 1168
      },
      bsp: {
        language: 1169
      },
      bsq: {
        language: 1170
      },
      bsr: {
        language: 1171
      },
      bss: {
        language: 1172
      },
      bst: {
        language: 1173
      },
      bsu: {
        language: 1174
      },
      bsv: {
        language: 1175
      },
      bsw: {
        language: 1176
      },
      bsx: {
        language: 1177
      },
      bsy: {
        language: 1178
      },
      bta: {
        language: 1179
      },
      btb: {
        language: 1180
      },
      btc: {
        language: 1181
      },
      btd: {
        language: 1182
      },
      bte: {
        language: 1183
      },
      btf: {
        language: 1184
      },
      btg: {
        language: 1185
      },
      bth: {
        language: 1186
      },
      bti: {
        language: 1187
      },
      btj: {
        language: 1188,
        extlang: 8194
      },
      btk: {
        language: 1189
      },
      btl: {
        language: 1190
      },
      btm: {
        language: 1191
      },
      btn: {
        language: 1192
      },
      bto: {
        language: 1193
      },
      btp: {
        language: 1194
      },
      btq: {
        language: 1195
      },
      btr: {
        language: 1196
      },
      bts: {
        language: 1197
      },
      btt: {
        language: 1198
      },
      btu: {
        language: 1199
      },
      btv: {
        language: 1200
      },
      btw: {
        language: 1201
      },
      btx: {
        language: 1202
      },
      bty: {
        language: 1203
      },
      btz: {
        language: 1204
      },
      bua: {
        language: 1205
      },
      bub: {
        language: 1206
      },
      buc: {
        language: 1207
      },
      bud: {
        language: 1208
      },
      bue: {
        language: 1209
      },
      buf: {
        language: 1210
      },
      bug: {
        language: 1211
      },
      buh: {
        language: 1212
      },
      bui: {
        language: 1213
      },
      buj: {
        language: 1214
      },
      buk: {
        language: 1215
      },
      bum: {
        language: 1216
      },
      bun: {
        language: 1217
      },
      buo: {
        language: 1218
      },
      bup: {
        language: 1219
      },
      buq: {
        language: 1220
      },
      bus: {
        language: 1221
      },
      but: {
        language: 1222
      },
      buu: {
        language: 1223
      },
      buv: {
        language: 1224
      },
      buw: {
        language: 1225
      },
      bux: {
        language: 1226
      },
      buy: {
        language: 1227
      },
      buz: {
        language: 1228
      },
      bva: {
        language: 1229
      },
      bvb: {
        language: 1230
      },
      bvc: {
        language: 1231
      },
      bvd: {
        language: 1232
      },
      bve: {
        language: 1233,
        extlang: 8195
      },
      bvf: {
        language: 1234
      },
      bvg: {
        language: 1235
      },
      bvh: {
        language: 1236
      },
      bvi: {
        language: 1237
      },
      bvj: {
        language: 1238
      },
      bvk: {
        language: 1239
      },
      bvl: {
        language: 1240,
        extlang: 8196
      },
      bvm: {
        language: 1241
      },
      bvn: {
        language: 1242
      },
      bvo: {
        language: 1243
      },
      bvp: {
        language: 1244
      },
      bvq: {
        language: 1245
      },
      bvr: {
        language: 1246
      },
      bvt: {
        language: 1247
      },
      bvu: {
        language: 1248,
        extlang: 8197
      },
      bvv: {
        language: 1249
      },
      bvw: {
        language: 1250
      },
      bvx: {
        language: 1251
      },
      bvy: {
        language: 1252
      },
      bvz: {
        language: 1253
      },
      bwa: {
        language: 1254
      },
      bwb: {
        language: 1255
      },
      bwc: {
        language: 1256
      },
      bwd: {
        language: 1257
      },
      bwe: {
        language: 1258
      },
      bwf: {
        language: 1259
      },
      bwg: {
        language: 1260
      },
      bwh: {
        language: 1261
      },
      bwi: {
        language: 1262
      },
      bwj: {
        language: 1263
      },
      bwk: {
        language: 1264
      },
      bwl: {
        language: 1265
      },
      bwm: {
        language: 1266
      },
      bwn: {
        language: 1267
      },
      bwo: {
        language: 1268
      },
      bwp: {
        language: 1269
      },
      bwq: {
        language: 1270
      },
      bwr: {
        language: 1271
      },
      bws: {
        language: 1272
      },
      bwt: {
        language: 1273
      },
      bwu: {
        language: 1274
      },
      bww: {
        language: 1275
      },
      bwx: {
        language: 1276
      },
      bwy: {
        language: 1277
      },
      bwz: {
        language: 1278
      },
      bxa: {
        language: 1279
      },
      bxb: {
        language: 1280
      },
      bxc: {
        language: 1281
      },
      bxd: {
        language: 1282
      },
      bxe: {
        language: 1283
      },
      bxf: {
        language: 1284
      },
      bxg: {
        language: 1285
      },
      bxh: {
        language: 1286
      },
      bxi: {
        language: 1287
      },
      bxj: {
        language: 1288
      },
      bxk: {
        language: 1289
      },
      bxl: {
        language: 1290
      },
      bxm: {
        language: 1291
      },
      bxn: {
        language: 1292
      },
      bxo: {
        language: 1293
      },
      bxp: {
        language: 1294
      },
      bxq: {
        language: 1295
      },
      bxr: {
        language: 1296
      },
      bxs: {
        language: 1297
      },
      bxu: {
        language: 1298
      },
      bxv: {
        language: 1299
      },
      bxw: {
        language: 1300
      },
      bxx: {
        language: 1301
      },
      bxz: {
        language: 1302
      },
      bya: {
        language: 1303
      },
      byb: {
        language: 1304
      },
      byc: {
        language: 1305
      },
      byd: {
        language: 1306
      },
      bye: {
        language: 1307
      },
      byf: {
        language: 1308
      },
      byg: {
        language: 1309
      },
      byh: {
        language: 1310
      },
      byi: {
        language: 1311
      },
      byj: {
        language: 1312
      },
      byk: {
        language: 1313
      },
      byl: {
        language: 1314
      },
      bym: {
        language: 1315
      },
      byn: {
        language: 1316
      },
      byo: {
        language: 1317
      },
      byp: {
        language: 1318
      },
      byq: {
        language: 1319
      },
      byr: {
        language: 1320
      },
      bys: {
        language: 1321
      },
      byt: {
        language: 1322
      },
      byv: {
        language: 1323
      },
      byw: {
        language: 1324
      },
      byx: {
        language: 1325
      },
      byy: {
        language: 1326
      },
      byz: {
        language: 1327
      },
      bza: {
        language: 1328
      },
      bzb: {
        language: 1329
      },
      bzc: {
        language: 1330
      },
      bzd: {
        language: 1331
      },
      bze: {
        language: 1332
      },
      bzf: {
        language: 1333
      },
      bzg: {
        language: 1334
      },
      bzh: {
        language: 1335
      },
      bzi: {
        language: 1336
      },
      bzj: {
        language: 1337
      },
      bzk: {
        language: 1338
      },
      bzl: {
        language: 1339
      },
      bzm: {
        language: 1340
      },
      bzn: {
        language: 1341
      },
      bzo: {
        language: 1342
      },
      bzp: {
        language: 1343
      },
      bzq: {
        language: 1344
      },
      bzr: {
        language: 1345
      },
      bzs: {
        language: 1346,
        extlang: 8198
      },
      bzt: {
        language: 1347
      },
      bzu: {
        language: 1348
      },
      bzv: {
        language: 1349
      },
      bzw: {
        language: 1350
      },
      bzx: {
        language: 1351
      },
      bzy: {
        language: 1352
      },
      bzz: {
        language: 1353
      },
      caa: {
        language: 1354
      },
      cab: {
        language: 1355
      },
      cac: {
        language: 1356
      },
      cad: {
        language: 1357
      },
      cae: {
        language: 1358
      },
      caf: {
        language: 1359
      },
      cag: {
        language: 1360
      },
      cah: {
        language: 1361
      },
      cai: {
        language: 1362
      },
      caj: {
        language: 1363
      },
      cak: {
        language: 1364
      },
      cal: {
        language: 1365
      },
      cam: {
        language: 1366
      },
      can: {
        language: 1367
      },
      cao: {
        language: 1368
      },
      cap: {
        language: 1369
      },
      caq: {
        language: 1370
      },
      car: {
        language: 1371
      },
      cas: {
        language: 1372
      },
      cau: {
        language: 1373
      },
      cav: {
        language: 1374
      },
      caw: {
        language: 1375
      },
      cax: {
        language: 1376
      },
      cay: {
        language: 1377
      },
      caz: {
        language: 1378
      },
      cba: {
        language: 1379
      },
      cbb: {
        language: 1380
      },
      cbc: {
        language: 1381
      },
      cbd: {
        language: 1382
      },
      cbe: {
        language: 1383
      },
      cbg: {
        language: 1384
      },
      cbh: {
        language: 1385
      },
      cbi: {
        language: 1386
      },
      cbj: {
        language: 1387
      },
      cbk: {
        language: 1388
      },
      cbl: {
        language: 1389
      },
      cbn: {
        language: 1390
      },
      cbo: {
        language: 1391
      },
      cbq: {
        language: 1392
      },
      cbr: {
        language: 1393
      },
      cbs: {
        language: 1394
      },
      cbt: {
        language: 1395
      },
      cbu: {
        language: 1396
      },
      cbv: {
        language: 1397
      },
      cbw: {
        language: 1398
      },
      cby: {
        language: 1399
      },
      cca: {
        language: 1400
      },
      ccc: {
        language: 1401
      },
      ccd: {
        language: 1402
      },
      cce: {
        language: 1403
      },
      ccg: {
        language: 1404
      },
      cch: {
        language: 1405
      },
      ccj: {
        language: 1406
      },
      ccl: {
        language: 1407
      },
      ccm: {
        language: 1408
      },
      ccn: {
        language: 1409
      },
      cco: {
        language: 1410
      },
      ccp: {
        language: 1411
      },
      ccq: {
        language: 1412
      },
      ccr: {
        language: 1413
      },
      ccs: {
        language: 1414
      },
      cda: {
        language: 1415
      },
      cdc: {
        language: 1416
      },
      cdd: {
        language: 1417
      },
      cde: {
        language: 1418
      },
      cdf: {
        language: 1419
      },
      cdg: {
        language: 1420
      },
      cdh: {
        language: 1421
      },
      cdi: {
        language: 1422
      },
      cdj: {
        language: 1423
      },
      cdm: {
        language: 1424
      },
      cdn: {
        language: 1425
      },
      cdo: {
        language: 1426,
        extlang: 8199
      },
      cdr: {
        language: 1427
      },
      cds: {
        language: 1428,
        extlang: 8200
      },
      cdy: {
        language: 1429
      },
      cdz: {
        language: 1430
      },
      cea: {
        language: 1431
      },
      ceb: {
        language: 1432
      },
      ceg: {
        language: 1433
      },
      cek: {
        language: 1434
      },
      cel: {
        language: 1435
      },
      cen: {
        language: 1436
      },
      cet: {
        language: 1437
      },
      cey: {
        language: 1438
      },
      cfa: {
        language: 1439
      },
      cfd: {
        language: 1440
      },
      cfg: {
        language: 1441
      },
      cfm: {
        language: 1442
      },
      cga: {
        language: 1443
      },
      cgc: {
        language: 1444
      },
      cgg: {
        language: 1445
      },
      cgk: {
        language: 1446
      },
      chb: {
        language: 1447
      },
      chc: {
        language: 1448
      },
      chd: {
        language: 1449
      },
      chf: {
        language: 1450
      },
      chg: {
        language: 1451
      },
      chh: {
        language: 1452
      },
      chj: {
        language: 1453
      },
      chk: {
        language: 1454
      },
      chl: {
        language: 1455
      },
      chm: {
        language: 1456
      },
      chn: {
        language: 1457
      },
      cho: {
        language: 1458
      },
      chp: {
        language: 1459
      },
      chq: {
        language: 1460
      },
      chr: {
        language: 1461
      },
      cht: {
        language: 1462
      },
      chw: {
        language: 1463
      },
      chx: {
        language: 1464
      },
      chy: {
        language: 1465
      },
      chz: {
        language: 1466
      },
      cia: {
        language: 1467
      },
      cib: {
        language: 1468
      },
      cic: {
        language: 1469
      },
      cid: {
        language: 1470
      },
      cie: {
        language: 1471
      },
      cih: {
        language: 1472
      },
      cik: {
        language: 1473
      },
      cim: {
        language: 1474
      },
      cin: {
        language: 1475
      },
      cip: {
        language: 1476
      },
      cir: {
        language: 1477
      },
      ciw: {
        language: 1478
      },
      ciy: {
        language: 1479
      },
      cja: {
        language: 1480
      },
      cje: {
        language: 1481
      },
      cjh: {
        language: 1482
      },
      cji: {
        language: 1483
      },
      cjk: {
        language: 1484
      },
      cjm: {
        language: 1485
      },
      cjn: {
        language: 1486
      },
      cjo: {
        language: 1487
      },
      cjp: {
        language: 1488
      },
      cjr: {
        language: 1489
      },
      cjs: {
        language: 1490
      },
      cjv: {
        language: 1491
      },
      cjy: {
        language: 1492,
        extlang: 8201
      },
      cka: {
        language: 1493
      },
      ckb: {
        language: 1494
      },
      ckh: {
        language: 1495
      },
      ckl: {
        language: 1496
      },
      ckn: {
        language: 1497
      },
      cko: {
        language: 1498
      },
      ckq: {
        language: 1499
      },
      ckr: {
        language: 1500
      },
      cks: {
        language: 1501
      },
      ckt: {
        language: 1502
      },
      cku: {
        language: 1503
      },
      ckv: {
        language: 1504
      },
      ckx: {
        language: 1505
      },
      cky: {
        language: 1506
      },
      ckz: {
        language: 1507
      },
      cla: {
        language: 1508
      },
      clc: {
        language: 1509
      },
      cld: {
        language: 1510
      },
      cle: {
        language: 1511
      },
      clh: {
        language: 1512
      },
      cli: {
        language: 1513
      },
      clj: {
        language: 1514
      },
      clk: {
        language: 1515
      },
      cll: {
        language: 1516
      },
      clm: {
        language: 1517
      },
      clo: {
        language: 1518
      },
      clt: {
        language: 1519
      },
      clu: {
        language: 1520
      },
      clw: {
        language: 1521
      },
      cly: {
        language: 1522
      },
      cma: {
        language: 1523
      },
      cmc: {
        language: 1524
      },
      cme: {
        language: 1525
      },
      cmg: {
        language: 1526
      },
      cmi: {
        language: 1527
      },
      cmk: {
        language: 1528
      },
      cml: {
        language: 1529
      },
      cmm: {
        language: 1530
      },
      cmn: {
        language: 1531,
        extlang: 8202
      },
      cmo: {
        language: 1532
      },
      cmr: {
        language: 1533
      },
      cms: {
        language: 1534
      },
      cmt: {
        language: 1535
      },
      cna: {
        language: 1536
      },
      cnb: {
        language: 1537
      },
      cnc: {
        language: 1538
      },
      cng: {
        language: 1539
      },
      cnh: {
        language: 1540
      },
      cni: {
        language: 1541
      },
      cnk: {
        language: 1542
      },
      cnl: {
        language: 1543
      },
      cno: {
        language: 1544
      },
      cnr: {
        language: 1545
      },
      cns: {
        language: 1546
      },
      cnt: {
        language: 1547
      },
      cnu: {
        language: 1548
      },
      cnw: {
        language: 1549
      },
      cnx: {
        language: 1550
      },
      coa: {
        language: 1551,
        extlang: 8203
      },
      cob: {
        language: 1552
      },
      coc: {
        language: 1553
      },
      cod: {
        language: 1554
      },
      coe: {
        language: 1555
      },
      cof: {
        language: 1556
      },
      cog: {
        language: 1557
      },
      coh: {
        language: 1558
      },
      coj: {
        language: 1559
      },
      cok: {
        language: 1560
      },
      col: {
        language: 1561
      },
      com: {
        language: 1562
      },
      con: {
        language: 1563
      },
      coo: {
        language: 1564
      },
      cop: {
        language: 1565
      },
      coq: {
        language: 1566
      },
      cot: {
        language: 1567
      },
      cou: {
        language: 1568
      },
      cov: {
        language: 1569
      },
      cow: {
        language: 1570
      },
      cox: {
        language: 1571
      },
      coy: {
        language: 1572
      },
      coz: {
        language: 1573
      },
      cpa: {
        language: 1574
      },
      cpb: {
        language: 1575
      },
      cpc: {
        language: 1576
      },
      cpe: {
        language: 1577
      },
      cpf: {
        language: 1578
      },
      cpg: {
        language: 1579
      },
      cpi: {
        language: 1580
      },
      cpn: {
        language: 1581
      },
      cpo: {
        language: 1582
      },
      cpp: {
        language: 1583
      },
      cps: {
        language: 1584
      },
      cpu: {
        language: 1585
      },
      cpx: {
        language: 1586,
        extlang: 8204
      },
      cpy: {
        language: 1587
      },
      cqd: {
        language: 1588
      },
      cqu: {
        language: 1589
      },
      cra: {
        language: 1590
      },
      crb: {
        language: 1591
      },
      crc: {
        language: 1592
      },
      crd: {
        language: 1593
      },
      crf: {
        language: 1594
      },
      crg: {
        language: 1595
      },
      crh: {
        language: 1596
      },
      cri: {
        language: 1597
      },
      crj: {
        language: 1598
      },
      crk: {
        language: 1599
      },
      crl: {
        language: 1600
      },
      crm: {
        language: 1601
      },
      crn: {
        language: 1602
      },
      cro: {
        language: 1603
      },
      crp: {
        language: 1604
      },
      crq: {
        language: 1605
      },
      crr: {
        language: 1606
      },
      crs: {
        language: 1607
      },
      crt: {
        language: 1608
      },
      crv: {
        language: 1609
      },
      crw: {
        language: 1610
      },
      crx: {
        language: 1611
      },
      cry: {
        language: 1612
      },
      crz: {
        language: 1613
      },
      csa: {
        language: 1614
      },
      csb: {
        language: 1615
      },
      csc: {
        language: 1616,
        extlang: 8205
      },
      csd: {
        language: 1617,
        extlang: 8206
      },
      cse: {
        language: 1618,
        extlang: 8207
      },
      csf: {
        language: 1619,
        extlang: 8208
      },
      csg: {
        language: 1620,
        extlang: 8209
      },
      csh: {
        language: 1621
      },
      csi: {
        language: 1622
      },
      csj: {
        language: 1623
      },
      csk: {
        language: 1624
      },
      csl: {
        language: 1625,
        extlang: 8210
      },
      csm: {
        language: 1626
      },
      csn: {
        language: 1627,
        extlang: 8211
      },
      cso: {
        language: 1628
      },
      csq: {
        language: 1629,
        extlang: 8212
      },
      csr: {
        language: 1630,
        extlang: 8213
      },
      css: {
        language: 1631
      },
      cst: {
        language: 1632
      },
      csu: {
        language: 1633
      },
      csv: {
        language: 1634
      },
      csw: {
        language: 1635
      },
      csy: {
        language: 1636
      },
      csz: {
        language: 1637
      },
      cta: {
        language: 1638
      },
      ctc: {
        language: 1639
      },
      ctd: {
        language: 1640
      },
      cte: {
        language: 1641
      },
      ctg: {
        language: 1642
      },
      cth: {
        language: 1643
      },
      ctl: {
        language: 1644
      },
      ctm: {
        language: 1645
      },
      ctn: {
        language: 1646
      },
      cto: {
        language: 1647
      },
      ctp: {
        language: 1648
      },
      cts: {
        language: 1649
      },
      ctt: {
        language: 1650
      },
      ctu: {
        language: 1651
      },
      ctz: {
        language: 1652
      },
      cua: {
        language: 1653
      },
      cub: {
        language: 1654
      },
      cuc: {
        language: 1655
      },
      cug: {
        language: 1656
      },
      cuh: {
        language: 1657
      },
      cui: {
        language: 1658
      },
      cuj: {
        language: 1659
      },
      cuk: {
        language: 1660
      },
      cul: {
        language: 1661
      },
      cum: {
        language: 1662
      },
      cuo: {
        language: 1663
      },
      cup: {
        language: 1664
      },
      cuq: {
        language: 1665
      },
      cur: {
        language: 1666
      },
      cus: {
        language: 1667
      },
      cut: {
        language: 1668
      },
      cuu: {
        language: 1669
      },
      cuv: {
        language: 1670
      },
      cuw: {
        language: 1671
      },
      cux: {
        language: 1672
      },
      cuy: {
        language: 1673
      },
      cvg: {
        language: 1674
      },
      cvn: {
        language: 1675
      },
      cwa: {
        language: 1676
      },
      cwb: {
        language: 1677
      },
      cwd: {
        language: 1678
      },
      cwe: {
        language: 1679
      },
      cwg: {
        language: 1680
      },
      cwt: {
        language: 1681
      },
      cya: {
        language: 1682
      },
      cyb: {
        language: 1683
      },
      cyo: {
        language: 1684
      },
      czh: {
        language: 1685,
        extlang: 8214
      },
      czk: {
        language: 1686
      },
      czn: {
        language: 1687
      },
      czo: {
        language: 1688,
        extlang: 8215
      },
      czt: {
        language: 1689
      },
      daa: {
        language: 1690
      },
      dac: {
        language: 1691
      },
      dad: {
        language: 1692
      },
      dae: {
        language: 1693
      },
      daf: {
        language: 1694
      },
      dag: {
        language: 1695
      },
      dah: {
        language: 1696
      },
      dai: {
        language: 1697
      },
      daj: {
        language: 1698
      },
      dak: {
        language: 1699
      },
      dal: {
        language: 1700
      },
      dam: {
        language: 1701
      },
      dao: {
        language: 1702
      },
      dap: {
        language: 1703
      },
      daq: {
        language: 1704
      },
      dar: {
        language: 1705
      },
      das: {
        language: 1706
      },
      dau: {
        language: 1707
      },
      dav: {
        language: 1708
      },
      daw: {
        language: 1709
      },
      dax: {
        language: 1710
      },
      day: {
        language: 1711
      },
      daz: {
        language: 1712
      },
      dba: {
        language: 1713
      },
      dbb: {
        language: 1714
      },
      dbd: {
        language: 1715
      },
      dbe: {
        language: 1716
      },
      dbf: {
        language: 1717
      },
      dbg: {
        language: 1718
      },
      dbi: {
        language: 1719
      },
      dbj: {
        language: 1720
      },
      dbl: {
        language: 1721
      },
      dbm: {
        language: 1722
      },
      dbn: {
        language: 1723
      },
      dbo: {
        language: 1724
      },
      dbp: {
        language: 1725
      },
      dbq: {
        language: 1726
      },
      dbr: {
        language: 1727
      },
      dbt: {
        language: 1728
      },
      dbu: {
        language: 1729
      },
      dbv: {
        language: 1730
      },
      dbw: {
        language: 1731
      },
      dby: {
        language: 1732
      },
      dcc: {
        language: 1733
      },
      dcr: {
        language: 1734
      },
      dda: {
        language: 1735
      },
      ddd: {
        language: 1736
      },
      dde: {
        language: 1737
      },
      ddg: {
        language: 1738
      },
      ddi: {
        language: 1739
      },
      ddj: {
        language: 1740
      },
      ddn: {
        language: 1741
      },
      ddo: {
        language: 1742
      },
      ddr: {
        language: 1743
      },
      dds: {
        language: 1744
      },
      ddw: {
        language: 1745
      },
      dec: {
        language: 1746
      },
      ded: {
        language: 1747
      },
      dee: {
        language: 1748
      },
      def: {
        language: 1749
      },
      deg: {
        language: 1750
      },
      deh: {
        language: 1751
      },
      dei: {
        language: 1752
      },
      dek: {
        language: 1753
      },
      del: {
        language: 1754
      },
      dem: {
        language: 1755
      },
      den: {
        language: 1756
      },
      dep: {
        language: 1757
      },
      deq: {
        language: 1758
      },
      der: {
        language: 1759
      },
      des: {
        language: 1760
      },
      dev: {
        language: 1761
      },
      dez: {
        language: 1762
      },
      dga: {
        language: 1763
      },
      dgb: {
        language: 1764
      },
      dgc: {
        language: 1765
      },
      dgd: {
        language: 1766
      },
      dge: {
        language: 1767
      },
      dgg: {
        language: 1768
      },
      dgh: {
        language: 1769
      },
      dgi: {
        language: 1770
      },
      dgk: {
        language: 1771
      },
      dgl: {
        language: 1772
      },
      dgn: {
        language: 1773
      },
      dgo: {
        language: 1774
      },
      dgr: {
        language: 1775
      },
      dgs: {
        language: 1776
      },
      dgt: {
        language: 1777
      },
      dgu: {
        language: 1778
      },
      dgw: {
        language: 1779
      },
      dgx: {
        language: 1780
      },
      dgz: {
        language: 1781
      },
      dha: {
        language: 1782
      },
      dhd: {
        language: 1783
      },
      dhg: {
        language: 1784
      },
      dhi: {
        language: 1785
      },
      dhl: {
        language: 1786
      },
      dhm: {
        language: 1787
      },
      dhn: {
        language: 1788
      },
      dho: {
        language: 1789
      },
      dhr: {
        language: 1790
      },
      dhs: {
        language: 1791
      },
      dhu: {
        language: 1792
      },
      dhv: {
        language: 1793
      },
      dhw: {
        language: 1794
      },
      dhx: {
        language: 1795
      },
      dia: {
        language: 1796
      },
      dib: {
        language: 1797
      },
      dic: {
        language: 1798
      },
      did: {
        language: 1799
      },
      dif: {
        language: 1800
      },
      dig: {
        language: 1801
      },
      dih: {
        language: 1802
      },
      dii: {
        language: 1803
      },
      dij: {
        language: 1804
      },
      dik: {
        language: 1805
      },
      dil: {
        language: 1806
      },
      dim: {
        language: 1807
      },
      din: {
        language: 1808
      },
      dio: {
        language: 1809
      },
      dip: {
        language: 1810
      },
      diq: {
        language: 1811
      },
      dir: {
        language: 1812
      },
      dis: {
        language: 1813
      },
      dit: {
        language: 1814
      },
      diu: {
        language: 1815
      },
      diw: {
        language: 1816
      },
      dix: {
        language: 1817
      },
      diy: {
        language: 1818
      },
      diz: {
        language: 1819
      },
      dja: {
        language: 1820
      },
      djb: {
        language: 1821
      },
      djc: {
        language: 1822
      },
      djd: {
        language: 1823
      },
      dje: {
        language: 1824
      },
      djf: {
        language: 1825
      },
      dji: {
        language: 1826
      },
      djj: {
        language: 1827
      },
      djk: {
        language: 1828
      },
      djl: {
        language: 1829
      },
      djm: {
        language: 1830
      },
      djn: {
        language: 1831
      },
      djo: {
        language: 1832
      },
      djr: {
        language: 1833
      },
      dju: {
        language: 1834
      },
      djw: {
        language: 1835
      },
      dka: {
        language: 1836
      },
      dkk: {
        language: 1837
      },
      dkl: {
        language: 1838
      },
      dkr: {
        language: 1839
      },
      dks: {
        language: 1840
      },
      dkx: {
        language: 1841
      },
      dlg: {
        language: 1842
      },
      dlk: {
        language: 1843
      },
      dlm: {
        language: 1844
      },
      dln: {
        language: 1845
      },
      dma: {
        language: 1846
      },
      dmb: {
        language: 1847
      },
      dmc: {
        language: 1848
      },
      dmd: {
        language: 1849
      },
      dme: {
        language: 1850
      },
      dmg: {
        language: 1851
      },
      dmk: {
        language: 1852
      },
      dml: {
        language: 1853
      },
      dmm: {
        language: 1854
      },
      dmn: {
        language: 1855
      },
      dmo: {
        language: 1856
      },
      dmr: {
        language: 1857
      },
      dms: {
        language: 1858
      },
      dmu: {
        language: 1859
      },
      dmv: {
        language: 1860
      },
      dmw: {
        language: 1861
      },
      dmx: {
        language: 1862
      },
      dmy: {
        language: 1863
      },
      dna: {
        language: 1864
      },
      dnd: {
        language: 1865
      },
      dne: {
        language: 1866
      },
      dng: {
        language: 1867
      },
      dni: {
        language: 1868
      },
      dnj: {
        language: 1869
      },
      dnk: {
        language: 1870
      },
      dnn: {
        language: 1871
      },
      dno: {
        language: 1872
      },
      dnr: {
        language: 1873
      },
      dnt: {
        language: 1874
      },
      dnu: {
        language: 1875
      },
      dnv: {
        language: 1876
      },
      dnw: {
        language: 1877
      },
      dny: {
        language: 1878
      },
      doa: {
        language: 1879
      },
      dob: {
        language: 1880
      },
      doc: {
        language: 1881
      },
      doe: {
        language: 1882
      },
      dof: {
        language: 1883
      },
      doh: {
        language: 1884
      },
      doi: {
        language: 1885
      },
      dok: {
        language: 1886
      },
      dol: {
        language: 1887
      },
      don: {
        language: 1888
      },
      doo: {
        language: 1889
      },
      dop: {
        language: 1890
      },
      doq: {
        language: 1891,
        extlang: 8216
      },
      dor: {
        language: 1892
      },
      dos: {
        language: 1893
      },
      dot: {
        language: 1894
      },
      dov: {
        language: 1895
      },
      dow: {
        language: 1896
      },
      dox: {
        language: 1897
      },
      doy: {
        language: 1898
      },
      doz: {
        language: 1899
      },
      dpp: {
        language: 1900
      },
      dra: {
        language: 1901
      },
      drb: {
        language: 1902
      },
      drc: {
        language: 1903
      },
      drd: {
        language: 1904
      },
      dre: {
        language: 1905
      },
      drg: {
        language: 1906
      },
      drh: {
        language: 1907
      },
      dri: {
        language: 1908
      },
      drl: {
        language: 1909
      },
      drn: {
        language: 1910
      },
      dro: {
        language: 1911
      },
      drq: {
        language: 1912
      },
      drr: {
        language: 1913
      },
      drs: {
        language: 1914
      },
      drt: {
        language: 1915
      },
      dru: {
        language: 1916
      },
      drw: {
        language: 1917
      },
      dry: {
        language: 1918
      },
      dsb: {
        language: 1919
      },
      dse: {
        language: 1920,
        extlang: 8217
      },
      dsh: {
        language: 1921
      },
      dsi: {
        language: 1922
      },
      dsl: {
        language: 1923,
        extlang: 8218
      },
      dsn: {
        language: 1924
      },
      dso: {
        language: 1925
      },
      dsq: {
        language: 1926
      },
      dta: {
        language: 1927
      },
      dtb: {
        language: 1928
      },
      dtd: {
        language: 1929
      },
      dth: {
        language: 1930
      },
      dti: {
        language: 1931
      },
      dtk: {
        language: 1932
      },
      dtm: {
        language: 1933
      },
      dtn: {
        language: 1934
      },
      dto: {
        language: 1935
      },
      dtp: {
        language: 1936
      },
      dtr: {
        language: 1937
      },
      dts: {
        language: 1938
      },
      dtt: {
        language: 1939
      },
      dtu: {
        language: 1940
      },
      dty: {
        language: 1941
      },
      dua: {
        language: 1942
      },
      dub: {
        language: 1943
      },
      duc: {
        language: 1944
      },
      dud: {
        language: 1945
      },
      due: {
        language: 1946
      },
      duf: {
        language: 1947
      },
      dug: {
        language: 1948
      },
      duh: {
        language: 1949
      },
      dui: {
        language: 1950
      },
      duj: {
        language: 1951
      },
      duk: {
        language: 1952
      },
      dul: {
        language: 1953
      },
      dum: {
        language: 1954
      },
      dun: {
        language: 1955
      },
      duo: {
        language: 1956
      },
      dup: {
        language: 1957,
        extlang: 8219
      },
      duq: {
        language: 1958
      },
      dur: {
        language: 1959
      },
      dus: {
        language: 1960
      },
      duu: {
        language: 1961
      },
      duv: {
        language: 1962
      },
      duw: {
        language: 1963
      },
      dux: {
        language: 1964
      },
      duy: {
        language: 1965
      },
      duz: {
        language: 1966
      },
      dva: {
        language: 1967
      },
      dwa: {
        language: 1968
      },
      dwl: {
        language: 1969
      },
      dwr: {
        language: 1970
      },
      dws: {
        language: 1971
      },
      dwu: {
        language: 1972
      },
      dww: {
        language: 1973
      },
      dwy: {
        language: 1974
      },
      dwz: {
        language: 1975
      },
      dya: {
        language: 1976
      },
      dyb: {
        language: 1977
      },
      dyd: {
        language: 1978
      },
      dyg: {
        language: 1979
      },
      dyi: {
        language: 1980
      },
      dym: {
        language: 1981
      },
      dyn: {
        language: 1982
      },
      dyo: {
        language: 1983
      },
      dyu: {
        language: 1984
      },
      dyy: {
        language: 1985
      },
      dza: {
        language: 1986
      },
      dzd: {
        language: 1987
      },
      dze: {
        language: 1988
      },
      dzg: {
        language: 1989
      },
      dzl: {
        language: 1990
      },
      dzn: {
        language: 1991
      },
      eaa: {
        language: 1992
      },
      ebg: {
        language: 1993
      },
      ebk: {
        language: 1994
      },
      ebo: {
        language: 1995
      },
      ebr: {
        language: 1996
      },
      ebu: {
        language: 1997
      },
      ecr: {
        language: 1998
      },
      ecs: {
        language: 1999,
        extlang: 8220
      },
      ecy: {
        language: 2e3
      },
      eee: {
        language: 2001
      },
      efa: {
        language: 2002
      },
      efe: {
        language: 2003
      },
      efi: {
        language: 2004
      },
      ega: {
        language: 2005
      },
      egl: {
        language: 2006
      },
      ego: {
        language: 2007
      },
      egx: {
        language: 2008
      },
      egy: {
        language: 2009
      },
      ehu: {
        language: 2010
      },
      eip: {
        language: 2011
      },
      eit: {
        language: 2012
      },
      eiv: {
        language: 2013
      },
      eja: {
        language: 2014
      },
      eka: {
        language: 2015
      },
      ekc: {
        language: 2016
      },
      eke: {
        language: 2017
      },
      ekg: {
        language: 2018
      },
      eki: {
        language: 2019
      },
      ekk: {
        language: 2020
      },
      ekl: {
        language: 2021
      },
      ekm: {
        language: 2022
      },
      eko: {
        language: 2023
      },
      ekp: {
        language: 2024
      },
      ekr: {
        language: 2025
      },
      eky: {
        language: 2026
      },
      ele: {
        language: 2027
      },
      elh: {
        language: 2028
      },
      eli: {
        language: 2029
      },
      elk: {
        language: 2030
      },
      elm: {
        language: 2031
      },
      elo: {
        language: 2032
      },
      elp: {
        language: 2033
      },
      elu: {
        language: 2034
      },
      elx: {
        language: 2035
      },
      ema: {
        language: 2036
      },
      emb: {
        language: 2037
      },
      eme: {
        language: 2038
      },
      emg: {
        language: 2039
      },
      emi: {
        language: 2040
      },
      emk: {
        language: 2041
      },
      emm: {
        language: 2042
      },
      emn: {
        language: 2043
      },
      emo: {
        language: 2044
      },
      emp: {
        language: 2045
      },
      ems: {
        language: 2046
      },
      emu: {
        language: 2047
      },
      emw: {
        language: 2048
      },
      emx: {
        language: 2049
      },
      emy: {
        language: 2050
      },
      ena: {
        language: 2051
      },
      enb: {
        language: 2052
      },
      enc: {
        language: 2053
      },
      end: {
        language: 2054
      },
      enf: {
        language: 2055
      },
      enh: {
        language: 2056
      },
      enl: {
        language: 2057
      },
      enm: {
        language: 2058
      },
      enn: {
        language: 2059
      },
      eno: {
        language: 2060
      },
      enq: {
        language: 2061
      },
      enr: {
        language: 2062
      },
      enu: {
        language: 2063
      },
      env: {
        language: 2064
      },
      enw: {
        language: 2065
      },
      enx: {
        language: 2066
      },
      eot: {
        language: 2067
      },
      epi: {
        language: 2068
      },
      era: {
        language: 2069
      },
      erg: {
        language: 2070
      },
      erh: {
        language: 2071
      },
      eri: {
        language: 2072
      },
      erk: {
        language: 2073
      },
      ero: {
        language: 2074
      },
      err: {
        language: 2075
      },
      ers: {
        language: 2076
      },
      ert: {
        language: 2077
      },
      erw: {
        language: 2078
      },
      ese: {
        language: 2079
      },
      esg: {
        language: 2080
      },
      esh: {
        language: 2081
      },
      esi: {
        language: 2082
      },
      esk: {
        language: 2083
      },
      esl: {
        language: 2084,
        extlang: 8221
      },
      esm: {
        language: 2085
      },
      esn: {
        language: 2086,
        extlang: 8222
      },
      eso: {
        language: 2087,
        extlang: 8223
      },
      esq: {
        language: 2088
      },
      ess: {
        language: 2089
      },
      esu: {
        language: 2090
      },
      esx: {
        language: 2091
      },
      esy: {
        language: 2092
      },
      etb: {
        language: 2093
      },
      etc: {
        language: 2094
      },
      eth: {
        language: 2095,
        extlang: 8224
      },
      etn: {
        language: 2096
      },
      eto: {
        language: 2097
      },
      etr: {
        language: 2098
      },
      ets: {
        language: 2099
      },
      ett: {
        language: 2100
      },
      etu: {
        language: 2101
      },
      etx: {
        language: 2102
      },
      etz: {
        language: 2103
      },
      euq: {
        language: 2104
      },
      eve: {
        language: 2105
      },
      evh: {
        language: 2106
      },
      evn: {
        language: 2107
      },
      ewo: {
        language: 2108
      },
      ext: {
        language: 2109
      },
      eya: {
        language: 2110
      },
      eyo: {
        language: 2111
      },
      eza: {
        language: 2112
      },
      eze: {
        language: 2113
      },
      faa: {
        language: 2114
      },
      fab: {
        language: 2115
      },
      fad: {
        language: 2116
      },
      faf: {
        language: 2117
      },
      fag: {
        language: 2118
      },
      fah: {
        language: 2119
      },
      fai: {
        language: 2120
      },
      faj: {
        language: 2121
      },
      fak: {
        language: 2122
      },
      fal: {
        language: 2123
      },
      fam: {
        language: 2124
      },
      fan: {
        language: 2125
      },
      fap: {
        language: 2126
      },
      far: {
        language: 2127
      },
      fat: {
        language: 2128
      },
      fau: {
        language: 2129
      },
      fax: {
        language: 2130
      },
      fay: {
        language: 2131
      },
      faz: {
        language: 2132
      },
      fbl: {
        language: 2133
      },
      fcs: {
        language: 2134,
        extlang: 8225
      },
      fer: {
        language: 2135
      },
      ffi: {
        language: 2136
      },
      ffm: {
        language: 2137
      },
      fgr: {
        language: 2138
      },
      fia: {
        language: 2139
      },
      fie: {
        language: 2140
      },
      fil: {
        language: 2141
      },
      fip: {
        language: 2142
      },
      fir: {
        language: 2143
      },
      fit: {
        language: 2144
      },
      fiu: {
        language: 2145
      },
      fiw: {
        language: 2146
      },
      fkk: {
        language: 2147
      },
      fkv: {
        language: 2148
      },
      fla: {
        language: 2149
      },
      flh: {
        language: 2150
      },
      fli: {
        language: 2151
      },
      fll: {
        language: 2152
      },
      fln: {
        language: 2153
      },
      flr: {
        language: 2154
      },
      fly: {
        language: 2155
      },
      fmp: {
        language: 2156
      },
      fmu: {
        language: 2157
      },
      fnb: {
        language: 2158
      },
      fng: {
        language: 2159
      },
      fni: {
        language: 2160
      },
      fod: {
        language: 2161
      },
      foi: {
        language: 2162
      },
      fom: {
        language: 2163
      },
      fon: {
        language: 2164
      },
      for: {
        language: 2165
      },
      fos: {
        language: 2166
      },
      fox: {
        language: 2167
      },
      fpe: {
        language: 2168
      },
      fqs: {
        language: 2169
      },
      frc: {
        language: 2170
      },
      frd: {
        language: 2171
      },
      frk: {
        language: 2172
      },
      frm: {
        language: 2173
      },
      fro: {
        language: 2174
      },
      frp: {
        language: 2175
      },
      frq: {
        language: 2176
      },
      frr: {
        language: 2177
      },
      frs: {
        language: 2178
      },
      frt: {
        language: 2179
      },
      fse: {
        language: 2180,
        extlang: 8226
      },
      fsl: {
        language: 2181,
        extlang: 8227
      },
      fss: {
        language: 2182,
        extlang: 8228
      },
      fub: {
        language: 2183
      },
      fuc: {
        language: 2184
      },
      fud: {
        language: 2185
      },
      fue: {
        language: 2186
      },
      fuf: {
        language: 2187
      },
      fuh: {
        language: 2188
      },
      fui: {
        language: 2189
      },
      fuj: {
        language: 2190
      },
      fum: {
        language: 2191
      },
      fun: {
        language: 2192
      },
      fuq: {
        language: 2193
      },
      fur: {
        language: 2194
      },
      fut: {
        language: 2195
      },
      fuu: {
        language: 2196
      },
      fuv: {
        language: 2197
      },
      fuy: {
        language: 2198
      },
      fvr: {
        language: 2199
      },
      fwa: {
        language: 2200
      },
      fwe: {
        language: 2201
      },
      gaa: {
        language: 2202
      },
      gab: {
        language: 2203
      },
      gac: {
        language: 2204
      },
      gad: {
        language: 2205
      },
      gae: {
        language: 2206
      },
      gaf: {
        language: 2207
      },
      gag: {
        language: 2208
      },
      gah: {
        language: 2209
      },
      gai: {
        language: 2210
      },
      gaj: {
        language: 2211
      },
      gak: {
        language: 2212
      },
      gal: {
        language: 2213
      },
      gam: {
        language: 2214
      },
      gan: {
        language: 2215,
        extlang: 8229
      },
      gao: {
        language: 2216
      },
      gap: {
        language: 2217
      },
      gaq: {
        language: 2218
      },
      gar: {
        language: 2219
      },
      gas: {
        language: 2220
      },
      gat: {
        language: 2221
      },
      gau: {
        language: 2222
      },
      gav: {
        language: 2223
      },
      gaw: {
        language: 2224
      },
      gax: {
        language: 2225
      },
      gay: {
        language: 2226
      },
      gaz: {
        language: 2227
      },
      gba: {
        language: 2228
      },
      gbb: {
        language: 2229
      },
      gbc: {
        language: 2230
      },
      gbd: {
        language: 2231
      },
      gbe: {
        language: 2232
      },
      gbf: {
        language: 2233
      },
      gbg: {
        language: 2234
      },
      gbh: {
        language: 2235
      },
      gbi: {
        language: 2236
      },
      gbj: {
        language: 2237
      },
      gbk: {
        language: 2238
      },
      gbl: {
        language: 2239
      },
      gbm: {
        language: 2240
      },
      gbn: {
        language: 2241
      },
      gbo: {
        language: 2242
      },
      gbp: {
        language: 2243
      },
      gbq: {
        language: 2244
      },
      gbr: {
        language: 2245
      },
      gbs: {
        language: 2246
      },
      gbu: {
        language: 2247
      },
      gbv: {
        language: 2248
      },
      gbw: {
        language: 2249
      },
      gbx: {
        language: 2250
      },
      gby: {
        language: 2251
      },
      gbz: {
        language: 2252
      },
      gcc: {
        language: 2253
      },
      gcd: {
        language: 2254
      },
      gce: {
        language: 2255
      },
      gcf: {
        language: 2256
      },
      gcl: {
        language: 2257
      },
      gcn: {
        language: 2258
      },
      gcr: {
        language: 2259
      },
      gct: {
        language: 2260
      },
      gda: {
        language: 2261
      },
      gdb: {
        language: 2262
      },
      gdc: {
        language: 2263
      },
      gdd: {
        language: 2264
      },
      gde: {
        language: 2265
      },
      gdf: {
        language: 2266
      },
      gdg: {
        language: 2267
      },
      gdh: {
        language: 2268
      },
      gdi: {
        language: 2269
      },
      gdj: {
        language: 2270
      },
      gdk: {
        language: 2271
      },
      gdl: {
        language: 2272
      },
      gdm: {
        language: 2273
      },
      gdn: {
        language: 2274
      },
      gdo: {
        language: 2275
      },
      gdq: {
        language: 2276
      },
      gdr: {
        language: 2277
      },
      gds: {
        language: 2278,
        extlang: 8230
      },
      gdt: {
        language: 2279
      },
      gdu: {
        language: 2280
      },
      gdx: {
        language: 2281
      },
      gea: {
        language: 2282
      },
      geb: {
        language: 2283
      },
      gec: {
        language: 2284
      },
      ged: {
        language: 2285
      },
      geg: {
        language: 2286
      },
      geh: {
        language: 2287
      },
      gei: {
        language: 2288
      },
      gej: {
        language: 2289
      },
      gek: {
        language: 2290
      },
      gel: {
        language: 2291
      },
      gem: {
        language: 2292
      },
      geq: {
        language: 2293
      },
      ges: {
        language: 2294
      },
      gev: {
        language: 2295
      },
      gew: {
        language: 2296
      },
      gex: {
        language: 2297
      },
      gey: {
        language: 2298
      },
      gez: {
        language: 2299
      },
      gfk: {
        language: 2300
      },
      gft: {
        language: 2301
      },
      gfx: {
        language: 2302
      },
      gga: {
        language: 2303
      },
      ggb: {
        language: 2304
      },
      ggd: {
        language: 2305
      },
      gge: {
        language: 2306
      },
      ggg: {
        language: 2307
      },
      ggk: {
        language: 2308
      },
      ggl: {
        language: 2309
      },
      ggn: {
        language: 2310
      },
      ggo: {
        language: 2311
      },
      ggr: {
        language: 2312
      },
      ggt: {
        language: 2313
      },
      ggu: {
        language: 2314
      },
      ggw: {
        language: 2315
      },
      gha: {
        language: 2316
      },
      ghc: {
        language: 2317
      },
      ghe: {
        language: 2318
      },
      ghh: {
        language: 2319
      },
      ghk: {
        language: 2320
      },
      ghl: {
        language: 2321
      },
      ghn: {
        language: 2322
      },
      gho: {
        language: 2323
      },
      ghr: {
        language: 2324
      },
      ghs: {
        language: 2325
      },
      ght: {
        language: 2326
      },
      gia: {
        language: 2327
      },
      gib: {
        language: 2328
      },
      gic: {
        language: 2329
      },
      gid: {
        language: 2330
      },
      gie: {
        language: 2331
      },
      gig: {
        language: 2332
      },
      gih: {
        language: 2333
      },
      gil: {
        language: 2334
      },
      gim: {
        language: 2335
      },
      gin: {
        language: 2336
      },
      gio: {
        language: 2337
      },
      gip: {
        language: 2338
      },
      giq: {
        language: 2339
      },
      gir: {
        language: 2340
      },
      gis: {
        language: 2341
      },
      git: {
        language: 2342
      },
      giu: {
        language: 2343
      },
      giw: {
        language: 2344
      },
      gix: {
        language: 2345
      },
      giy: {
        language: 2346
      },
      giz: {
        language: 2347
      },
      gji: {
        language: 2348
      },
      gjk: {
        language: 2349
      },
      gjm: {
        language: 2350
      },
      gjn: {
        language: 2351
      },
      gjr: {
        language: 2352
      },
      gju: {
        language: 2353
      },
      gka: {
        language: 2354
      },
      gkd: {
        language: 2355
      },
      gke: {
        language: 2356
      },
      gkn: {
        language: 2357
      },
      gko: {
        language: 2358
      },
      gkp: {
        language: 2359
      },
      gku: {
        language: 2360
      },
      glc: {
        language: 2361
      },
      gld: {
        language: 2362
      },
      glh: {
        language: 2363
      },
      gli: {
        language: 2364
      },
      glj: {
        language: 2365
      },
      glk: {
        language: 2366
      },
      gll: {
        language: 2367
      },
      glo: {
        language: 2368
      },
      glr: {
        language: 2369
      },
      glu: {
        language: 2370
      },
      glw: {
        language: 2371
      },
      gly: {
        language: 2372
      },
      gma: {
        language: 2373
      },
      gmb: {
        language: 2374
      },
      gmd: {
        language: 2375
      },
      gme: {
        language: 2376
      },
      gmg: {
        language: 2377
      },
      gmh: {
        language: 2378
      },
      gml: {
        language: 2379
      },
      gmm: {
        language: 2380
      },
      gmn: {
        language: 2381
      },
      gmq: {
        language: 2382
      },
      gmu: {
        language: 2383
      },
      gmv: {
        language: 2384
      },
      gmw: {
        language: 2385
      },
      gmx: {
        language: 2386
      },
      gmy: {
        language: 2387
      },
      gmz: {
        language: 2388
      },
      gna: {
        language: 2389
      },
      gnb: {
        language: 2390
      },
      gnc: {
        language: 2391
      },
      gnd: {
        language: 2392
      },
      gne: {
        language: 2393
      },
      gng: {
        language: 2394
      },
      gnh: {
        language: 2395
      },
      gni: {
        language: 2396
      },
      gnj: {
        language: 2397
      },
      gnk: {
        language: 2398
      },
      gnl: {
        language: 2399
      },
      gnm: {
        language: 2400
      },
      gnn: {
        language: 2401
      },
      gno: {
        language: 2402
      },
      gnq: {
        language: 2403
      },
      gnr: {
        language: 2404
      },
      gnt: {
        language: 2405
      },
      gnu: {
        language: 2406
      },
      gnw: {
        language: 2407
      },
      gnz: {
        language: 2408
      },
      goa: {
        language: 2409
      },
      gob: {
        language: 2410
      },
      goc: {
        language: 2411
      },
      god: {
        language: 2412
      },
      goe: {
        language: 2413
      },
      gof: {
        language: 2414
      },
      gog: {
        language: 2415
      },
      goh: {
        language: 2416
      },
      goi: {
        language: 2417
      },
      goj: {
        language: 2418
      },
      gok: {
        language: 2419
      },
      gol: {
        language: 2420
      },
      gom: {
        language: 2421,
        extlang: 8231
      },
      gon: {
        language: 2422
      },
      goo: {
        language: 2423
      },
      gop: {
        language: 2424
      },
      goq: {
        language: 2425
      },
      gor: {
        language: 2426
      },
      gos: {
        language: 2427
      },
      got: {
        language: 2428
      },
      gou: {
        language: 2429
      },
      gow: {
        language: 2430
      },
      gox: {
        language: 2431
      },
      goy: {
        language: 2432
      },
      goz: {
        language: 2433
      },
      gpa: {
        language: 2434
      },
      gpe: {
        language: 2435
      },
      gpn: {
        language: 2436
      },
      gqa: {
        language: 2437
      },
      gqi: {
        language: 2438
      },
      gqn: {
        language: 2439
      },
      gqr: {
        language: 2440
      },
      gqu: {
        language: 2441
      },
      gra: {
        language: 2442
      },
      grb: {
        language: 2443
      },
      grc: {
        language: 2444
      },
      grd: {
        language: 2445
      },
      grg: {
        language: 2446
      },
      grh: {
        language: 2447
      },
      gri: {
        language: 2448
      },
      grj: {
        language: 2449
      },
      grk: {
        language: 2450
      },
      grm: {
        language: 2451
      },
      gro: {
        language: 2452
      },
      grq: {
        language: 2453
      },
      grr: {
        language: 2454
      },
      grs: {
        language: 2455
      },
      grt: {
        language: 2456
      },
      gru: {
        language: 2457
      },
      grv: {
        language: 2458
      },
      grw: {
        language: 2459
      },
      grx: {
        language: 2460
      },
      gry: {
        language: 2461
      },
      grz: {
        language: 2462
      },
      gse: {
        language: 2463,
        extlang: 8232
      },
      gsg: {
        language: 2464,
        extlang: 8233
      },
      gsl: {
        language: 2465
      },
      gsm: {
        language: 2466,
        extlang: 8234
      },
      gsn: {
        language: 2467
      },
      gso: {
        language: 2468
      },
      gsp: {
        language: 2469
      },
      gss: {
        language: 2470,
        extlang: 8235
      },
      gsw: {
        language: 2471
      },
      gta: {
        language: 2472
      },
      gti: {
        language: 2473
      },
      gtu: {
        language: 2474
      },
      gua: {
        language: 2475
      },
      gub: {
        language: 2476
      },
      guc: {
        language: 2477
      },
      gud: {
        language: 2478
      },
      gue: {
        language: 2479
      },
      guf: {
        language: 2480
      },
      gug: {
        language: 2481
      },
      guh: {
        language: 2482
      },
      gui: {
        language: 2483
      },
      guk: {
        language: 2484
      },
      gul: {
        language: 2485
      },
      gum: {
        language: 2486
      },
      gun: {
        language: 2487
      },
      guo: {
        language: 2488
      },
      gup: {
        language: 2489
      },
      guq: {
        language: 2490
      },
      gur: {
        language: 2491
      },
      gus: {
        language: 2492,
        extlang: 8236
      },
      gut: {
        language: 2493
      },
      guu: {
        language: 2494
      },
      guv: {
        language: 2495
      },
      guw: {
        language: 2496
      },
      gux: {
        language: 2497
      },
      guz: {
        language: 2498
      },
      gva: {
        language: 2499
      },
      gvc: {
        language: 2500
      },
      gve: {
        language: 2501
      },
      gvf: {
        language: 2502
      },
      gvj: {
        language: 2503
      },
      gvl: {
        language: 2504
      },
      gvm: {
        language: 2505
      },
      gvn: {
        language: 2506
      },
      gvo: {
        language: 2507
      },
      gvp: {
        language: 2508
      },
      gvr: {
        language: 2509
      },
      gvs: {
        language: 2510
      },
      gvy: {
        language: 2511
      },
      gwa: {
        language: 2512
      },
      gwb: {
        language: 2513
      },
      gwc: {
        language: 2514
      },
      gwd: {
        language: 2515
      },
      gwe: {
        language: 2516
      },
      gwf: {
        language: 2517
      },
      gwg: {
        language: 2518
      },
      gwi: {
        language: 2519
      },
      gwj: {
        language: 2520
      },
      gwm: {
        language: 2521
      },
      gwn: {
        language: 2522
      },
      gwr: {
        language: 2523
      },
      gwt: {
        language: 2524
      },
      gwu: {
        language: 2525
      },
      gww: {
        language: 2526
      },
      gwx: {
        language: 2527
      },
      gxx: {
        language: 2528
      },
      gya: {
        language: 2529
      },
      gyb: {
        language: 2530
      },
      gyd: {
        language: 2531
      },
      gye: {
        language: 2532
      },
      gyf: {
        language: 2533
      },
      gyg: {
        language: 2534
      },
      gyi: {
        language: 2535
      },
      gyl: {
        language: 2536
      },
      gym: {
        language: 2537
      },
      gyn: {
        language: 2538
      },
      gyo: {
        language: 2539
      },
      gyr: {
        language: 2540
      },
      gyy: {
        language: 2541
      },
      gza: {
        language: 2542
      },
      gzi: {
        language: 2543
      },
      gzn: {
        language: 2544
      },
      haa: {
        language: 2545
      },
      hab: {
        language: 2546,
        extlang: 8237
      },
      hac: {
        language: 2547
      },
      had: {
        language: 2548
      },
      hae: {
        language: 2549
      },
      haf: {
        language: 2550,
        extlang: 8238
      },
      hag: {
        language: 2551
      },
      hah: {
        language: 2552
      },
      hai: {
        language: 2553
      },
      haj: {
        language: 2554
      },
      hak: {
        language: 2555,
        extlang: 8239
      },
      hal: {
        language: 2556
      },
      ham: {
        language: 2557
      },
      han: {
        language: 2558
      },
      hao: {
        language: 2559
      },
      hap: {
        language: 2560
      },
      haq: {
        language: 2561
      },
      har: {
        language: 2562
      },
      has: {
        language: 2563
      },
      hav: {
        language: 2564
      },
      haw: {
        language: 2565
      },
      hax: {
        language: 2566
      },
      hay: {
        language: 2567
      },
      haz: {
        language: 2568
      },
      hba: {
        language: 2569
      },
      hbb: {
        language: 2570
      },
      hbn: {
        language: 2571
      },
      hbo: {
        language: 2572
      },
      hbu: {
        language: 2573
      },
      hca: {
        language: 2574
      },
      hch: {
        language: 2575
      },
      hdn: {
        language: 2576
      },
      hds: {
        language: 2577,
        extlang: 8240
      },
      hdy: {
        language: 2578
      },
      hea: {
        language: 2579
      },
      hed: {
        language: 2580
      },
      heg: {
        language: 2581
      },
      heh: {
        language: 2582
      },
      hei: {
        language: 2583
      },
      hem: {
        language: 2584
      },
      hgm: {
        language: 2585
      },
      hgw: {
        language: 2586
      },
      hhi: {
        language: 2587
      },
      hhr: {
        language: 2588
      },
      hhy: {
        language: 2589
      },
      hia: {
        language: 2590
      },
      hib: {
        language: 2591
      },
      hid: {
        language: 2592
      },
      hif: {
        language: 2593
      },
      hig: {
        language: 2594
      },
      hih: {
        language: 2595
      },
      hii: {
        language: 2596
      },
      hij: {
        language: 2597
      },
      hik: {
        language: 2598
      },
      hil: {
        language: 2599
      },
      him: {
        language: 2600
      },
      hio: {
        language: 2601
      },
      hir: {
        language: 2602
      },
      hit: {
        language: 2603
      },
      hiw: {
        language: 2604
      },
      hix: {
        language: 2605
      },
      hji: {
        language: 2606,
        extlang: 8241
      },
      hka: {
        language: 2607
      },
      hke: {
        language: 2608
      },
      hkk: {
        language: 2609
      },
      hkn: {
        language: 2610
      },
      hks: {
        language: 2611,
        extlang: 8242
      },
      hla: {
        language: 2612
      },
      hlb: {
        language: 2613
      },
      hld: {
        language: 2614
      },
      hle: {
        language: 2615
      },
      hlt: {
        language: 2616
      },
      hlu: {
        language: 2617
      },
      hma: {
        language: 2618
      },
      hmb: {
        language: 2619
      },
      hmc: {
        language: 2620
      },
      hmd: {
        language: 2621
      },
      hme: {
        language: 2622
      },
      hmf: {
        language: 2623
      },
      hmg: {
        language: 2624
      },
      hmh: {
        language: 2625
      },
      hmi: {
        language: 2626
      },
      hmj: {
        language: 2627
      },
      hmk: {
        language: 2628
      },
      hml: {
        language: 2629
      },
      hmm: {
        language: 2630
      },
      hmn: {
        language: 2631
      },
      hmp: {
        language: 2632
      },
      hmq: {
        language: 2633
      },
      hmr: {
        language: 2634
      },
      hms: {
        language: 2635
      },
      hmt: {
        language: 2636
      },
      hmu: {
        language: 2637
      },
      hmv: {
        language: 2638
      },
      hmw: {
        language: 2639
      },
      hmx: {
        language: 2640
      },
      hmy: {
        language: 2641
      },
      hmz: {
        language: 2642
      },
      hna: {
        language: 2643
      },
      hnd: {
        language: 2644
      },
      hne: {
        language: 2645
      },
      hnh: {
        language: 2646
      },
      hni: {
        language: 2647
      },
      hnj: {
        language: 2648
      },
      hnn: {
        language: 2649
      },
      hno: {
        language: 2650
      },
      hns: {
        language: 2651
      },
      hnu: {
        language: 2652
      },
      hoa: {
        language: 2653
      },
      hob: {
        language: 2654
      },
      hoc: {
        language: 2655
      },
      hod: {
        language: 2656
      },
      hoe: {
        language: 2657
      },
      hoh: {
        language: 2658
      },
      hoi: {
        language: 2659
      },
      hoj: {
        language: 2660
      },
      hok: {
        language: 2661
      },
      hol: {
        language: 2662
      },
      hom: {
        language: 2663
      },
      hoo: {
        language: 2664
      },
      hop: {
        language: 2665
      },
      hor: {
        language: 2666
      },
      hos: {
        language: 2667,
        extlang: 8243
      },
      hot: {
        language: 2668
      },
      hov: {
        language: 2669
      },
      how: {
        language: 2670
      },
      hoy: {
        language: 2671
      },
      hoz: {
        language: 2672
      },
      hpo: {
        language: 2673
      },
      hps: {
        language: 2674,
        extlang: 8244
      },
      hra: {
        language: 2675
      },
      hrc: {
        language: 2676
      },
      hre: {
        language: 2677
      },
      hrk: {
        language: 2678
      },
      hrm: {
        language: 2679
      },
      hro: {
        language: 2680
      },
      hrp: {
        language: 2681
      },
      hrr: {
        language: 2682
      },
      hrt: {
        language: 2683
      },
      hru: {
        language: 2684
      },
      hrw: {
        language: 2685
      },
      hrx: {
        language: 2686
      },
      hrz: {
        language: 2687
      },
      hsb: {
        language: 2688
      },
      hsh: {
        language: 2689,
        extlang: 8245
      },
      hsl: {
        language: 2690,
        extlang: 8246
      },
      hsn: {
        language: 2691,
        extlang: 8247
      },
      hss: {
        language: 2692
      },
      hti: {
        language: 2693
      },
      hto: {
        language: 2694
      },
      hts: {
        language: 2695
      },
      htu: {
        language: 2696
      },
      htx: {
        language: 2697
      },
      hub: {
        language: 2698
      },
      huc: {
        language: 2699
      },
      hud: {
        language: 2700
      },
      hue: {
        language: 2701
      },
      huf: {
        language: 2702
      },
      hug: {
        language: 2703
      },
      huh: {
        language: 2704
      },
      hui: {
        language: 2705
      },
      huj: {
        language: 2706
      },
      huk: {
        language: 2707
      },
      hul: {
        language: 2708
      },
      hum: {
        language: 2709
      },
      huo: {
        language: 2710
      },
      hup: {
        language: 2711
      },
      huq: {
        language: 2712
      },
      hur: {
        language: 2713
      },
      hus: {
        language: 2714
      },
      hut: {
        language: 2715
      },
      huu: {
        language: 2716
      },
      huv: {
        language: 2717
      },
      huw: {
        language: 2718
      },
      hux: {
        language: 2719
      },
      huy: {
        language: 2720
      },
      huz: {
        language: 2721
      },
      hvc: {
        language: 2722
      },
      hve: {
        language: 2723
      },
      hvk: {
        language: 2724
      },
      hvn: {
        language: 2725
      },
      hvv: {
        language: 2726
      },
      hwa: {
        language: 2727
      },
      hwc: {
        language: 2728
      },
      hwo: {
        language: 2729
      },
      hya: {
        language: 2730
      },
      hyw: {
        language: 2731
      },
      hyx: {
        language: 2732
      },
      iai: {
        language: 2733
      },
      ian: {
        language: 2734
      },
      iap: {
        language: 2735
      },
      iar: {
        language: 2736
      },
      iba: {
        language: 2737
      },
      ibb: {
        language: 2738
      },
      ibd: {
        language: 2739
      },
      ibe: {
        language: 2740
      },
      ibg: {
        language: 2741
      },
      ibh: {
        language: 2742
      },
      ibi: {
        language: 2743
      },
      ibl: {
        language: 2744
      },
      ibm: {
        language: 2745
      },
      ibn: {
        language: 2746
      },
      ibr: {
        language: 2747
      },
      ibu: {
        language: 2748
      },
      iby: {
        language: 2749
      },
      ica: {
        language: 2750
      },
      ich: {
        language: 2751
      },
      icl: {
        language: 2752,
        extlang: 8248
      },
      icr: {
        language: 2753
      },
      ida: {
        language: 2754
      },
      idb: {
        language: 2755
      },
      idc: {
        language: 2756
      },
      idd: {
        language: 2757
      },
      ide: {
        language: 2758
      },
      idi: {
        language: 2759
      },
      idr: {
        language: 2760
      },
      ids: {
        language: 2761
      },
      idt: {
        language: 2762
      },
      idu: {
        language: 2763
      },
      ifa: {
        language: 2764
      },
      ifb: {
        language: 2765
      },
      ife: {
        language: 2766
      },
      iff: {
        language: 2767
      },
      ifk: {
        language: 2768
      },
      ifm: {
        language: 2769
      },
      ifu: {
        language: 2770
      },
      ify: {
        language: 2771
      },
      igb: {
        language: 2772
      },
      ige: {
        language: 2773
      },
      igg: {
        language: 2774
      },
      igl: {
        language: 2775
      },
      igm: {
        language: 2776
      },
      ign: {
        language: 2777
      },
      igo: {
        language: 2778
      },
      igs: {
        language: 2779
      },
      igw: {
        language: 2780
      },
      ihb: {
        language: 2781
      },
      ihi: {
        language: 2782
      },
      ihp: {
        language: 2783
      },
      ihw: {
        language: 2784
      },
      iin: {
        language: 2785
      },
      iir: {
        language: 2786
      },
      ijc: {
        language: 2787
      },
      ije: {
        language: 2788
      },
      ijj: {
        language: 2789
      },
      ijn: {
        language: 2790
      },
      ijo: {
        language: 2791
      },
      ijs: {
        language: 2792
      },
      ike: {
        language: 2793
      },
      iki: {
        language: 2794
      },
      ikk: {
        language: 2795
      },
      ikl: {
        language: 2796
      },
      iko: {
        language: 2797
      },
      ikp: {
        language: 2798
      },
      ikr: {
        language: 2799
      },
      iks: {
        language: 2800,
        extlang: 8249
      },
      ikt: {
        language: 2801
      },
      ikv: {
        language: 2802
      },
      ikw: {
        language: 2803
      },
      ikx: {
        language: 2804
      },
      ikz: {
        language: 2805
      },
      ila: {
        language: 2806
      },
      ilb: {
        language: 2807
      },
      ilg: {
        language: 2808
      },
      ili: {
        language: 2809
      },
      ilk: {
        language: 2810
      },
      ill: {
        language: 2811
      },
      ilm: {
        language: 2812
      },
      ilo: {
        language: 2813
      },
      ilp: {
        language: 2814
      },
      ils: {
        language: 2815,
        extlang: 8250
      },
      ilu: {
        language: 2816
      },
      ilv: {
        language: 2817
      },
      ilw: {
        language: 2818
      },
      ima: {
        language: 2819
      },
      ime: {
        language: 2820
      },
      imi: {
        language: 2821
      },
      iml: {
        language: 2822
      },
      imn: {
        language: 2823
      },
      imo: {
        language: 2824
      },
      imr: {
        language: 2825
      },
      ims: {
        language: 2826
      },
      imy: {
        language: 2827
      },
      inb: {
        language: 2828
      },
      inc: {
        language: 2829
      },
      ine: {
        language: 2830
      },
      ing: {
        language: 2831
      },
      inh: {
        language: 2832
      },
      inj: {
        language: 2833
      },
      inl: {
        language: 2834,
        extlang: 8251
      },
      inm: {
        language: 2835
      },
      inn: {
        language: 2836
      },
      ino: {
        language: 2837
      },
      inp: {
        language: 2838
      },
      ins: {
        language: 2839,
        extlang: 8252
      },
      int: {
        language: 2840
      },
      inz: {
        language: 2841
      },
      ior: {
        language: 2842
      },
      iou: {
        language: 2843
      },
      iow: {
        language: 2844
      },
      ipi: {
        language: 2845
      },
      ipo: {
        language: 2846
      },
      iqu: {
        language: 2847
      },
      iqw: {
        language: 2848
      },
      ira: {
        language: 2849
      },
      ire: {
        language: 2850
      },
      irh: {
        language: 2851
      },
      iri: {
        language: 2852
      },
      irk: {
        language: 2853
      },
      irn: {
        language: 2854
      },
      iro: {
        language: 2855
      },
      irr: {
        language: 2856
      },
      iru: {
        language: 2857
      },
      irx: {
        language: 2858
      },
      iry: {
        language: 2859
      },
      isa: {
        language: 2860
      },
      isc: {
        language: 2861
      },
      isd: {
        language: 2862
      },
      ise: {
        language: 2863,
        extlang: 8253
      },
      isg: {
        language: 2864,
        extlang: 8254
      },
      ish: {
        language: 2865
      },
      isi: {
        language: 2866
      },
      isk: {
        language: 2867
      },
      ism: {
        language: 2868
      },
      isn: {
        language: 2869
      },
      iso: {
        language: 2870
      },
      isr: {
        language: 2871,
        extlang: 8255
      },
      ist: {
        language: 2872
      },
      isu: {
        language: 2873
      },
      itb: {
        language: 2874
      },
      itc: {
        language: 2875
      },
      itd: {
        language: 2876
      },
      ite: {
        language: 2877
      },
      iti: {
        language: 2878
      },
      itk: {
        language: 2879
      },
      itl: {
        language: 2880
      },
      itm: {
        language: 2881
      },
      ito: {
        language: 2882
      },
      itr: {
        language: 2883
      },
      its: {
        language: 2884
      },
      itt: {
        language: 2885
      },
      itv: {
        language: 2886
      },
      itw: {
        language: 2887
      },
      itx: {
        language: 2888
      },
      ity: {
        language: 2889
      },
      itz: {
        language: 2890
      },
      ium: {
        language: 2891
      },
      ivb: {
        language: 2892
      },
      ivv: {
        language: 2893
      },
      iwk: {
        language: 2894
      },
      iwm: {
        language: 2895
      },
      iwo: {
        language: 2896
      },
      iws: {
        language: 2897
      },
      ixc: {
        language: 2898
      },
      ixl: {
        language: 2899
      },
      iya: {
        language: 2900
      },
      iyo: {
        language: 2901
      },
      iyx: {
        language: 2902
      },
      izh: {
        language: 2903
      },
      izi: {
        language: 2904
      },
      izr: {
        language: 2905
      },
      izz: {
        language: 2906
      },
      jaa: {
        language: 2907
      },
      jab: {
        language: 2908
      },
      jac: {
        language: 2909
      },
      jad: {
        language: 2910
      },
      jae: {
        language: 2911
      },
      jaf: {
        language: 2912
      },
      jah: {
        language: 2913
      },
      jaj: {
        language: 2914
      },
      jak: {
        language: 2915,
        extlang: 8256
      },
      jal: {
        language: 2916
      },
      jam: {
        language: 2917
      },
      jan: {
        language: 2918
      },
      jao: {
        language: 2919
      },
      jaq: {
        language: 2920
      },
      jar: {
        language: 2921
      },
      jas: {
        language: 2922
      },
      jat: {
        language: 2923
      },
      jau: {
        language: 2924
      },
      jax: {
        language: 2925,
        extlang: 8257
      },
      jay: {
        language: 2926
      },
      jaz: {
        language: 2927
      },
      jbe: {
        language: 2928
      },
      jbi: {
        language: 2929
      },
      jbj: {
        language: 2930
      },
      jbk: {
        language: 2931
      },
      jbn: {
        language: 2932
      },
      jbo: {
        language: 2933
      },
      jbr: {
        language: 2934
      },
      jbt: {
        language: 2935
      },
      jbu: {
        language: 2936
      },
      jbw: {
        language: 2937
      },
      jcs: {
        language: 2938,
        extlang: 8258
      },
      jct: {
        language: 2939
      },
      jda: {
        language: 2940
      },
      jdg: {
        language: 2941
      },
      jdt: {
        language: 2942
      },
      jeb: {
        language: 2943
      },
      jee: {
        language: 2944
      },
      jeg: {
        language: 2945
      },
      jeh: {
        language: 2946
      },
      jei: {
        language: 2947
      },
      jek: {
        language: 2948
      },
      jel: {
        language: 2949
      },
      jen: {
        language: 2950
      },
      jer: {
        language: 2951
      },
      jet: {
        language: 2952
      },
      jeu: {
        language: 2953
      },
      jgb: {
        language: 2954
      },
      jge: {
        language: 2955
      },
      jgk: {
        language: 2956
      },
      jgo: {
        language: 2957
      },
      jhi: {
        language: 2958
      },
      jhs: {
        language: 2959,
        extlang: 8259
      },
      jia: {
        language: 2960
      },
      jib: {
        language: 2961
      },
      jic: {
        language: 2962
      },
      jid: {
        language: 2963
      },
      jie: {
        language: 2964
      },
      jig: {
        language: 2965
      },
      jih: {
        language: 2966
      },
      jii: {
        language: 2967
      },
      jil: {
        language: 2968
      },
      jim: {
        language: 2969
      },
      jio: {
        language: 2970
      },
      jiq: {
        language: 2971
      },
      jit: {
        language: 2972
      },
      jiu: {
        language: 2973
      },
      jiv: {
        language: 2974
      },
      jiy: {
        language: 2975
      },
      jje: {
        language: 2976
      },
      jjr: {
        language: 2977
      },
      jka: {
        language: 2978
      },
      jkm: {
        language: 2979
      },
      jko: {
        language: 2980
      },
      jkp: {
        language: 2981
      },
      jkr: {
        language: 2982
      },
      jku: {
        language: 2983
      },
      jle: {
        language: 2984
      },
      jls: {
        language: 2985,
        extlang: 8260
      },
      jma: {
        language: 2986
      },
      jmb: {
        language: 2987
      },
      jmc: {
        language: 2988
      },
      jmd: {
        language: 2989
      },
      jmi: {
        language: 2990
      },
      jml: {
        language: 2991
      },
      jmn: {
        language: 2992
      },
      jmr: {
        language: 2993
      },
      jms: {
        language: 2994
      },
      jmw: {
        language: 2995
      },
      jmx: {
        language: 2996
      },
      jna: {
        language: 2997
      },
      jnd: {
        language: 2998
      },
      jng: {
        language: 2999
      },
      jni: {
        language: 3e3
      },
      jnj: {
        language: 3001
      },
      jnl: {
        language: 3002
      },
      jns: {
        language: 3003
      },
      job: {
        language: 3004
      },
      jod: {
        language: 3005
      },
      jog: {
        language: 3006
      },
      jor: {
        language: 3007
      },
      jos: {
        language: 3008,
        extlang: 8261
      },
      jow: {
        language: 3009
      },
      jpa: {
        language: 3010
      },
      jpr: {
        language: 3011
      },
      jpx: {
        language: 3012
      },
      jqr: {
        language: 3013
      },
      jra: {
        language: 3014
      },
      jrb: {
        language: 3015
      },
      jrr: {
        language: 3016
      },
      jrt: {
        language: 3017
      },
      jru: {
        language: 3018
      },
      jsl: {
        language: 3019,
        extlang: 8262
      },
      jua: {
        language: 3020
      },
      jub: {
        language: 3021
      },
      juc: {
        language: 3022
      },
      jud: {
        language: 3023
      },
      juh: {
        language: 3024
      },
      jui: {
        language: 3025
      },
      juk: {
        language: 3026
      },
      jul: {
        language: 3027
      },
      jum: {
        language: 3028
      },
      jun: {
        language: 3029
      },
      juo: {
        language: 3030
      },
      jup: {
        language: 3031
      },
      jur: {
        language: 3032
      },
      jus: {
        language: 3033,
        extlang: 8263
      },
      jut: {
        language: 3034
      },
      juu: {
        language: 3035
      },
      juw: {
        language: 3036
      },
      juy: {
        language: 3037
      },
      jvd: {
        language: 3038
      },
      jvn: {
        language: 3039
      },
      jwi: {
        language: 3040
      },
      jya: {
        language: 3041
      },
      jye: {
        language: 3042
      },
      jyy: {
        language: 3043
      },
      kaa: {
        language: 3044
      },
      kab: {
        language: 3045
      },
      kac: {
        language: 3046
      },
      kad: {
        language: 3047
      },
      kae: {
        language: 3048
      },
      kaf: {
        language: 3049
      },
      kag: {
        language: 3050
      },
      kah: {
        language: 3051
      },
      kai: {
        language: 3052
      },
      kaj: {
        language: 3053
      },
      kak: {
        language: 3054
      },
      kam: {
        language: 3055
      },
      kao: {
        language: 3056
      },
      kap: {
        language: 3057
      },
      kaq: {
        language: 3058
      },
      kar: {
        language: 3059
      },
      kav: {
        language: 3060
      },
      kaw: {
        language: 3061
      },
      kax: {
        language: 3062
      },
      kay: {
        language: 3063
      },
      kba: {
        language: 3064
      },
      kbb: {
        language: 3065
      },
      kbc: {
        language: 3066
      },
      kbd: {
        language: 3067
      },
      kbe: {
        language: 3068
      },
      kbf: {
        language: 3069
      },
      kbg: {
        language: 3070
      },
      kbh: {
        language: 3071
      },
      kbi: {
        language: 3072
      },
      kbj: {
        language: 3073
      },
      kbk: {
        language: 3074
      },
      kbl: {
        language: 3075
      },
      kbm: {
        language: 3076
      },
      kbn: {
        language: 3077
      },
      kbo: {
        language: 3078
      },
      kbp: {
        language: 3079
      },
      kbq: {
        language: 3080
      },
      kbr: {
        language: 3081
      },
      kbs: {
        language: 3082
      },
      kbt: {
        language: 3083
      },
      kbu: {
        language: 3084
      },
      kbv: {
        language: 3085
      },
      kbw: {
        language: 3086
      },
      kbx: {
        language: 3087
      },
      kby: {
        language: 3088
      },
      kbz: {
        language: 3089
      },
      kca: {
        language: 3090
      },
      kcb: {
        language: 3091
      },
      kcc: {
        language: 3092
      },
      kcd: {
        language: 3093
      },
      kce: {
        language: 3094
      },
      kcf: {
        language: 3095
      },
      kcg: {
        language: 3096
      },
      kch: {
        language: 3097
      },
      kci: {
        language: 3098
      },
      kcj: {
        language: 3099
      },
      kck: {
        language: 3100
      },
      kcl: {
        language: 3101
      },
      kcm: {
        language: 3102
      },
      kcn: {
        language: 3103
      },
      kco: {
        language: 3104
      },
      kcp: {
        language: 3105
      },
      kcq: {
        language: 3106
      },
      kcr: {
        language: 3107
      },
      kcs: {
        language: 3108
      },
      kct: {
        language: 3109
      },
      kcu: {
        language: 3110
      },
      kcv: {
        language: 3111
      },
      kcw: {
        language: 3112
      },
      kcx: {
        language: 3113
      },
      kcy: {
        language: 3114
      },
      kcz: {
        language: 3115
      },
      kda: {
        language: 3116
      },
      kdc: {
        language: 3117
      },
      kdd: {
        language: 3118
      },
      kde: {
        language: 3119
      },
      kdf: {
        language: 3120
      },
      kdg: {
        language: 3121
      },
      kdh: {
        language: 3122
      },
      kdi: {
        language: 3123
      },
      kdj: {
        language: 3124
      },
      kdk: {
        language: 3125
      },
      kdl: {
        language: 3126
      },
      kdm: {
        language: 3127
      },
      kdn: {
        language: 3128
      },
      kdo: {
        language: 3129
      },
      kdp: {
        language: 3130
      },
      kdq: {
        language: 3131
      },
      kdr: {
        language: 3132
      },
      kdt: {
        language: 3133
      },
      kdu: {
        language: 3134
      },
      kdv: {
        language: 3135
      },
      kdw: {
        language: 3136
      },
      kdx: {
        language: 3137
      },
      kdy: {
        language: 3138
      },
      kdz: {
        language: 3139
      },
      kea: {
        language: 3140
      },
      keb: {
        language: 3141
      },
      kec: {
        language: 3142
      },
      ked: {
        language: 3143
      },
      kee: {
        language: 3144
      },
      kef: {
        language: 3145
      },
      keg: {
        language: 3146
      },
      keh: {
        language: 3147
      },
      kei: {
        language: 3148
      },
      kej: {
        language: 3149
      },
      kek: {
        language: 3150
      },
      kel: {
        language: 3151
      },
      kem: {
        language: 3152
      },
      ken: {
        language: 3153
      },
      keo: {
        language: 3154
      },
      kep: {
        language: 3155
      },
      keq: {
        language: 3156
      },
      ker: {
        language: 3157
      },
      kes: {
        language: 3158
      },
      ket: {
        language: 3159
      },
      keu: {
        language: 3160
      },
      kev: {
        language: 3161
      },
      kew: {
        language: 3162
      },
      kex: {
        language: 3163
      },
      key: {
        language: 3164
      },
      kez: {
        language: 3165
      },
      kfa: {
        language: 3166
      },
      kfb: {
        language: 3167
      },
      kfc: {
        language: 3168
      },
      kfd: {
        language: 3169
      },
      kfe: {
        language: 3170
      },
      kff: {
        language: 3171
      },
      kfg: {
        language: 3172
      },
      kfh: {
        language: 3173
      },
      kfi: {
        language: 3174
      },
      kfj: {
        language: 3175
      },
      kfk: {
        language: 3176
      },
      kfl: {
        language: 3177
      },
      kfm: {
        language: 3178
      },
      kfn: {
        language: 3179
      },
      kfo: {
        language: 3180
      },
      kfp: {
        language: 3181
      },
      kfq: {
        language: 3182
      },
      kfr: {
        language: 3183
      },
      kfs: {
        language: 3184
      },
      kft: {
        language: 3185
      },
      kfu: {
        language: 3186
      },
      kfv: {
        language: 3187
      },
      kfw: {
        language: 3188
      },
      kfx: {
        language: 3189
      },
      kfy: {
        language: 3190
      },
      kfz: {
        language: 3191
      },
      kga: {
        language: 3192
      },
      kgb: {
        language: 3193
      },
      kgc: {
        language: 3194
      },
      kgd: {
        language: 3195
      },
      kge: {
        language: 3196
      },
      kgf: {
        language: 3197
      },
      kgg: {
        language: 3198
      },
      kgh: {
        language: 3199
      },
      kgi: {
        language: 3200,
        extlang: 8264
      },
      kgj: {
        language: 3201
      },
      kgk: {
        language: 3202
      },
      kgl: {
        language: 3203
      },
      kgm: {
        language: 3204
      },
      kgn: {
        language: 3205
      },
      kgo: {
        language: 3206
      },
      kgp: {
        language: 3207
      },
      kgq: {
        language: 3208
      },
      kgr: {
        language: 3209
      },
      kgs: {
        language: 3210
      },
      kgt: {
        language: 3211
      },
      kgu: {
        language: 3212
      },
      kgv: {
        language: 3213
      },
      kgw: {
        language: 3214
      },
      kgx: {
        language: 3215
      },
      kgy: {
        language: 3216
      },
      kha: {
        language: 3217
      },
      khb: {
        language: 3218
      },
      khc: {
        language: 3219
      },
      khd: {
        language: 3220
      },
      khe: {
        language: 3221
      },
      khf: {
        language: 3222
      },
      khg: {
        language: 3223
      },
      khh: {
        language: 3224
      },
      khi: {
        language: 3225
      },
      khj: {
        language: 3226
      },
      khk: {
        language: 3227
      },
      khl: {
        language: 3228
      },
      khn: {
        language: 3229
      },
      kho: {
        language: 3230
      },
      khp: {
        language: 3231
      },
      khq: {
        language: 3232
      },
      khr: {
        language: 3233
      },
      khs: {
        language: 3234
      },
      kht: {
        language: 3235
      },
      khu: {
        language: 3236
      },
      khv: {
        language: 3237
      },
      khw: {
        language: 3238
      },
      khx: {
        language: 3239
      },
      khy: {
        language: 3240
      },
      khz: {
        language: 3241
      },
      kia: {
        language: 3242
      },
      kib: {
        language: 3243
      },
      kic: {
        language: 3244
      },
      kid: {
        language: 3245
      },
      kie: {
        language: 3246
      },
      kif: {
        language: 3247
      },
      kig: {
        language: 3248
      },
      kih: {
        language: 3249
      },
      kii: {
        language: 3250
      },
      kij: {
        language: 3251
      },
      kil: {
        language: 3252
      },
      kim: {
        language: 3253
      },
      kio: {
        language: 3254
      },
      kip: {
        language: 3255
      },
      kiq: {
        language: 3256
      },
      kis: {
        language: 3257
      },
      kit: {
        language: 3258
      },
      kiu: {
        language: 3259
      },
      kiv: {
        language: 3260
      },
      kiw: {
        language: 3261
      },
      kix: {
        language: 3262
      },
      kiy: {
        language: 3263
      },
      kiz: {
        language: 3264
      },
      kja: {
        language: 3265
      },
      kjb: {
        language: 3266
      },
      kjc: {
        language: 3267
      },
      kjd: {
        language: 3268
      },
      kje: {
        language: 3269
      },
      kjf: {
        language: 3270
      },
      kjg: {
        language: 3271
      },
      kjh: {
        language: 3272
      },
      kji: {
        language: 3273
      },
      kjj: {
        language: 3274
      },
      kjk: {
        language: 3275
      },
      kjl: {
        language: 3276
      },
      kjm: {
        language: 3277
      },
      kjn: {
        language: 3278
      },
      kjo: {
        language: 3279
      },
      kjp: {
        language: 3280
      },
      kjq: {
        language: 3281
      },
      kjr: {
        language: 3282
      },
      kjs: {
        language: 3283
      },
      kjt: {
        language: 3284
      },
      kju: {
        language: 3285
      },
      kjv: {
        language: 3286
      },
      kjx: {
        language: 3287
      },
      kjy: {
        language: 3288
      },
      kjz: {
        language: 3289
      },
      kka: {
        language: 3290
      },
      kkb: {
        language: 3291
      },
      kkc: {
        language: 3292
      },
      kkd: {
        language: 3293
      },
      kke: {
        language: 3294
      },
      kkf: {
        language: 3295
      },
      kkg: {
        language: 3296
      },
      kkh: {
        language: 3297
      },
      kki: {
        language: 3298
      },
      kkj: {
        language: 3299
      },
      kkk: {
        language: 3300
      },
      kkl: {
        language: 3301
      },
      kkm: {
        language: 3302
      },
      kkn: {
        language: 3303
      },
      kko: {
        language: 3304
      },
      kkp: {
        language: 3305
      },
      kkq: {
        language: 3306
      },
      kkr: {
        language: 3307
      },
      kks: {
        language: 3308
      },
      kkt: {
        language: 3309
      },
      kku: {
        language: 3310
      },
      kkv: {
        language: 3311
      },
      kkw: {
        language: 3312
      },
      kkx: {
        language: 3313
      },
      kky: {
        language: 3314
      },
      kkz: {
        language: 3315
      },
      kla: {
        language: 3316
      },
      klb: {
        language: 3317
      },
      klc: {
        language: 3318
      },
      kld: {
        language: 3319
      },
      kle: {
        language: 3320
      },
      klf: {
        language: 3321
      },
      klg: {
        language: 3322
      },
      klh: {
        language: 3323
      },
      kli: {
        language: 3324
      },
      klj: {
        language: 3325
      },
      klk: {
        language: 3326
      },
      kll: {
        language: 3327
      },
      klm: {
        language: 3328
      },
      kln: {
        language: 3329
      },
      klo: {
        language: 3330
      },
      klp: {
        language: 3331
      },
      klq: {
        language: 3332
      },
      klr: {
        language: 3333
      },
      kls: {
        language: 3334
      },
      klt: {
        language: 3335
      },
      klu: {
        language: 3336
      },
      klv: {
        language: 3337
      },
      klw: {
        language: 3338
      },
      klx: {
        language: 3339
      },
      kly: {
        language: 3340
      },
      klz: {
        language: 3341
      },
      kma: {
        language: 3342
      },
      kmb: {
        language: 3343
      },
      kmc: {
        language: 3344
      },
      kmd: {
        language: 3345
      },
      kme: {
        language: 3346
      },
      kmf: {
        language: 3347
      },
      kmg: {
        language: 3348
      },
      kmh: {
        language: 3349
      },
      kmi: {
        language: 3350
      },
      kmj: {
        language: 3351
      },
      kmk: {
        language: 3352
      },
      kml: {
        language: 3353
      },
      kmm: {
        language: 3354
      },
      kmn: {
        language: 3355
      },
      kmo: {
        language: 3356
      },
      kmp: {
        language: 3357
      },
      kmq: {
        language: 3358
      },
      kmr: {
        language: 3359
      },
      kms: {
        language: 3360
      },
      kmt: {
        language: 3361
      },
      kmu: {
        language: 3362
      },
      kmv: {
        language: 3363
      },
      kmw: {
        language: 3364
      },
      kmx: {
        language: 3365
      },
      kmy: {
        language: 3366
      },
      kmz: {
        language: 3367
      },
      kna: {
        language: 3368
      },
      knb: {
        language: 3369
      },
      knc: {
        language: 3370
      },
      knd: {
        language: 3371
      },
      kne: {
        language: 3372
      },
      knf: {
        language: 3373
      },
      kng: {
        language: 3374
      },
      kni: {
        language: 3375
      },
      knj: {
        language: 3376
      },
      knk: {
        language: 3377
      },
      knl: {
        language: 3378
      },
      knm: {
        language: 3379
      },
      knn: {
        language: 3380,
        extlang: 8265
      },
      kno: {
        language: 3381
      },
      knp: {
        language: 3382
      },
      knq: {
        language: 3383
      },
      knr: {
        language: 3384
      },
      kns: {
        language: 3385
      },
      knt: {
        language: 3386
      },
      knu: {
        language: 3387
      },
      knv: {
        language: 3388
      },
      knw: {
        language: 3389
      },
      knx: {
        language: 3390
      },
      kny: {
        language: 3391
      },
      knz: {
        language: 3392
      },
      koa: {
        language: 3393
      },
      koc: {
        language: 3394
      },
      kod: {
        language: 3395
      },
      koe: {
        language: 3396
      },
      kof: {
        language: 3397
      },
      kog: {
        language: 3398
      },
      koh: {
        language: 3399
      },
      koi: {
        language: 3400
      },
      koj: {
        language: 3401
      },
      kok: {
        language: 3402
      },
      kol: {
        language: 3403
      },
      koo: {
        language: 3404
      },
      kop: {
        language: 3405
      },
      koq: {
        language: 3406
      },
      kos: {
        language: 3407
      },
      kot: {
        language: 3408
      },
      kou: {
        language: 3409
      },
      kov: {
        language: 3410
      },
      kow: {
        language: 3411
      },
      kox: {
        language: 3412
      },
      koy: {
        language: 3413
      },
      koz: {
        language: 3414
      },
      kpa: {
        language: 3415
      },
      kpb: {
        language: 3416
      },
      kpc: {
        language: 3417
      },
      kpd: {
        language: 3418
      },
      kpe: {
        language: 3419
      },
      kpf: {
        language: 3420
      },
      kpg: {
        language: 3421
      },
      kph: {
        language: 3422
      },
      kpi: {
        language: 3423
      },
      kpj: {
        language: 3424
      },
      kpk: {
        language: 3425
      },
      kpl: {
        language: 3426
      },
      kpm: {
        language: 3427
      },
      kpn: {
        language: 3428
      },
      kpo: {
        language: 3429
      },
      kpp: {
        language: 3430
      },
      kpq: {
        language: 3431
      },
      kpr: {
        language: 3432
      },
      kps: {
        language: 3433
      },
      kpt: {
        language: 3434
      },
      kpu: {
        language: 3435
      },
      kpv: {
        language: 3436
      },
      kpw: {
        language: 3437
      },
      kpx: {
        language: 3438
      },
      kpy: {
        language: 3439
      },
      kpz: {
        language: 3440
      },
      kqa: {
        language: 3441
      },
      kqb: {
        language: 3442
      },
      kqc: {
        language: 3443
      },
      kqd: {
        language: 3444
      },
      kqe: {
        language: 3445
      },
      kqf: {
        language: 3446
      },
      kqg: {
        language: 3447
      },
      kqh: {
        language: 3448
      },
      kqi: {
        language: 3449
      },
      kqj: {
        language: 3450
      },
      kqk: {
        language: 3451
      },
      kql: {
        language: 3452
      },
      kqm: {
        language: 3453
      },
      kqn: {
        language: 3454
      },
      kqo: {
        language: 3455
      },
      kqp: {
        language: 3456
      },
      kqq: {
        language: 3457
      },
      kqr: {
        language: 3458
      },
      kqs: {
        language: 3459
      },
      kqt: {
        language: 3460
      },
      kqu: {
        language: 3461
      },
      kqv: {
        language: 3462
      },
      kqw: {
        language: 3463
      },
      kqx: {
        language: 3464
      },
      kqy: {
        language: 3465
      },
      kqz: {
        language: 3466
      },
      kra: {
        language: 3467
      },
      krb: {
        language: 3468
      },
      krc: {
        language: 3469
      },
      krd: {
        language: 3470
      },
      kre: {
        language: 3471
      },
      krf: {
        language: 3472
      },
      krh: {
        language: 3473
      },
      kri: {
        language: 3474
      },
      krj: {
        language: 3475
      },
      krk: {
        language: 3476
      },
      krl: {
        language: 3477
      },
      krm: {
        language: 3478
      },
      krn: {
        language: 3479
      },
      kro: {
        language: 3480
      },
      krp: {
        language: 3481
      },
      krr: {
        language: 3482
      },
      krs: {
        language: 3483
      },
      krt: {
        language: 3484
      },
      kru: {
        language: 3485
      },
      krv: {
        language: 3486
      },
      krw: {
        language: 3487
      },
      krx: {
        language: 3488
      },
      kry: {
        language: 3489
      },
      krz: {
        language: 3490
      },
      ksa: {
        language: 3491
      },
      ksb: {
        language: 3492
      },
      ksc: {
        language: 3493
      },
      ksd: {
        language: 3494
      },
      kse: {
        language: 3495
      },
      ksf: {
        language: 3496
      },
      ksg: {
        language: 3497
      },
      ksh: {
        language: 3498
      },
      ksi: {
        language: 3499
      },
      ksj: {
        language: 3500
      },
      ksk: {
        language: 3501
      },
      ksl: {
        language: 3502
      },
      ksm: {
        language: 3503
      },
      ksn: {
        language: 3504
      },
      kso: {
        language: 3505
      },
      ksp: {
        language: 3506
      },
      ksq: {
        language: 3507
      },
      ksr: {
        language: 3508
      },
      kss: {
        language: 3509
      },
      kst: {
        language: 3510
      },
      ksu: {
        language: 3511
      },
      ksv: {
        language: 3512
      },
      ksw: {
        language: 3513
      },
      ksx: {
        language: 3514
      },
      ksy: {
        language: 3515
      },
      ksz: {
        language: 3516
      },
      kta: {
        language: 3517
      },
      ktb: {
        language: 3518
      },
      ktc: {
        language: 3519
      },
      ktd: {
        language: 3520
      },
      kte: {
        language: 3521
      },
      ktf: {
        language: 3522
      },
      ktg: {
        language: 3523
      },
      kth: {
        language: 3524
      },
      kti: {
        language: 3525
      },
      ktj: {
        language: 3526
      },
      ktk: {
        language: 3527
      },
      ktl: {
        language: 3528
      },
      ktm: {
        language: 3529
      },
      ktn: {
        language: 3530
      },
      kto: {
        language: 3531
      },
      ktp: {
        language: 3532
      },
      ktq: {
        language: 3533
      },
      ktr: {
        language: 3534
      },
      kts: {
        language: 3535
      },
      ktt: {
        language: 3536
      },
      ktu: {
        language: 3537
      },
      ktv: {
        language: 3538
      },
      ktw: {
        language: 3539
      },
      ktx: {
        language: 3540
      },
      kty: {
        language: 3541
      },
      ktz: {
        language: 3542
      },
      kub: {
        language: 3543
      },
      kuc: {
        language: 3544
      },
      kud: {
        language: 3545
      },
      kue: {
        language: 3546
      },
      kuf: {
        language: 3547
      },
      kug: {
        language: 3548
      },
      kuh: {
        language: 3549
      },
      kui: {
        language: 3550
      },
      kuj: {
        language: 3551
      },
      kuk: {
        language: 3552
      },
      kul: {
        language: 3553
      },
      kum: {
        language: 3554
      },
      kun: {
        language: 3555
      },
      kuo: {
        language: 3556
      },
      kup: {
        language: 3557
      },
      kuq: {
        language: 3558
      },
      kus: {
        language: 3559
      },
      kut: {
        language: 3560
      },
      kuu: {
        language: 3561
      },
      kuv: {
        language: 3562
      },
      kuw: {
        language: 3563
      },
      kux: {
        language: 3564
      },
      kuy: {
        language: 3565
      },
      kuz: {
        language: 3566
      },
      kva: {
        language: 3567
      },
      kvb: {
        language: 3568,
        extlang: 8266
      },
      kvc: {
        language: 3569
      },
      kvd: {
        language: 3570
      },
      kve: {
        language: 3571
      },
      kvf: {
        language: 3572
      },
      kvg: {
        language: 3573
      },
      kvh: {
        language: 3574
      },
      kvi: {
        language: 3575
      },
      kvj: {
        language: 3576
      },
      kvk: {
        language: 3577,
        extlang: 8267
      },
      kvl: {
        language: 3578
      },
      kvm: {
        language: 3579
      },
      kvn: {
        language: 3580
      },
      kvo: {
        language: 3581
      },
      kvp: {
        language: 3582
      },
      kvq: {
        language: 3583
      },
      kvr: {
        language: 3584,
        extlang: 8268
      },
      kvs: {
        language: 3585
      },
      kvt: {
        language: 3586
      },
      kvu: {
        language: 3587
      },
      kvv: {
        language: 3588
      },
      kvw: {
        language: 3589
      },
      kvx: {
        language: 3590
      },
      kvy: {
        language: 3591
      },
      kvz: {
        language: 3592
      },
      kwa: {
        language: 3593
      },
      kwb: {
        language: 3594
      },
      kwc: {
        language: 3595
      },
      kwd: {
        language: 3596
      },
      kwe: {
        language: 3597
      },
      kwf: {
        language: 3598
      },
      kwg: {
        language: 3599
      },
      kwh: {
        language: 3600
      },
      kwi: {
        language: 3601
      },
      kwj: {
        language: 3602
      },
      kwk: {
        language: 3603
      },
      kwl: {
        language: 3604
      },
      kwm: {
        language: 3605
      },
      kwn: {
        language: 3606
      },
      kwo: {
        language: 3607
      },
      kwp: {
        language: 3608
      },
      kwq: {
        language: 3609
      },
      kwr: {
        language: 3610
      },
      kws: {
        language: 3611
      },
      kwt: {
        language: 3612
      },
      kwu: {
        language: 3613
      },
      kwv: {
        language: 3614
      },
      kww: {
        language: 3615
      },
      kwx: {
        language: 3616
      },
      kwy: {
        language: 3617
      },
      kwz: {
        language: 3618
      },
      kxa: {
        language: 3619
      },
      kxb: {
        language: 3620
      },
      kxc: {
        language: 3621
      },
      kxd: {
        language: 3622,
        extlang: 8269
      },
      kxe: {
        language: 3623
      },
      kxf: {
        language: 3624
      },
      kxh: {
        language: 3625
      },
      kxi: {
        language: 3626
      },
      kxj: {
        language: 3627
      },
      kxk: {
        language: 3628
      },
      kxl: {
        language: 3629
      },
      kxm: {
        language: 3630
      },
      kxn: {
        language: 3631
      },
      kxo: {
        language: 3632
      },
      kxp: {
        language: 3633
      },
      kxq: {
        language: 3634
      },
      kxr: {
        language: 3635
      },
      kxs: {
        language: 3636
      },
      kxt: {
        language: 3637
      },
      kxu: {
        language: 3638
      },
      kxv: {
        language: 3639
      },
      kxw: {
        language: 3640
      },
      kxx: {
        language: 3641
      },
      kxy: {
        language: 3642
      },
      kxz: {
        language: 3643
      },
      kya: {
        language: 3644
      },
      kyb: {
        language: 3645
      },
      kyc: {
        language: 3646
      },
      kyd: {
        language: 3647
      },
      kye: {
        language: 3648
      },
      kyf: {
        language: 3649
      },
      kyg: {
        language: 3650
      },
      kyh: {
        language: 3651
      },
      kyi: {
        language: 3652
      },
      kyj: {
        language: 3653
      },
      kyk: {
        language: 3654
      },
      kyl: {
        language: 3655
      },
      kym: {
        language: 3656
      },
      kyn: {
        language: 3657
      },
      kyo: {
        language: 3658
      },
      kyp: {
        language: 3659
      },
      kyq: {
        language: 3660
      },
      kyr: {
        language: 3661
      },
      kys: {
        language: 3662
      },
      kyt: {
        language: 3663
      },
      kyu: {
        language: 3664
      },
      kyv: {
        language: 3665
      },
      kyw: {
        language: 3666
      },
      kyx: {
        language: 3667
      },
      kyy: {
        language: 3668
      },
      kyz: {
        language: 3669
      },
      kza: {
        language: 3670
      },
      kzb: {
        language: 3671
      },
      kzc: {
        language: 3672
      },
      kzd: {
        language: 3673
      },
      kze: {
        language: 3674
      },
      kzf: {
        language: 3675
      },
      kzg: {
        language: 3676
      },
      kzh: {
        language: 3677
      },
      kzi: {
        language: 3678
      },
      kzj: {
        language: 3679
      },
      kzk: {
        language: 3680
      },
      kzl: {
        language: 3681
      },
      kzm: {
        language: 3682
      },
      kzn: {
        language: 3683
      },
      kzo: {
        language: 3684
      },
      kzp: {
        language: 3685
      },
      kzq: {
        language: 3686
      },
      kzr: {
        language: 3687
      },
      kzs: {
        language: 3688
      },
      kzt: {
        language: 3689
      },
      kzu: {
        language: 3690
      },
      kzv: {
        language: 3691
      },
      kzw: {
        language: 3692
      },
      kzx: {
        language: 3693
      },
      kzy: {
        language: 3694
      },
      kzz: {
        language: 3695
      },
      laa: {
        language: 3696
      },
      lab: {
        language: 3697
      },
      lac: {
        language: 3698
      },
      lad: {
        language: 3699
      },
      lae: {
        language: 3700
      },
      laf: {
        language: 3701
      },
      lag: {
        language: 3702
      },
      lah: {
        language: 3703
      },
      lai: {
        language: 3704
      },
      laj: {
        language: 3705
      },
      lak: {
        language: 3706
      },
      lal: {
        language: 3707
      },
      lam: {
        language: 3708
      },
      lan: {
        language: 3709
      },
      lap: {
        language: 3710
      },
      laq: {
        language: 3711
      },
      lar: {
        language: 3712
      },
      las: {
        language: 3713
      },
      lau: {
        language: 3714
      },
      law: {
        language: 3715
      },
      lax: {
        language: 3716
      },
      lay: {
        language: 3717
      },
      laz: {
        language: 3718
      },
      lba: {
        language: 3719
      },
      lbb: {
        language: 3720
      },
      lbc: {
        language: 3721
      },
      lbe: {
        language: 3722
      },
      lbf: {
        language: 3723
      },
      lbg: {
        language: 3724
      },
      lbi: {
        language: 3725
      },
      lbj: {
        language: 3726
      },
      lbk: {
        language: 3727
      },
      lbl: {
        language: 3728
      },
      lbm: {
        language: 3729
      },
      lbn: {
        language: 3730
      },
      lbo: {
        language: 3731
      },
      lbq: {
        language: 3732
      },
      lbr: {
        language: 3733
      },
      lbs: {
        language: 3734,
        extlang: 8270
      },
      lbt: {
        language: 3735
      },
      lbu: {
        language: 3736
      },
      lbv: {
        language: 3737
      },
      lbw: {
        language: 3738
      },
      lbx: {
        language: 3739
      },
      lby: {
        language: 3740
      },
      lbz: {
        language: 3741
      },
      lcc: {
        language: 3742
      },
      lcd: {
        language: 3743
      },
      lce: {
        language: 3744,
        extlang: 8271
      },
      lcf: {
        language: 3745,
        extlang: 8272
      },
      lch: {
        language: 3746
      },
      lcl: {
        language: 3747
      },
      lcm: {
        language: 3748
      },
      lcp: {
        language: 3749
      },
      lcq: {
        language: 3750
      },
      lcs: {
        language: 3751
      },
      lda: {
        language: 3752
      },
      ldb: {
        language: 3753
      },
      ldd: {
        language: 3754
      },
      ldg: {
        language: 3755
      },
      ldh: {
        language: 3756
      },
      ldi: {
        language: 3757
      },
      ldj: {
        language: 3758
      },
      ldk: {
        language: 3759
      },
      ldl: {
        language: 3760
      },
      ldm: {
        language: 3761
      },
      ldn: {
        language: 3762
      },
      ldo: {
        language: 3763
      },
      ldp: {
        language: 3764
      },
      ldq: {
        language: 3765
      },
      lea: {
        language: 3766
      },
      leb: {
        language: 3767
      },
      lec: {
        language: 3768
      },
      led: {
        language: 3769
      },
      lee: {
        language: 3770
      },
      lef: {
        language: 3771
      },
      leg: {
        language: 3772
      },
      leh: {
        language: 3773
      },
      lei: {
        language: 3774
      },
      lej: {
        language: 3775
      },
      lek: {
        language: 3776
      },
      lel: {
        language: 3777
      },
      lem: {
        language: 3778
      },
      len: {
        language: 3779
      },
      leo: {
        language: 3780
      },
      lep: {
        language: 3781
      },
      leq: {
        language: 3782
      },
      ler: {
        language: 3783
      },
      les: {
        language: 3784
      },
      let: {
        language: 3785
      },
      leu: {
        language: 3786
      },
      lev: {
        language: 3787
      },
      lew: {
        language: 3788
      },
      lex: {
        language: 3789
      },
      ley: {
        language: 3790
      },
      lez: {
        language: 3791
      },
      lfa: {
        language: 3792
      },
      lfn: {
        language: 3793
      },
      lga: {
        language: 3794
      },
      lgb: {
        language: 3795
      },
      lgg: {
        language: 3796
      },
      lgh: {
        language: 3797
      },
      lgi: {
        language: 3798
      },
      lgk: {
        language: 3799
      },
      lgl: {
        language: 3800
      },
      lgm: {
        language: 3801
      },
      lgn: {
        language: 3802
      },
      lgq: {
        language: 3803
      },
      lgr: {
        language: 3804
      },
      lgt: {
        language: 3805
      },
      lgu: {
        language: 3806
      },
      lgz: {
        language: 3807
      },
      lha: {
        language: 3808
      },
      lhh: {
        language: 3809
      },
      lhi: {
        language: 3810
      },
      lhl: {
        language: 3811
      },
      lhm: {
        language: 3812
      },
      lhn: {
        language: 3813
      },
      lhp: {
        language: 3814
      },
      lhs: {
        language: 3815
      },
      lht: {
        language: 3816
      },
      lhu: {
        language: 3817
      },
      lia: {
        language: 3818
      },
      lib: {
        language: 3819
      },
      lic: {
        language: 3820
      },
      lid: {
        language: 3821
      },
      lie: {
        language: 3822
      },
      lif: {
        language: 3823
      },
      lig: {
        language: 3824
      },
      lih: {
        language: 3825
      },
      lii: {
        language: 3826
      },
      lij: {
        language: 3827
      },
      lik: {
        language: 3828
      },
      lil: {
        language: 3829
      },
      lio: {
        language: 3830
      },
      lip: {
        language: 3831
      },
      liq: {
        language: 3832
      },
      lir: {
        language: 3833
      },
      lis: {
        language: 3834
      },
      liu: {
        language: 3835
      },
      liv: {
        language: 3836
      },
      liw: {
        language: 3837,
        extlang: 8273
      },
      lix: {
        language: 3838
      },
      liy: {
        language: 3839
      },
      liz: {
        language: 3840
      },
      lja: {
        language: 3841
      },
      lje: {
        language: 3842
      },
      lji: {
        language: 3843
      },
      ljl: {
        language: 3844
      },
      ljp: {
        language: 3845
      },
      ljw: {
        language: 3846
      },
      ljx: {
        language: 3847
      },
      lka: {
        language: 3848
      },
      lkb: {
        language: 3849
      },
      lkc: {
        language: 3850
      },
      lkd: {
        language: 3851
      },
      lke: {
        language: 3852
      },
      lkh: {
        language: 3853
      },
      lki: {
        language: 3854
      },
      lkj: {
        language: 3855
      },
      lkl: {
        language: 3856
      },
      lkm: {
        language: 3857
      },
      lkn: {
        language: 3858
      },
      lko: {
        language: 3859
      },
      lkr: {
        language: 3860
      },
      lks: {
        language: 3861
      },
      lkt: {
        language: 3862
      },
      lku: {
        language: 3863
      },
      lky: {
        language: 3864
      },
      lla: {
        language: 3865
      },
      llb: {
        language: 3866
      },
      llc: {
        language: 3867
      },
      lld: {
        language: 3868
      },
      lle: {
        language: 3869
      },
      llf: {
        language: 3870
      },
      llg: {
        language: 3871
      },
      llh: {
        language: 3872
      },
      lli: {
        language: 3873
      },
      llj: {
        language: 3874
      },
      llk: {
        language: 3875
      },
      lll: {
        language: 3876
      },
      llm: {
        language: 3877
      },
      lln: {
        language: 3878
      },
      llo: {
        language: 3879
      },
      llp: {
        language: 3880
      },
      llq: {
        language: 3881
      },
      lls: {
        language: 3882,
        extlang: 8274
      },
      llu: {
        language: 3883
      },
      llx: {
        language: 3884
      },
      lma: {
        language: 3885
      },
      lmb: {
        language: 3886
      },
      lmc: {
        language: 3887
      },
      lmd: {
        language: 3888
      },
      lme: {
        language: 3889
      },
      lmf: {
        language: 3890
      },
      lmg: {
        language: 3891
      },
      lmh: {
        language: 3892
      },
      lmi: {
        language: 3893
      },
      lmj: {
        language: 3894
      },
      lmk: {
        language: 3895
      },
      lml: {
        language: 3896
      },
      lmm: {
        language: 3897
      },
      lmn: {
        language: 3898
      },
      lmo: {
        language: 3899
      },
      lmp: {
        language: 3900
      },
      lmq: {
        language: 3901
      },
      lmr: {
        language: 3902
      },
      lmu: {
        language: 3903
      },
      lmv: {
        language: 3904
      },
      lmw: {
        language: 3905
      },
      lmx: {
        language: 3906
      },
      lmy: {
        language: 3907
      },
      lmz: {
        language: 3908
      },
      lna: {
        language: 3909
      },
      lnb: {
        language: 3910
      },
      lnd: {
        language: 3911
      },
      lng: {
        language: 3912
      },
      lnh: {
        language: 3913
      },
      lni: {
        language: 3914
      },
      lnj: {
        language: 3915
      },
      lnl: {
        language: 3916
      },
      lnm: {
        language: 3917
      },
      lnn: {
        language: 3918
      },
      lno: {
        language: 3919
      },
      lns: {
        language: 3920
      },
      lnu: {
        language: 3921
      },
      lnw: {
        language: 3922
      },
      lnz: {
        language: 3923
      },
      loa: {
        language: 3924
      },
      lob: {
        language: 3925
      },
      loc: {
        language: 3926
      },
      loe: {
        language: 3927
      },
      lof: {
        language: 3928
      },
      log: {
        language: 3929
      },
      loh: {
        language: 3930
      },
      loi: {
        language: 3931
      },
      loj: {
        language: 3932
      },
      lok: {
        language: 3933
      },
      lol: {
        language: 3934
      },
      lom: {
        language: 3935
      },
      lon: {
        language: 3936
      },
      loo: {
        language: 3937
      },
      lop: {
        language: 3938
      },
      loq: {
        language: 3939
      },
      lor: {
        language: 3940
      },
      los: {
        language: 3941
      },
      lot: {
        language: 3942
      },
      lou: {
        language: 3943
      },
      lov: {
        language: 3944
      },
      low: {
        language: 3945
      },
      lox: {
        language: 3946
      },
      loy: {
        language: 3947
      },
      loz: {
        language: 3948
      },
      lpa: {
        language: 3949
      },
      lpe: {
        language: 3950
      },
      lpn: {
        language: 3951
      },
      lpo: {
        language: 3952
      },
      lpx: {
        language: 3953
      },
      lra: {
        language: 3954
      },
      lrc: {
        language: 3955
      },
      lre: {
        language: 3956
      },
      lrg: {
        language: 3957
      },
      lri: {
        language: 3958
      },
      lrk: {
        language: 3959
      },
      lrl: {
        language: 3960
      },
      lrm: {
        language: 3961
      },
      lrn: {
        language: 3962
      },
      lro: {
        language: 3963
      },
      lrr: {
        language: 3964
      },
      lrt: {
        language: 3965
      },
      lrv: {
        language: 3966
      },
      lrz: {
        language: 3967
      },
      lsa: {
        language: 3968
      },
      lsd: {
        language: 3969
      },
      lse: {
        language: 3970
      },
      lsg: {
        language: 3971,
        extlang: 8275
      },
      lsh: {
        language: 3972
      },
      lsi: {
        language: 3973
      },
      lsl: {
        language: 3974,
        extlang: 8276
      },
      lsm: {
        language: 3975
      },
      lsn: {
        language: 3976,
        extlang: 8277
      },
      lso: {
        language: 3977,
        extlang: 8278
      },
      lsp: {
        language: 3978,
        extlang: 8279
      },
      lsr: {
        language: 3979
      },
      lss: {
        language: 3980
      },
      lst: {
        language: 3981,
        extlang: 8280
      },
      lsv: {
        language: 3982,
        extlang: 8281
      },
      lsy: {
        language: 3983,
        extlang: 8282
      },
      ltc: {
        language: 3984
      },
      ltg: {
        language: 3985,
        extlang: 8283
      },
      lth: {
        language: 3986
      },
      lti: {
        language: 3987
      },
      ltn: {
        language: 3988
      },
      lto: {
        language: 3989
      },
      lts: {
        language: 3990
      },
      ltu: {
        language: 3991
      },
      lua: {
        language: 3992
      },
      luc: {
        language: 3993
      },
      lud: {
        language: 3994
      },
      lue: {
        language: 3995
      },
      luf: {
        language: 3996
      },
      lui: {
        language: 3997
      },
      luj: {
        language: 3998
      },
      luk: {
        language: 3999
      },
      lul: {
        language: 4e3
      },
      lum: {
        language: 4001
      },
      lun: {
        language: 4002
      },
      luo: {
        language: 4003
      },
      lup: {
        language: 4004
      },
      luq: {
        language: 4005
      },
      lur: {
        language: 4006
      },
      lus: {
        language: 4007
      },
      lut: {
        language: 4008
      },
      luu: {
        language: 4009
      },
      luv: {
        language: 4010
      },
      luw: {
        language: 4011
      },
      luy: {
        language: 4012
      },
      luz: {
        language: 4013
      },
      lva: {
        language: 4014
      },
      lvi: {
        language: 4015
      },
      lvk: {
        language: 4016
      },
      lvs: {
        language: 4017,
        extlang: 8284
      },
      lvu: {
        language: 4018
      },
      lwa: {
        language: 4019
      },
      lwe: {
        language: 4020
      },
      lwg: {
        language: 4021
      },
      lwh: {
        language: 4022
      },
      lwl: {
        language: 4023
      },
      lwm: {
        language: 4024
      },
      lwo: {
        language: 4025
      },
      lws: {
        language: 4026,
        extlang: 8285
      },
      lwt: {
        language: 4027
      },
      lwu: {
        language: 4028
      },
      lww: {
        language: 4029
      },
      lya: {
        language: 4030
      },
      lyg: {
        language: 4031
      },
      lyn: {
        language: 4032
      },
      lzh: {
        language: 4033,
        extlang: 8286
      },
      lzl: {
        language: 4034
      },
      lzn: {
        language: 4035
      },
      lzz: {
        language: 4036
      },
      maa: {
        language: 4037
      },
      mab: {
        language: 4038
      },
      mad: {
        language: 4039
      },
      mae: {
        language: 4040
      },
      maf: {
        language: 4041
      },
      mag: {
        language: 4042
      },
      mai: {
        language: 4043
      },
      maj: {
        language: 4044
      },
      mak: {
        language: 4045
      },
      mam: {
        language: 4046
      },
      man: {
        language: 4047
      },
      map: {
        language: 4048
      },
      maq: {
        language: 4049
      },
      mas: {
        language: 4050
      },
      mat: {
        language: 4051
      },
      mau: {
        language: 4052
      },
      mav: {
        language: 4053
      },
      maw: {
        language: 4054
      },
      max: {
        language: 4055,
        extlang: 8287
      },
      maz: {
        language: 4056
      },
      mba: {
        language: 4057
      },
      mbb: {
        language: 4058
      },
      mbc: {
        language: 4059
      },
      mbd: {
        language: 4060
      },
      mbe: {
        language: 4061
      },
      mbf: {
        language: 4062
      },
      mbh: {
        language: 4063
      },
      mbi: {
        language: 4064
      },
      mbj: {
        language: 4065
      },
      mbk: {
        language: 4066
      },
      mbl: {
        language: 4067
      },
      mbm: {
        language: 4068
      },
      mbn: {
        language: 4069
      },
      mbo: {
        language: 4070
      },
      mbp: {
        language: 4071
      },
      mbq: {
        language: 4072
      },
      mbr: {
        language: 4073
      },
      mbs: {
        language: 4074
      },
      mbt: {
        language: 4075
      },
      mbu: {
        language: 4076
      },
      mbv: {
        language: 4077
      },
      mbw: {
        language: 4078
      },
      mbx: {
        language: 4079
      },
      mby: {
        language: 4080
      },
      mbz: {
        language: 4081
      },
      mca: {
        language: 4082
      },
      mcb: {
        language: 4083
      },
      mcc: {
        language: 4084
      },
      mcd: {
        language: 4085
      },
      mce: {
        language: 4086
      },
      mcf: {
        language: 4087
      },
      mcg: {
        language: 4088
      },
      mch: {
        language: 4089
      },
      mci: {
        language: 4090
      },
      mcj: {
        language: 4091
      },
      mck: {
        language: 4092
      },
      mcl: {
        language: 4093
      },
      mcm: {
        language: 4094
      },
      mcn: {
        language: 4095
      },
      mco: {
        language: 4096
      },
      mcp: {
        language: 4097
      },
      mcq: {
        language: 4098
      },
      mcr: {
        language: 4099
      },
      mcs: {
        language: 4100
      },
      mct: {
        language: 4101
      },
      mcu: {
        language: 4102
      },
      mcv: {
        language: 4103
      },
      mcw: {
        language: 4104
      },
      mcx: {
        language: 4105
      },
      mcy: {
        language: 4106
      },
      mcz: {
        language: 4107
      },
      mda: {
        language: 4108
      },
      mdb: {
        language: 4109
      },
      mdc: {
        language: 4110
      },
      mdd: {
        language: 4111
      },
      mde: {
        language: 4112
      },
      mdf: {
        language: 4113
      },
      mdg: {
        language: 4114
      },
      mdh: {
        language: 4115
      },
      mdi: {
        language: 4116
      },
      mdj: {
        language: 4117
      },
      mdk: {
        language: 4118
      },
      mdl: {
        language: 4119,
        extlang: 8288
      },
      mdm: {
        language: 4120
      },
      mdn: {
        language: 4121
      },
      mdp: {
        language: 4122
      },
      mdq: {
        language: 4123
      },
      mdr: {
        language: 4124
      },
      mds: {
        language: 4125
      },
      mdt: {
        language: 4126
      },
      mdu: {
        language: 4127
      },
      mdv: {
        language: 4128
      },
      mdw: {
        language: 4129
      },
      mdx: {
        language: 4130
      },
      mdy: {
        language: 4131
      },
      mdz: {
        language: 4132
      },
      mea: {
        language: 4133
      },
      meb: {
        language: 4134
      },
      mec: {
        language: 4135
      },
      med: {
        language: 4136
      },
      mee: {
        language: 4137
      },
      mef: {
        language: 4138
      },
      meg: {
        language: 4139
      },
      meh: {
        language: 4140
      },
      mei: {
        language: 4141
      },
      mej: {
        language: 4142
      },
      mek: {
        language: 4143
      },
      mel: {
        language: 4144
      },
      mem: {
        language: 4145
      },
      men: {
        language: 4146
      },
      meo: {
        language: 4147,
        extlang: 8289
      },
      mep: {
        language: 4148
      },
      meq: {
        language: 4149
      },
      mer: {
        language: 4150
      },
      mes: {
        language: 4151
      },
      met: {
        language: 4152
      },
      meu: {
        language: 4153
      },
      mev: {
        language: 4154
      },
      mew: {
        language: 4155
      },
      mey: {
        language: 4156
      },
      mez: {
        language: 4157
      },
      mfa: {
        language: 4158,
        extlang: 8290
      },
      mfb: {
        language: 4159,
        extlang: 8291
      },
      mfc: {
        language: 4160
      },
      mfd: {
        language: 4161
      },
      mfe: {
        language: 4162
      },
      mff: {
        language: 4163
      },
      mfg: {
        language: 4164
      },
      mfh: {
        language: 4165
      },
      mfi: {
        language: 4166
      },
      mfj: {
        language: 4167
      },
      mfk: {
        language: 4168
      },
      mfl: {
        language: 4169
      },
      mfm: {
        language: 4170
      },
      mfn: {
        language: 4171
      },
      mfo: {
        language: 4172
      },
      mfp: {
        language: 4173
      },
      mfq: {
        language: 4174
      },
      mfr: {
        language: 4175
      },
      mfs: {
        language: 4176,
        extlang: 8292
      },
      mft: {
        language: 4177
      },
      mfu: {
        language: 4178
      },
      mfv: {
        language: 4179
      },
      mfw: {
        language: 4180
      },
      mfx: {
        language: 4181
      },
      mfy: {
        language: 4182
      },
      mfz: {
        language: 4183
      },
      mga: {
        language: 4184
      },
      mgb: {
        language: 4185
      },
      mgc: {
        language: 4186
      },
      mgd: {
        language: 4187
      },
      mge: {
        language: 4188
      },
      mgf: {
        language: 4189
      },
      mgg: {
        language: 4190
      },
      mgh: {
        language: 4191
      },
      mgi: {
        language: 4192
      },
      mgj: {
        language: 4193
      },
      mgk: {
        language: 4194
      },
      mgl: {
        language: 4195
      },
      mgm: {
        language: 4196
      },
      mgn: {
        language: 4197
      },
      mgo: {
        language: 4198
      },
      mgp: {
        language: 4199
      },
      mgq: {
        language: 4200
      },
      mgr: {
        language: 4201
      },
      mgs: {
        language: 4202
      },
      mgt: {
        language: 4203
      },
      mgu: {
        language: 4204
      },
      mgv: {
        language: 4205
      },
      mgw: {
        language: 4206
      },
      mgx: {
        language: 4207
      },
      mgy: {
        language: 4208
      },
      mgz: {
        language: 4209
      },
      mha: {
        language: 4210
      },
      mhb: {
        language: 4211
      },
      mhc: {
        language: 4212
      },
      mhd: {
        language: 4213
      },
      mhe: {
        language: 4214
      },
      mhf: {
        language: 4215
      },
      mhg: {
        language: 4216
      },
      mhh: {
        language: 4217
      },
      mhi: {
        language: 4218
      },
      mhj: {
        language: 4219
      },
      mhk: {
        language: 4220
      },
      mhl: {
        language: 4221
      },
      mhm: {
        language: 4222
      },
      mhn: {
        language: 4223
      },
      mho: {
        language: 4224
      },
      mhp: {
        language: 4225
      },
      mhq: {
        language: 4226
      },
      mhr: {
        language: 4227
      },
      mhs: {
        language: 4228
      },
      mht: {
        language: 4229
      },
      mhu: {
        language: 4230
      },
      mhw: {
        language: 4231
      },
      mhx: {
        language: 4232
      },
      mhy: {
        language: 4233
      },
      mhz: {
        language: 4234
      },
      mia: {
        language: 4235
      },
      mib: {
        language: 4236
      },
      mic: {
        language: 4237
      },
      mid: {
        language: 4238
      },
      mie: {
        language: 4239
      },
      mif: {
        language: 4240
      },
      mig: {
        language: 4241
      },
      mih: {
        language: 4242
      },
      mii: {
        language: 4243
      },
      mij: {
        language: 4244
      },
      mik: {
        language: 4245
      },
      mil: {
        language: 4246
      },
      mim: {
        language: 4247
      },
      min: {
        language: 4248,
        extlang: 8293
      },
      mio: {
        language: 4249
      },
      mip: {
        language: 4250
      },
      miq: {
        language: 4251
      },
      mir: {
        language: 4252
      },
      mis: {
        language: 4253
      },
      mit: {
        language: 4254
      },
      miu: {
        language: 4255
      },
      miw: {
        language: 4256
      },
      mix: {
        language: 4257
      },
      miy: {
        language: 4258
      },
      miz: {
        language: 4259
      },
      mja: {
        language: 4260
      },
      mjb: {
        language: 4261
      },
      mjc: {
        language: 4262
      },
      mjd: {
        language: 4263
      },
      mje: {
        language: 4264
      },
      mjg: {
        language: 4265
      },
      mjh: {
        language: 4266
      },
      mji: {
        language: 4267
      },
      mjj: {
        language: 4268
      },
      mjk: {
        language: 4269
      },
      mjl: {
        language: 4270
      },
      mjm: {
        language: 4271
      },
      mjn: {
        language: 4272
      },
      mjo: {
        language: 4273
      },
      mjp: {
        language: 4274
      },
      mjq: {
        language: 4275
      },
      mjr: {
        language: 4276
      },
      mjs: {
        language: 4277
      },
      mjt: {
        language: 4278
      },
      mju: {
        language: 4279
      },
      mjv: {
        language: 4280
      },
      mjw: {
        language: 4281
      },
      mjx: {
        language: 4282
      },
      mjy: {
        language: 4283
      },
      mjz: {
        language: 4284
      },
      mka: {
        language: 4285
      },
      mkb: {
        language: 4286
      },
      mkc: {
        language: 4287
      },
      mke: {
        language: 4288
      },
      mkf: {
        language: 4289
      },
      mkg: {
        language: 4290
      },
      mkh: {
        language: 4291
      },
      mki: {
        language: 4292
      },
      mkj: {
        language: 4293
      },
      mkk: {
        language: 4294
      },
      mkl: {
        language: 4295
      },
      mkm: {
        language: 4296
      },
      mkn: {
        language: 4297
      },
      mko: {
        language: 4298
      },
      mkp: {
        language: 4299
      },
      mkq: {
        language: 4300
      },
      mkr: {
        language: 4301
      },
      mks: {
        language: 4302
      },
      mkt: {
        language: 4303
      },
      mku: {
        language: 4304
      },
      mkv: {
        language: 4305
      },
      mkw: {
        language: 4306
      },
      mkx: {
        language: 4307
      },
      mky: {
        language: 4308
      },
      mkz: {
        language: 4309
      },
      mla: {
        language: 4310
      },
      mlb: {
        language: 4311
      },
      mlc: {
        language: 4312
      },
      mld: {
        language: 4313
      },
      mle: {
        language: 4314
      },
      mlf: {
        language: 4315
      },
      mlh: {
        language: 4316
      },
      mli: {
        language: 4317
      },
      mlj: {
        language: 4318
      },
      mlk: {
        language: 4319
      },
      mll: {
        language: 4320
      },
      mlm: {
        language: 4321
      },
      mln: {
        language: 4322
      },
      mlo: {
        language: 4323
      },
      mlp: {
        language: 4324
      },
      mlq: {
        language: 4325
      },
      mlr: {
        language: 4326
      },
      mls: {
        language: 4327
      },
      mlu: {
        language: 4328
      },
      mlv: {
        language: 4329
      },
      mlw: {
        language: 4330
      },
      mlx: {
        language: 4331
      },
      mlz: {
        language: 4332
      },
      mma: {
        language: 4333
      },
      mmb: {
        language: 4334
      },
      mmc: {
        language: 4335
      },
      mmd: {
        language: 4336
      },
      mme: {
        language: 4337
      },
      mmf: {
        language: 4338
      },
      mmg: {
        language: 4339
      },
      mmh: {
        language: 4340
      },
      mmi: {
        language: 4341
      },
      mmj: {
        language: 4342
      },
      mmk: {
        language: 4343
      },
      mml: {
        language: 4344
      },
      mmm: {
        language: 4345
      },
      mmn: {
        language: 4346
      },
      mmo: {
        language: 4347
      },
      mmp: {
        language: 4348
      },
      mmq: {
        language: 4349
      },
      mmr: {
        language: 4350
      },
      mmt: {
        language: 4351
      },
      mmu: {
        language: 4352
      },
      mmv: {
        language: 4353
      },
      mmw: {
        language: 4354
      },
      mmx: {
        language: 4355
      },
      mmy: {
        language: 4356
      },
      mmz: {
        language: 4357
      },
      mna: {
        language: 4358
      },
      mnb: {
        language: 4359
      },
      mnc: {
        language: 4360
      },
      mnd: {
        language: 4361
      },
      mne: {
        language: 4362
      },
      mnf: {
        language: 4363
      },
      mng: {
        language: 4364
      },
      mnh: {
        language: 4365
      },
      mni: {
        language: 4366
      },
      mnj: {
        language: 4367
      },
      mnk: {
        language: 4368
      },
      mnl: {
        language: 4369
      },
      mnm: {
        language: 4370
      },
      mnn: {
        language: 4371
      },
      mno: {
        language: 4372
      },
      mnp: {
        language: 4373,
        extlang: 8294
      },
      mnq: {
        language: 4374
      },
      mnr: {
        language: 4375
      },
      mns: {
        language: 4376
      },
      mnt: {
        language: 4377
      },
      mnu: {
        language: 4378
      },
      mnv: {
        language: 4379
      },
      mnw: {
        language: 4380
      },
      mnx: {
        language: 4381
      },
      mny: {
        language: 4382
      },
      mnz: {
        language: 4383
      },
      moa: {
        language: 4384
      },
      moc: {
        language: 4385
      },
      mod: {
        language: 4386
      },
      moe: {
        language: 4387
      },
      mof: {
        language: 4388
      },
      mog: {
        language: 4389
      },
      moh: {
        language: 4390
      },
      moi: {
        language: 4391
      },
      moj: {
        language: 4392
      },
      mok: {
        language: 4393
      },
      mom: {
        language: 4394
      },
      moo: {
        language: 4395
      },
      mop: {
        language: 4396
      },
      moq: {
        language: 4397
      },
      mor: {
        language: 4398
      },
      mos: {
        language: 4399
      },
      mot: {
        language: 4400
      },
      mou: {
        language: 4401
      },
      mov: {
        language: 4402
      },
      mow: {
        language: 4403
      },
      mox: {
        language: 4404
      },
      moy: {
        language: 4405
      },
      moz: {
        language: 4406
      },
      mpa: {
        language: 4407
      },
      mpb: {
        language: 4408
      },
      mpc: {
        language: 4409
      },
      mpd: {
        language: 4410
      },
      mpe: {
        language: 4411
      },
      mpg: {
        language: 4412
      },
      mph: {
        language: 4413
      },
      mpi: {
        language: 4414
      },
      mpj: {
        language: 4415
      },
      mpk: {
        language: 4416
      },
      mpl: {
        language: 4417
      },
      mpm: {
        language: 4418
      },
      mpn: {
        language: 4419
      },
      mpo: {
        language: 4420
      },
      mpp: {
        language: 4421
      },
      mpq: {
        language: 4422
      },
      mpr: {
        language: 4423
      },
      mps: {
        language: 4424
      },
      mpt: {
        language: 4425
      },
      mpu: {
        language: 4426
      },
      mpv: {
        language: 4427
      },
      mpw: {
        language: 4428
      },
      mpx: {
        language: 4429
      },
      mpy: {
        language: 4430
      },
      mpz: {
        language: 4431
      },
      mqa: {
        language: 4432
      },
      mqb: {
        language: 4433
      },
      mqc: {
        language: 4434
      },
      mqe: {
        language: 4435
      },
      mqf: {
        language: 4436
      },
      mqg: {
        language: 4437,
        extlang: 8295
      },
      mqh: {
        language: 4438
      },
      mqi: {
        language: 4439
      },
      mqj: {
        language: 4440
      },
      mqk: {
        language: 4441
      },
      mql: {
        language: 4442
      },
      mqm: {
        language: 4443
      },
      mqn: {
        language: 4444
      },
      mqo: {
        language: 4445
      },
      mqp: {
        language: 4446
      },
      mqq: {
        language: 4447
      },
      mqr: {
        language: 4448
      },
      mqs: {
        language: 4449
      },
      mqt: {
        language: 4450
      },
      mqu: {
        language: 4451
      },
      mqv: {
        language: 4452
      },
      mqw: {
        language: 4453
      },
      mqx: {
        language: 4454
      },
      mqy: {
        language: 4455
      },
      mqz: {
        language: 4456
      },
      mra: {
        language: 4457
      },
      mrb: {
        language: 4458
      },
      mrc: {
        language: 4459
      },
      mrd: {
        language: 4460
      },
      mre: {
        language: 4461,
        extlang: 8296
      },
      mrf: {
        language: 4462
      },
      mrg: {
        language: 4463
      },
      mrh: {
        language: 4464
      },
      mrj: {
        language: 4465
      },
      mrk: {
        language: 4466
      },
      mrl: {
        language: 4467
      },
      mrm: {
        language: 4468
      },
      mrn: {
        language: 4469
      },
      mro: {
        language: 4470
      },
      mrp: {
        language: 4471
      },
      mrq: {
        language: 4472
      },
      mrr: {
        language: 4473
      },
      mrs: {
        language: 4474
      },
      mrt: {
        language: 4475
      },
      mru: {
        language: 4476
      },
      mrv: {
        language: 4477
      },
      mrw: {
        language: 4478
      },
      mrx: {
        language: 4479
      },
      mry: {
        language: 4480
      },
      mrz: {
        language: 4481
      },
      msb: {
        language: 4482
      },
      msc: {
        language: 4483
      },
      msd: {
        language: 4484,
        extlang: 8297
      },
      mse: {
        language: 4485
      },
      msf: {
        language: 4486
      },
      msg: {
        language: 4487
      },
      msh: {
        language: 4488
      },
      msi: {
        language: 4489,
        extlang: 8298
      },
      msj: {
        language: 4490
      },
      msk: {
        language: 4491
      },
      msl: {
        language: 4492
      },
      msm: {
        language: 4493
      },
      msn: {
        language: 4494
      },
      mso: {
        language: 4495
      },
      msp: {
        language: 4496
      },
      msq: {
        language: 4497
      },
      msr: {
        language: 4498,
        extlang: 8299
      },
      mss: {
        language: 4499
      },
      mst: {
        language: 4500
      },
      msu: {
        language: 4501
      },
      msv: {
        language: 4502
      },
      msw: {
        language: 4503
      },
      msx: {
        language: 4504
      },
      msy: {
        language: 4505
      },
      msz: {
        language: 4506
      },
      mta: {
        language: 4507
      },
      mtb: {
        language: 4508
      },
      mtc: {
        language: 4509
      },
      mtd: {
        language: 4510
      },
      mte: {
        language: 4511
      },
      mtf: {
        language: 4512
      },
      mtg: {
        language: 4513
      },
      mth: {
        language: 4514
      },
      mti: {
        language: 4515
      },
      mtj: {
        language: 4516
      },
      mtk: {
        language: 4517
      },
      mtl: {
        language: 4518
      },
      mtm: {
        language: 4519
      },
      mtn: {
        language: 4520
      },
      mto: {
        language: 4521
      },
      mtp: {
        language: 4522
      },
      mtq: {
        language: 4523
      },
      mtr: {
        language: 4524
      },
      mts: {
        language: 4525
      },
      mtt: {
        language: 4526
      },
      mtu: {
        language: 4527
      },
      mtv: {
        language: 4528
      },
      mtw: {
        language: 4529
      },
      mtx: {
        language: 4530
      },
      mty: {
        language: 4531
      },
      mua: {
        language: 4532
      },
      mub: {
        language: 4533
      },
      muc: {
        language: 4534
      },
      mud: {
        language: 4535
      },
      mue: {
        language: 4536
      },
      mug: {
        language: 4537
      },
      muh: {
        language: 4538
      },
      mui: {
        language: 4539,
        extlang: 8300
      },
      muj: {
        language: 4540
      },
      muk: {
        language: 4541
      },
      mul: {
        language: 4542
      },
      mum: {
        language: 4543
      },
      mun: {
        language: 4544
      },
      muo: {
        language: 4545
      },
      mup: {
        language: 4546
      },
      muq: {
        language: 4547
      },
      mur: {
        language: 4548
      },
      mus: {
        language: 4549
      },
      mut: {
        language: 4550
      },
      muu: {
        language: 4551
      },
      muv: {
        language: 4552
      },
      mux: {
        language: 4553
      },
      muy: {
        language: 4554
      },
      muz: {
        language: 4555
      },
      mva: {
        language: 4556
      },
      mvb: {
        language: 4557
      },
      mvd: {
        language: 4558
      },
      mve: {
        language: 4559
      },
      mvf: {
        language: 4560
      },
      mvg: {
        language: 4561
      },
      mvh: {
        language: 4562
      },
      mvi: {
        language: 4563
      },
      mvk: {
        language: 4564
      },
      mvl: {
        language: 4565
      },
      mvm: {
        language: 4566
      },
      mvn: {
        language: 4567
      },
      mvo: {
        language: 4568
      },
      mvp: {
        language: 4569
      },
      mvq: {
        language: 4570
      },
      mvr: {
        language: 4571
      },
      mvs: {
        language: 4572
      },
      mvt: {
        language: 4573
      },
      mvu: {
        language: 4574
      },
      mvv: {
        language: 4575
      },
      mvw: {
        language: 4576
      },
      mvx: {
        language: 4577
      },
      mvy: {
        language: 4578
      },
      mvz: {
        language: 4579
      },
      mwa: {
        language: 4580
      },
      mwb: {
        language: 4581
      },
      mwc: {
        language: 4582
      },
      mwd: {
        language: 4583
      },
      mwe: {
        language: 4584
      },
      mwf: {
        language: 4585
      },
      mwg: {
        language: 4586
      },
      mwh: {
        language: 4587
      },
      mwi: {
        language: 4588
      },
      mwj: {
        language: 4589
      },
      mwk: {
        language: 4590
      },
      mwl: {
        language: 4591
      },
      mwm: {
        language: 4592
      },
      mwn: {
        language: 4593
      },
      mwo: {
        language: 4594
      },
      mwp: {
        language: 4595
      },
      mwq: {
        language: 4596
      },
      mwr: {
        language: 4597
      },
      mws: {
        language: 4598
      },
      mwt: {
        language: 4599
      },
      mwu: {
        language: 4600
      },
      mwv: {
        language: 4601
      },
      mww: {
        language: 4602
      },
      mwx: {
        language: 4603
      },
      mwy: {
        language: 4604
      },
      mwz: {
        language: 4605
      },
      mxa: {
        language: 4606
      },
      mxb: {
        language: 4607
      },
      mxc: {
        language: 4608
      },
      mxd: {
        language: 4609
      },
      mxe: {
        language: 4610
      },
      mxf: {
        language: 4611
      },
      mxg: {
        language: 4612
      },
      mxh: {
        language: 4613
      },
      mxi: {
        language: 4614
      },
      mxj: {
        language: 4615
      },
      mxk: {
        language: 4616
      },
      mxl: {
        language: 4617
      },
      mxm: {
        language: 4618
      },
      mxn: {
        language: 4619
      },
      mxo: {
        language: 4620
      },
      mxp: {
        language: 4621
      },
      mxq: {
        language: 4622
      },
      mxr: {
        language: 4623
      },
      mxs: {
        language: 4624
      },
      mxt: {
        language: 4625
      },
      mxu: {
        language: 4626
      },
      mxv: {
        language: 4627
      },
      mxw: {
        language: 4628
      },
      mxx: {
        language: 4629
      },
      mxy: {
        language: 4630
      },
      mxz: {
        language: 4631
      },
      myb: {
        language: 4632
      },
      myc: {
        language: 4633
      },
      myd: {
        language: 4634
      },
      mye: {
        language: 4635
      },
      myf: {
        language: 4636
      },
      myg: {
        language: 4637
      },
      myh: {
        language: 4638
      },
      myi: {
        language: 4639
      },
      myj: {
        language: 4640
      },
      myk: {
        language: 4641
      },
      myl: {
        language: 4642
      },
      mym: {
        language: 4643
      },
      myn: {
        language: 4644
      },
      myo: {
        language: 4645
      },
      myp: {
        language: 4646
      },
      myq: {
        language: 4647
      },
      myr: {
        language: 4648
      },
      mys: {
        language: 4649
      },
      myt: {
        language: 4650
      },
      myu: {
        language: 4651
      },
      myv: {
        language: 4652
      },
      myw: {
        language: 4653
      },
      myx: {
        language: 4654
      },
      myy: {
        language: 4655
      },
      myz: {
        language: 4656
      },
      mza: {
        language: 4657
      },
      mzb: {
        language: 4658
      },
      mzc: {
        language: 4659,
        extlang: 8301
      },
      mzd: {
        language: 4660
      },
      mze: {
        language: 4661
      },
      mzg: {
        language: 4662,
        extlang: 8302
      },
      mzh: {
        language: 4663
      },
      mzi: {
        language: 4664
      },
      mzj: {
        language: 4665
      },
      mzk: {
        language: 4666
      },
      mzl: {
        language: 4667
      },
      mzm: {
        language: 4668
      },
      mzn: {
        language: 4669
      },
      mzo: {
        language: 4670
      },
      mzp: {
        language: 4671
      },
      mzq: {
        language: 4672
      },
      mzr: {
        language: 4673
      },
      mzs: {
        language: 4674
      },
      mzt: {
        language: 4675
      },
      mzu: {
        language: 4676
      },
      mzv: {
        language: 4677
      },
      mzw: {
        language: 4678
      },
      mzx: {
        language: 4679
      },
      mzy: {
        language: 4680,
        extlang: 8303
      },
      mzz: {
        language: 4681
      },
      naa: {
        language: 4682
      },
      nab: {
        language: 4683
      },
      nac: {
        language: 4684
      },
      nad: {
        language: 4685
      },
      nae: {
        language: 4686
      },
      naf: {
        language: 4687
      },
      nag: {
        language: 4688
      },
      nah: {
        language: 4689
      },
      nai: {
        language: 4690
      },
      naj: {
        language: 4691
      },
      nak: {
        language: 4692
      },
      nal: {
        language: 4693
      },
      nam: {
        language: 4694
      },
      nan: {
        language: 4695,
        extlang: 8304
      },
      nao: {
        language: 4696
      },
      nap: {
        language: 4697
      },
      naq: {
        language: 4698
      },
      nar: {
        language: 4699
      },
      nas: {
        language: 4700
      },
      nat: {
        language: 4701
      },
      naw: {
        language: 4702
      },
      nax: {
        language: 4703
      },
      nay: {
        language: 4704
      },
      naz: {
        language: 4705
      },
      nba: {
        language: 4706
      },
      nbb: {
        language: 4707
      },
      nbc: {
        language: 4708
      },
      nbd: {
        language: 4709
      },
      nbe: {
        language: 4710
      },
      nbf: {
        language: 4711
      },
      nbg: {
        language: 4712
      },
      nbh: {
        language: 4713
      },
      nbi: {
        language: 4714
      },
      nbj: {
        language: 4715
      },
      nbk: {
        language: 4716
      },
      nbm: {
        language: 4717
      },
      nbn: {
        language: 4718
      },
      nbo: {
        language: 4719
      },
      nbp: {
        language: 4720
      },
      nbq: {
        language: 4721
      },
      nbr: {
        language: 4722
      },
      nbs: {
        language: 4723,
        extlang: 8305
      },
      nbt: {
        language: 4724
      },
      nbu: {
        language: 4725
      },
      nbv: {
        language: 4726
      },
      nbw: {
        language: 4727
      },
      nbx: {
        language: 4728
      },
      nby: {
        language: 4729
      },
      nca: {
        language: 4730
      },
      ncb: {
        language: 4731
      },
      ncc: {
        language: 4732
      },
      ncd: {
        language: 4733
      },
      nce: {
        language: 4734
      },
      ncf: {
        language: 4735
      },
      ncg: {
        language: 4736
      },
      nch: {
        language: 4737
      },
      nci: {
        language: 4738
      },
      ncj: {
        language: 4739
      },
      nck: {
        language: 4740
      },
      ncl: {
        language: 4741
      },
      ncm: {
        language: 4742
      },
      ncn: {
        language: 4743
      },
      nco: {
        language: 4744
      },
      ncp: {
        language: 4745
      },
      ncq: {
        language: 4746
      },
      ncr: {
        language: 4747
      },
      ncs: {
        language: 4748,
        extlang: 8306
      },
      nct: {
        language: 4749
      },
      ncu: {
        language: 4750
      },
      ncx: {
        language: 4751
      },
      ncz: {
        language: 4752
      },
      nda: {
        language: 4753
      },
      ndb: {
        language: 4754
      },
      ndc: {
        language: 4755
      },
      ndd: {
        language: 4756
      },
      ndf: {
        language: 4757
      },
      ndg: {
        language: 4758
      },
      ndh: {
        language: 4759
      },
      ndi: {
        language: 4760
      },
      ndj: {
        language: 4761
      },
      ndk: {
        language: 4762
      },
      ndl: {
        language: 4763
      },
      ndm: {
        language: 4764
      },
      ndn: {
        language: 4765
      },
      ndp: {
        language: 4766
      },
      ndq: {
        language: 4767
      },
      ndr: {
        language: 4768
      },
      nds: {
        language: 4769
      },
      ndt: {
        language: 4770
      },
      ndu: {
        language: 4771
      },
      ndv: {
        language: 4772
      },
      ndw: {
        language: 4773
      },
      ndx: {
        language: 4774
      },
      ndy: {
        language: 4775
      },
      ndz: {
        language: 4776
      },
      nea: {
        language: 4777
      },
      neb: {
        language: 4778
      },
      nec: {
        language: 4779
      },
      ned: {
        language: 4780
      },
      nee: {
        language: 4781
      },
      nef: {
        language: 4782
      },
      neg: {
        language: 4783
      },
      neh: {
        language: 4784
      },
      nei: {
        language: 4785
      },
      nej: {
        language: 4786
      },
      nek: {
        language: 4787
      },
      nem: {
        language: 4788
      },
      nen: {
        language: 4789
      },
      neo: {
        language: 4790
      },
      neq: {
        language: 4791
      },
      ner: {
        language: 4792
      },
      nes: {
        language: 4793
      },
      net: {
        language: 4794
      },
      neu: {
        language: 4795
      },
      nev: {
        language: 4796
      },
      new: {
        language: 4797
      },
      nex: {
        language: 4798
      },
      ney: {
        language: 4799
      },
      nez: {
        language: 4800
      },
      nfa: {
        language: 4801
      },
      nfd: {
        language: 4802
      },
      nfl: {
        language: 4803
      },
      nfr: {
        language: 4804
      },
      nfu: {
        language: 4805
      },
      nga: {
        language: 4806
      },
      ngb: {
        language: 4807
      },
      ngc: {
        language: 4808
      },
      ngd: {
        language: 4809
      },
      nge: {
        language: 4810
      },
      ngf: {
        language: 4811
      },
      ngg: {
        language: 4812
      },
      ngh: {
        language: 4813
      },
      ngi: {
        language: 4814
      },
      ngj: {
        language: 4815
      },
      ngk: {
        language: 4816
      },
      ngl: {
        language: 4817
      },
      ngm: {
        language: 4818
      },
      ngn: {
        language: 4819
      },
      ngo: {
        language: 4820
      },
      ngp: {
        language: 4821
      },
      ngq: {
        language: 4822
      },
      ngr: {
        language: 4823
      },
      ngs: {
        language: 4824
      },
      ngt: {
        language: 4825
      },
      ngu: {
        language: 4826
      },
      ngv: {
        language: 4827
      },
      ngw: {
        language: 4828
      },
      ngx: {
        language: 4829
      },
      ngy: {
        language: 4830
      },
      ngz: {
        language: 4831
      },
      nha: {
        language: 4832
      },
      nhb: {
        language: 4833
      },
      nhc: {
        language: 4834
      },
      nhd: {
        language: 4835
      },
      nhe: {
        language: 4836
      },
      nhf: {
        language: 4837
      },
      nhg: {
        language: 4838
      },
      nhh: {
        language: 4839
      },
      nhi: {
        language: 4840
      },
      nhk: {
        language: 4841
      },
      nhm: {
        language: 4842
      },
      nhn: {
        language: 4843
      },
      nho: {
        language: 4844
      },
      nhp: {
        language: 4845
      },
      nhq: {
        language: 4846
      },
      nhr: {
        language: 4847
      },
      nht: {
        language: 4848
      },
      nhu: {
        language: 4849
      },
      nhv: {
        language: 4850
      },
      nhw: {
        language: 4851
      },
      nhx: {
        language: 4852
      },
      nhy: {
        language: 4853
      },
      nhz: {
        language: 4854
      },
      nia: {
        language: 4855
      },
      nib: {
        language: 4856
      },
      nic: {
        language: 4857
      },
      nid: {
        language: 4858
      },
      nie: {
        language: 4859
      },
      nif: {
        language: 4860
      },
      nig: {
        language: 4861
      },
      nih: {
        language: 4862
      },
      nii: {
        language: 4863
      },
      nij: {
        language: 4864
      },
      nik: {
        language: 4865
      },
      nil: {
        language: 4866
      },
      nim: {
        language: 4867
      },
      nin: {
        language: 4868
      },
      nio: {
        language: 4869
      },
      niq: {
        language: 4870
      },
      nir: {
        language: 4871
      },
      nis: {
        language: 4872
      },
      nit: {
        language: 4873
      },
      niu: {
        language: 4874
      },
      niv: {
        language: 4875
      },
      niw: {
        language: 4876
      },
      nix: {
        language: 4877
      },
      niy: {
        language: 4878
      },
      niz: {
        language: 4879
      },
      nja: {
        language: 4880
      },
      njb: {
        language: 4881
      },
      njd: {
        language: 4882
      },
      njh: {
        language: 4883
      },
      nji: {
        language: 4884
      },
      njj: {
        language: 4885
      },
      njl: {
        language: 4886
      },
      njm: {
        language: 4887
      },
      njn: {
        language: 4888
      },
      njo: {
        language: 4889
      },
      njr: {
        language: 4890
      },
      njs: {
        language: 4891
      },
      njt: {
        language: 4892
      },
      nju: {
        language: 4893
      },
      njx: {
        language: 4894
      },
      njy: {
        language: 4895
      },
      njz: {
        language: 4896
      },
      nka: {
        language: 4897
      },
      nkb: {
        language: 4898
      },
      nkc: {
        language: 4899
      },
      nkd: {
        language: 4900
      },
      nke: {
        language: 4901
      },
      nkf: {
        language: 4902
      },
      nkg: {
        language: 4903
      },
      nkh: {
        language: 4904
      },
      nki: {
        language: 4905
      },
      nkj: {
        language: 4906
      },
      nkk: {
        language: 4907
      },
      nkm: {
        language: 4908
      },
      nkn: {
        language: 4909
      },
      nko: {
        language: 4910
      },
      nkp: {
        language: 4911
      },
      nkq: {
        language: 4912
      },
      nkr: {
        language: 4913
      },
      nks: {
        language: 4914
      },
      nkt: {
        language: 4915
      },
      nku: {
        language: 4916
      },
      nkv: {
        language: 4917
      },
      nkw: {
        language: 4918
      },
      nkx: {
        language: 4919
      },
      nkz: {
        language: 4920
      },
      nla: {
        language: 4921
      },
      nlc: {
        language: 4922
      },
      nle: {
        language: 4923
      },
      nlg: {
        language: 4924
      },
      nli: {
        language: 4925
      },
      nlj: {
        language: 4926
      },
      nlk: {
        language: 4927
      },
      nll: {
        language: 4928
      },
      nlm: {
        language: 4929
      },
      nln: {
        language: 4930
      },
      nlo: {
        language: 4931
      },
      nlq: {
        language: 4932
      },
      nlr: {
        language: 4933
      },
      nlu: {
        language: 4934
      },
      nlv: {
        language: 4935
      },
      nlw: {
        language: 4936
      },
      nlx: {
        language: 4937
      },
      nly: {
        language: 4938
      },
      nlz: {
        language: 4939
      },
      nma: {
        language: 4940
      },
      nmb: {
        language: 4941
      },
      nmc: {
        language: 4942
      },
      nmd: {
        language: 4943
      },
      nme: {
        language: 4944
      },
      nmf: {
        language: 4945
      },
      nmg: {
        language: 4946
      },
      nmh: {
        language: 4947
      },
      nmi: {
        language: 4948
      },
      nmj: {
        language: 4949
      },
      nmk: {
        language: 4950
      },
      nml: {
        language: 4951
      },
      nmm: {
        language: 4952
      },
      nmn: {
        language: 4953
      },
      nmo: {
        language: 4954
      },
      nmp: {
        language: 4955
      },
      nmq: {
        language: 4956
      },
      nmr: {
        language: 4957
      },
      nms: {
        language: 4958
      },
      nmt: {
        language: 4959
      },
      nmu: {
        language: 4960
      },
      nmv: {
        language: 4961
      },
      nmw: {
        language: 4962
      },
      nmx: {
        language: 4963
      },
      nmy: {
        language: 4964
      },
      nmz: {
        language: 4965
      },
      nna: {
        language: 4966
      },
      nnb: {
        language: 4967
      },
      nnc: {
        language: 4968
      },
      nnd: {
        language: 4969
      },
      nne: {
        language: 4970
      },
      nnf: {
        language: 4971
      },
      nng: {
        language: 4972
      },
      nnh: {
        language: 4973
      },
      nni: {
        language: 4974
      },
      nnj: {
        language: 4975
      },
      nnk: {
        language: 4976
      },
      nnl: {
        language: 4977
      },
      nnm: {
        language: 4978
      },
      nnn: {
        language: 4979
      },
      nnp: {
        language: 4980
      },
      nnq: {
        language: 4981
      },
      nnr: {
        language: 4982
      },
      nns: {
        language: 4983
      },
      nnt: {
        language: 4984
      },
      nnu: {
        language: 4985
      },
      nnv: {
        language: 4986
      },
      nnw: {
        language: 4987
      },
      nnx: {
        language: 4988
      },
      nny: {
        language: 4989
      },
      nnz: {
        language: 4990
      },
      noa: {
        language: 4991
      },
      noc: {
        language: 4992
      },
      nod: {
        language: 4993
      },
      noe: {
        language: 4994
      },
      nof: {
        language: 4995
      },
      nog: {
        language: 4996
      },
      noh: {
        language: 4997
      },
      noi: {
        language: 4998
      },
      noj: {
        language: 4999
      },
      nok: {
        language: 5e3
      },
      nol: {
        language: 5001
      },
      nom: {
        language: 5002
      },
      non: {
        language: 5003
      },
      noo: {
        language: 5004
      },
      nop: {
        language: 5005
      },
      noq: {
        language: 5006
      },
      nos: {
        language: 5007
      },
      not: {
        language: 5008
      },
      nou: {
        language: 5009
      },
      nov: {
        language: 5010
      },
      now: {
        language: 5011
      },
      noy: {
        language: 5012
      },
      noz: {
        language: 5013
      },
      npa: {
        language: 5014
      },
      npb: {
        language: 5015
      },
      npg: {
        language: 5016
      },
      nph: {
        language: 5017
      },
      npi: {
        language: 5018
      },
      npl: {
        language: 5019
      },
      npn: {
        language: 5020
      },
      npo: {
        language: 5021
      },
      nps: {
        language: 5022
      },
      npu: {
        language: 5023
      },
      npx: {
        language: 5024
      },
      npy: {
        language: 5025
      },
      nqg: {
        language: 5026
      },
      nqk: {
        language: 5027
      },
      nql: {
        language: 5028
      },
      nqm: {
        language: 5029
      },
      nqn: {
        language: 5030
      },
      nqo: {
        language: 5031
      },
      nqq: {
        language: 5032
      },
      nqy: {
        language: 5033
      },
      nra: {
        language: 5034
      },
      nrb: {
        language: 5035
      },
      nrc: {
        language: 5036
      },
      nre: {
        language: 5037
      },
      nrf: {
        language: 5038
      },
      nrg: {
        language: 5039
      },
      nri: {
        language: 5040
      },
      nrk: {
        language: 5041
      },
      nrl: {
        language: 5042
      },
      nrm: {
        language: 5043
      },
      nrn: {
        language: 5044
      },
      nrp: {
        language: 5045
      },
      nrr: {
        language: 5046
      },
      nrt: {
        language: 5047
      },
      nru: {
        language: 5048
      },
      nrx: {
        language: 5049
      },
      nrz: {
        language: 5050
      },
      nsa: {
        language: 5051
      },
      nsc: {
        language: 5052
      },
      nsd: {
        language: 5053
      },
      nse: {
        language: 5054
      },
      nsf: {
        language: 5055
      },
      nsg: {
        language: 5056
      },
      nsh: {
        language: 5057
      },
      nsi: {
        language: 5058,
        extlang: 8307
      },
      nsk: {
        language: 5059
      },
      nsl: {
        language: 5060,
        extlang: 8308
      },
      nsm: {
        language: 5061
      },
      nsn: {
        language: 5062
      },
      nso: {
        language: 5063
      },
      nsp: {
        language: 5064,
        extlang: 8309
      },
      nsq: {
        language: 5065
      },
      nsr: {
        language: 5066,
        extlang: 8310
      },
      nss: {
        language: 5067
      },
      nst: {
        language: 5068
      },
      nsu: {
        language: 5069
      },
      nsv: {
        language: 5070
      },
      nsw: {
        language: 5071
      },
      nsx: {
        language: 5072
      },
      nsy: {
        language: 5073
      },
      nsz: {
        language: 5074
      },
      ntd: {
        language: 5075
      },
      nte: {
        language: 5076
      },
      ntg: {
        language: 5077
      },
      nti: {
        language: 5078
      },
      ntj: {
        language: 5079
      },
      ntk: {
        language: 5080
      },
      ntm: {
        language: 5081
      },
      nto: {
        language: 5082
      },
      ntp: {
        language: 5083
      },
      ntr: {
        language: 5084
      },
      nts: {
        language: 5085
      },
      ntu: {
        language: 5086
      },
      ntw: {
        language: 5087
      },
      ntx: {
        language: 5088
      },
      nty: {
        language: 5089
      },
      ntz: {
        language: 5090
      },
      nua: {
        language: 5091
      },
      nub: {
        language: 5092
      },
      nuc: {
        language: 5093
      },
      nud: {
        language: 5094
      },
      nue: {
        language: 5095
      },
      nuf: {
        language: 5096
      },
      nug: {
        language: 5097
      },
      nuh: {
        language: 5098
      },
      nui: {
        language: 5099
      },
      nuj: {
        language: 5100
      },
      nuk: {
        language: 5101
      },
      nul: {
        language: 5102
      },
      num: {
        language: 5103
      },
      nun: {
        language: 5104
      },
      nuo: {
        language: 5105
      },
      nup: {
        language: 5106
      },
      nuq: {
        language: 5107
      },
      nur: {
        language: 5108
      },
      nus: {
        language: 5109
      },
      nut: {
        language: 5110
      },
      nuu: {
        language: 5111
      },
      nuv: {
        language: 5112
      },
      nuw: {
        language: 5113
      },
      nux: {
        language: 5114
      },
      nuy: {
        language: 5115
      },
      nuz: {
        language: 5116
      },
      nvh: {
        language: 5117
      },
      nvm: {
        language: 5118
      },
      nvo: {
        language: 5119
      },
      nwa: {
        language: 5120
      },
      nwb: {
        language: 5121
      },
      nwc: {
        language: 5122
      },
      nwe: {
        language: 5123
      },
      nwg: {
        language: 5124
      },
      nwi: {
        language: 5125
      },
      nwm: {
        language: 5126
      },
      nwo: {
        language: 5127
      },
      nwr: {
        language: 5128
      },
      nwx: {
        language: 5129
      },
      nwy: {
        language: 5130
      },
      nxa: {
        language: 5131
      },
      nxd: {
        language: 5132
      },
      nxe: {
        language: 5133
      },
      nxg: {
        language: 5134
      },
      nxi: {
        language: 5135
      },
      nxk: {
        language: 5136
      },
      nxl: {
        language: 5137
      },
      nxm: {
        language: 5138
      },
      nxn: {
        language: 5139
      },
      nxo: {
        language: 5140
      },
      nxq: {
        language: 5141
      },
      nxr: {
        language: 5142
      },
      nxu: {
        language: 5143
      },
      nxx: {
        language: 5144
      },
      nyb: {
        language: 5145
      },
      nyc: {
        language: 5146
      },
      nyd: {
        language: 5147
      },
      nye: {
        language: 5148
      },
      nyf: {
        language: 5149
      },
      nyg: {
        language: 5150
      },
      nyh: {
        language: 5151
      },
      nyi: {
        language: 5152
      },
      nyj: {
        language: 5153
      },
      nyk: {
        language: 5154
      },
      nyl: {
        language: 5155
      },
      nym: {
        language: 5156
      },
      nyn: {
        language: 5157
      },
      nyo: {
        language: 5158
      },
      nyp: {
        language: 5159
      },
      nyq: {
        language: 5160
      },
      nyr: {
        language: 5161
      },
      nys: {
        language: 5162
      },
      nyt: {
        language: 5163
      },
      nyu: {
        language: 5164
      },
      nyv: {
        language: 5165
      },
      nyw: {
        language: 5166
      },
      nyx: {
        language: 5167
      },
      nyy: {
        language: 5168
      },
      nza: {
        language: 5169
      },
      nzb: {
        language: 5170
      },
      nzd: {
        language: 5171
      },
      nzi: {
        language: 5172
      },
      nzk: {
        language: 5173
      },
      nzm: {
        language: 5174
      },
      nzs: {
        language: 5175,
        extlang: 8311
      },
      nzu: {
        language: 5176
      },
      nzy: {
        language: 5177
      },
      nzz: {
        language: 5178
      },
      oaa: {
        language: 5179
      },
      oac: {
        language: 5180
      },
      oar: {
        language: 5181
      },
      oav: {
        language: 5182
      },
      obi: {
        language: 5183
      },
      obk: {
        language: 5184
      },
      obl: {
        language: 5185
      },
      obm: {
        language: 5186
      },
      obo: {
        language: 5187
      },
      obr: {
        language: 5188
      },
      obt: {
        language: 5189
      },
      obu: {
        language: 5190
      },
      oca: {
        language: 5191
      },
      och: {
        language: 5192
      },
      oco: {
        language: 5193
      },
      ocu: {
        language: 5194
      },
      oda: {
        language: 5195
      },
      odk: {
        language: 5196
      },
      odt: {
        language: 5197
      },
      odu: {
        language: 5198
      },
      ofo: {
        language: 5199
      },
      ofs: {
        language: 5200
      },
      ofu: {
        language: 5201
      },
      ogb: {
        language: 5202
      },
      ogc: {
        language: 5203
      },
      oge: {
        language: 5204
      },
      ogg: {
        language: 5205
      },
      ogo: {
        language: 5206
      },
      ogu: {
        language: 5207
      },
      oht: {
        language: 5208
      },
      ohu: {
        language: 5209
      },
      oia: {
        language: 5210
      },
      oin: {
        language: 5211
      },
      ojb: {
        language: 5212
      },
      ojc: {
        language: 5213
      },
      ojg: {
        language: 5214
      },
      ojp: {
        language: 5215
      },
      ojs: {
        language: 5216
      },
      ojv: {
        language: 5217
      },
      ojw: {
        language: 5218
      },
      oka: {
        language: 5219
      },
      okb: {
        language: 5220
      },
      okd: {
        language: 5221
      },
      oke: {
        language: 5222
      },
      okg: {
        language: 5223
      },
      okh: {
        language: 5224
      },
      oki: {
        language: 5225
      },
      okj: {
        language: 5226
      },
      okk: {
        language: 5227
      },
      okl: {
        language: 5228,
        extlang: 8312
      },
      okm: {
        language: 5229
      },
      okn: {
        language: 5230
      },
      oko: {
        language: 5231
      },
      okr: {
        language: 5232
      },
      oks: {
        language: 5233
      },
      oku: {
        language: 5234
      },
      okv: {
        language: 5235
      },
      okx: {
        language: 5236
      },
      ola: {
        language: 5237
      },
      old: {
        language: 5238
      },
      ole: {
        language: 5239
      },
      olk: {
        language: 5240
      },
      olm: {
        language: 5241
      },
      olo: {
        language: 5242
      },
      olr: {
        language: 5243
      },
      olt: {
        language: 5244
      },
      olu: {
        language: 5245
      },
      oma: {
        language: 5246
      },
      omb: {
        language: 5247
      },
      omc: {
        language: 5248
      },
      ome: {
        language: 5249
      },
      omg: {
        language: 5250
      },
      omi: {
        language: 5251
      },
      omk: {
        language: 5252
      },
      oml: {
        language: 5253
      },
      omn: {
        language: 5254
      },
      omo: {
        language: 5255
      },
      omp: {
        language: 5256
      },
      omq: {
        language: 5257
      },
      omr: {
        language: 5258
      },
      omt: {
        language: 5259
      },
      omu: {
        language: 5260
      },
      omv: {
        language: 5261
      },
      omw: {
        language: 5262
      },
      omx: {
        language: 5263
      },
      ona: {
        language: 5264
      },
      onb: {
        language: 5265
      },
      one: {
        language: 5266
      },
      ong: {
        language: 5267
      },
      oni: {
        language: 5268
      },
      onj: {
        language: 5269
      },
      onk: {
        language: 5270
      },
      onn: {
        language: 5271
      },
      ono: {
        language: 5272
      },
      onp: {
        language: 5273
      },
      onr: {
        language: 5274
      },
      ons: {
        language: 5275
      },
      ont: {
        language: 5276
      },
      onu: {
        language: 5277
      },
      onw: {
        language: 5278
      },
      onx: {
        language: 5279
      },
      ood: {
        language: 5280
      },
      oog: {
        language: 5281
      },
      oon: {
        language: 5282
      },
      oor: {
        language: 5283
      },
      oos: {
        language: 5284
      },
      opa: {
        language: 5285
      },
      opk: {
        language: 5286
      },
      opm: {
        language: 5287
      },
      opo: {
        language: 5288
      },
      opt: {
        language: 5289
      },
      opy: {
        language: 5290
      },
      ora: {
        language: 5291
      },
      orc: {
        language: 5292
      },
      ore: {
        language: 5293
      },
      org: {
        language: 5294
      },
      orh: {
        language: 5295
      },
      orn: {
        language: 5296,
        extlang: 8313
      },
      oro: {
        language: 5297
      },
      orr: {
        language: 5298
      },
      ors: {
        language: 5299,
        extlang: 8314
      },
      ort: {
        language: 5300
      },
      oru: {
        language: 5301
      },
      orv: {
        language: 5302
      },
      orw: {
        language: 5303
      },
      orx: {
        language: 5304
      },
      ory: {
        language: 5305
      },
      orz: {
        language: 5306
      },
      osa: {
        language: 5307
      },
      osc: {
        language: 5308
      },
      osi: {
        language: 5309
      },
      oso: {
        language: 5310
      },
      osp: {
        language: 5311
      },
      ost: {
        language: 5312
      },
      osu: {
        language: 5313
      },
      osx: {
        language: 5314
      },
      ota: {
        language: 5315
      },
      otb: {
        language: 5316
      },
      otd: {
        language: 5317
      },
      ote: {
        language: 5318
      },
      oti: {
        language: 5319
      },
      otk: {
        language: 5320
      },
      otl: {
        language: 5321
      },
      otm: {
        language: 5322
      },
      otn: {
        language: 5323
      },
      oto: {
        language: 5324
      },
      otq: {
        language: 5325
      },
      otr: {
        language: 5326
      },
      ots: {
        language: 5327
      },
      ott: {
        language: 5328
      },
      otu: {
        language: 5329
      },
      otw: {
        language: 5330
      },
      otx: {
        language: 5331
      },
      oty: {
        language: 5332
      },
      otz: {
        language: 5333
      },
      oua: {
        language: 5334
      },
      oub: {
        language: 5335
      },
      oue: {
        language: 5336
      },
      oui: {
        language: 5337
      },
      oum: {
        language: 5338
      },
      oun: {
        language: 5339
      },
      ovd: {
        language: 5340
      },
      owi: {
        language: 5341
      },
      owl: {
        language: 5342
      },
      oyb: {
        language: 5343
      },
      oyd: {
        language: 5344
      },
      oym: {
        language: 5345
      },
      oyy: {
        language: 5346
      },
      ozm: {
        language: 5347
      },
      paa: {
        language: 5348
      },
      pab: {
        language: 5349
      },
      pac: {
        language: 5350
      },
      pad: {
        language: 5351
      },
      pae: {
        language: 5352
      },
      paf: {
        language: 5353
      },
      pag: {
        language: 5354
      },
      pah: {
        language: 5355
      },
      pai: {
        language: 5356
      },
      pak: {
        language: 5357
      },
      pal: {
        language: 5358
      },
      pam: {
        language: 5359
      },
      pao: {
        language: 5360
      },
      pap: {
        language: 5361
      },
      paq: {
        language: 5362
      },
      par: {
        language: 5363
      },
      pas: {
        language: 5364
      },
      pat: {
        language: 5365
      },
      pau: {
        language: 5366
      },
      pav: {
        language: 5367
      },
      paw: {
        language: 5368
      },
      pax: {
        language: 5369
      },
      pay: {
        language: 5370
      },
      paz: {
        language: 5371
      },
      pbb: {
        language: 5372
      },
      pbc: {
        language: 5373
      },
      pbe: {
        language: 5374
      },
      pbf: {
        language: 5375
      },
      pbg: {
        language: 5376
      },
      pbh: {
        language: 5377
      },
      pbi: {
        language: 5378
      },
      pbl: {
        language: 5379
      },
      pbm: {
        language: 5380
      },
      pbn: {
        language: 5381
      },
      pbo: {
        language: 5382
      },
      pbp: {
        language: 5383
      },
      pbr: {
        language: 5384
      },
      pbs: {
        language: 5385
      },
      pbt: {
        language: 5386
      },
      pbu: {
        language: 5387
      },
      pbv: {
        language: 5388
      },
      pby: {
        language: 5389
      },
      pbz: {
        language: 5390
      },
      pca: {
        language: 5391
      },
      pcb: {
        language: 5392
      },
      pcc: {
        language: 5393
      },
      pcd: {
        language: 5394
      },
      pce: {
        language: 5395
      },
      pcf: {
        language: 5396
      },
      pcg: {
        language: 5397
      },
      pch: {
        language: 5398
      },
      pci: {
        language: 5399
      },
      pcj: {
        language: 5400
      },
      pck: {
        language: 5401
      },
      pcl: {
        language: 5402
      },
      pcm: {
        language: 5403
      },
      pcn: {
        language: 5404
      },
      pcp: {
        language: 5405
      },
      pcr: {
        language: 5406
      },
      pcw: {
        language: 5407
      },
      pda: {
        language: 5408
      },
      pdc: {
        language: 5409
      },
      pdi: {
        language: 5410
      },
      pdn: {
        language: 5411
      },
      pdo: {
        language: 5412
      },
      pdt: {
        language: 5413
      },
      pdu: {
        language: 5414
      },
      pea: {
        language: 5415
      },
      peb: {
        language: 5416
      },
      ped: {
        language: 5417
      },
      pee: {
        language: 5418
      },
      pef: {
        language: 5419
      },
      peg: {
        language: 5420
      },
      peh: {
        language: 5421
      },
      pei: {
        language: 5422
      },
      pej: {
        language: 5423
      },
      pek: {
        language: 5424
      },
      pel: {
        language: 5425,
        extlang: 8315
      },
      pem: {
        language: 5426
      },
      peo: {
        language: 5427
      },
      pep: {
        language: 5428
      },
      peq: {
        language: 5429
      },
      pes: {
        language: 5430
      },
      pev: {
        language: 5431
      },
      pex: {
        language: 5432
      },
      pey: {
        language: 5433
      },
      pez: {
        language: 5434
      },
      pfa: {
        language: 5435
      },
      pfe: {
        language: 5436
      },
      pfl: {
        language: 5437
      },
      pga: {
        language: 5438,
        extlang: 8316
      },
      pgd: {
        language: 5439
      },
      pgg: {
        language: 5440
      },
      pgi: {
        language: 5441
      },
      pgk: {
        language: 5442
      },
      pgl: {
        language: 5443
      },
      pgn: {
        language: 5444
      },
      pgs: {
        language: 5445
      },
      pgu: {
        language: 5446
      },
      pgy: {
        language: 5447
      },
      pgz: {
        language: 5448,
        extlang: 8317
      },
      pha: {
        language: 5449
      },
      phd: {
        language: 5450
      },
      phg: {
        language: 5451
      },
      phh: {
        language: 5452
      },
      phi: {
        language: 5453
      },
      phk: {
        language: 5454
      },
      phl: {
        language: 5455
      },
      phm: {
        language: 5456
      },
      phn: {
        language: 5457
      },
      pho: {
        language: 5458
      },
      phq: {
        language: 5459
      },
      phr: {
        language: 5460
      },
      pht: {
        language: 5461
      },
      phu: {
        language: 5462
      },
      phv: {
        language: 5463
      },
      phw: {
        language: 5464
      },
      pia: {
        language: 5465
      },
      pib: {
        language: 5466
      },
      pic: {
        language: 5467
      },
      pid: {
        language: 5468
      },
      pie: {
        language: 5469
      },
      pif: {
        language: 5470
      },
      pig: {
        language: 5471
      },
      pih: {
        language: 5472
      },
      pii: {
        language: 5473
      },
      pij: {
        language: 5474
      },
      pil: {
        language: 5475
      },
      pim: {
        language: 5476
      },
      pin: {
        language: 5477
      },
      pio: {
        language: 5478
      },
      pip: {
        language: 5479
      },
      pir: {
        language: 5480
      },
      pis: {
        language: 5481
      },
      pit: {
        language: 5482
      },
      piu: {
        language: 5483
      },
      piv: {
        language: 5484
      },
      piw: {
        language: 5485
      },
      pix: {
        language: 5486
      },
      piy: {
        language: 5487
      },
      piz: {
        language: 5488
      },
      pjt: {
        language: 5489
      },
      pka: {
        language: 5490
      },
      pkb: {
        language: 5491
      },
      pkc: {
        language: 5492
      },
      pkg: {
        language: 5493
      },
      pkh: {
        language: 5494
      },
      pkn: {
        language: 5495
      },
      pko: {
        language: 5496
      },
      pkp: {
        language: 5497
      },
      pkr: {
        language: 5498
      },
      pks: {
        language: 5499,
        extlang: 8318
      },
      pkt: {
        language: 5500
      },
      pku: {
        language: 5501
      },
      pla: {
        language: 5502
      },
      plb: {
        language: 5503
      },
      plc: {
        language: 5504
      },
      pld: {
        language: 5505
      },
      ple: {
        language: 5506
      },
      plf: {
        language: 5507
      },
      plg: {
        language: 5508
      },
      plh: {
        language: 5509
      },
      plj: {
        language: 5510
      },
      plk: {
        language: 5511
      },
      pll: {
        language: 5512
      },
      pln: {
        language: 5513
      },
      plo: {
        language: 5514
      },
      plp: {
        language: 5515
      },
      plq: {
        language: 5516
      },
      plr: {
        language: 5517
      },
      pls: {
        language: 5518
      },
      plt: {
        language: 5519
      },
      plu: {
        language: 5520
      },
      plv: {
        language: 5521
      },
      plw: {
        language: 5522
      },
      ply: {
        language: 5523
      },
      plz: {
        language: 5524
      },
      pma: {
        language: 5525
      },
      pmb: {
        language: 5526
      },
      pmc: {
        language: 5527
      },
      pmd: {
        language: 5528
      },
      pme: {
        language: 5529
      },
      pmf: {
        language: 5530
      },
      pmh: {
        language: 5531
      },
      pmi: {
        language: 5532
      },
      pmj: {
        language: 5533
      },
      pmk: {
        language: 5534
      },
      pml: {
        language: 5535
      },
      pmm: {
        language: 5536
      },
      pmn: {
        language: 5537
      },
      pmo: {
        language: 5538
      },
      pmq: {
        language: 5539
      },
      pmr: {
        language: 5540
      },
      pms: {
        language: 5541
      },
      pmt: {
        language: 5542
      },
      pmu: {
        language: 5543
      },
      pmw: {
        language: 5544
      },
      pmx: {
        language: 5545
      },
      pmy: {
        language: 5546
      },
      pmz: {
        language: 5547
      },
      pna: {
        language: 5548
      },
      pnb: {
        language: 5549
      },
      pnc: {
        language: 5550
      },
      pnd: {
        language: 5551
      },
      pne: {
        language: 5552
      },
      png: {
        language: 5553
      },
      pnh: {
        language: 5554
      },
      pni: {
        language: 5555
      },
      pnj: {
        language: 5556
      },
      pnk: {
        language: 5557
      },
      pnl: {
        language: 5558
      },
      pnm: {
        language: 5559
      },
      pnn: {
        language: 5560
      },
      pno: {
        language: 5561
      },
      pnp: {
        language: 5562
      },
      pnq: {
        language: 5563
      },
      pnr: {
        language: 5564
      },
      pns: {
        language: 5565
      },
      pnt: {
        language: 5566
      },
      pnu: {
        language: 5567
      },
      pnv: {
        language: 5568
      },
      pnw: {
        language: 5569
      },
      pnx: {
        language: 5570
      },
      pny: {
        language: 5571
      },
      pnz: {
        language: 5572
      },
      poc: {
        language: 5573
      },
      pod: {
        language: 5574
      },
      poe: {
        language: 5575
      },
      pof: {
        language: 5576
      },
      pog: {
        language: 5577
      },
      poh: {
        language: 5578
      },
      poi: {
        language: 5579
      },
      pok: {
        language: 5580
      },
      pom: {
        language: 5581
      },
      pon: {
        language: 5582
      },
      poo: {
        language: 5583
      },
      pop: {
        language: 5584
      },
      poq: {
        language: 5585
      },
      pos: {
        language: 5586
      },
      pot: {
        language: 5587
      },
      pov: {
        language: 5588
      },
      pow: {
        language: 5589
      },
      pox: {
        language: 5590
      },
      poy: {
        language: 5591
      },
      poz: {
        language: 5592
      },
      ppa: {
        language: 5593
      },
      ppe: {
        language: 5594
      },
      ppi: {
        language: 5595
      },
      ppk: {
        language: 5596
      },
      ppl: {
        language: 5597
      },
      ppm: {
        language: 5598
      },
      ppn: {
        language: 5599
      },
      ppo: {
        language: 5600
      },
      ppp: {
        language: 5601
      },
      ppq: {
        language: 5602
      },
      ppr: {
        language: 5603
      },
      pps: {
        language: 5604
      },
      ppt: {
        language: 5605
      },
      ppu: {
        language: 5606
      },
      pqa: {
        language: 5607
      },
      pqe: {
        language: 5608
      },
      pqm: {
        language: 5609
      },
      pqw: {
        language: 5610
      },
      pra: {
        language: 5611
      },
      prb: {
        language: 5612
      },
      prc: {
        language: 5613
      },
      prd: {
        language: 5614
      },
      pre: {
        language: 5615
      },
      prf: {
        language: 5616
      },
      prg: {
        language: 5617
      },
      prh: {
        language: 5618
      },
      pri: {
        language: 5619
      },
      prk: {
        language: 5620
      },
      prl: {
        language: 5621,
        extlang: 8319
      },
      prm: {
        language: 5622
      },
      prn: {
        language: 5623
      },
      pro: {
        language: 5624
      },
      prp: {
        language: 5625
      },
      prq: {
        language: 5626
      },
      prr: {
        language: 5627
      },
      prs: {
        language: 5628
      },
      prt: {
        language: 5629
      },
      pru: {
        language: 5630
      },
      prw: {
        language: 5631
      },
      prx: {
        language: 5632
      },
      pry: {
        language: 5633
      },
      prz: {
        language: 5634,
        extlang: 8320
      },
      psa: {
        language: 5635
      },
      psc: {
        language: 5636,
        extlang: 8321
      },
      psd: {
        language: 5637,
        extlang: 8322
      },
      pse: {
        language: 5638,
        extlang: 8323
      },
      psg: {
        language: 5639,
        extlang: 8324
      },
      psh: {
        language: 5640
      },
      psi: {
        language: 5641
      },
      psl: {
        language: 5642,
        extlang: 8325
      },
      psm: {
        language: 5643
      },
      psn: {
        language: 5644
      },
      pso: {
        language: 5645,
        extlang: 8326
      },
      psp: {
        language: 5646,
        extlang: 8327
      },
      psq: {
        language: 5647
      },
      psr: {
        language: 5648,
        extlang: 8328
      },
      pss: {
        language: 5649
      },
      pst: {
        language: 5650
      },
      psu: {
        language: 5651
      },
      psw: {
        language: 5652
      },
      psy: {
        language: 5653
      },
      pta: {
        language: 5654
      },
      pth: {
        language: 5655
      },
      pti: {
        language: 5656
      },
      ptn: {
        language: 5657
      },
      pto: {
        language: 5658
      },
      ptp: {
        language: 5659
      },
      ptq: {
        language: 5660
      },
      ptr: {
        language: 5661
      },
      ptt: {
        language: 5662
      },
      ptu: {
        language: 5663
      },
      ptv: {
        language: 5664
      },
      ptw: {
        language: 5665
      },
      pty: {
        language: 5666
      },
      pua: {
        language: 5667
      },
      pub: {
        language: 5668
      },
      puc: {
        language: 5669
      },
      pud: {
        language: 5670
      },
      pue: {
        language: 5671
      },
      puf: {
        language: 5672
      },
      pug: {
        language: 5673
      },
      pui: {
        language: 5674
      },
      puj: {
        language: 5675
      },
      puk: {
        language: 5676
      },
      pum: {
        language: 5677
      },
      puo: {
        language: 5678
      },
      pup: {
        language: 5679
      },
      puq: {
        language: 5680
      },
      pur: {
        language: 5681
      },
      put: {
        language: 5682
      },
      puu: {
        language: 5683
      },
      puw: {
        language: 5684
      },
      pux: {
        language: 5685
      },
      puy: {
        language: 5686
      },
      puz: {
        language: 5687
      },
      pwa: {
        language: 5688
      },
      pwb: {
        language: 5689
      },
      pwg: {
        language: 5690
      },
      pwi: {
        language: 5691
      },
      pwm: {
        language: 5692
      },
      pwn: {
        language: 5693
      },
      pwo: {
        language: 5694
      },
      pwr: {
        language: 5695
      },
      pww: {
        language: 5696
      },
      pxm: {
        language: 5697
      },
      pye: {
        language: 5698
      },
      pym: {
        language: 5699
      },
      pyn: {
        language: 5700
      },
      pys: {
        language: 5701,
        extlang: 8329
      },
      pyu: {
        language: 5702
      },
      pyx: {
        language: 5703
      },
      pyy: {
        language: 5704
      },
      pzn: {
        language: 5705
      },
      "qaa..qtz": {
        language: 5706
      },
      qua: {
        language: 5707
      },
      qub: {
        language: 5708
      },
      quc: {
        language: 5709
      },
      qud: {
        language: 5710
      },
      quf: {
        language: 5711
      },
      qug: {
        language: 5712
      },
      quh: {
        language: 5713
      },
      qui: {
        language: 5714
      },
      quk: {
        language: 5715
      },
      qul: {
        language: 5716
      },
      qum: {
        language: 5717
      },
      qun: {
        language: 5718
      },
      qup: {
        language: 5719
      },
      quq: {
        language: 5720
      },
      qur: {
        language: 5721
      },
      qus: {
        language: 5722
      },
      quv: {
        language: 5723
      },
      quw: {
        language: 5724
      },
      qux: {
        language: 5725
      },
      quy: {
        language: 5726
      },
      quz: {
        language: 5727
      },
      qva: {
        language: 5728
      },
      qvc: {
        language: 5729
      },
      qve: {
        language: 5730
      },
      qvh: {
        language: 5731
      },
      qvi: {
        language: 5732
      },
      qvj: {
        language: 5733
      },
      qvl: {
        language: 5734
      },
      qvm: {
        language: 5735
      },
      qvn: {
        language: 5736
      },
      qvo: {
        language: 5737
      },
      qvp: {
        language: 5738
      },
      qvs: {
        language: 5739
      },
      qvw: {
        language: 5740
      },
      qvy: {
        language: 5741
      },
      qvz: {
        language: 5742
      },
      qwa: {
        language: 5743
      },
      qwc: {
        language: 5744
      },
      qwe: {
        language: 5745
      },
      qwh: {
        language: 5746
      },
      qwm: {
        language: 5747
      },
      qws: {
        language: 5748
      },
      qwt: {
        language: 5749
      },
      qxa: {
        language: 5750
      },
      qxc: {
        language: 5751
      },
      qxh: {
        language: 5752
      },
      qxl: {
        language: 5753
      },
      qxn: {
        language: 5754
      },
      qxo: {
        language: 5755
      },
      qxp: {
        language: 5756
      },
      qxq: {
        language: 5757
      },
      qxr: {
        language: 5758
      },
      qxs: {
        language: 5759
      },
      qxt: {
        language: 5760
      },
      qxu: {
        language: 5761
      },
      qxw: {
        language: 5762
      },
      qya: {
        language: 5763
      },
      qyp: {
        language: 5764
      },
      raa: {
        language: 5765
      },
      rab: {
        language: 5766
      },
      rac: {
        language: 5767
      },
      rad: {
        language: 5768
      },
      raf: {
        language: 5769
      },
      rag: {
        language: 5770
      },
      rah: {
        language: 5771
      },
      rai: {
        language: 5772
      },
      raj: {
        language: 5773
      },
      rak: {
        language: 5774
      },
      ral: {
        language: 5775
      },
      ram: {
        language: 5776
      },
      ran: {
        language: 5777
      },
      rao: {
        language: 5778
      },
      rap: {
        language: 5779
      },
      raq: {
        language: 5780
      },
      rar: {
        language: 5781
      },
      ras: {
        language: 5782
      },
      rat: {
        language: 5783
      },
      rau: {
        language: 5784
      },
      rav: {
        language: 5785
      },
      raw: {
        language: 5786
      },
      rax: {
        language: 5787
      },
      ray: {
        language: 5788
      },
      raz: {
        language: 5789
      },
      rbb: {
        language: 5790
      },
      rbk: {
        language: 5791
      },
      rbl: {
        language: 5792
      },
      rbp: {
        language: 5793
      },
      rcf: {
        language: 5794
      },
      rdb: {
        language: 5795
      },
      rea: {
        language: 5796
      },
      reb: {
        language: 5797
      },
      ree: {
        language: 5798
      },
      reg: {
        language: 5799
      },
      rei: {
        language: 5800
      },
      rej: {
        language: 5801
      },
      rel: {
        language: 5802
      },
      rem: {
        language: 5803
      },
      ren: {
        language: 5804
      },
      rer: {
        language: 5805
      },
      res: {
        language: 5806
      },
      ret: {
        language: 5807
      },
      rey: {
        language: 5808
      },
      rga: {
        language: 5809
      },
      rge: {
        language: 5810
      },
      rgk: {
        language: 5811
      },
      rgn: {
        language: 5812
      },
      rgr: {
        language: 5813
      },
      rgs: {
        language: 5814
      },
      rgu: {
        language: 5815
      },
      rhg: {
        language: 5816
      },
      rhp: {
        language: 5817
      },
      ria: {
        language: 5818
      },
      rie: {
        language: 5819
      },
      rif: {
        language: 5820
      },
      ril: {
        language: 5821
      },
      rim: {
        language: 5822
      },
      rin: {
        language: 5823
      },
      rir: {
        language: 5824
      },
      rit: {
        language: 5825
      },
      riu: {
        language: 5826
      },
      rjg: {
        language: 5827
      },
      rji: {
        language: 5828
      },
      rjs: {
        language: 5829
      },
      rka: {
        language: 5830
      },
      rkb: {
        language: 5831
      },
      rkh: {
        language: 5832
      },
      rki: {
        language: 5833
      },
      rkm: {
        language: 5834
      },
      rkt: {
        language: 5835
      },
      rkw: {
        language: 5836
      },
      rma: {
        language: 5837
      },
      rmb: {
        language: 5838
      },
      rmc: {
        language: 5839
      },
      rmd: {
        language: 5840
      },
      rme: {
        language: 5841
      },
      rmf: {
        language: 5842
      },
      rmg: {
        language: 5843
      },
      rmh: {
        language: 5844
      },
      rmi: {
        language: 5845
      },
      rmk: {
        language: 5846
      },
      rml: {
        language: 5847
      },
      rmm: {
        language: 5848
      },
      rmn: {
        language: 5849
      },
      rmo: {
        language: 5850
      },
      rmp: {
        language: 5851
      },
      rmq: {
        language: 5852
      },
      rmr: {
        language: 5853
      },
      rms: {
        language: 5854,
        extlang: 8330
      },
      rmt: {
        language: 5855
      },
      rmu: {
        language: 5856
      },
      rmv: {
        language: 5857
      },
      rmw: {
        language: 5858
      },
      rmx: {
        language: 5859
      },
      rmy: {
        language: 5860
      },
      rmz: {
        language: 5861
      },
      rna: {
        language: 5862
      },
      rnd: {
        language: 5863
      },
      rng: {
        language: 5864
      },
      rnl: {
        language: 5865
      },
      rnn: {
        language: 5866
      },
      rnp: {
        language: 5867
      },
      rnr: {
        language: 5868
      },
      rnw: {
        language: 5869
      },
      roa: {
        language: 5870
      },
      rob: {
        language: 5871
      },
      roc: {
        language: 5872
      },
      rod: {
        language: 5873
      },
      roe: {
        language: 5874
      },
      rof: {
        language: 5875
      },
      rog: {
        language: 5876
      },
      rol: {
        language: 5877
      },
      rom: {
        language: 5878
      },
      roo: {
        language: 5879
      },
      rop: {
        language: 5880
      },
      ror: {
        language: 5881
      },
      rou: {
        language: 5882
      },
      row: {
        language: 5883
      },
      rpn: {
        language: 5884
      },
      rpt: {
        language: 5885
      },
      rri: {
        language: 5886
      },
      rro: {
        language: 5887
      },
      rrt: {
        language: 5888
      },
      rsb: {
        language: 5889
      },
      rsi: {
        language: 5890,
        extlang: 8331
      },
      rsl: {
        language: 5891,
        extlang: 8332
      },
      rsm: {
        language: 5892,
        extlang: 8333
      },
      rtc: {
        language: 5893
      },
      rth: {
        language: 5894
      },
      rtm: {
        language: 5895
      },
      rts: {
        language: 5896
      },
      rtw: {
        language: 5897
      },
      rub: {
        language: 5898
      },
      ruc: {
        language: 5899
      },
      rue: {
        language: 5900
      },
      ruf: {
        language: 5901
      },
      rug: {
        language: 5902
      },
      ruh: {
        language: 5903
      },
      rui: {
        language: 5904
      },
      ruk: {
        language: 5905
      },
      ruo: {
        language: 5906
      },
      rup: {
        language: 5907
      },
      ruq: {
        language: 5908
      },
      rut: {
        language: 5909
      },
      ruu: {
        language: 5910
      },
      ruy: {
        language: 5911
      },
      ruz: {
        language: 5912
      },
      rwa: {
        language: 5913
      },
      rwk: {
        language: 5914
      },
      rwm: {
        language: 5915
      },
      rwo: {
        language: 5916
      },
      rwr: {
        language: 5917
      },
      rxd: {
        language: 5918
      },
      rxw: {
        language: 5919
      },
      ryn: {
        language: 5920
      },
      rys: {
        language: 5921
      },
      ryu: {
        language: 5922
      },
      rzh: {
        language: 5923
      },
      saa: {
        language: 5924
      },
      sab: {
        language: 5925
      },
      sac: {
        language: 5926
      },
      sad: {
        language: 5927
      },
      sae: {
        language: 5928
      },
      saf: {
        language: 5929
      },
      sah: {
        language: 5930
      },
      sai: {
        language: 5931
      },
      saj: {
        language: 5932
      },
      sak: {
        language: 5933
      },
      sal: {
        language: 5934
      },
      sam: {
        language: 5935
      },
      sao: {
        language: 5936
      },
      sap: {
        language: 5937
      },
      saq: {
        language: 5938
      },
      sar: {
        language: 5939
      },
      sas: {
        language: 5940
      },
      sat: {
        language: 5941
      },
      sau: {
        language: 5942
      },
      sav: {
        language: 5943
      },
      saw: {
        language: 5944
      },
      sax: {
        language: 5945
      },
      say: {
        language: 5946
      },
      saz: {
        language: 5947
      },
      sba: {
        language: 5948
      },
      sbb: {
        language: 5949
      },
      sbc: {
        language: 5950
      },
      sbd: {
        language: 5951
      },
      sbe: {
        language: 5952
      },
      sbf: {
        language: 5953
      },
      sbg: {
        language: 5954
      },
      sbh: {
        language: 5955
      },
      sbi: {
        language: 5956
      },
      sbj: {
        language: 5957
      },
      sbk: {
        language: 5958
      },
      sbl: {
        language: 5959
      },
      sbm: {
        language: 5960
      },
      sbn: {
        language: 5961
      },
      sbo: {
        language: 5962
      },
      sbp: {
        language: 5963
      },
      sbq: {
        language: 5964
      },
      sbr: {
        language: 5965
      },
      sbs: {
        language: 5966
      },
      sbt: {
        language: 5967
      },
      sbu: {
        language: 5968
      },
      sbv: {
        language: 5969
      },
      sbw: {
        language: 5970
      },
      sbx: {
        language: 5971
      },
      sby: {
        language: 5972
      },
      sbz: {
        language: 5973
      },
      sca: {
        language: 5974
      },
      scb: {
        language: 5975
      },
      sce: {
        language: 5976
      },
      scf: {
        language: 5977
      },
      scg: {
        language: 5978
      },
      sch: {
        language: 5979
      },
      sci: {
        language: 5980
      },
      sck: {
        language: 5981
      },
      scl: {
        language: 5982
      },
      scn: {
        language: 5983
      },
      sco: {
        language: 5984
      },
      scp: {
        language: 5985
      },
      scq: {
        language: 5986
      },
      scs: {
        language: 5987
      },
      sct: {
        language: 5988
      },
      scu: {
        language: 5989
      },
      scv: {
        language: 5990
      },
      scw: {
        language: 5991
      },
      scx: {
        language: 5992
      },
      sda: {
        language: 5993
      },
      sdb: {
        language: 5994
      },
      sdc: {
        language: 5995
      },
      sde: {
        language: 5996
      },
      sdf: {
        language: 5997
      },
      sdg: {
        language: 5998
      },
      sdh: {
        language: 5999
      },
      sdj: {
        language: 6e3
      },
      sdk: {
        language: 6001
      },
      sdl: {
        language: 6002,
        extlang: 8334
      },
      sdm: {
        language: 6003
      },
      sdn: {
        language: 6004
      },
      sdo: {
        language: 6005
      },
      sdp: {
        language: 6006
      },
      sdr: {
        language: 6007
      },
      sds: {
        language: 6008
      },
      sdt: {
        language: 6009
      },
      sdu: {
        language: 6010
      },
      sdv: {
        language: 6011
      },
      sdx: {
        language: 6012
      },
      sdz: {
        language: 6013
      },
      sea: {
        language: 6014
      },
      seb: {
        language: 6015
      },
      sec: {
        language: 6016
      },
      sed: {
        language: 6017
      },
      see: {
        language: 6018
      },
      sef: {
        language: 6019
      },
      seg: {
        language: 6020
      },
      seh: {
        language: 6021
      },
      sei: {
        language: 6022
      },
      sej: {
        language: 6023
      },
      sek: {
        language: 6024
      },
      sel: {
        language: 6025
      },
      sem: {
        language: 6026
      },
      sen: {
        language: 6027
      },
      seo: {
        language: 6028
      },
      sep: {
        language: 6029
      },
      seq: {
        language: 6030
      },
      ser: {
        language: 6031
      },
      ses: {
        language: 6032
      },
      set: {
        language: 6033
      },
      seu: {
        language: 6034
      },
      sev: {
        language: 6035
      },
      sew: {
        language: 6036
      },
      sey: {
        language: 6037
      },
      sez: {
        language: 6038
      },
      sfb: {
        language: 6039,
        extlang: 8335
      },
      sfe: {
        language: 6040
      },
      sfm: {
        language: 6041
      },
      sfs: {
        language: 6042,
        extlang: 8336
      },
      sfw: {
        language: 6043
      },
      sga: {
        language: 6044
      },
      sgb: {
        language: 6045
      },
      sgc: {
        language: 6046
      },
      sgd: {
        language: 6047
      },
      sge: {
        language: 6048
      },
      sgg: {
        language: 6049,
        extlang: 8337
      },
      sgh: {
        language: 6050
      },
      sgi: {
        language: 6051
      },
      sgj: {
        language: 6052
      },
      sgk: {
        language: 6053
      },
      sgl: {
        language: 6054
      },
      sgm: {
        language: 6055
      },
      sgn: {
        language: 6056
      },
      sgo: {
        language: 6057
      },
      sgp: {
        language: 6058
      },
      sgr: {
        language: 6059
      },
      sgs: {
        language: 6060
      },
      sgt: {
        language: 6061
      },
      sgu: {
        language: 6062
      },
      sgw: {
        language: 6063
      },
      sgx: {
        language: 6064,
        extlang: 8338
      },
      sgy: {
        language: 6065
      },
      sgz: {
        language: 6066
      },
      sha: {
        language: 6067
      },
      shb: {
        language: 6068
      },
      shc: {
        language: 6069
      },
      shd: {
        language: 6070
      },
      she: {
        language: 6071
      },
      shg: {
        language: 6072
      },
      shh: {
        language: 6073
      },
      shi: {
        language: 6074
      },
      shj: {
        language: 6075
      },
      shk: {
        language: 6076
      },
      shl: {
        language: 6077
      },
      shm: {
        language: 6078
      },
      shn: {
        language: 6079
      },
      sho: {
        language: 6080
      },
      shp: {
        language: 6081
      },
      shq: {
        language: 6082
      },
      shr: {
        language: 6083
      },
      shs: {
        language: 6084
      },
      sht: {
        language: 6085
      },
      shu: {
        language: 6086,
        extlang: 8339
      },
      shv: {
        language: 6087
      },
      shw: {
        language: 6088
      },
      shx: {
        language: 6089
      },
      shy: {
        language: 6090
      },
      shz: {
        language: 6091
      },
      sia: {
        language: 6092
      },
      sib: {
        language: 6093
      },
      sid: {
        language: 6094
      },
      sie: {
        language: 6095
      },
      sif: {
        language: 6096
      },
      sig: {
        language: 6097
      },
      sih: {
        language: 6098
      },
      sii: {
        language: 6099
      },
      sij: {
        language: 6100
      },
      sik: {
        language: 6101
      },
      sil: {
        language: 6102
      },
      sim: {
        language: 6103
      },
      sio: {
        language: 6104
      },
      sip: {
        language: 6105
      },
      siq: {
        language: 6106
      },
      sir: {
        language: 6107
      },
      sis: {
        language: 6108
      },
      sit: {
        language: 6109
      },
      siu: {
        language: 6110
      },
      siv: {
        language: 6111
      },
      siw: {
        language: 6112
      },
      six: {
        language: 6113
      },
      siy: {
        language: 6114
      },
      siz: {
        language: 6115
      },
      sja: {
        language: 6116
      },
      sjb: {
        language: 6117
      },
      sjd: {
        language: 6118
      },
      sje: {
        language: 6119
      },
      sjg: {
        language: 6120
      },
      sjk: {
        language: 6121
      },
      sjl: {
        language: 6122
      },
      sjm: {
        language: 6123
      },
      sjn: {
        language: 6124
      },
      sjo: {
        language: 6125
      },
      sjp: {
        language: 6126
      },
      sjr: {
        language: 6127
      },
      sjs: {
        language: 6128
      },
      sjt: {
        language: 6129
      },
      sju: {
        language: 6130
      },
      sjw: {
        language: 6131
      },
      ska: {
        language: 6132
      },
      skb: {
        language: 6133
      },
      skc: {
        language: 6134
      },
      skd: {
        language: 6135
      },
      ske: {
        language: 6136
      },
      skf: {
        language: 6137
      },
      skg: {
        language: 6138
      },
      skh: {
        language: 6139
      },
      ski: {
        language: 6140
      },
      skj: {
        language: 6141
      },
      skk: {
        language: 6142
      },
      skm: {
        language: 6143
      },
      skn: {
        language: 6144
      },
      sko: {
        language: 6145
      },
      skp: {
        language: 6146
      },
      skq: {
        language: 6147
      },
      skr: {
        language: 6148
      },
      sks: {
        language: 6149
      },
      skt: {
        language: 6150
      },
      sku: {
        language: 6151
      },
      skv: {
        language: 6152
      },
      skw: {
        language: 6153
      },
      skx: {
        language: 6154
      },
      sky: {
        language: 6155
      },
      skz: {
        language: 6156
      },
      sla: {
        language: 6157
      },
      slc: {
        language: 6158
      },
      sld: {
        language: 6159
      },
      sle: {
        language: 6160
      },
      slf: {
        language: 6161,
        extlang: 8340
      },
      slg: {
        language: 6162
      },
      slh: {
        language: 6163
      },
      sli: {
        language: 6164
      },
      slj: {
        language: 6165
      },
      sll: {
        language: 6166
      },
      slm: {
        language: 6167
      },
      sln: {
        language: 6168
      },
      slp: {
        language: 6169
      },
      slq: {
        language: 6170
      },
      slr: {
        language: 6171
      },
      sls: {
        language: 6172,
        extlang: 8341
      },
      slt: {
        language: 6173
      },
      slu: {
        language: 6174
      },
      slw: {
        language: 6175
      },
      slx: {
        language: 6176
      },
      sly: {
        language: 6177
      },
      slz: {
        language: 6178
      },
      sma: {
        language: 6179
      },
      smb: {
        language: 6180
      },
      smc: {
        language: 6181
      },
      smd: {
        language: 6182
      },
      smf: {
        language: 6183
      },
      smg: {
        language: 6184
      },
      smh: {
        language: 6185
      },
      smi: {
        language: 6186
      },
      smj: {
        language: 6187
      },
      smk: {
        language: 6188
      },
      sml: {
        language: 6189
      },
      smm: {
        language: 6190
      },
      smn: {
        language: 6191
      },
      smp: {
        language: 6192
      },
      smq: {
        language: 6193
      },
      smr: {
        language: 6194
      },
      sms: {
        language: 6195
      },
      smt: {
        language: 6196
      },
      smu: {
        language: 6197
      },
      smv: {
        language: 6198
      },
      smw: {
        language: 6199
      },
      smx: {
        language: 6200
      },
      smy: {
        language: 6201
      },
      smz: {
        language: 6202
      },
      snb: {
        language: 6203
      },
      snc: {
        language: 6204
      },
      sne: {
        language: 6205
      },
      snf: {
        language: 6206
      },
      sng: {
        language: 6207
      },
      snh: {
        language: 6208
      },
      sni: {
        language: 6209
      },
      snj: {
        language: 6210
      },
      snk: {
        language: 6211
      },
      snl: {
        language: 6212
      },
      snm: {
        language: 6213
      },
      snn: {
        language: 6214
      },
      sno: {
        language: 6215
      },
      snp: {
        language: 6216
      },
      snq: {
        language: 6217
      },
      snr: {
        language: 6218
      },
      sns: {
        language: 6219
      },
      snu: {
        language: 6220
      },
      snv: {
        language: 6221
      },
      snw: {
        language: 6222
      },
      snx: {
        language: 6223
      },
      sny: {
        language: 6224
      },
      snz: {
        language: 6225
      },
      soa: {
        language: 6226
      },
      sob: {
        language: 6227
      },
      soc: {
        language: 6228
      },
      sod: {
        language: 6229
      },
      soe: {
        language: 6230
      },
      sog: {
        language: 6231
      },
      soh: {
        language: 6232
      },
      soi: {
        language: 6233
      },
      soj: {
        language: 6234
      },
      sok: {
        language: 6235
      },
      sol: {
        language: 6236
      },
      son: {
        language: 6237
      },
      soo: {
        language: 6238
      },
      sop: {
        language: 6239
      },
      soq: {
        language: 6240
      },
      sor: {
        language: 6241
      },
      sos: {
        language: 6242
      },
      sou: {
        language: 6243
      },
      sov: {
        language: 6244
      },
      sow: {
        language: 6245
      },
      sox: {
        language: 6246
      },
      soy: {
        language: 6247
      },
      soz: {
        language: 6248
      },
      spb: {
        language: 6249
      },
      spc: {
        language: 6250
      },
      spd: {
        language: 6251
      },
      spe: {
        language: 6252
      },
      spg: {
        language: 6253
      },
      spi: {
        language: 6254
      },
      spk: {
        language: 6255
      },
      spl: {
        language: 6256
      },
      spm: {
        language: 6257
      },
      spn: {
        language: 6258
      },
      spo: {
        language: 6259
      },
      spp: {
        language: 6260
      },
      spq: {
        language: 6261
      },
      spr: {
        language: 6262
      },
      sps: {
        language: 6263
      },
      spt: {
        language: 6264
      },
      spu: {
        language: 6265
      },
      spv: {
        language: 6266
      },
      spx: {
        language: 6267
      },
      spy: {
        language: 6268
      },
      sqa: {
        language: 6269
      },
      sqh: {
        language: 6270
      },
      sqj: {
        language: 6271
      },
      sqk: {
        language: 6272,
        extlang: 8342
      },
      sqm: {
        language: 6273
      },
      sqn: {
        language: 6274
      },
      sqo: {
        language: 6275
      },
      sqq: {
        language: 6276
      },
      sqr: {
        language: 6277
      },
      sqs: {
        language: 6278,
        extlang: 8343
      },
      sqt: {
        language: 6279
      },
      squ: {
        language: 6280
      },
      sra: {
        language: 6281
      },
      srb: {
        language: 6282
      },
      src: {
        language: 6283
      },
      sre: {
        language: 6284
      },
      srf: {
        language: 6285
      },
      srg: {
        language: 6286
      },
      srh: {
        language: 6287
      },
      sri: {
        language: 6288
      },
      srk: {
        language: 6289
      },
      srl: {
        language: 6290
      },
      srm: {
        language: 6291
      },
      srn: {
        language: 6292
      },
      sro: {
        language: 6293
      },
      srq: {
        language: 6294
      },
      srr: {
        language: 6295
      },
      srs: {
        language: 6296
      },
      srt: {
        language: 6297
      },
      sru: {
        language: 6298
      },
      srv: {
        language: 6299
      },
      srw: {
        language: 6300
      },
      srx: {
        language: 6301
      },
      sry: {
        language: 6302
      },
      srz: {
        language: 6303
      },
      ssa: {
        language: 6304
      },
      ssb: {
        language: 6305
      },
      ssc: {
        language: 6306
      },
      ssd: {
        language: 6307
      },
      sse: {
        language: 6308
      },
      ssf: {
        language: 6309
      },
      ssg: {
        language: 6310
      },
      ssh: {
        language: 6311,
        extlang: 8344
      },
      ssi: {
        language: 6312
      },
      ssj: {
        language: 6313
      },
      ssk: {
        language: 6314
      },
      ssl: {
        language: 6315
      },
      ssm: {
        language: 6316
      },
      ssn: {
        language: 6317
      },
      sso: {
        language: 6318
      },
      ssp: {
        language: 6319,
        extlang: 8345
      },
      ssq: {
        language: 6320
      },
      ssr: {
        language: 6321,
        extlang: 8346
      },
      sss: {
        language: 6322
      },
      sst: {
        language: 6323
      },
      ssu: {
        language: 6324
      },
      ssv: {
        language: 6325
      },
      ssx: {
        language: 6326
      },
      ssy: {
        language: 6327
      },
      ssz: {
        language: 6328
      },
      sta: {
        language: 6329
      },
      stb: {
        language: 6330
      },
      std: {
        language: 6331
      },
      ste: {
        language: 6332
      },
      stf: {
        language: 6333
      },
      stg: {
        language: 6334
      },
      sth: {
        language: 6335
      },
      sti: {
        language: 6336
      },
      stj: {
        language: 6337
      },
      stk: {
        language: 6338
      },
      stl: {
        language: 6339
      },
      stm: {
        language: 6340
      },
      stn: {
        language: 6341
      },
      sto: {
        language: 6342
      },
      stp: {
        language: 6343
      },
      stq: {
        language: 6344
      },
      str: {
        language: 6345
      },
      sts: {
        language: 6346
      },
      stt: {
        language: 6347
      },
      stu: {
        language: 6348
      },
      stv: {
        language: 6349
      },
      stw: {
        language: 6350
      },
      sty: {
        language: 6351
      },
      sua: {
        language: 6352
      },
      sub: {
        language: 6353
      },
      suc: {
        language: 6354
      },
      sue: {
        language: 6355
      },
      sug: {
        language: 6356
      },
      sui: {
        language: 6357
      },
      suj: {
        language: 6358
      },
      suk: {
        language: 6359
      },
      sul: {
        language: 6360
      },
      sum: {
        language: 6361
      },
      suq: {
        language: 6362
      },
      sur: {
        language: 6363
      },
      sus: {
        language: 6364
      },
      sut: {
        language: 6365
      },
      suv: {
        language: 6366
      },
      suw: {
        language: 6367
      },
      sux: {
        language: 6368
      },
      suy: {
        language: 6369
      },
      suz: {
        language: 6370
      },
      sva: {
        language: 6371
      },
      svb: {
        language: 6372
      },
      svc: {
        language: 6373
      },
      sve: {
        language: 6374
      },
      svk: {
        language: 6375,
        extlang: 8347
      },
      svm: {
        language: 6376
      },
      svr: {
        language: 6377
      },
      svs: {
        language: 6378
      },
      svx: {
        language: 6379
      },
      swb: {
        language: 6380
      },
      swc: {
        language: 6381,
        extlang: 8348
      },
      swf: {
        language: 6382
      },
      swg: {
        language: 6383
      },
      swh: {
        language: 6384,
        extlang: 8349
      },
      swi: {
        language: 6385
      },
      swj: {
        language: 6386
      },
      swk: {
        language: 6387
      },
      swl: {
        language: 6388,
        extlang: 8350
      },
      swm: {
        language: 6389
      },
      swn: {
        language: 6390
      },
      swo: {
        language: 6391
      },
      swp: {
        language: 6392
      },
      swq: {
        language: 6393
      },
      swr: {
        language: 6394
      },
      sws: {
        language: 6395
      },
      swt: {
        language: 6396
      },
      swu: {
        language: 6397
      },
      swv: {
        language: 6398
      },
      sww: {
        language: 6399
      },
      swx: {
        language: 6400
      },
      swy: {
        language: 6401
      },
      sxb: {
        language: 6402
      },
      sxc: {
        language: 6403
      },
      sxe: {
        language: 6404
      },
      sxg: {
        language: 6405
      },
      sxk: {
        language: 6406
      },
      sxl: {
        language: 6407
      },
      sxm: {
        language: 6408
      },
      sxn: {
        language: 6409
      },
      sxo: {
        language: 6410
      },
      sxr: {
        language: 6411
      },
      sxs: {
        language: 6412
      },
      sxu: {
        language: 6413
      },
      sxw: {
        language: 6414
      },
      sya: {
        language: 6415
      },
      syb: {
        language: 6416
      },
      syc: {
        language: 6417
      },
      syd: {
        language: 6418
      },
      syi: {
        language: 6419
      },
      syk: {
        language: 6420
      },
      syl: {
        language: 6421
      },
      sym: {
        language: 6422
      },
      syn: {
        language: 6423
      },
      syo: {
        language: 6424
      },
      syr: {
        language: 6425
      },
      sys: {
        language: 6426
      },
      syw: {
        language: 6427
      },
      syx: {
        language: 6428
      },
      syy: {
        language: 6429,
        extlang: 8351
      },
      sza: {
        language: 6430
      },
      szb: {
        language: 6431
      },
      szc: {
        language: 6432
      },
      szd: {
        language: 6433
      },
      sze: {
        language: 6434
      },
      szg: {
        language: 6435
      },
      szl: {
        language: 6436
      },
      szn: {
        language: 6437
      },
      szp: {
        language: 6438
      },
      szs: {
        language: 6439,
        extlang: 8352
      },
      szv: {
        language: 6440
      },
      szw: {
        language: 6441
      },
      szy: {
        language: 6442
      },
      taa: {
        language: 6443
      },
      tab: {
        language: 6444
      },
      tac: {
        language: 6445
      },
      tad: {
        language: 6446
      },
      tae: {
        language: 6447
      },
      taf: {
        language: 6448
      },
      tag: {
        language: 6449
      },
      tai: {
        language: 6450
      },
      taj: {
        language: 6451
      },
      tak: {
        language: 6452
      },
      tal: {
        language: 6453
      },
      tan: {
        language: 6454
      },
      tao: {
        language: 6455
      },
      tap: {
        language: 6456
      },
      taq: {
        language: 6457
      },
      tar: {
        language: 6458
      },
      tas: {
        language: 6459
      },
      tau: {
        language: 6460
      },
      tav: {
        language: 6461
      },
      taw: {
        language: 6462
      },
      tax: {
        language: 6463
      },
      tay: {
        language: 6464
      },
      taz: {
        language: 6465
      },
      tba: {
        language: 6466
      },
      tbb: {
        language: 6467
      },
      tbc: {
        language: 6468
      },
      tbd: {
        language: 6469
      },
      tbe: {
        language: 6470
      },
      tbf: {
        language: 6471
      },
      tbg: {
        language: 6472
      },
      tbh: {
        language: 6473
      },
      tbi: {
        language: 6474
      },
      tbj: {
        language: 6475
      },
      tbk: {
        language: 6476
      },
      tbl: {
        language: 6477
      },
      tbm: {
        language: 6478
      },
      tbn: {
        language: 6479
      },
      tbo: {
        language: 6480
      },
      tbp: {
        language: 6481
      },
      tbq: {
        language: 6482
      },
      tbr: {
        language: 6483
      },
      tbs: {
        language: 6484
      },
      tbt: {
        language: 6485
      },
      tbu: {
        language: 6486
      },
      tbv: {
        language: 6487
      },
      tbw: {
        language: 6488
      },
      tbx: {
        language: 6489
      },
      tby: {
        language: 6490
      },
      tbz: {
        language: 6491
      },
      tca: {
        language: 6492
      },
      tcb: {
        language: 6493
      },
      tcc: {
        language: 6494
      },
      tcd: {
        language: 6495
      },
      tce: {
        language: 6496
      },
      tcf: {
        language: 6497
      },
      tcg: {
        language: 6498
      },
      tch: {
        language: 6499
      },
      tci: {
        language: 6500
      },
      tck: {
        language: 6501
      },
      tcl: {
        language: 6502
      },
      tcm: {
        language: 6503
      },
      tcn: {
        language: 6504
      },
      tco: {
        language: 6505
      },
      tcp: {
        language: 6506
      },
      tcq: {
        language: 6507
      },
      tcs: {
        language: 6508
      },
      tct: {
        language: 6509
      },
      tcu: {
        language: 6510
      },
      tcw: {
        language: 6511
      },
      tcx: {
        language: 6512
      },
      tcy: {
        language: 6513
      },
      tcz: {
        language: 6514
      },
      tda: {
        language: 6515
      },
      tdb: {
        language: 6516
      },
      tdc: {
        language: 6517
      },
      tdd: {
        language: 6518
      },
      tde: {
        language: 6519
      },
      tdf: {
        language: 6520
      },
      tdg: {
        language: 6521
      },
      tdh: {
        language: 6522
      },
      tdi: {
        language: 6523
      },
      tdj: {
        language: 6524
      },
      tdk: {
        language: 6525
      },
      tdl: {
        language: 6526
      },
      tdm: {
        language: 6527
      },
      tdn: {
        language: 6528
      },
      tdo: {
        language: 6529
      },
      tdq: {
        language: 6530
      },
      tdr: {
        language: 6531
      },
      tds: {
        language: 6532
      },
      tdt: {
        language: 6533
      },
      tdu: {
        language: 6534
      },
      tdv: {
        language: 6535
      },
      tdx: {
        language: 6536
      },
      tdy: {
        language: 6537
      },
      tea: {
        language: 6538
      },
      teb: {
        language: 6539
      },
      tec: {
        language: 6540
      },
      ted: {
        language: 6541
      },
      tee: {
        language: 6542
      },
      tef: {
        language: 6543
      },
      teg: {
        language: 6544
      },
      teh: {
        language: 6545
      },
      tei: {
        language: 6546
      },
      tek: {
        language: 6547
      },
      tem: {
        language: 6548
      },
      ten: {
        language: 6549
      },
      teo: {
        language: 6550
      },
      tep: {
        language: 6551
      },
      teq: {
        language: 6552
      },
      ter: {
        language: 6553
      },
      tes: {
        language: 6554
      },
      tet: {
        language: 6555
      },
      teu: {
        language: 6556
      },
      tev: {
        language: 6557
      },
      tew: {
        language: 6558
      },
      tex: {
        language: 6559
      },
      tey: {
        language: 6560
      },
      tez: {
        language: 6561
      },
      tfi: {
        language: 6562
      },
      tfn: {
        language: 6563
      },
      tfo: {
        language: 6564
      },
      tfr: {
        language: 6565
      },
      tft: {
        language: 6566
      },
      tga: {
        language: 6567
      },
      tgb: {
        language: 6568
      },
      tgc: {
        language: 6569
      },
      tgd: {
        language: 6570
      },
      tge: {
        language: 6571
      },
      tgf: {
        language: 6572
      },
      tgg: {
        language: 6573
      },
      tgh: {
        language: 6574
      },
      tgi: {
        language: 6575
      },
      tgj: {
        language: 6576
      },
      tgn: {
        language: 6577
      },
      tgo: {
        language: 6578
      },
      tgp: {
        language: 6579
      },
      tgq: {
        language: 6580
      },
      tgr: {
        language: 6581
      },
      tgs: {
        language: 6582
      },
      tgt: {
        language: 6583
      },
      tgu: {
        language: 6584
      },
      tgv: {
        language: 6585
      },
      tgw: {
        language: 6586
      },
      tgx: {
        language: 6587
      },
      tgy: {
        language: 6588
      },
      tgz: {
        language: 6589
      },
      thc: {
        language: 6590
      },
      thd: {
        language: 6591
      },
      the: {
        language: 6592
      },
      thf: {
        language: 6593
      },
      thh: {
        language: 6594
      },
      thi: {
        language: 6595
      },
      thk: {
        language: 6596
      },
      thl: {
        language: 6597
      },
      thm: {
        language: 6598
      },
      thn: {
        language: 6599
      },
      thp: {
        language: 6600
      },
      thq: {
        language: 6601
      },
      thr: {
        language: 6602
      },
      ths: {
        language: 6603
      },
      tht: {
        language: 6604
      },
      thu: {
        language: 6605
      },
      thv: {
        language: 6606
      },
      thw: {
        language: 6607
      },
      thx: {
        language: 6608
      },
      thy: {
        language: 6609
      },
      thz: {
        language: 6610
      },
      tia: {
        language: 6611
      },
      tic: {
        language: 6612
      },
      tid: {
        language: 6613
      },
      tie: {
        language: 6614
      },
      tif: {
        language: 6615
      },
      tig: {
        language: 6616
      },
      tih: {
        language: 6617
      },
      tii: {
        language: 6618
      },
      tij: {
        language: 6619
      },
      tik: {
        language: 6620
      },
      til: {
        language: 6621
      },
      tim: {
        language: 6622
      },
      tin: {
        language: 6623
      },
      tio: {
        language: 6624
      },
      tip: {
        language: 6625
      },
      tiq: {
        language: 6626
      },
      tis: {
        language: 6627
      },
      tit: {
        language: 6628
      },
      tiu: {
        language: 6629
      },
      tiv: {
        language: 6630
      },
      tiw: {
        language: 6631
      },
      tix: {
        language: 6632
      },
      tiy: {
        language: 6633
      },
      tiz: {
        language: 6634
      },
      tja: {
        language: 6635
      },
      tjg: {
        language: 6636
      },
      tji: {
        language: 6637
      },
      tjj: {
        language: 6638
      },
      tjl: {
        language: 6639
      },
      tjm: {
        language: 6640
      },
      tjn: {
        language: 6641
      },
      tjo: {
        language: 6642
      },
      tjp: {
        language: 6643
      },
      tjs: {
        language: 6644
      },
      tju: {
        language: 6645
      },
      tjw: {
        language: 6646
      },
      tka: {
        language: 6647
      },
      tkb: {
        language: 6648
      },
      tkd: {
        language: 6649
      },
      tke: {
        language: 6650
      },
      tkf: {
        language: 6651
      },
      tkg: {
        language: 6652
      },
      tkk: {
        language: 6653
      },
      tkl: {
        language: 6654
      },
      tkm: {
        language: 6655
      },
      tkn: {
        language: 6656
      },
      tkp: {
        language: 6657
      },
      tkq: {
        language: 6658
      },
      tkr: {
        language: 6659
      },
      tks: {
        language: 6660
      },
      tkt: {
        language: 6661
      },
      tku: {
        language: 6662
      },
      tkv: {
        language: 6663
      },
      tkw: {
        language: 6664
      },
      tkx: {
        language: 6665
      },
      tkz: {
        language: 6666
      },
      tla: {
        language: 6667
      },
      tlb: {
        language: 6668
      },
      tlc: {
        language: 6669
      },
      tld: {
        language: 6670
      },
      tlf: {
        language: 6671
      },
      tlg: {
        language: 6672
      },
      tlh: {
        language: 6673
      },
      tli: {
        language: 6674
      },
      tlj: {
        language: 6675
      },
      tlk: {
        language: 6676
      },
      tll: {
        language: 6677
      },
      tlm: {
        language: 6678
      },
      tln: {
        language: 6679
      },
      tlo: {
        language: 6680
      },
      tlp: {
        language: 6681
      },
      tlq: {
        language: 6682
      },
      tlr: {
        language: 6683
      },
      tls: {
        language: 6684
      },
      tlt: {
        language: 6685
      },
      tlu: {
        language: 6686
      },
      tlv: {
        language: 6687
      },
      tlw: {
        language: 6688
      },
      tlx: {
        language: 6689
      },
      tly: {
        language: 6690
      },
      tma: {
        language: 6691
      },
      tmb: {
        language: 6692
      },
      tmc: {
        language: 6693
      },
      tmd: {
        language: 6694
      },
      tme: {
        language: 6695
      },
      tmf: {
        language: 6696
      },
      tmg: {
        language: 6697
      },
      tmh: {
        language: 6698
      },
      tmi: {
        language: 6699
      },
      tmj: {
        language: 6700
      },
      tmk: {
        language: 6701
      },
      tml: {
        language: 6702
      },
      tmm: {
        language: 6703
      },
      tmn: {
        language: 6704
      },
      tmo: {
        language: 6705
      },
      tmp: {
        language: 6706
      },
      tmq: {
        language: 6707
      },
      tmr: {
        language: 6708
      },
      tms: {
        language: 6709
      },
      tmt: {
        language: 6710
      },
      tmu: {
        language: 6711
      },
      tmv: {
        language: 6712
      },
      tmw: {
        language: 6713,
        extlang: 8353
      },
      tmy: {
        language: 6714
      },
      tmz: {
        language: 6715
      },
      tna: {
        language: 6716
      },
      tnb: {
        language: 6717
      },
      tnc: {
        language: 6718
      },
      tnd: {
        language: 6719
      },
      tne: {
        language: 6720
      },
      tnf: {
        language: 6721
      },
      tng: {
        language: 6722
      },
      tnh: {
        language: 6723
      },
      tni: {
        language: 6724
      },
      tnk: {
        language: 6725
      },
      tnl: {
        language: 6726
      },
      tnm: {
        language: 6727
      },
      tnn: {
        language: 6728
      },
      tno: {
        language: 6729
      },
      tnp: {
        language: 6730
      },
      tnq: {
        language: 6731
      },
      tnr: {
        language: 6732
      },
      tns: {
        language: 6733
      },
      tnt: {
        language: 6734
      },
      tnu: {
        language: 6735
      },
      tnv: {
        language: 6736
      },
      tnw: {
        language: 6737
      },
      tnx: {
        language: 6738
      },
      tny: {
        language: 6739
      },
      tnz: {
        language: 6740
      },
      tob: {
        language: 6741
      },
      toc: {
        language: 6742
      },
      tod: {
        language: 6743
      },
      toe: {
        language: 6744
      },
      tof: {
        language: 6745
      },
      tog: {
        language: 6746
      },
      toh: {
        language: 6747
      },
      toi: {
        language: 6748
      },
      toj: {
        language: 6749
      },
      tol: {
        language: 6750
      },
      tom: {
        language: 6751
      },
      too: {
        language: 6752
      },
      top: {
        language: 6753
      },
      toq: {
        language: 6754
      },
      tor: {
        language: 6755
      },
      tos: {
        language: 6756
      },
      tou: {
        language: 6757
      },
      tov: {
        language: 6758
      },
      tow: {
        language: 6759
      },
      tox: {
        language: 6760
      },
      toy: {
        language: 6761
      },
      toz: {
        language: 6762
      },
      tpa: {
        language: 6763
      },
      tpc: {
        language: 6764
      },
      tpe: {
        language: 6765
      },
      tpf: {
        language: 6766
      },
      tpg: {
        language: 6767
      },
      tpi: {
        language: 6768
      },
      tpj: {
        language: 6769
      },
      tpk: {
        language: 6770
      },
      tpl: {
        language: 6771
      },
      tpm: {
        language: 6772
      },
      tpn: {
        language: 6773
      },
      tpo: {
        language: 6774
      },
      tpp: {
        language: 6775
      },
      tpq: {
        language: 6776
      },
      tpr: {
        language: 6777
      },
      tpt: {
        language: 6778
      },
      tpu: {
        language: 6779
      },
      tpv: {
        language: 6780
      },
      tpw: {
        language: 6781
      },
      tpx: {
        language: 6782
      },
      tpy: {
        language: 6783
      },
      tpz: {
        language: 6784
      },
      tqb: {
        language: 6785
      },
      tql: {
        language: 6786
      },
      tqm: {
        language: 6787
      },
      tqn: {
        language: 6788
      },
      tqo: {
        language: 6789
      },
      tqp: {
        language: 6790
      },
      tqq: {
        language: 6791
      },
      tqr: {
        language: 6792
      },
      tqt: {
        language: 6793
      },
      tqu: {
        language: 6794
      },
      tqw: {
        language: 6795
      },
      tra: {
        language: 6796
      },
      trb: {
        language: 6797
      },
      trc: {
        language: 6798
      },
      trd: {
        language: 6799
      },
      tre: {
        language: 6800
      },
      trf: {
        language: 6801
      },
      trg: {
        language: 6802
      },
      trh: {
        language: 6803
      },
      tri: {
        language: 6804
      },
      trj: {
        language: 6805
      },
      trk: {
        language: 6806
      },
      trl: {
        language: 6807
      },
      trm: {
        language: 6808
      },
      trn: {
        language: 6809
      },
      tro: {
        language: 6810
      },
      trp: {
        language: 6811
      },
      trq: {
        language: 6812
      },
      trr: {
        language: 6813
      },
      trs: {
        language: 6814
      },
      trt: {
        language: 6815
      },
      tru: {
        language: 6816
      },
      trv: {
        language: 6817
      },
      trw: {
        language: 6818
      },
      trx: {
        language: 6819
      },
      try: {
        language: 6820
      },
      trz: {
        language: 6821
      },
      tsa: {
        language: 6822
      },
      tsb: {
        language: 6823
      },
      tsc: {
        language: 6824
      },
      tsd: {
        language: 6825
      },
      tse: {
        language: 6826,
        extlang: 8354
      },
      tsf: {
        language: 6827
      },
      tsg: {
        language: 6828
      },
      tsh: {
        language: 6829
      },
      tsi: {
        language: 6830
      },
      tsj: {
        language: 6831
      },
      tsk: {
        language: 6832
      },
      tsl: {
        language: 6833
      },
      tsm: {
        language: 6834,
        extlang: 8355
      },
      tsp: {
        language: 6835
      },
      tsq: {
        language: 6836,
        extlang: 8356
      },
      tsr: {
        language: 6837
      },
      tss: {
        language: 6838,
        extlang: 8357
      },
      tst: {
        language: 6839
      },
      tsu: {
        language: 6840
      },
      tsv: {
        language: 6841
      },
      tsw: {
        language: 6842
      },
      tsx: {
        language: 6843
      },
      tsy: {
        language: 6844,
        extlang: 8358
      },
      tsz: {
        language: 6845
      },
      tta: {
        language: 6846
      },
      ttb: {
        language: 6847
      },
      ttc: {
        language: 6848
      },
      ttd: {
        language: 6849
      },
      tte: {
        language: 6850
      },
      ttf: {
        language: 6851
      },
      ttg: {
        language: 6852
      },
      tth: {
        language: 6853
      },
      tti: {
        language: 6854
      },
      ttj: {
        language: 6855
      },
      ttk: {
        language: 6856
      },
      ttl: {
        language: 6857
      },
      ttm: {
        language: 6858
      },
      ttn: {
        language: 6859
      },
      tto: {
        language: 6860
      },
      ttp: {
        language: 6861
      },
      ttq: {
        language: 6862
      },
      ttr: {
        language: 6863
      },
      tts: {
        language: 6864
      },
      ttt: {
        language: 6865
      },
      ttu: {
        language: 6866
      },
      ttv: {
        language: 6867
      },
      ttw: {
        language: 6868
      },
      tty: {
        language: 6869
      },
      ttz: {
        language: 6870
      },
      tua: {
        language: 6871
      },
      tub: {
        language: 6872
      },
      tuc: {
        language: 6873
      },
      tud: {
        language: 6874
      },
      tue: {
        language: 6875
      },
      tuf: {
        language: 6876
      },
      tug: {
        language: 6877
      },
      tuh: {
        language: 6878
      },
      tui: {
        language: 6879
      },
      tuj: {
        language: 6880
      },
      tul: {
        language: 6881
      },
      tum: {
        language: 6882
      },
      tun: {
        language: 6883
      },
      tuo: {
        language: 6884
      },
      tup: {
        language: 6885
      },
      tuq: {
        language: 6886
      },
      tus: {
        language: 6887
      },
      tut: {
        language: 6888
      },
      tuu: {
        language: 6889
      },
      tuv: {
        language: 6890
      },
      tuw: {
        language: 6891
      },
      tux: {
        language: 6892
      },
      tuy: {
        language: 6893
      },
      tuz: {
        language: 6894
      },
      tva: {
        language: 6895
      },
      tvd: {
        language: 6896
      },
      tve: {
        language: 6897
      },
      tvk: {
        language: 6898
      },
      tvl: {
        language: 6899
      },
      tvm: {
        language: 6900
      },
      tvn: {
        language: 6901
      },
      tvo: {
        language: 6902
      },
      tvs: {
        language: 6903
      },
      tvt: {
        language: 6904
      },
      tvu: {
        language: 6905
      },
      tvw: {
        language: 6906
      },
      tvx: {
        language: 6907
      },
      tvy: {
        language: 6908
      },
      twa: {
        language: 6909
      },
      twb: {
        language: 6910
      },
      twc: {
        language: 6911
      },
      twd: {
        language: 6912
      },
      twe: {
        language: 6913
      },
      twf: {
        language: 6914
      },
      twg: {
        language: 6915
      },
      twh: {
        language: 6916
      },
      twl: {
        language: 6917
      },
      twm: {
        language: 6918
      },
      twn: {
        language: 6919
      },
      two: {
        language: 6920
      },
      twp: {
        language: 6921
      },
      twq: {
        language: 6922
      },
      twr: {
        language: 6923
      },
      twt: {
        language: 6924
      },
      twu: {
        language: 6925
      },
      tww: {
        language: 6926
      },
      twx: {
        language: 6927
      },
      twy: {
        language: 6928
      },
      txa: {
        language: 6929
      },
      txb: {
        language: 6930
      },
      txc: {
        language: 6931
      },
      txe: {
        language: 6932
      },
      txg: {
        language: 6933
      },
      txh: {
        language: 6934
      },
      txi: {
        language: 6935
      },
      txj: {
        language: 6936
      },
      txm: {
        language: 6937
      },
      txn: {
        language: 6938
      },
      txo: {
        language: 6939
      },
      txq: {
        language: 6940
      },
      txr: {
        language: 6941
      },
      txs: {
        language: 6942
      },
      txt: {
        language: 6943
      },
      txu: {
        language: 6944
      },
      txx: {
        language: 6945
      },
      txy: {
        language: 6946
      },
      tya: {
        language: 6947
      },
      tye: {
        language: 6948
      },
      tyh: {
        language: 6949
      },
      tyi: {
        language: 6950
      },
      tyj: {
        language: 6951
      },
      tyl: {
        language: 6952
      },
      tyn: {
        language: 6953
      },
      typ: {
        language: 6954
      },
      tyr: {
        language: 6955
      },
      tys: {
        language: 6956
      },
      tyt: {
        language: 6957
      },
      tyu: {
        language: 6958
      },
      tyv: {
        language: 6959
      },
      tyx: {
        language: 6960
      },
      tyz: {
        language: 6961
      },
      tza: {
        language: 6962,
        extlang: 8359
      },
      tzh: {
        language: 6963
      },
      tzj: {
        language: 6964
      },
      tzl: {
        language: 6965
      },
      tzm: {
        language: 6966
      },
      tzn: {
        language: 6967
      },
      tzo: {
        language: 6968
      },
      tzx: {
        language: 6969
      },
      uam: {
        language: 6970
      },
      uan: {
        language: 6971
      },
      uar: {
        language: 6972
      },
      uba: {
        language: 6973
      },
      ubi: {
        language: 6974
      },
      ubl: {
        language: 6975
      },
      ubr: {
        language: 6976
      },
      ubu: {
        language: 6977
      },
      uby: {
        language: 6978
      },
      uda: {
        language: 6979
      },
      ude: {
        language: 6980
      },
      udg: {
        language: 6981
      },
      udi: {
        language: 6982
      },
      udj: {
        language: 6983
      },
      udl: {
        language: 6984
      },
      udm: {
        language: 6985
      },
      udu: {
        language: 6986
      },
      ues: {
        language: 6987
      },
      ufi: {
        language: 6988
      },
      uga: {
        language: 6989
      },
      ugb: {
        language: 6990
      },
      uge: {
        language: 6991
      },
      ugn: {
        language: 6992,
        extlang: 8360
      },
      ugo: {
        language: 6993
      },
      ugy: {
        language: 6994,
        extlang: 8361
      },
      uha: {
        language: 6995
      },
      uhn: {
        language: 6996
      },
      uis: {
        language: 6997
      },
      uiv: {
        language: 6998
      },
      uji: {
        language: 6999
      },
      uka: {
        language: 7e3
      },
      ukg: {
        language: 7001
      },
      ukh: {
        language: 7002
      },
      ukk: {
        language: 7003
      },
      ukl: {
        language: 7004,
        extlang: 8362
      },
      ukp: {
        language: 7005
      },
      ukq: {
        language: 7006
      },
      uks: {
        language: 7007,
        extlang: 8363
      },
      uku: {
        language: 7008
      },
      ukw: {
        language: 7009
      },
      uky: {
        language: 7010
      },
      ula: {
        language: 7011
      },
      ulb: {
        language: 7012
      },
      ulc: {
        language: 7013
      },
      ule: {
        language: 7014
      },
      ulf: {
        language: 7015
      },
      uli: {
        language: 7016
      },
      ulk: {
        language: 7017
      },
      ull: {
        language: 7018
      },
      ulm: {
        language: 7019
      },
      uln: {
        language: 7020
      },
      ulu: {
        language: 7021
      },
      ulw: {
        language: 7022
      },
      uma: {
        language: 7023
      },
      umb: {
        language: 7024
      },
      umc: {
        language: 7025
      },
      umd: {
        language: 7026
      },
      umg: {
        language: 7027
      },
      umi: {
        language: 7028
      },
      umm: {
        language: 7029
      },
      umn: {
        language: 7030
      },
      umo: {
        language: 7031
      },
      ump: {
        language: 7032
      },
      umr: {
        language: 7033
      },
      ums: {
        language: 7034
      },
      umu: {
        language: 7035
      },
      una: {
        language: 7036
      },
      und: {
        language: 7037
      },
      une: {
        language: 7038
      },
      ung: {
        language: 7039
      },
      unk: {
        language: 7040
      },
      unm: {
        language: 7041
      },
      unn: {
        language: 7042
      },
      unp: {
        language: 7043
      },
      unr: {
        language: 7044
      },
      unu: {
        language: 7045
      },
      unx: {
        language: 7046
      },
      unz: {
        language: 7047
      },
      uok: {
        language: 7048
      },
      upi: {
        language: 7049
      },
      upv: {
        language: 7050
      },
      ura: {
        language: 7051
      },
      urb: {
        language: 7052
      },
      urc: {
        language: 7053
      },
      ure: {
        language: 7054
      },
      urf: {
        language: 7055
      },
      urg: {
        language: 7056
      },
      urh: {
        language: 7057
      },
      uri: {
        language: 7058
      },
      urj: {
        language: 7059
      },
      urk: {
        language: 7060,
        extlang: 8364
      },
      url: {
        language: 7061
      },
      urm: {
        language: 7062
      },
      urn: {
        language: 7063
      },
      uro: {
        language: 7064
      },
      urp: {
        language: 7065
      },
      urr: {
        language: 7066
      },
      urt: {
        language: 7067
      },
      uru: {
        language: 7068
      },
      urv: {
        language: 7069
      },
      urw: {
        language: 7070
      },
      urx: {
        language: 7071
      },
      ury: {
        language: 7072
      },
      urz: {
        language: 7073
      },
      usa: {
        language: 7074
      },
      ush: {
        language: 7075
      },
      usi: {
        language: 7076
      },
      usk: {
        language: 7077
      },
      usp: {
        language: 7078
      },
      uss: {
        language: 7079
      },
      usu: {
        language: 7080
      },
      uta: {
        language: 7081
      },
      ute: {
        language: 7082
      },
      uth: {
        language: 7083
      },
      utp: {
        language: 7084
      },
      utr: {
        language: 7085
      },
      utu: {
        language: 7086
      },
      uum: {
        language: 7087
      },
      uun: {
        language: 7088
      },
      uur: {
        language: 7089
      },
      uuu: {
        language: 7090
      },
      uve: {
        language: 7091
      },
      uvh: {
        language: 7092
      },
      uvl: {
        language: 7093
      },
      uwa: {
        language: 7094
      },
      uya: {
        language: 7095
      },
      uzn: {
        language: 7096,
        extlang: 8365
      },
      uzs: {
        language: 7097,
        extlang: 8366
      },
      vaa: {
        language: 7098
      },
      vae: {
        language: 7099
      },
      vaf: {
        language: 7100
      },
      vag: {
        language: 7101
      },
      vah: {
        language: 7102
      },
      vai: {
        language: 7103
      },
      vaj: {
        language: 7104
      },
      val: {
        language: 7105
      },
      vam: {
        language: 7106
      },
      van: {
        language: 7107
      },
      vao: {
        language: 7108
      },
      vap: {
        language: 7109
      },
      var: {
        language: 7110
      },
      vas: {
        language: 7111
      },
      vau: {
        language: 7112
      },
      vav: {
        language: 7113
      },
      vay: {
        language: 7114
      },
      vbb: {
        language: 7115
      },
      vbk: {
        language: 7116
      },
      vec: {
        language: 7117
      },
      ved: {
        language: 7118
      },
      vel: {
        language: 7119
      },
      vem: {
        language: 7120
      },
      veo: {
        language: 7121
      },
      vep: {
        language: 7122
      },
      ver: {
        language: 7123
      },
      vgr: {
        language: 7124
      },
      vgt: {
        language: 7125,
        extlang: 8367
      },
      vic: {
        language: 7126
      },
      vid: {
        language: 7127
      },
      vif: {
        language: 7128
      },
      vig: {
        language: 7129
      },
      vil: {
        language: 7130
      },
      vin: {
        language: 7131
      },
      vis: {
        language: 7132
      },
      vit: {
        language: 7133
      },
      viv: {
        language: 7134
      },
      vka: {
        language: 7135
      },
      vki: {
        language: 7136
      },
      vkj: {
        language: 7137
      },
      vkk: {
        language: 7138,
        extlang: 8368
      },
      vkl: {
        language: 7139
      },
      vkm: {
        language: 7140
      },
      vko: {
        language: 7141
      },
      vkp: {
        language: 7142
      },
      vkt: {
        language: 7143,
        extlang: 8369
      },
      vku: {
        language: 7144
      },
      vlp: {
        language: 7145
      },
      vls: {
        language: 7146
      },
      vma: {
        language: 7147
      },
      vmb: {
        language: 7148
      },
      vmc: {
        language: 7149
      },
      vmd: {
        language: 7150
      },
      vme: {
        language: 7151
      },
      vmf: {
        language: 7152
      },
      vmg: {
        language: 7153
      },
      vmh: {
        language: 7154
      },
      vmi: {
        language: 7155
      },
      vmj: {
        language: 7156
      },
      vmk: {
        language: 7157
      },
      vml: {
        language: 7158
      },
      vmm: {
        language: 7159
      },
      vmp: {
        language: 7160
      },
      vmq: {
        language: 7161
      },
      vmr: {
        language: 7162
      },
      vms: {
        language: 7163
      },
      vmu: {
        language: 7164
      },
      vmv: {
        language: 7165
      },
      vmw: {
        language: 7166
      },
      vmx: {
        language: 7167
      },
      vmy: {
        language: 7168
      },
      vmz: {
        language: 7169
      },
      vnk: {
        language: 7170
      },
      vnm: {
        language: 7171
      },
      vnp: {
        language: 7172
      },
      vor: {
        language: 7173
      },
      vot: {
        language: 7174
      },
      vra: {
        language: 7175
      },
      vro: {
        language: 7176
      },
      vrs: {
        language: 7177
      },
      vrt: {
        language: 7178
      },
      vsi: {
        language: 7179,
        extlang: 8370
      },
      vsl: {
        language: 7180,
        extlang: 8371
      },
      vsv: {
        language: 7181,
        extlang: 8372
      },
      vto: {
        language: 7182
      },
      vum: {
        language: 7183
      },
      vun: {
        language: 7184
      },
      vut: {
        language: 7185
      },
      vwa: {
        language: 7186
      },
      waa: {
        language: 7187
      },
      wab: {
        language: 7188
      },
      wac: {
        language: 7189
      },
      wad: {
        language: 7190
      },
      wae: {
        language: 7191
      },
      waf: {
        language: 7192
      },
      wag: {
        language: 7193
      },
      wah: {
        language: 7194
      },
      wai: {
        language: 7195
      },
      waj: {
        language: 7196
      },
      wak: {
        language: 7197
      },
      wal: {
        language: 7198
      },
      wam: {
        language: 7199
      },
      wan: {
        language: 7200
      },
      wao: {
        language: 7201
      },
      wap: {
        language: 7202
      },
      waq: {
        language: 7203
      },
      war: {
        language: 7204
      },
      was: {
        language: 7205
      },
      wat: {
        language: 7206
      },
      wau: {
        language: 7207
      },
      wav: {
        language: 7208
      },
      waw: {
        language: 7209
      },
      wax: {
        language: 7210
      },
      way: {
        language: 7211
      },
      waz: {
        language: 7212
      },
      wba: {
        language: 7213
      },
      wbb: {
        language: 7214
      },
      wbe: {
        language: 7215
      },
      wbf: {
        language: 7216
      },
      wbh: {
        language: 7217
      },
      wbi: {
        language: 7218
      },
      wbj: {
        language: 7219
      },
      wbk: {
        language: 7220
      },
      wbl: {
        language: 7221
      },
      wbm: {
        language: 7222
      },
      wbp: {
        language: 7223
      },
      wbq: {
        language: 7224
      },
      wbr: {
        language: 7225
      },
      wbs: {
        language: 7226,
        extlang: 8373
      },
      wbt: {
        language: 7227
      },
      wbv: {
        language: 7228
      },
      wbw: {
        language: 7229
      },
      wca: {
        language: 7230
      },
      wci: {
        language: 7231
      },
      wdd: {
        language: 7232
      },
      wdg: {
        language: 7233
      },
      wdj: {
        language: 7234
      },
      wdk: {
        language: 7235
      },
      wdu: {
        language: 7236
      },
      wdy: {
        language: 7237
      },
      wea: {
        language: 7238
      },
      wec: {
        language: 7239
      },
      wed: {
        language: 7240
      },
      weg: {
        language: 7241
      },
      weh: {
        language: 7242
      },
      wei: {
        language: 7243
      },
      wem: {
        language: 7244
      },
      wen: {
        language: 7245
      },
      weo: {
        language: 7246
      },
      wep: {
        language: 7247
      },
      wer: {
        language: 7248
      },
      wes: {
        language: 7249
      },
      wet: {
        language: 7250
      },
      weu: {
        language: 7251
      },
      wew: {
        language: 7252
      },
      wfg: {
        language: 7253
      },
      wga: {
        language: 7254
      },
      wgb: {
        language: 7255
      },
      wgg: {
        language: 7256
      },
      wgi: {
        language: 7257
      },
      wgo: {
        language: 7258
      },
      wgu: {
        language: 7259
      },
      wgw: {
        language: 7260
      },
      wgy: {
        language: 7261
      },
      wha: {
        language: 7262
      },
      whg: {
        language: 7263
      },
      whk: {
        language: 7264
      },
      whu: {
        language: 7265
      },
      wib: {
        language: 7266
      },
      wic: {
        language: 7267
      },
      wie: {
        language: 7268
      },
      wif: {
        language: 7269
      },
      wig: {
        language: 7270
      },
      wih: {
        language: 7271
      },
      wii: {
        language: 7272
      },
      wij: {
        language: 7273
      },
      wik: {
        language: 7274
      },
      wil: {
        language: 7275
      },
      wim: {
        language: 7276
      },
      win: {
        language: 7277
      },
      wir: {
        language: 7278
      },
      wit: {
        language: 7279
      },
      wiu: {
        language: 7280
      },
      wiv: {
        language: 7281
      },
      wiw: {
        language: 7282
      },
      wiy: {
        language: 7283
      },
      wja: {
        language: 7284
      },
      wji: {
        language: 7285
      },
      wka: {
        language: 7286
      },
      wkb: {
        language: 7287
      },
      wkd: {
        language: 7288
      },
      wkl: {
        language: 7289
      },
      wkr: {
        language: 7290
      },
      wku: {
        language: 7291
      },
      wkw: {
        language: 7292
      },
      wky: {
        language: 7293
      },
      wla: {
        language: 7294
      },
      wlc: {
        language: 7295
      },
      wle: {
        language: 7296
      },
      wlg: {
        language: 7297
      },
      wli: {
        language: 7298
      },
      wlk: {
        language: 7299
      },
      wll: {
        language: 7300
      },
      wlm: {
        language: 7301
      },
      wlo: {
        language: 7302
      },
      wlr: {
        language: 7303
      },
      wls: {
        language: 7304
      },
      wlu: {
        language: 7305
      },
      wlv: {
        language: 7306
      },
      wlw: {
        language: 7307
      },
      wlx: {
        language: 7308
      },
      wly: {
        language: 7309
      },
      wma: {
        language: 7310
      },
      wmb: {
        language: 7311
      },
      wmc: {
        language: 7312
      },
      wmd: {
        language: 7313
      },
      wme: {
        language: 7314
      },
      wmh: {
        language: 7315
      },
      wmi: {
        language: 7316
      },
      wmm: {
        language: 7317
      },
      wmn: {
        language: 7318
      },
      wmo: {
        language: 7319
      },
      wms: {
        language: 7320
      },
      wmt: {
        language: 7321
      },
      wmw: {
        language: 7322
      },
      wmx: {
        language: 7323
      },
      wnb: {
        language: 7324
      },
      wnc: {
        language: 7325
      },
      wnd: {
        language: 7326
      },
      wne: {
        language: 7327
      },
      wng: {
        language: 7328
      },
      wni: {
        language: 7329
      },
      wnk: {
        language: 7330
      },
      wnm: {
        language: 7331
      },
      wnn: {
        language: 7332
      },
      wno: {
        language: 7333
      },
      wnp: {
        language: 7334
      },
      wnu: {
        language: 7335
      },
      wnw: {
        language: 7336
      },
      wny: {
        language: 7337
      },
      woa: {
        language: 7338
      },
      wob: {
        language: 7339
      },
      woc: {
        language: 7340
      },
      wod: {
        language: 7341
      },
      woe: {
        language: 7342
      },
      wof: {
        language: 7343
      },
      wog: {
        language: 7344
      },
      woi: {
        language: 7345
      },
      wok: {
        language: 7346
      },
      wom: {
        language: 7347
      },
      won: {
        language: 7348
      },
      woo: {
        language: 7349
      },
      wor: {
        language: 7350
      },
      wos: {
        language: 7351
      },
      wow: {
        language: 7352
      },
      woy: {
        language: 7353
      },
      wpc: {
        language: 7354
      },
      wra: {
        language: 7355
      },
      wrb: {
        language: 7356
      },
      wrd: {
        language: 7357
      },
      wrg: {
        language: 7358
      },
      wrh: {
        language: 7359
      },
      wri: {
        language: 7360
      },
      wrk: {
        language: 7361
      },
      wrl: {
        language: 7362
      },
      wrm: {
        language: 7363
      },
      wrn: {
        language: 7364
      },
      wro: {
        language: 7365
      },
      wrp: {
        language: 7366
      },
      wrr: {
        language: 7367
      },
      wrs: {
        language: 7368
      },
      wru: {
        language: 7369
      },
      wrv: {
        language: 7370
      },
      wrw: {
        language: 7371
      },
      wrx: {
        language: 7372
      },
      wry: {
        language: 7373
      },
      wrz: {
        language: 7374
      },
      wsa: {
        language: 7375
      },
      wsg: {
        language: 7376
      },
      wsi: {
        language: 7377
      },
      wsk: {
        language: 7378
      },
      wsr: {
        language: 7379
      },
      wss: {
        language: 7380
      },
      wsu: {
        language: 7381
      },
      wsv: {
        language: 7382
      },
      wtf: {
        language: 7383
      },
      wth: {
        language: 7384
      },
      wti: {
        language: 7385
      },
      wtk: {
        language: 7386
      },
      wtm: {
        language: 7387
      },
      wtw: {
        language: 7388
      },
      wua: {
        language: 7389
      },
      wub: {
        language: 7390
      },
      wud: {
        language: 7391
      },
      wuh: {
        language: 7392
      },
      wul: {
        language: 7393
      },
      wum: {
        language: 7394
      },
      wun: {
        language: 7395
      },
      wur: {
        language: 7396
      },
      wut: {
        language: 7397
      },
      wuu: {
        language: 7398,
        extlang: 8374
      },
      wuv: {
        language: 7399
      },
      wux: {
        language: 7400
      },
      wuy: {
        language: 7401
      },
      wwa: {
        language: 7402
      },
      wwb: {
        language: 7403
      },
      wwo: {
        language: 7404
      },
      wwr: {
        language: 7405
      },
      www: {
        language: 7406
      },
      wxa: {
        language: 7407
      },
      wxw: {
        language: 7408
      },
      wya: {
        language: 7409
      },
      wyb: {
        language: 7410
      },
      wyi: {
        language: 7411
      },
      wym: {
        language: 7412
      },
      wyr: {
        language: 7413
      },
      wyy: {
        language: 7414
      },
      xaa: {
        language: 7415
      },
      xab: {
        language: 7416
      },
      xac: {
        language: 7417
      },
      xad: {
        language: 7418
      },
      xae: {
        language: 7419
      },
      xag: {
        language: 7420
      },
      xai: {
        language: 7421
      },
      xaj: {
        language: 7422
      },
      xak: {
        language: 7423
      },
      xal: {
        language: 7424
      },
      xam: {
        language: 7425
      },
      xan: {
        language: 7426
      },
      xao: {
        language: 7427
      },
      xap: {
        language: 7428
      },
      xaq: {
        language: 7429
      },
      xar: {
        language: 7430
      },
      xas: {
        language: 7431
      },
      xat: {
        language: 7432
      },
      xau: {
        language: 7433
      },
      xav: {
        language: 7434
      },
      xaw: {
        language: 7435
      },
      xay: {
        language: 7436
      },
      xba: {
        language: 7437
      },
      xbb: {
        language: 7438
      },
      xbc: {
        language: 7439
      },
      xbd: {
        language: 7440
      },
      xbe: {
        language: 7441
      },
      xbg: {
        language: 7442
      },
      xbi: {
        language: 7443
      },
      xbj: {
        language: 7444
      },
      xbm: {
        language: 7445
      },
      xbn: {
        language: 7446
      },
      xbo: {
        language: 7447
      },
      xbp: {
        language: 7448
      },
      xbr: {
        language: 7449
      },
      xbw: {
        language: 7450
      },
      xbx: {
        language: 7451
      },
      xby: {
        language: 7452
      },
      xcb: {
        language: 7453
      },
      xcc: {
        language: 7454
      },
      xce: {
        language: 7455
      },
      xcg: {
        language: 7456
      },
      xch: {
        language: 7457
      },
      xcl: {
        language: 7458
      },
      xcm: {
        language: 7459
      },
      xcn: {
        language: 7460
      },
      xco: {
        language: 7461
      },
      xcr: {
        language: 7462
      },
      xct: {
        language: 7463
      },
      xcu: {
        language: 7464
      },
      xcv: {
        language: 7465
      },
      xcw: {
        language: 7466
      },
      xcy: {
        language: 7467
      },
      xda: {
        language: 7468
      },
      xdc: {
        language: 7469
      },
      xdk: {
        language: 7470
      },
      xdm: {
        language: 7471
      },
      xdo: {
        language: 7472
      },
      xdy: {
        language: 7473
      },
      xeb: {
        language: 7474
      },
      xed: {
        language: 7475
      },
      xeg: {
        language: 7476
      },
      xel: {
        language: 7477
      },
      xem: {
        language: 7478
      },
      xep: {
        language: 7479
      },
      xer: {
        language: 7480
      },
      xes: {
        language: 7481
      },
      xet: {
        language: 7482
      },
      xeu: {
        language: 7483
      },
      xfa: {
        language: 7484
      },
      xga: {
        language: 7485
      },
      xgb: {
        language: 7486
      },
      xgd: {
        language: 7487
      },
      xgf: {
        language: 7488
      },
      xgg: {
        language: 7489
      },
      xgi: {
        language: 7490
      },
      xgl: {
        language: 7491
      },
      xgm: {
        language: 7492
      },
      xgn: {
        language: 7493
      },
      xgr: {
        language: 7494
      },
      xgu: {
        language: 7495
      },
      xgw: {
        language: 7496
      },
      xha: {
        language: 7497
      },
      xhc: {
        language: 7498
      },
      xhd: {
        language: 7499
      },
      xhe: {
        language: 7500
      },
      xhr: {
        language: 7501
      },
      xht: {
        language: 7502
      },
      xhu: {
        language: 7503
      },
      xhv: {
        language: 7504
      },
      xia: {
        language: 7505
      },
      xib: {
        language: 7506
      },
      xii: {
        language: 7507
      },
      xil: {
        language: 7508
      },
      xin: {
        language: 7509
      },
      xip: {
        language: 7510
      },
      xir: {
        language: 7511
      },
      xis: {
        language: 7512
      },
      xiv: {
        language: 7513
      },
      xiy: {
        language: 7514
      },
      xjb: {
        language: 7515
      },
      xjt: {
        language: 7516
      },
      xka: {
        language: 7517
      },
      xkb: {
        language: 7518
      },
      xkc: {
        language: 7519
      },
      xkd: {
        language: 7520
      },
      xke: {
        language: 7521
      },
      xkf: {
        language: 7522
      },
      xkg: {
        language: 7523
      },
      xkh: {
        language: 7524
      },
      xki: {
        language: 7525,
        extlang: 8375
      },
      xkj: {
        language: 7526
      },
      xkk: {
        language: 7527
      },
      xkl: {
        language: 7528
      },
      xkn: {
        language: 7529
      },
      xko: {
        language: 7530
      },
      xkp: {
        language: 7531
      },
      xkq: {
        language: 7532
      },
      xkr: {
        language: 7533
      },
      xks: {
        language: 7534
      },
      xkt: {
        language: 7535
      },
      xku: {
        language: 7536
      },
      xkv: {
        language: 7537
      },
      xkw: {
        language: 7538
      },
      xkx: {
        language: 7539
      },
      xky: {
        language: 7540
      },
      xkz: {
        language: 7541
      },
      xla: {
        language: 7542
      },
      xlb: {
        language: 7543
      },
      xlc: {
        language: 7544
      },
      xld: {
        language: 7545
      },
      xle: {
        language: 7546
      },
      xlg: {
        language: 7547
      },
      xli: {
        language: 7548
      },
      xln: {
        language: 7549
      },
      xlo: {
        language: 7550
      },
      xlp: {
        language: 7551
      },
      xls: {
        language: 7552
      },
      xlu: {
        language: 7553
      },
      xly: {
        language: 7554
      },
      xma: {
        language: 7555
      },
      xmb: {
        language: 7556
      },
      xmc: {
        language: 7557
      },
      xmd: {
        language: 7558
      },
      xme: {
        language: 7559
      },
      xmf: {
        language: 7560
      },
      xmg: {
        language: 7561
      },
      xmh: {
        language: 7562
      },
      xmj: {
        language: 7563
      },
      xmk: {
        language: 7564
      },
      xml: {
        language: 7565,
        extlang: 8376
      },
      xmm: {
        language: 7566,
        extlang: 8377
      },
      xmn: {
        language: 7567
      },
      xmo: {
        language: 7568
      },
      xmp: {
        language: 7569
      },
      xmq: {
        language: 7570
      },
      xmr: {
        language: 7571
      },
      xms: {
        language: 7572,
        extlang: 8378
      },
      xmt: {
        language: 7573
      },
      xmu: {
        language: 7574
      },
      xmv: {
        language: 7575
      },
      xmw: {
        language: 7576
      },
      xmx: {
        language: 7577
      },
      xmy: {
        language: 7578
      },
      xmz: {
        language: 7579
      },
      xna: {
        language: 7580
      },
      xnb: {
        language: 7581
      },
      xnd: {
        language: 7582
      },
      xng: {
        language: 7583
      },
      xnh: {
        language: 7584
      },
      xni: {
        language: 7585
      },
      xnk: {
        language: 7586
      },
      xnn: {
        language: 7587
      },
      xno: {
        language: 7588
      },
      xnr: {
        language: 7589
      },
      xns: {
        language: 7590
      },
      xnt: {
        language: 7591
      },
      xnu: {
        language: 7592
      },
      xny: {
        language: 7593
      },
      xnz: {
        language: 7594
      },
      xoc: {
        language: 7595
      },
      xod: {
        language: 7596
      },
      xog: {
        language: 7597
      },
      xoi: {
        language: 7598
      },
      xok: {
        language: 7599
      },
      xom: {
        language: 7600
      },
      xon: {
        language: 7601
      },
      xoo: {
        language: 7602
      },
      xop: {
        language: 7603
      },
      xor: {
        language: 7604
      },
      xow: {
        language: 7605
      },
      xpa: {
        language: 7606
      },
      xpc: {
        language: 7607
      },
      xpe: {
        language: 7608
      },
      xpg: {
        language: 7609
      },
      xpi: {
        language: 7610
      },
      xpj: {
        language: 7611
      },
      xpk: {
        language: 7612
      },
      xpm: {
        language: 7613
      },
      xpn: {
        language: 7614
      },
      xpo: {
        language: 7615
      },
      xpp: {
        language: 7616
      },
      xpq: {
        language: 7617
      },
      xpr: {
        language: 7618
      },
      xps: {
        language: 7619
      },
      xpt: {
        language: 7620
      },
      xpu: {
        language: 7621
      },
      xpy: {
        language: 7622
      },
      xqa: {
        language: 7623
      },
      xqt: {
        language: 7624
      },
      xra: {
        language: 7625
      },
      xrb: {
        language: 7626
      },
      xrd: {
        language: 7627
      },
      xre: {
        language: 7628
      },
      xrg: {
        language: 7629
      },
      xri: {
        language: 7630
      },
      xrm: {
        language: 7631
      },
      xrn: {
        language: 7632
      },
      xrq: {
        language: 7633
      },
      xrr: {
        language: 7634
      },
      xrt: {
        language: 7635
      },
      xru: {
        language: 7636
      },
      xrw: {
        language: 7637
      },
      xsa: {
        language: 7638
      },
      xsb: {
        language: 7639
      },
      xsc: {
        language: 7640
      },
      xsd: {
        language: 7641
      },
      xse: {
        language: 7642
      },
      xsh: {
        language: 7643
      },
      xsi: {
        language: 7644
      },
      xsj: {
        language: 7645
      },
      xsl: {
        language: 7646
      },
      xsm: {
        language: 7647
      },
      xsn: {
        language: 7648
      },
      xso: {
        language: 7649
      },
      xsp: {
        language: 7650
      },
      xsq: {
        language: 7651
      },
      xsr: {
        language: 7652
      },
      xss: {
        language: 7653
      },
      xsu: {
        language: 7654
      },
      xsv: {
        language: 7655
      },
      xsy: {
        language: 7656
      },
      xta: {
        language: 7657
      },
      xtb: {
        language: 7658
      },
      xtc: {
        language: 7659
      },
      xtd: {
        language: 7660
      },
      xte: {
        language: 7661
      },
      xtg: {
        language: 7662
      },
      xth: {
        language: 7663
      },
      xti: {
        language: 7664
      },
      xtj: {
        language: 7665
      },
      xtl: {
        language: 7666
      },
      xtm: {
        language: 7667
      },
      xtn: {
        language: 7668
      },
      xto: {
        language: 7669
      },
      xtp: {
        language: 7670
      },
      xtq: {
        language: 7671
      },
      xtr: {
        language: 7672
      },
      xts: {
        language: 7673
      },
      xtt: {
        language: 7674
      },
      xtu: {
        language: 7675
      },
      xtv: {
        language: 7676
      },
      xtw: {
        language: 7677
      },
      xty: {
        language: 7678
      },
      xtz: {
        language: 7679
      },
      xua: {
        language: 7680
      },
      xub: {
        language: 7681
      },
      xud: {
        language: 7682
      },
      xug: {
        language: 7683
      },
      xuj: {
        language: 7684
      },
      xul: {
        language: 7685
      },
      xum: {
        language: 7686
      },
      xun: {
        language: 7687
      },
      xuo: {
        language: 7688
      },
      xup: {
        language: 7689
      },
      xur: {
        language: 7690
      },
      xut: {
        language: 7691
      },
      xuu: {
        language: 7692
      },
      xve: {
        language: 7693
      },
      xvi: {
        language: 7694
      },
      xvn: {
        language: 7695
      },
      xvo: {
        language: 7696
      },
      xvs: {
        language: 7697
      },
      xwa: {
        language: 7698
      },
      xwc: {
        language: 7699
      },
      xwd: {
        language: 7700
      },
      xwe: {
        language: 7701
      },
      xwg: {
        language: 7702
      },
      xwj: {
        language: 7703
      },
      xwk: {
        language: 7704
      },
      xwl: {
        language: 7705
      },
      xwo: {
        language: 7706
      },
      xwr: {
        language: 7707
      },
      xwt: {
        language: 7708
      },
      xww: {
        language: 7709
      },
      xxb: {
        language: 7710
      },
      xxk: {
        language: 7711
      },
      xxm: {
        language: 7712
      },
      xxr: {
        language: 7713
      },
      xxt: {
        language: 7714
      },
      xya: {
        language: 7715
      },
      xyb: {
        language: 7716
      },
      xyj: {
        language: 7717
      },
      xyk: {
        language: 7718
      },
      xyl: {
        language: 7719
      },
      xyt: {
        language: 7720
      },
      xyy: {
        language: 7721
      },
      xzh: {
        language: 7722
      },
      xzm: {
        language: 7723
      },
      xzp: {
        language: 7724
      },
      yaa: {
        language: 7725
      },
      yab: {
        language: 7726
      },
      yac: {
        language: 7727
      },
      yad: {
        language: 7728
      },
      yae: {
        language: 7729
      },
      yaf: {
        language: 7730
      },
      yag: {
        language: 7731
      },
      yah: {
        language: 7732
      },
      yai: {
        language: 7733
      },
      yaj: {
        language: 7734
      },
      yak: {
        language: 7735
      },
      yal: {
        language: 7736
      },
      yam: {
        language: 7737
      },
      yan: {
        language: 7738
      },
      yao: {
        language: 7739
      },
      yap: {
        language: 7740
      },
      yaq: {
        language: 7741
      },
      yar: {
        language: 7742
      },
      yas: {
        language: 7743
      },
      yat: {
        language: 7744
      },
      yau: {
        language: 7745
      },
      yav: {
        language: 7746
      },
      yaw: {
        language: 7747
      },
      yax: {
        language: 7748
      },
      yay: {
        language: 7749
      },
      yaz: {
        language: 7750
      },
      yba: {
        language: 7751
      },
      ybb: {
        language: 7752
      },
      ybd: {
        language: 7753
      },
      ybe: {
        language: 7754
      },
      ybh: {
        language: 7755
      },
      ybi: {
        language: 7756
      },
      ybj: {
        language: 7757
      },
      ybk: {
        language: 7758
      },
      ybl: {
        language: 7759
      },
      ybm: {
        language: 7760
      },
      ybn: {
        language: 7761
      },
      ybo: {
        language: 7762
      },
      ybx: {
        language: 7763
      },
      yby: {
        language: 7764
      },
      ych: {
        language: 7765
      },
      ycl: {
        language: 7766
      },
      ycn: {
        language: 7767
      },
      ycp: {
        language: 7768
      },
      yda: {
        language: 7769
      },
      ydd: {
        language: 7770
      },
      yde: {
        language: 7771
      },
      ydg: {
        language: 7772
      },
      ydk: {
        language: 7773
      },
      yds: {
        language: 7774,
        extlang: 8379
      },
      yea: {
        language: 7775
      },
      yec: {
        language: 7776
      },
      yee: {
        language: 7777
      },
      yei: {
        language: 7778
      },
      yej: {
        language: 7779
      },
      yel: {
        language: 7780
      },
      yen: {
        language: 7781
      },
      yer: {
        language: 7782
      },
      yes: {
        language: 7783
      },
      yet: {
        language: 7784
      },
      yeu: {
        language: 7785
      },
      yev: {
        language: 7786
      },
      yey: {
        language: 7787
      },
      yga: {
        language: 7788
      },
      ygi: {
        language: 7789
      },
      ygl: {
        language: 7790
      },
      ygm: {
        language: 7791
      },
      ygp: {
        language: 7792
      },
      ygr: {
        language: 7793
      },
      ygs: {
        language: 7794,
        extlang: 8380
      },
      ygu: {
        language: 7795
      },
      ygw: {
        language: 7796
      },
      yha: {
        language: 7797
      },
      yhd: {
        language: 7798
      },
      yhl: {
        language: 7799
      },
      yhs: {
        language: 7800,
        extlang: 8381
      },
      yia: {
        language: 7801
      },
      yif: {
        language: 7802
      },
      yig: {
        language: 7803
      },
      yih: {
        language: 7804
      },
      yii: {
        language: 7805
      },
      yij: {
        language: 7806
      },
      yik: {
        language: 7807
      },
      yil: {
        language: 7808
      },
      yim: {
        language: 7809
      },
      yin: {
        language: 7810
      },
      yip: {
        language: 7811
      },
      yiq: {
        language: 7812
      },
      yir: {
        language: 7813
      },
      yis: {
        language: 7814
      },
      yit: {
        language: 7815
      },
      yiu: {
        language: 7816
      },
      yiv: {
        language: 7817
      },
      yix: {
        language: 7818
      },
      yiy: {
        language: 7819
      },
      yiz: {
        language: 7820
      },
      yka: {
        language: 7821
      },
      ykg: {
        language: 7822
      },
      yki: {
        language: 7823
      },
      ykk: {
        language: 7824
      },
      ykl: {
        language: 7825
      },
      ykm: {
        language: 7826
      },
      ykn: {
        language: 7827
      },
      yko: {
        language: 7828
      },
      ykr: {
        language: 7829
      },
      ykt: {
        language: 7830
      },
      yku: {
        language: 7831
      },
      yky: {
        language: 7832
      },
      yla: {
        language: 7833
      },
      ylb: {
        language: 7834
      },
      yle: {
        language: 7835
      },
      ylg: {
        language: 7836
      },
      yli: {
        language: 7837
      },
      yll: {
        language: 7838
      },
      ylm: {
        language: 7839
      },
      yln: {
        language: 7840
      },
      ylo: {
        language: 7841
      },
      ylr: {
        language: 7842
      },
      ylu: {
        language: 7843
      },
      yly: {
        language: 7844
      },
      yma: {
        language: 7845
      },
      ymb: {
        language: 7846
      },
      ymc: {
        language: 7847
      },
      ymd: {
        language: 7848
      },
      yme: {
        language: 7849
      },
      ymg: {
        language: 7850
      },
      ymh: {
        language: 7851
      },
      ymi: {
        language: 7852
      },
      ymk: {
        language: 7853
      },
      yml: {
        language: 7854
      },
      ymm: {
        language: 7855
      },
      ymn: {
        language: 7856
      },
      ymo: {
        language: 7857
      },
      ymp: {
        language: 7858
      },
      ymq: {
        language: 7859
      },
      ymr: {
        language: 7860
      },
      yms: {
        language: 7861
      },
      ymt: {
        language: 7862
      },
      ymx: {
        language: 7863
      },
      ymz: {
        language: 7864
      },
      yna: {
        language: 7865
      },
      ynd: {
        language: 7866
      },
      yne: {
        language: 7867
      },
      yng: {
        language: 7868
      },
      ynh: {
        language: 7869
      },
      ynk: {
        language: 7870
      },
      ynl: {
        language: 7871
      },
      ynn: {
        language: 7872
      },
      yno: {
        language: 7873
      },
      ynq: {
        language: 7874
      },
      yns: {
        language: 7875
      },
      ynu: {
        language: 7876
      },
      yob: {
        language: 7877
      },
      yog: {
        language: 7878
      },
      yoi: {
        language: 7879
      },
      yok: {
        language: 7880
      },
      yol: {
        language: 7881
      },
      yom: {
        language: 7882
      },
      yon: {
        language: 7883
      },
      yos: {
        language: 7884
      },
      yot: {
        language: 7885
      },
      yox: {
        language: 7886
      },
      yoy: {
        language: 7887
      },
      ypa: {
        language: 7888
      },
      ypb: {
        language: 7889
      },
      ypg: {
        language: 7890
      },
      yph: {
        language: 7891
      },
      ypk: {
        language: 7892
      },
      ypm: {
        language: 7893
      },
      ypn: {
        language: 7894
      },
      ypo: {
        language: 7895
      },
      ypp: {
        language: 7896
      },
      ypz: {
        language: 7897
      },
      yra: {
        language: 7898
      },
      yrb: {
        language: 7899
      },
      yre: {
        language: 7900
      },
      yri: {
        language: 7901
      },
      yrk: {
        language: 7902
      },
      yrl: {
        language: 7903
      },
      yrm: {
        language: 7904
      },
      yrn: {
        language: 7905
      },
      yro: {
        language: 7906
      },
      yrs: {
        language: 7907
      },
      yrw: {
        language: 7908
      },
      yry: {
        language: 7909
      },
      ysc: {
        language: 7910
      },
      ysd: {
        language: 7911
      },
      ysg: {
        language: 7912
      },
      ysl: {
        language: 7913,
        extlang: 8382
      },
      ysn: {
        language: 7914
      },
      yso: {
        language: 7915
      },
      ysp: {
        language: 7916
      },
      ysr: {
        language: 7917
      },
      yss: {
        language: 7918
      },
      ysy: {
        language: 7919
      },
      yta: {
        language: 7920
      },
      ytl: {
        language: 7921
      },
      ytp: {
        language: 7922
      },
      ytw: {
        language: 7923
      },
      yty: {
        language: 7924
      },
      yua: {
        language: 7925
      },
      yub: {
        language: 7926
      },
      yuc: {
        language: 7927
      },
      yud: {
        language: 7928
      },
      yue: {
        language: 7929,
        extlang: 8383
      },
      yuf: {
        language: 7930
      },
      yug: {
        language: 7931
      },
      yui: {
        language: 7932
      },
      yuj: {
        language: 7933
      },
      yuk: {
        language: 7934
      },
      yul: {
        language: 7935
      },
      yum: {
        language: 7936
      },
      yun: {
        language: 7937
      },
      yup: {
        language: 7938
      },
      yuq: {
        language: 7939
      },
      yur: {
        language: 7940
      },
      yut: {
        language: 7941
      },
      yuu: {
        language: 7942
      },
      yuw: {
        language: 7943
      },
      yux: {
        language: 7944
      },
      yuy: {
        language: 7945
      },
      yuz: {
        language: 7946
      },
      yva: {
        language: 7947
      },
      yvt: {
        language: 7948
      },
      ywa: {
        language: 7949
      },
      ywg: {
        language: 7950
      },
      ywl: {
        language: 7951
      },
      ywn: {
        language: 7952
      },
      ywq: {
        language: 7953
      },
      ywr: {
        language: 7954
      },
      ywt: {
        language: 7955
      },
      ywu: {
        language: 7956
      },
      yww: {
        language: 7957
      },
      yxa: {
        language: 7958
      },
      yxg: {
        language: 7959
      },
      yxl: {
        language: 7960
      },
      yxm: {
        language: 7961
      },
      yxu: {
        language: 7962
      },
      yxy: {
        language: 7963
      },
      yyr: {
        language: 7964
      },
      yyu: {
        language: 7965
      },
      yyz: {
        language: 7966
      },
      yzg: {
        language: 7967
      },
      yzk: {
        language: 7968
      },
      zaa: {
        language: 7969
      },
      zab: {
        language: 7970
      },
      zac: {
        language: 7971
      },
      zad: {
        language: 7972
      },
      zae: {
        language: 7973
      },
      zaf: {
        language: 7974
      },
      zag: {
        language: 7975
      },
      zah: {
        language: 7976
      },
      zai: {
        language: 7977
      },
      zaj: {
        language: 7978
      },
      zak: {
        language: 7979
      },
      zal: {
        language: 7980
      },
      zam: {
        language: 7981
      },
      zao: {
        language: 7982
      },
      zap: {
        language: 7983
      },
      zaq: {
        language: 7984
      },
      zar: {
        language: 7985
      },
      zas: {
        language: 7986
      },
      zat: {
        language: 7987
      },
      zau: {
        language: 7988
      },
      zav: {
        language: 7989
      },
      zaw: {
        language: 7990
      },
      zax: {
        language: 7991
      },
      zay: {
        language: 7992
      },
      zaz: {
        language: 7993
      },
      zbc: {
        language: 7994
      },
      zbe: {
        language: 7995
      },
      zbl: {
        language: 7996
      },
      zbt: {
        language: 7997
      },
      zbw: {
        language: 7998
      },
      zca: {
        language: 7999
      },
      zch: {
        language: 8e3
      },
      zdj: {
        language: 8001
      },
      zea: {
        language: 8002
      },
      zeg: {
        language: 8003
      },
      zeh: {
        language: 8004
      },
      zen: {
        language: 8005
      },
      zga: {
        language: 8006
      },
      zgb: {
        language: 8007
      },
      zgh: {
        language: 8008
      },
      zgm: {
        language: 8009
      },
      zgn: {
        language: 8010
      },
      zgr: {
        language: 8011
      },
      zhb: {
        language: 8012
      },
      zhd: {
        language: 8013
      },
      zhi: {
        language: 8014
      },
      zhn: {
        language: 8015
      },
      zhw: {
        language: 8016
      },
      zhx: {
        language: 8017
      },
      zia: {
        language: 8018
      },
      zib: {
        language: 8019,
        extlang: 8384
      },
      zik: {
        language: 8020
      },
      zil: {
        language: 8021
      },
      zim: {
        language: 8022
      },
      zin: {
        language: 8023
      },
      zir: {
        language: 8024
      },
      ziw: {
        language: 8025
      },
      ziz: {
        language: 8026
      },
      zka: {
        language: 8027
      },
      zkb: {
        language: 8028
      },
      zkd: {
        language: 8029
      },
      zkg: {
        language: 8030
      },
      zkh: {
        language: 8031
      },
      zkk: {
        language: 8032
      },
      zkn: {
        language: 8033
      },
      zko: {
        language: 8034
      },
      zkp: {
        language: 8035
      },
      zkr: {
        language: 8036
      },
      zkt: {
        language: 8037
      },
      zku: {
        language: 8038
      },
      zkv: {
        language: 8039
      },
      zkz: {
        language: 8040
      },
      zle: {
        language: 8041
      },
      zlj: {
        language: 8042
      },
      zlm: {
        language: 8043,
        extlang: 8385
      },
      zln: {
        language: 8044
      },
      zlq: {
        language: 8045
      },
      zls: {
        language: 8046
      },
      zlw: {
        language: 8047
      },
      zma: {
        language: 8048
      },
      zmb: {
        language: 8049
      },
      zmc: {
        language: 8050
      },
      zmd: {
        language: 8051
      },
      zme: {
        language: 8052
      },
      zmf: {
        language: 8053
      },
      zmg: {
        language: 8054
      },
      zmh: {
        language: 8055
      },
      zmi: {
        language: 8056,
        extlang: 8386
      },
      zmj: {
        language: 8057
      },
      zmk: {
        language: 8058
      },
      zml: {
        language: 8059
      },
      zmm: {
        language: 8060
      },
      zmn: {
        language: 8061
      },
      zmo: {
        language: 8062
      },
      zmp: {
        language: 8063
      },
      zmq: {
        language: 8064
      },
      zmr: {
        language: 8065
      },
      zms: {
        language: 8066
      },
      zmt: {
        language: 8067
      },
      zmu: {
        language: 8068
      },
      zmv: {
        language: 8069
      },
      zmw: {
        language: 8070
      },
      zmx: {
        language: 8071
      },
      zmy: {
        language: 8072
      },
      zmz: {
        language: 8073
      },
      zna: {
        language: 8074
      },
      znd: {
        language: 8075
      },
      zne: {
        language: 8076
      },
      zng: {
        language: 8077
      },
      znk: {
        language: 8078
      },
      zns: {
        language: 8079
      },
      zoc: {
        language: 8080
      },
      zoh: {
        language: 8081
      },
      zom: {
        language: 8082
      },
      zoo: {
        language: 8083
      },
      zoq: {
        language: 8084
      },
      zor: {
        language: 8085
      },
      zos: {
        language: 8086
      },
      zpa: {
        language: 8087
      },
      zpb: {
        language: 8088
      },
      zpc: {
        language: 8089
      },
      zpd: {
        language: 8090
      },
      zpe: {
        language: 8091
      },
      zpf: {
        language: 8092
      },
      zpg: {
        language: 8093
      },
      zph: {
        language: 8094
      },
      zpi: {
        language: 8095
      },
      zpj: {
        language: 8096
      },
      zpk: {
        language: 8097
      },
      zpl: {
        language: 8098
      },
      zpm: {
        language: 8099
      },
      zpn: {
        language: 8100
      },
      zpo: {
        language: 8101
      },
      zpp: {
        language: 8102
      },
      zpq: {
        language: 8103
      },
      zpr: {
        language: 8104
      },
      zps: {
        language: 8105
      },
      zpt: {
        language: 8106
      },
      zpu: {
        language: 8107
      },
      zpv: {
        language: 8108
      },
      zpw: {
        language: 8109
      },
      zpx: {
        language: 8110
      },
      zpy: {
        language: 8111
      },
      zpz: {
        language: 8112
      },
      zqe: {
        language: 8113
      },
      zra: {
        language: 8114
      },
      zrg: {
        language: 8115
      },
      zrn: {
        language: 8116
      },
      zro: {
        language: 8117
      },
      zrp: {
        language: 8118
      },
      zrs: {
        language: 8119
      },
      zsa: {
        language: 8120
      },
      zsk: {
        language: 8121
      },
      zsl: {
        language: 8122,
        extlang: 8387
      },
      zsm: {
        language: 8123,
        extlang: 8388
      },
      zsr: {
        language: 8124
      },
      zsu: {
        language: 8125
      },
      zte: {
        language: 8126
      },
      ztg: {
        language: 8127
      },
      ztl: {
        language: 8128
      },
      ztm: {
        language: 8129
      },
      ztn: {
        language: 8130
      },
      ztp: {
        language: 8131
      },
      ztq: {
        language: 8132
      },
      zts: {
        language: 8133
      },
      ztt: {
        language: 8134
      },
      ztu: {
        language: 8135
      },
      ztx: {
        language: 8136
      },
      zty: {
        language: 8137
      },
      zua: {
        language: 8138
      },
      zuh: {
        language: 8139
      },
      zum: {
        language: 8140
      },
      zun: {
        language: 8141
      },
      zuy: {
        language: 8142
      },
      zwa: {
        language: 8143
      },
      zxx: {
        language: 8144
      },
      zyb: {
        language: 8145
      },
      zyg: {
        language: 8146
      },
      zyj: {
        language: 8147
      },
      zyn: {
        language: 8148
      },
      zyp: {
        language: 8149
      },
      zza: {
        language: 8150
      },
      zzj: {
        language: 8151
      },
      adlm: {
        script: 8389
      },
      afak: {
        script: 8390
      },
      aghb: {
        script: 8391
      },
      ahom: {
        script: 8392
      },
      arab: {
        script: 8393
      },
      aran: {
        script: 8394
      },
      armi: {
        script: 8395
      },
      armn: {
        script: 8396
      },
      avst: {
        script: 8397
      },
      bali: {
        script: 8398
      },
      bamu: {
        script: 8399
      },
      bass: {
        script: 8400
      },
      batk: {
        script: 8401
      },
      beng: {
        script: 8402
      },
      bhks: {
        script: 8403
      },
      blis: {
        script: 8404
      },
      bopo: {
        script: 8405
      },
      brah: {
        script: 8406
      },
      brai: {
        script: 8407
      },
      bugi: {
        script: 8408
      },
      buhd: {
        script: 8409
      },
      cakm: {
        script: 8410
      },
      cans: {
        script: 8411
      },
      cari: {
        script: 8412
      },
      cham: {
        script: 8413
      },
      cher: {
        script: 8414
      },
      chrs: {
        script: 8415
      },
      cirt: {
        script: 8416
      },
      copt: {
        script: 8417
      },
      cpmn: {
        script: 8418
      },
      cprt: {
        script: 8419
      },
      cyrl: {
        script: 8420
      },
      cyrs: {
        script: 8421
      },
      deva: {
        script: 8422
      },
      diak: {
        script: 8423
      },
      dogr: {
        script: 8424
      },
      dsrt: {
        script: 8425
      },
      dupl: {
        script: 8426
      },
      egyd: {
        script: 8427
      },
      egyh: {
        script: 8428
      },
      egyp: {
        script: 8429
      },
      elba: {
        script: 8430
      },
      elym: {
        script: 8431
      },
      ethi: {
        script: 8432
      },
      geok: {
        script: 8433
      },
      geor: {
        script: 8434
      },
      glag: {
        script: 8435
      },
      gong: {
        script: 8436
      },
      gonm: {
        script: 8437
      },
      goth: {
        script: 8438
      },
      gran: {
        script: 8439
      },
      grek: {
        script: 8440
      },
      gujr: {
        script: 8441
      },
      guru: {
        script: 8442
      },
      hanb: {
        script: 8443
      },
      hang: {
        script: 8444
      },
      hani: {
        script: 8445
      },
      hano: {
        script: 8446
      },
      hans: {
        script: 8447
      },
      hant: {
        script: 8448
      },
      hatr: {
        script: 8449
      },
      hebr: {
        script: 8450
      },
      hira: {
        script: 8451
      },
      hluw: {
        script: 8452
      },
      hmng: {
        script: 8453
      },
      hmnp: {
        script: 8454
      },
      hrkt: {
        script: 8455
      },
      hung: {
        script: 8456
      },
      inds: {
        script: 8457
      },
      ital: {
        script: 8458
      },
      jamo: {
        script: 8459
      },
      java: {
        script: 8460
      },
      jpan: {
        script: 8461
      },
      jurc: {
        script: 8462
      },
      kali: {
        script: 8463
      },
      kana: {
        script: 8464
      },
      khar: {
        script: 8465
      },
      khmr: {
        script: 8466
      },
      khoj: {
        script: 8467
      },
      kitl: {
        script: 8468
      },
      kits: {
        script: 8469
      },
      knda: {
        script: 8470
      },
      kore: {
        script: 8471
      },
      kpel: {
        script: 8472
      },
      kthi: {
        script: 8473
      },
      lana: {
        script: 8474
      },
      laoo: {
        script: 8475
      },
      latf: {
        script: 8476
      },
      latg: {
        script: 8477
      },
      latn: {
        script: 8478
      },
      leke: {
        script: 8479
      },
      lepc: {
        script: 8480
      },
      limb: {
        script: 8481
      },
      lina: {
        script: 8482
      },
      linb: {
        script: 8483
      },
      lisu: {
        script: 8484
      },
      loma: {
        script: 8485
      },
      lyci: {
        script: 8486
      },
      lydi: {
        script: 8487
      },
      mahj: {
        script: 8488
      },
      maka: {
        script: 8489
      },
      mand: {
        script: 8490
      },
      mani: {
        script: 8491
      },
      marc: {
        script: 8492
      },
      maya: {
        script: 8493
      },
      medf: {
        script: 8494
      },
      mend: {
        script: 8495
      },
      merc: {
        script: 8496
      },
      mero: {
        script: 8497
      },
      mlym: {
        script: 8498
      },
      modi: {
        script: 8499
      },
      mong: {
        script: 8500
      },
      moon: {
        script: 8501
      },
      mroo: {
        script: 8502
      },
      mtei: {
        script: 8503
      },
      mult: {
        script: 8504
      },
      mymr: {
        script: 8505
      },
      nand: {
        script: 8506
      },
      narb: {
        script: 8507
      },
      nbat: {
        script: 8508
      },
      newa: {
        script: 8509
      },
      nkdb: {
        script: 8510
      },
      nkgb: {
        script: 8511
      },
      nkoo: {
        script: 8512
      },
      nshu: {
        script: 8513
      },
      ogam: {
        script: 8514
      },
      olck: {
        script: 8515
      },
      orkh: {
        script: 8516
      },
      orya: {
        script: 8517
      },
      osge: {
        script: 8518
      },
      osma: {
        script: 8519
      },
      palm: {
        script: 8520
      },
      pauc: {
        script: 8521
      },
      perm: {
        script: 8522
      },
      phag: {
        script: 8523
      },
      phli: {
        script: 8524
      },
      phlp: {
        script: 8525
      },
      phlv: {
        script: 8526
      },
      phnx: {
        script: 8527
      },
      piqd: {
        script: 8528
      },
      plrd: {
        script: 8529
      },
      prti: {
        script: 8530
      },
      "qaaa..qabx": {
        script: 8531
      },
      rjng: {
        script: 8532
      },
      rohg: {
        script: 8533
      },
      roro: {
        script: 8534
      },
      runr: {
        script: 8535
      },
      samr: {
        script: 8536
      },
      sara: {
        script: 8537
      },
      sarb: {
        script: 8538
      },
      saur: {
        script: 8539
      },
      sgnw: {
        script: 8540
      },
      shaw: {
        script: 8541
      },
      shrd: {
        script: 8542
      },
      shui: {
        script: 8543
      },
      sidd: {
        script: 8544
      },
      sind: {
        script: 8545
      },
      sinh: {
        script: 8546
      },
      sogd: {
        script: 8547
      },
      sogo: {
        script: 8548
      },
      sora: {
        script: 8549
      },
      soyo: {
        script: 8550
      },
      sund: {
        script: 8551
      },
      sylo: {
        script: 8552
      },
      syrc: {
        script: 8553
      },
      syre: {
        script: 8554
      },
      syrj: {
        script: 8555
      },
      syrn: {
        script: 8556
      },
      tagb: {
        script: 8557
      },
      takr: {
        script: 8558
      },
      tale: {
        script: 8559
      },
      talu: {
        script: 8560
      },
      taml: {
        script: 8561
      },
      tang: {
        script: 8562
      },
      tavt: {
        script: 8563
      },
      telu: {
        script: 8564
      },
      teng: {
        script: 8565
      },
      tfng: {
        script: 8566
      },
      tglg: {
        script: 8567
      },
      thaa: {
        script: 8568
      },
      thai: {
        script: 8569
      },
      tibt: {
        script: 8570
      },
      tirh: {
        script: 8571
      },
      ugar: {
        script: 8572
      },
      vaii: {
        script: 8573
      },
      visp: {
        script: 8574
      },
      wara: {
        script: 8575
      },
      wcho: {
        script: 8576
      },
      wole: {
        script: 8577
      },
      xpeo: {
        script: 8578
      },
      xsux: {
        script: 8579
      },
      yezi: {
        script: 8580
      },
      yiii: {
        script: 8581
      },
      zanb: {
        script: 8582
      },
      zinh: {
        script: 8583
      },
      zmth: {
        script: 8584
      },
      zsye: {
        script: 8585
      },
      zsym: {
        script: 8586
      },
      zxxx: {
        script: 8587
      },
      zyyy: {
        script: 8588
      },
      zzzz: {
        script: 8589
      },
      ac: {
        region: 8591
      },
      ad: {
        region: 8592
      },
      ag: {
        region: 8595
      },
      ai: {
        region: 8596
      },
      al: {
        region: 8597
      },
      ao: {
        region: 8600
      },
      aq: {
        region: 8601
      },
      at: {
        region: 8604
      },
      au: {
        region: 8605
      },
      aw: {
        region: 8606
      },
      ax: {
        region: 8607
      },
      bb: {
        region: 8610
      },
      bd: {
        region: 8611
      },
      bf: {
        region: 8613
      },
      bj: {
        region: 8617
      },
      bl: {
        region: 8618
      },
      bq: {
        region: 8622
      },
      bt: {
        region: 8625
      },
      bu: {
        region: 8626
      },
      bv: {
        region: 8627
      },
      bw: {
        region: 8628
      },
      by: {
        region: 8629
      },
      bz: {
        region: 8630
      },
      cc: {
        region: 8632
      },
      cd: {
        region: 8633
      },
      cf: {
        region: 8634
      },
      cg: {
        region: 8635
      },
      ci: {
        region: 8637
      },
      ck: {
        region: 8638
      },
      cl: {
        region: 8639
      },
      cm: {
        region: 8640
      },
      cn: {
        region: 8641
      },
      cp: {
        region: 8643
      },
      cw: {
        region: 8648
      },
      cx: {
        region: 8649
      },
      cz: {
        region: 8651
      },
      dd: {
        region: 8652
      },
      dg: {
        region: 8654
      },
      dj: {
        region: 8655
      },
      dk: {
        region: 8656
      },
      dm: {
        region: 8657
      },
      do: {
        region: 8658
      },
      ea: {
        region: 8660
      },
      ec: {
        region: 8661
      },
      eg: {
        region: 8663
      },
      eh: {
        region: 8664
      },
      er: {
        region: 8665
      },
      ez: {
        region: 8669
      },
      fk: {
        region: 8672
      },
      fm: {
        region: 8673
      },
      fx: {
        region: 8676
      },
      gb: {
        region: 8678
      },
      ge: {
        region: 8680
      },
      gf: {
        region: 8681
      },
      gg: {
        region: 8682
      },
      gh: {
        region: 8683
      },
      gi: {
        region: 8684
      },
      gm: {
        region: 8686
      },
      gp: {
        region: 8688
      },
      gq: {
        region: 8689
      },
      gr: {
        region: 8690
      },
      gs: {
        region: 8691
      },
      gt: {
        region: 8692
      },
      gw: {
        region: 8694
      },
      gy: {
        region: 8695
      },
      hk: {
        region: 8696
      },
      hm: {
        region: 8697
      },
      hn: {
        region: 8698
      },
      ic: {
        region: 8702
      },
      il: {
        region: 8705
      },
      im: {
        region: 8706
      },
      iq: {
        region: 8709
      },
      ir: {
        region: 8710
      },
      je: {
        region: 8713
      },
      jm: {
        region: 8714
      },
      jo: {
        region: 8715
      },
      jp: {
        region: 8716
      },
      ke: {
        region: 8717
      },
      kh: {
        region: 8719
      },
      kp: {
        region: 8723
      },
      kz: {
        region: 8727
      },
      lc: {
        region: 8730
      },
      lk: {
        region: 8732
      },
      lr: {
        region: 8733
      },
      ls: {
        region: 8734
      },
      ly: {
        region: 8738
      },
      ma: {
        region: 8739
      },
      mc: {
        region: 8740
      },
      md: {
        region: 8741
      },
      me: {
        region: 8742
      },
      mf: {
        region: 8743
      },
      mm: {
        region: 8748
      },
      mp: {
        region: 8751
      },
      mq: {
        region: 8752
      },
      mu: {
        region: 8756
      },
      mv: {
        region: 8757
      },
      mw: {
        region: 8758
      },
      mx: {
        region: 8759
      },
      mz: {
        region: 8761
      },
      nc: {
        region: 8763
      },
      nf: {
        region: 8765
      },
      ni: {
        region: 8767
      },
      np: {
        region: 8770
      },
      nt: {
        region: 8772
      },
      nu: {
        region: 8773
      },
      nz: {
        region: 8774
      },
      pe: {
        region: 8777
      },
      pf: {
        region: 8778
      },
      pg: {
        region: 8779
      },
      ph: {
        region: 8780
      },
      pk: {
        region: 8781
      },
      pm: {
        region: 8783
      },
      pn: {
        region: 8784
      },
      pr: {
        region: 8785
      },
      pw: {
        region: 8788
      },
      py: {
        region: 8789
      },
      qa: {
        region: 8790
      },
      "qm..qz": {
        region: 8791
      },
      re: {
        region: 8792
      },
      rs: {
        region: 8794
      },
      sb: {
        region: 8798
      },
      sj: {
        region: 8805
      },
      sx: {
        region: 8816
      },
      sy: {
        region: 8817
      },
      sz: {
        region: 8818
      },
      tc: {
        region: 8820
      },
      td: {
        region: 8821
      },
      tf: {
        region: 8822
      },
      tj: {
        region: 8825
      },
      tm: {
        region: 8828
      },
      tp: {
        region: 8831
      },
      tv: {
        region: 8834
      },
      tz: {
        region: 8836
      },
      ua: {
        region: 8837
      },
      um: {
        region: 8839
      },
      un: {
        region: 8840
      },
      us: {
        region: 8841
      },
      uy: {
        region: 8842
      },
      va: {
        region: 8844
      },
      vc: {
        region: 8845
      },
      vg: {
        region: 8847
      },
      vn: {
        region: 8849
      },
      vu: {
        region: 8850
      },
      wf: {
        region: 8851
      },
      ws: {
        region: 8852
      },
      "xa..xz": {
        region: 8853
      },
      yd: {
        region: 8854
      },
      ye: {
        region: 8855
      },
      yt: {
        region: 8856
      },
      yu: {
        region: 8857
      },
      zm: {
        region: 8859
      },
      zr: {
        region: 8860
      },
      zw: {
        region: 8861
      },
      zz: {
        region: 8862
      },
      "001": {
        region: 8863
      },
      "002": {
        region: 8864
      },
      "003": {
        region: 8865
      },
      "005": {
        region: 8866
      },
      "009": {
        region: 8867
      },
      "011": {
        region: 8868
      },
      "013": {
        region: 8869
      },
      "014": {
        region: 8870
      },
      "015": {
        region: 8871
      },
      "017": {
        region: 8872
      },
      "018": {
        region: 8873
      },
      "019": {
        region: 8874
      },
      "021": {
        region: 8875
      },
      "029": {
        region: 8876
      },
      "030": {
        region: 8877
      },
      "034": {
        region: 8878
      },
      "035": {
        region: 8879
      },
      "039": {
        region: 8880
      },
      "053": {
        region: 8881
      },
      "054": {
        region: 8882
      },
      "057": {
        region: 8883
      },
      "061": {
        region: 8884
      },
      "1606nict": {
        variant: 8894
      },
      "1694acad": {
        variant: 8895
      },
      "1959acad": {
        variant: 8897
      },
      abl1943: {
        variant: 8900
      },
      alalc97: {
        variant: 8901
      },
      aluku: {
        variant: 8902
      },
      akuapem: {
        variant: 8903
      },
      ao1990: {
        variant: 8904
      },
      aranes: {
        variant: 8905
      },
      arevela: {
        variant: 8906
      },
      arevmda: {
        variant: 8907
      },
      asante: {
        variant: 8908
      },
      auvern: {
        variant: 8909
      },
      baku1926: {
        variant: 8910
      },
      balanka: {
        variant: 8911
      },
      barla: {
        variant: 8912
      },
      basiceng: {
        variant: 8913
      },
      bauddha: {
        variant: 8914
      },
      biscayan: {
        variant: 8915
      },
      biske: {
        variant: 8916
      },
      bohoric: {
        variant: 8917
      },
      boont: {
        variant: 8918
      },
      bornholm: {
        variant: 8919
      },
      cisaup: {
        variant: 8920
      },
      colb1945: {
        variant: 8921
      },
      cornu: {
        variant: 8922
      },
      creiss: {
        variant: 8923
      },
      dajnko: {
        variant: 8924
      },
      ekavsk: {
        variant: 8925
      },
      emodeng: {
        variant: 8926
      },
      fonipa: {
        variant: 8927
      },
      fonkirsh: {
        variant: 8928
      },
      fonnapa: {
        variant: 8929
      },
      fonupa: {
        variant: 8930
      },
      fonxsamp: {
        variant: 8931
      },
      gascon: {
        variant: 8932
      },
      grclass: {
        variant: 8933
      },
      grital: {
        variant: 8934
      },
      grmistr: {
        variant: 8935
      },
      hepburn: {
        variant: 8936
      },
      heploc: {
        variant: 8937
      },
      hognorsk: {
        variant: 8938
      },
      hsistemo: {
        variant: 8939
      },
      ijekavsk: {
        variant: 8940
      },
      itihasa: {
        variant: 8941
      },
      ivanchov: {
        variant: 8942
      },
      jauer: {
        variant: 8943
      },
      jyutping: {
        variant: 8944
      },
      kkcor: {
        variant: 8945
      },
      kociewie: {
        variant: 8946
      },
      kscor: {
        variant: 8947
      },
      laukika: {
        variant: 8948
      },
      lemosin: {
        variant: 8949
      },
      lengadoc: {
        variant: 8950
      },
      lipaw: {
        variant: 8951
      },
      luna1918: {
        variant: 8952
      },
      metelko: {
        variant: 8953
      },
      monoton: {
        variant: 8954
      },
      ndyuka: {
        variant: 8955
      },
      nedis: {
        variant: 8956
      },
      newfound: {
        variant: 8957
      },
      nicard: {
        variant: 8958
      },
      njiva: {
        variant: 8959
      },
      nulik: {
        variant: 8960
      },
      osojs: {
        variant: 8961
      },
      oxendict: {
        variant: 8962
      },
      pahawh2: {
        variant: 8963
      },
      pahawh3: {
        variant: 8964
      },
      pahawh4: {
        variant: 8965
      },
      pamaka: {
        variant: 8966
      },
      petr1708: {
        variant: 8967
      },
      pinyin: {
        variant: 8968
      },
      polyton: {
        variant: 8969
      },
      provenc: {
        variant: 8970
      },
      puter: {
        variant: 8971
      },
      rigik: {
        variant: 8972
      },
      rozaj: {
        variant: 8973
      },
      rumgr: {
        variant: 8974
      },
      scotland: {
        variant: 8975
      },
      scouse: {
        variant: 8976
      },
      simple: {
        variant: 8977
      },
      solba: {
        variant: 8978
      },
      sotav: {
        variant: 8979
      },
      spanglis: {
        variant: 8980
      },
      surmiran: {
        variant: 8981
      },
      sursilv: {
        variant: 8982
      },
      sutsilv: {
        variant: 8983
      },
      tarask: {
        variant: 8984
      },
      uccor: {
        variant: 8985
      },
      ucrcor: {
        variant: 8986
      },
      ulster: {
        variant: 8987
      },
      unifon: {
        variant: 8988
      },
      vaidika: {
        variant: 8989
      },
      valencia: {
        variant: 8990
      },
      vallader: {
        variant: 8991
      },
      vivaraup: {
        variant: 8992
      },
      wadegile: {
        variant: 8993
      },
      xsistemo: {
        variant: 8994
      },
      "art-lojban": {
        grandfathered: 8995
      },
      "cel-gaulish": {
        grandfathered: 8996
      },
      "en-gb-oed": {
        grandfathered: 8997
      },
      "i-ami": {
        grandfathered: 8998
      },
      "i-bnn": {
        grandfathered: 8999
      },
      "i-default": {
        grandfathered: 9e3
      },
      "i-enochian": {
        grandfathered: 9001
      },
      "i-hak": {
        grandfathered: 9002
      },
      "i-klingon": {
        grandfathered: 9003
      },
      "i-lux": {
        grandfathered: 9004
      },
      "i-mingo": {
        grandfathered: 9005
      },
      "i-navajo": {
        grandfathered: 9006
      },
      "i-pwn": {
        grandfathered: 9007
      },
      "i-tao": {
        grandfathered: 9008
      },
      "i-tay": {
        grandfathered: 9009
      },
      "i-tsu": {
        grandfathered: 9010
      },
      "no-bok": {
        grandfathered: 9011
      },
      "no-nyn": {
        grandfathered: 9012
      },
      "sgn-be-fr": {
        grandfathered: 9013
      },
      "sgn-be-nl": {
        grandfathered: 9014
      },
      "sgn-ch-de": {
        grandfathered: 9015
      },
      "zh-guoyu": {
        grandfathered: 9016
      },
      "zh-hakka": {
        grandfathered: 9017
      },
      "zh-min": {
        grandfathered: 9018
      },
      "zh-min-nan": {
        grandfathered: 9019
      },
      "zh-xiang": {
        grandfathered: 9020
      },
      "az-arab": {
        redundant: 9021
      },
      "az-cyrl": {
        redundant: 9022
      },
      "az-latn": {
        redundant: 9023
      },
      "be-latn": {
        redundant: 9024
      },
      "bs-cyrl": {
        redundant: 9025
      },
      "bs-latn": {
        redundant: 9026
      },
      "de-1901": {
        redundant: 9027
      },
      "de-1996": {
        redundant: 9028
      },
      "de-at-1901": {
        redundant: 9029
      },
      "de-at-1996": {
        redundant: 9030
      },
      "de-ch-1901": {
        redundant: 9031
      },
      "de-ch-1996": {
        redundant: 9032
      },
      "de-de-1901": {
        redundant: 9033
      },
      "de-de-1996": {
        redundant: 9034
      },
      "en-boont": {
        redundant: 9035
      },
      "en-scouse": {
        redundant: 9036
      },
      "es-419": {
        redundant: 9037
      },
      "iu-cans": {
        redundant: 9038
      },
      "iu-latn": {
        redundant: 9039
      },
      "mn-cyrl": {
        redundant: 9040
      },
      "mn-mong": {
        redundant: 9041
      },
      "sgn-br": {
        redundant: 9042
      },
      "sgn-co": {
        redundant: 9043
      },
      "sgn-de": {
        redundant: 9044
      },
      "sgn-dk": {
        redundant: 9045
      },
      "sgn-es": {
        redundant: 9046
      },
      "sgn-fr": {
        redundant: 9047
      },
      "sgn-gb": {
        redundant: 9048
      },
      "sgn-gr": {
        redundant: 9049
      },
      "sgn-ie": {
        redundant: 9050
      },
      "sgn-it": {
        redundant: 9051
      },
      "sgn-jp": {
        redundant: 9052
      },
      "sgn-mx": {
        redundant: 9053
      },
      "sgn-ni": {
        redundant: 9054
      },
      "sgn-nl": {
        redundant: 9055
      },
      "sgn-no": {
        redundant: 9056
      },
      "sgn-pt": {
        redundant: 9057
      },
      "sgn-se": {
        redundant: 9058
      },
      "sgn-us": {
        redundant: 9059
      },
      "sgn-za": {
        redundant: 9060
      },
      "sl-nedis": {
        redundant: 9061
      },
      "sl-rozaj": {
        redundant: 9062
      },
      "sr-cyrl": {
        redundant: 9063
      },
      "sr-latn": {
        redundant: 9064
      },
      "tg-arab": {
        redundant: 9065
      },
      "tg-cyrl": {
        redundant: 9066
      },
      "uz-cyrl": {
        redundant: 9067
      },
      "uz-latn": {
        redundant: 9068
      },
      "yi-latn": {
        redundant: 9069
      },
      "zh-cmn": {
        redundant: 9070
      },
      "zh-cmn-hans": {
        redundant: 9071
      },
      "zh-cmn-hant": {
        redundant: 9072
      },
      "zh-gan": {
        redundant: 9073
      },
      "zh-hans": {
        redundant: 9074
      },
      "zh-hans-cn": {
        redundant: 9075
      },
      "zh-hans-hk": {
        redundant: 9076
      },
      "zh-hans-mo": {
        redundant: 9077
      },
      "zh-hans-sg": {
        redundant: 9078
      },
      "zh-hans-tw": {
        redundant: 9079
      },
      "zh-hant": {
        redundant: 9080
      },
      "zh-hant-cn": {
        redundant: 9081
      },
      "zh-hant-hk": {
        redundant: 9082
      },
      "zh-hant-mo": {
        redundant: 9083
      },
      "zh-hant-sg": {
        redundant: 9084
      },
      "zh-hant-tw": {
        redundant: 9085
      },
      "zh-wuu": {
        redundant: 9086
      },
      "zh-yue": {
        redundant: 9087
      }
    };
  }
});

// node_modules/language-subtag-registry/data/json/registry.json
var require_registry = __commonJS({
  "node_modules/language-subtag-registry/data/json/registry.json"(exports, module2) {
    module2.exports = [
      {
        Type: "language",
        Subtag: "aa",
        Description: [
          "Afar"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ab",
        Description: [
          "Abkhazian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Cyrl"
      },
      {
        Type: "language",
        Subtag: "ae",
        Description: [
          "Avestan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "af",
        Description: [
          "Afrikaans"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "ak",
        Description: [
          "Akan"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "am",
        Description: [
          "Amharic"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Ethi"
      },
      {
        Type: "language",
        Subtag: "an",
        Description: [
          "Aragonese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ar",
        Description: [
          "Arabic"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Arab",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "as",
        Description: [
          "Assamese"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Beng"
      },
      {
        Type: "language",
        Subtag: "av",
        Description: [
          "Avaric"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ay",
        Description: [
          "Aymara"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "az",
        Description: [
          "Azerbaijani"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "ba",
        Description: [
          "Bashkir"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "be",
        Description: [
          "Belarusian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Cyrl"
      },
      {
        Type: "language",
        Subtag: "bg",
        Description: [
          "Bulgarian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Cyrl"
      },
      {
        Type: "language",
        Subtag: "bh",
        Description: [
          "Bihari languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "bi",
        Description: [
          "Bislama"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "bm",
        Description: [
          "Bambara"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "bn",
        Description: [
          "Bengali",
          "Bangla"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Beng"
      },
      {
        Type: "language",
        Subtag: "bo",
        Description: [
          "Tibetan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "br",
        Description: [
          "Breton"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "bs",
        Description: [
          "Bosnian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Macrolanguage: "sh"
      },
      {
        Type: "language",
        Subtag: "ca",
        Description: [
          "Catalan",
          "Valencian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "ce",
        Description: [
          "Chechen"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ch",
        Description: [
          "Chamorro"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "co",
        Description: [
          "Corsican"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "cr",
        Description: [
          "Cree"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "cs",
        Description: [
          "Czech"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "cu",
        Description: [
          "Church Slavic",
          "Church Slavonic",
          "Old Bulgarian",
          "Old Church Slavonic",
          "Old Slavonic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "cv",
        Description: [
          "Chuvash"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "cy",
        Description: [
          "Welsh"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "da",
        Description: [
          "Danish"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "de",
        Description: [
          "German"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "dv",
        Description: [
          "Dhivehi",
          "Divehi",
          "Maldivian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Thaa"
      },
      {
        Type: "language",
        Subtag: "dz",
        Description: [
          "Dzongkha"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Tibt"
      },
      {
        Type: "language",
        Subtag: "ee",
        Description: [
          "Ewe"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "el",
        Description: [
          "Modern Greek (1453-)"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Grek"
      },
      {
        Type: "language",
        Subtag: "en",
        Description: [
          "English"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "eo",
        Description: [
          "Esperanto"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "es",
        Description: [
          "Spanish",
          "Castilian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "et",
        Description: [
          "Estonian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "eu",
        Description: [
          "Basque"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "fa",
        Description: [
          "Persian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Arab",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "ff",
        Description: [
          "Fulah"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "fi",
        Description: [
          "Finnish"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "fj",
        Description: [
          "Fijian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "fo",
        Description: [
          "Faroese"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "fr",
        Description: [
          "French"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "fy",
        Description: [
          "Western Frisian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "ga",
        Description: [
          "Irish"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "gd",
        Description: [
          "Scottish Gaelic",
          "Gaelic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "gl",
        Description: [
          "Galician"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "gn",
        Description: [
          "Guarani"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "gu",
        Description: [
          "Gujarati"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Gujr"
      },
      {
        Type: "language",
        Subtag: "gv",
        Description: [
          "Manx"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "ha",
        Description: [
          "Hausa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "he",
        Description: [
          "Hebrew"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Hebr"
      },
      {
        Type: "language",
        Subtag: "hi",
        Description: [
          "Hindi"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Deva"
      },
      {
        Type: "language",
        Subtag: "ho",
        Description: [
          "Hiri Motu"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "hr",
        Description: [
          "Croatian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Macrolanguage: "sh"
      },
      {
        Type: "language",
        Subtag: "ht",
        Description: [
          "Haitian",
          "Haitian Creole"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "hu",
        Description: [
          "Hungarian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "hy",
        Description: [
          "Armenian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Armn",
        Comments: [
          "see also hyw"
        ]
      },
      {
        Type: "language",
        Subtag: "hz",
        Description: [
          "Herero"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ia",
        Description: [
          "Interlingua (International Auxiliary Language Association)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "id",
        Description: [
          "Indonesian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "ie",
        Description: [
          "Interlingue",
          "Occidental"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ig",
        Description: [
          "Igbo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ii",
        Description: [
          "Sichuan Yi",
          "Nuosu"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ik",
        Description: [
          "Inupiaq"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "in",
        Description: [
          "Indonesian"
        ],
        Added: "2005-10-16",
        Deprecated: "1989-01-01",
        "Preferred-Value": "id",
        "Suppress-Script": "Latn",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "io",
        Description: [
          "Ido"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "is",
        Description: [
          "Icelandic"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "it",
        Description: [
          "Italian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "iu",
        Description: [
          "Inuktitut"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "iw",
        Description: [
          "Hebrew"
        ],
        Added: "2005-10-16",
        Deprecated: "1989-01-01",
        "Preferred-Value": "he",
        "Suppress-Script": "Hebr"
      },
      {
        Type: "language",
        Subtag: "ja",
        Description: [
          "Japanese"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Jpan"
      },
      {
        Type: "language",
        Subtag: "ji",
        Description: [
          "Yiddish"
        ],
        Added: "2005-10-16",
        Deprecated: "1989-01-01",
        "Preferred-Value": "yi"
      },
      {
        Type: "language",
        Subtag: "jv",
        Description: [
          "Javanese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "jw",
        Description: [
          "Javanese"
        ],
        Added: "2005-10-16",
        Deprecated: "2001-08-13",
        "Preferred-Value": "jv",
        Comments: [
          "published by error in Table 1 of ISO 639:1988"
        ]
      },
      {
        Type: "language",
        Subtag: "ka",
        Description: [
          "Georgian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Geor"
      },
      {
        Type: "language",
        Subtag: "kg",
        Description: [
          "Kongo"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "ki",
        Description: [
          "Kikuyu",
          "Gikuyu"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "kj",
        Description: [
          "Kuanyama",
          "Kwanyama"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "kk",
        Description: [
          "Kazakh"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Cyrl"
      },
      {
        Type: "language",
        Subtag: "kl",
        Description: [
          "Kalaallisut",
          "Greenlandic"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "km",
        Description: [
          "Khmer",
          "Central Khmer"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Khmr"
      },
      {
        Type: "language",
        Subtag: "kn",
        Description: [
          "Kannada"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Knda"
      },
      {
        Type: "language",
        Subtag: "ko",
        Description: [
          "Korean"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Kore"
      },
      {
        Type: "language",
        Subtag: "kr",
        Description: [
          "Kanuri"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "ks",
        Description: [
          "Kashmiri"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ku",
        Description: [
          "Kurdish"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "kv",
        Description: [
          "Komi"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "kw",
        Description: [
          "Cornish"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ky",
        Description: [
          "Kirghiz",
          "Kyrgyz"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "la",
        Description: [
          "Latin"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "lb",
        Description: [
          "Luxembourgish",
          "Letzeburgesch"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "lg",
        Description: [
          "Ganda",
          "Luganda"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "li",
        Description: [
          "Limburgan",
          "Limburger",
          "Limburgish"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ln",
        Description: [
          "Lingala"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "lo",
        Description: [
          "Lao"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Laoo"
      },
      {
        Type: "language",
        Subtag: "lt",
        Description: [
          "Lithuanian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "lu",
        Description: [
          "Luba-Katanga"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "lv",
        Description: [
          "Latvian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "mg",
        Description: [
          "Malagasy"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "mh",
        Description: [
          "Marshallese"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "mi",
        Description: [
          "Maori"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "mk",
        Description: [
          "Macedonian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Cyrl"
      },
      {
        Type: "language",
        Subtag: "ml",
        Description: [
          "Malayalam"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Mlym"
      },
      {
        Type: "language",
        Subtag: "mn",
        Description: [
          "Mongolian"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "mo",
        Description: [
          "Moldavian",
          "Moldovan"
        ],
        Added: "2005-10-16",
        Deprecated: "2008-11-22",
        "Preferred-Value": "ro",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "mr",
        Description: [
          "Marathi"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Deva"
      },
      {
        Type: "language",
        Subtag: "ms",
        Description: [
          "Malay (macrolanguage)"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "mt",
        Description: [
          "Maltese"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "my",
        Description: [
          "Burmese"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Mymr"
      },
      {
        Type: "language",
        Subtag: "na",
        Description: [
          "Nauru"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "nb",
        Description: [
          "Norwegian Bokm\xE5l"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Macrolanguage: "no"
      },
      {
        Type: "language",
        Subtag: "nd",
        Description: [
          "North Ndebele"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "ne",
        Description: [
          "Nepali (macrolanguage)"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Deva",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "ng",
        Description: [
          "Ndonga"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "nl",
        Description: [
          "Dutch",
          "Flemish"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "nn",
        Description: [
          "Norwegian Nynorsk"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Macrolanguage: "no"
      },
      {
        Type: "language",
        Subtag: "no",
        Description: [
          "Norwegian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "nr",
        Description: [
          "South Ndebele"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "nv",
        Description: [
          "Navajo",
          "Navaho"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ny",
        Description: [
          "Nyanja",
          "Chewa",
          "Chichewa"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "oc",
        Description: [
          "Occitan (post 1500)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "oj",
        Description: [
          "Ojibwa"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "om",
        Description: [
          "Oromo"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "or",
        Description: [
          "Oriya (macrolanguage)",
          "Odia (macrolanguage)"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Orya",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "os",
        Description: [
          "Ossetian",
          "Ossetic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "pa",
        Description: [
          "Panjabi",
          "Punjabi"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Guru"
      },
      {
        Type: "language",
        Subtag: "pi",
        Description: [
          "Pali"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "pl",
        Description: [
          "Polish"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "ps",
        Description: [
          "Pushto",
          "Pashto"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Arab",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "pt",
        Description: [
          "Portuguese"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "qu",
        Description: [
          "Quechua"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "rm",
        Description: [
          "Romansh"
        ],
        "Suppress-Script": "Latn",
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "rn",
        Description: [
          "Rundi"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "ro",
        Description: [
          "Romanian",
          "Moldavian",
          "Moldovan"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "ru",
        Description: [
          "Russian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Cyrl"
      },
      {
        Type: "language",
        Subtag: "rw",
        Description: [
          "Kinyarwanda"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "sa",
        Description: [
          "Sanskrit"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sc",
        Description: [
          "Sardinian"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "sd",
        Description: [
          "Sindhi"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "se",
        Description: [
          "Northern Sami"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sg",
        Description: [
          "Sango"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "sh",
        Description: [
          "Serbo-Croatian"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage",
        Comments: [
          "sr, hr, bs are preferred for most modern uses"
        ]
      },
      {
        Type: "language",
        Subtag: "si",
        Description: [
          "Sinhala",
          "Sinhalese"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Sinh"
      },
      {
        Type: "language",
        Subtag: "sk",
        Description: [
          "Slovak"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "sl",
        Description: [
          "Slovenian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "sm",
        Description: [
          "Samoan"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "sn",
        Description: [
          "Shona"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "so",
        Description: [
          "Somali"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "sq",
        Description: [
          "Albanian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "sr",
        Description: [
          "Serbian"
        ],
        Added: "2005-10-16",
        Macrolanguage: "sh",
        Comments: [
          "see cnr for Montenegrin"
        ]
      },
      {
        Type: "language",
        Subtag: "ss",
        Description: [
          "Swati"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "st",
        Description: [
          "Southern Sotho"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "su",
        Description: [
          "Sundanese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sv",
        Description: [
          "Swedish"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "sw",
        Description: [
          "Swahili (macrolanguage)"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "ta",
        Description: [
          "Tamil"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Taml"
      },
      {
        Type: "language",
        Subtag: "te",
        Description: [
          "Telugu"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Telu"
      },
      {
        Type: "language",
        Subtag: "tg",
        Description: [
          "Tajik"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "th",
        Description: [
          "Thai"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Thai"
      },
      {
        Type: "language",
        Subtag: "ti",
        Description: [
          "Tigrinya"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Ethi"
      },
      {
        Type: "language",
        Subtag: "tk",
        Description: [
          "Turkmen"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "tl",
        Description: [
          "Tagalog"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "tn",
        Description: [
          "Tswana"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "to",
        Description: [
          "Tonga (Tonga Islands)"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "tr",
        Description: [
          "Turkish"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "ts",
        Description: [
          "Tsonga"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "tt",
        Description: [
          "Tatar"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "tw",
        Description: [
          "Twi"
        ],
        Added: "2005-10-16",
        Macrolanguage: "ak"
      },
      {
        Type: "language",
        Subtag: "ty",
        Description: [
          "Tahitian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ug",
        Description: [
          "Uighur",
          "Uyghur"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "uk",
        Description: [
          "Ukrainian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Cyrl"
      },
      {
        Type: "language",
        Subtag: "ur",
        Description: [
          "Urdu"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Arab"
      },
      {
        Type: "language",
        Subtag: "uz",
        Description: [
          "Uzbek"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "ve",
        Description: [
          "Venda"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "vi",
        Description: [
          "Vietnamese"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "vo",
        Description: [
          "Volap\xFCk"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "wa",
        Description: [
          "Walloon"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "wo",
        Description: [
          "Wolof"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "xh",
        Description: [
          "Xhosa"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "yi",
        Description: [
          "Yiddish"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Hebr",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "yo",
        Description: [
          "Yoruba"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "za",
        Description: [
          "Zhuang",
          "Chuang"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "zh",
        Description: [
          "Chinese"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "zu",
        Description: [
          "Zulu"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "aaa",
        Description: [
          "Ghotuo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aab",
        Description: [
          "Alumu-Tesu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aac",
        Description: [
          "Ari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aad",
        Description: [
          "Amal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aae",
        Description: [
          "Arb\xEBresh\xEB Albanian"
        ],
        Added: "2009-07-29",
        Macrolanguage: "sq"
      },
      {
        Type: "language",
        Subtag: "aaf",
        Description: [
          "Aranadan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aag",
        Description: [
          "Ambrak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aah",
        Description: [
          "Abu' Arapesh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aai",
        Description: [
          "Arifama-Miniafia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aak",
        Description: [
          "Ankave"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aal",
        Description: [
          "Afade"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aam",
        Description: [
          "Aramanik"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "aas"
      },
      {
        Type: "language",
        Subtag: "aan",
        Description: [
          "Anamb\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aao",
        Description: [
          "Algerian Saharan Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "aap",
        Description: [
          "Par\xE1 Ar\xE1ra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aaq",
        Description: [
          "Eastern Abnaki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aas",
        Description: [
          "Aas\xE1x"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aat",
        Description: [
          "Arvanitika Albanian"
        ],
        Added: "2009-07-29",
        Macrolanguage: "sq"
      },
      {
        Type: "language",
        Subtag: "aau",
        Description: [
          "Abau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aav",
        Description: [
          "Austro-Asiatic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "aaw",
        Description: [
          "Solong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aax",
        Description: [
          "Mandobo Atas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aaz",
        Description: [
          "Amarasi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aba",
        Description: [
          "Ab\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abb",
        Description: [
          "Bankon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abc",
        Description: [
          "Ambala Ayta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abd",
        Description: [
          "Manide"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abe",
        Description: [
          "Western Abnaki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abf",
        Description: [
          "Abai Sungai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abg",
        Description: [
          "Abaga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abh",
        Description: [
          "Tajiki Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "abi",
        Description: [
          "Abidji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abj",
        Description: [
          "Aka-Bea"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abl",
        Description: [
          "Lampung Nyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abm",
        Description: [
          "Abanyom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abn",
        Description: [
          "Abua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abo",
        Description: [
          "Abon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abp",
        Description: [
          "Abellen Ayta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abq",
        Description: [
          "Abaza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abr",
        Description: [
          "Abron"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abs",
        Description: [
          "Ambonese Malay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abt",
        Description: [
          "Ambulas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abu",
        Description: [
          "Abure"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abv",
        Description: [
          "Baharna Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "abw",
        Description: [
          "Pal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abx",
        Description: [
          "Inabaknon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aby",
        Description: [
          "Aneme Wake"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "abz",
        Description: [
          "Abui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aca",
        Description: [
          "Achagua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "acb",
        Description: [
          "\xC1nc\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "acd",
        Description: [
          "Gikyode"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ace",
        Description: [
          "Achinese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "acf",
        Description: [
          "Saint Lucian Creole French"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ach",
        Description: [
          "Acoli"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "aci",
        Description: [
          "Aka-Cari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ack",
        Description: [
          "Aka-Kora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "acl",
        Description: [
          "Akar-Bale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "acm",
        Description: [
          "Mesopotamian Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "acn",
        Description: [
          "Achang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "acp",
        Description: [
          "Eastern Acipa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "acq",
        Description: [
          "Ta'izzi-Adeni Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "acr",
        Description: [
          "Achi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "acs",
        Description: [
          "Acro\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "act",
        Description: [
          "Achterhoeks"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "acu",
        Description: [
          "Achuar-Shiwiar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "acv",
        Description: [
          "Achumawi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "acw",
        Description: [
          "Hijazi Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "acx",
        Description: [
          "Omani Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "acy",
        Description: [
          "Cypriot Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "acz",
        Description: [
          "Acheron"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ada",
        Description: [
          "Adangme"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "adb",
        Description: [
          "Adabe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "add",
        Description: [
          "Lidzonka",
          "Dzodinka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ade",
        Description: [
          "Adele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "adf",
        Description: [
          "Dhofari Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "adg",
        Description: [
          "Andegerebinha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "adh",
        Description: [
          "Adhola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "adi",
        Description: [
          "Adi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "adj",
        Description: [
          "Adioukrou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "adl",
        Description: [
          "Galo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "adn",
        Description: [
          "Adang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ado",
        Description: [
          "Abu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "adp",
        Description: [
          "Adap"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "dz"
      },
      {
        Type: "language",
        Subtag: "adq",
        Description: [
          "Adangbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "adr",
        Description: [
          "Adonara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ads",
        Description: [
          "Adamorobe Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "adt",
        Description: [
          "Adnyamathanha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "adu",
        Description: [
          "Aduge"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "adw",
        Description: [
          "Amundava"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "adx",
        Description: [
          "Amdo Tibetan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ady",
        Description: [
          "Adyghe",
          "Adygei"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "adz",
        Description: [
          "Adzera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aea",
        Description: [
          "Areba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aeb",
        Description: [
          "Tunisian Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "aec",
        Description: [
          "Saidi Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "aed",
        Description: [
          "Argentine Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aee",
        Description: [
          "Northeast Pashai",
          "Northeast Pashayi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aek",
        Description: [
          "Haeke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ael",
        Description: [
          "Ambele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aem",
        Description: [
          "Arem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aen",
        Description: [
          "Armenian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aeq",
        Description: [
          "Aer"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aer",
        Description: [
          "Eastern Arrernte"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aes",
        Description: [
          "Alsea"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aeu",
        Description: [
          "Akeu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aew",
        Description: [
          "Ambakich"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aey",
        Description: [
          "Amele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aez",
        Description: [
          "Aeka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "afa",
        Description: [
          "Afro-Asiatic languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "afb",
        Description: [
          "Gulf Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "afd",
        Description: [
          "Andai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "afe",
        Description: [
          "Putukwam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "afg",
        Description: [
          "Afghan Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "afh",
        Description: [
          "Afrihili"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "afi",
        Description: [
          "Akrukay",
          "Chini"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "afk",
        Description: [
          "Nanubae"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "afn",
        Description: [
          "Defaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "afo",
        Description: [
          "Eloyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "afp",
        Description: [
          "Tapei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "afs",
        Description: [
          "Afro-Seminole Creole"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aft",
        Description: [
          "Afitti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "afu",
        Description: [
          "Awutu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "afz",
        Description: [
          "Obokuitai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aga",
        Description: [
          "Aguano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agb",
        Description: [
          "Legbo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agc",
        Description: [
          "Agatu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agd",
        Description: [
          "Agarabi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "age",
        Description: [
          "Angal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agf",
        Description: [
          "Arguni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agg",
        Description: [
          "Angor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agh",
        Description: [
          "Ngelima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agi",
        Description: [
          "Agariya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agj",
        Description: [
          "Argobba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agk",
        Description: [
          "Isarog Agta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agl",
        Description: [
          "Fembe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agm",
        Description: [
          "Angaataha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agn",
        Description: [
          "Agutaynen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ago",
        Description: [
          "Tainae"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agp",
        Description: [
          "Paranan"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        Comments: [
          "see apf, prf"
        ]
      },
      {
        Type: "language",
        Subtag: "agq",
        Description: [
          "Aghem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agr",
        Description: [
          "Aguaruna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ags",
        Description: [
          "Esimbi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agt",
        Description: [
          "Central Cagayan Agta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agu",
        Description: [
          "Aguacateco"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agv",
        Description: [
          "Remontado Dumagat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agw",
        Description: [
          "Kahua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agx",
        Description: [
          "Aghul"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agy",
        Description: [
          "Southern Alta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "agz",
        Description: [
          "Mt. Iriga Agta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aha",
        Description: [
          "Ahanta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ahb",
        Description: [
          "Axamb"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ahg",
        Description: [
          "Qimant"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ahh",
        Description: [
          "Aghu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ahi",
        Description: [
          "Tiagbamrin Aizi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ahk",
        Description: [
          "Akha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ahl",
        Description: [
          "Igo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ahm",
        Description: [
          "Mobumrin Aizi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ahn",
        Description: [
          "\xC0h\xE0n"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aho",
        Description: [
          "Ahom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ahp",
        Description: [
          "Aproumu Aizi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ahr",
        Description: [
          "Ahirani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ahs",
        Description: [
          "Ashe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aht",
        Description: [
          "Ahtena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aia",
        Description: [
          "Arosi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aib",
        Description: [
          "Ainu (China)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aic",
        Description: [
          "Ainbai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aid",
        Description: [
          "Alngith"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aie",
        Description: [
          "Amara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aif",
        Description: [
          "Agi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aig",
        Description: [
          "Antigua and Barbuda Creole English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aih",
        Description: [
          "Ai-Cham"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aii",
        Description: [
          "Assyrian Neo-Aramaic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "syr"
      },
      {
        Type: "language",
        Subtag: "aij",
        Description: [
          "Lishanid Noshan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aik",
        Description: [
          "Ake"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ail",
        Description: [
          "Aimele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aim",
        Description: [
          "Aimol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ain",
        Description: [
          "Ainu (Japan)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "aio",
        Description: [
          "Aiton"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aip",
        Description: [
          "Burumakok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aiq",
        Description: [
          "Aimaq"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "air",
        Description: [
          "Airoran"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ais",
        Description: [
          "Nataoran Amis"
        ],
        Added: "2009-07-29",
        Deprecated: "2019-04-16",
        Comments: [
          "see ami, szy"
        ]
      },
      {
        Type: "language",
        Subtag: "ait",
        Description: [
          "Arikem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aiw",
        Description: [
          "Aari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aix",
        Description: [
          "Aighon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aiy",
        Description: [
          "Ali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aja",
        Description: [
          "Aja (South Sudan)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ajg",
        Description: [
          "Aja (Benin)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aji",
        Description: [
          "Aji\xEB"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ajn",
        Description: [
          "Andajin"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "ajp",
        Description: [
          "South Levantine Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "ajt",
        Description: [
          "Judeo-Tunisian Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "jrb"
      },
      {
        Type: "language",
        Subtag: "aju",
        Description: [
          "Judeo-Moroccan Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "jrb"
      },
      {
        Type: "language",
        Subtag: "ajw",
        Description: [
          "Ajawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ajz",
        Description: [
          "Amri Karbi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akb",
        Description: [
          "Batak Angkola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akc",
        Description: [
          "Mpur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akd",
        Description: [
          "Ukpet-Ehom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ake",
        Description: [
          "Akawaio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akf",
        Description: [
          "Akpa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akg",
        Description: [
          "Anakalangu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akh",
        Description: [
          "Angal Heneng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aki",
        Description: [
          "Aiome"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akj",
        Description: [
          "Aka-Jeru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akk",
        Description: [
          "Akkadian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "akl",
        Description: [
          "Aklanon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akm",
        Description: [
          "Aka-Bo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ako",
        Description: [
          "Akurio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akp",
        Description: [
          "Siwu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akq",
        Description: [
          "Ak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akr",
        Description: [
          "Araki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aks",
        Description: [
          "Akaselem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akt",
        Description: [
          "Akolet"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aku",
        Description: [
          "Akum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akv",
        Description: [
          "Akhvakh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akw",
        Description: [
          "Akwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akx",
        Description: [
          "Aka-Kede"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aky",
        Description: [
          "Aka-Kol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "akz",
        Description: [
          "Alabama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ala",
        Description: [
          "Alago"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "alc",
        Description: [
          "Qawasqar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ald",
        Description: [
          "Alladian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ale",
        Description: [
          "Aleut"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "alf",
        Description: [
          "Alege"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "alg",
        Description: [
          "Algonquian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "alh",
        Description: [
          "Alawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ali",
        Description: [
          "Amaimon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "alj",
        Description: [
          "Alangan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "alk",
        Description: [
          "Alak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "all",
        Description: [
          "Allar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "alm",
        Description: [
          "Amblong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aln",
        Description: [
          "Gheg Albanian"
        ],
        Added: "2009-07-29",
        Macrolanguage: "sq"
      },
      {
        Type: "language",
        Subtag: "alo",
        Description: [
          "Larike-Wakasihu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "alp",
        Description: [
          "Alune"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "alq",
        Description: [
          "Algonquin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "alr",
        Description: [
          "Alutor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "als",
        Description: [
          "Tosk Albanian"
        ],
        Added: "2009-07-29",
        Macrolanguage: "sq"
      },
      {
        Type: "language",
        Subtag: "alt",
        Description: [
          "Southern Altai"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "alu",
        Description: [
          "'Are'are"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "alv",
        Description: [
          "Atlantic-Congo languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "alw",
        Description: [
          "Alaba-K\u2019abeena",
          "Wanbasana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "alx",
        Description: [
          "Amol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aly",
        Description: [
          "Alyawarr"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "alz",
        Description: [
          "Alur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ama",
        Description: [
          "Amanay\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amb",
        Description: [
          "Ambo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amc",
        Description: [
          "Amahuaca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ame",
        Description: [
          "Yanesha'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amf",
        Description: [
          "Hamer-Banna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amg",
        Description: [
          "Amurdak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ami",
        Description: [
          "Amis"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amj",
        Description: [
          "Amdang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amk",
        Description: [
          "Ambai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aml",
        Description: [
          "War-Jaintia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amm",
        Description: [
          "Ama (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amn",
        Description: [
          "Amanab"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amo",
        Description: [
          "Amo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amp",
        Description: [
          "Alamblak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amq",
        Description: [
          "Amahai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amr",
        Description: [
          "Amarakaeri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ams",
        Description: [
          "Southern Amami-Oshima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amt",
        Description: [
          "Amto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amu",
        Description: [
          "Guerrero Amuzgo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amv",
        Description: [
          "Ambelau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amw",
        Description: [
          "Western Neo-Aramaic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amx",
        Description: [
          "Anmatyerre"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amy",
        Description: [
          "Ami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "amz",
        Description: [
          "Atampaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ana",
        Description: [
          "Andaqui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "anb",
        Description: [
          "Andoa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "anc",
        Description: [
          "Ngas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "and",
        Description: [
          "Ansus"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ane",
        Description: [
          "X\xE2r\xE2c\xF9\xF9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "anf",
        Description: [
          "Animere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ang",
        Description: [
          "Old English (ca. 450-1100)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "anh",
        Description: [
          "Nend"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ani",
        Description: [
          "Andi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "anj",
        Description: [
          "Anor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ank",
        Description: [
          "Goemai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "anl",
        Description: [
          "Anu-Hkongso Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "anm",
        Description: [
          "Anal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ann",
        Description: [
          "Obolo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ano",
        Description: [
          "Andoque"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "anp",
        Description: [
          "Angika"
        ],
        Added: "2006-03-08"
      },
      {
        Type: "language",
        Subtag: "anq",
        Description: [
          "Jarawa (India)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "anr",
        Description: [
          "Andh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ans",
        Description: [
          "Anserma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ant",
        Description: [
          "Antakarinya",
          "Antikarinya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "anu",
        Description: [
          "Anuak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "anv",
        Description: [
          "Denya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "anw",
        Description: [
          "Anaang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "anx",
        Description: [
          "Andra-Hus"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "any",
        Description: [
          "Anyin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "anz",
        Description: [
          "Anem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aoa",
        Description: [
          "Angolar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aob",
        Description: [
          "Abom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aoc",
        Description: [
          "Pemon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aod",
        Description: [
          "Andarum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aoe",
        Description: [
          "Angal Enen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aof",
        Description: [
          "Bragat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aog",
        Description: [
          "Angoram"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aoh",
        Description: [
          "Arma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aoi",
        Description: [
          "Anindilyakwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aoj",
        Description: [
          "Mufian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aok",
        Description: [
          "Arh\xF6"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aol",
        Description: [
          "Alor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aom",
        Description: [
          "\xD6mie"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aon",
        Description: [
          "Bumbita Arapesh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aor",
        Description: [
          "Aore"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aos",
        Description: [
          "Taikat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aot",
        Description: [
          "Atong (India)",
          "A'tong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aou",
        Description: [
          "A'ou"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "aox",
        Description: [
          "Atorada"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aoz",
        Description: [
          "Uab Meto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apa",
        Description: [
          "Apache languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "apb",
        Description: [
          "Sa'a"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apc",
        Description: [
          "North Levantine Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "apd",
        Description: [
          "Sudanese Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "ape",
        Description: [
          "Bukiyip"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apf",
        Description: [
          "Pahanan Agta"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "apg",
        Description: [
          "Ampanang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aph",
        Description: [
          "Athpariya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "api",
        Description: [
          "Apiak\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apj",
        Description: [
          "Jicarilla Apache"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apk",
        Description: [
          "Kiowa Apache"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apl",
        Description: [
          "Lipan Apache"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apm",
        Description: [
          "Mescalero-Chiricahua Apache"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apn",
        Description: [
          "Apinay\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apo",
        Description: [
          "Ambul"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "app",
        Description: [
          "Apma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apq",
        Description: [
          "A-Pucikwar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apr",
        Description: [
          "Arop-Lokep"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aps",
        Description: [
          "Arop-Sissano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apt",
        Description: [
          "Apatani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apu",
        Description: [
          "Apurin\xE3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apv",
        Description: [
          "Alapmunte"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apw",
        Description: [
          "Western Apache"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apx",
        Description: [
          "Aputai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apy",
        Description: [
          "Apala\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "apz",
        Description: [
          "Safeyoka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aqa",
        Description: [
          "Alacalufan languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "aqc",
        Description: [
          "Archi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aqd",
        Description: [
          "Ampari Dogon"
        ],
        Added: "2011-08-16"
      },
      {
        Type: "language",
        Subtag: "aqg",
        Description: [
          "Arigidi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aql",
        Description: [
          "Algic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "aqm",
        Description: [
          "Atohwaim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aqn",
        Description: [
          "Northern Alta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aqp",
        Description: [
          "Atakapa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aqr",
        Description: [
          "Arh\xE2"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aqt",
        Description: [
          "Angait\xE9"
        ],
        Added: "2014-02-28"
      },
      {
        Type: "language",
        Subtag: "aqz",
        Description: [
          "Akuntsu"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "arb",
        Description: [
          "Standard Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "arc",
        Description: [
          "Official Aramaic (700-300 BCE)",
          "Imperial Aramaic (700-300 BCE)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ard",
        Description: [
          "Arabana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "are",
        Description: [
          "Western Arrarnta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "arh",
        Description: [
          "Arhuaco"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ari",
        Description: [
          "Arikara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "arj",
        Description: [
          "Arapaso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ark",
        Description: [
          "Arikap\xFA"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "arl",
        Description: [
          "Arabela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "arn",
        Description: [
          "Mapudungun",
          "Mapuche"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "aro",
        Description: [
          "Araona"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "arp",
        Description: [
          "Arapaho"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "arq",
        Description: [
          "Algerian Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "arr",
        Description: [
          "Karo (Brazil)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ars",
        Description: [
          "Najdi Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "art",
        Description: [
          "Artificial languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "aru",
        Description: [
          "Aru\xE1 (Amazonas State)",
          "Araw\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "arv",
        Description: [
          "Arbore"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "arw",
        Description: [
          "Arawak"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "arx",
        Description: [
          "Aru\xE1 (Rodonia State)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ary",
        Description: [
          "Moroccan Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "arz",
        Description: [
          "Egyptian Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "asa",
        Description: [
          "Asu (Tanzania)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asb",
        Description: [
          "Assiniboine"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asc",
        Description: [
          "Casuarina Coast Asmat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asd",
        Description: [
          "Asas"
        ],
        Added: "2009-07-29",
        Deprecated: "2019-04-16",
        "Preferred-Value": "snz"
      },
      {
        Type: "language",
        Subtag: "ase",
        Description: [
          "American Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asf",
        Description: [
          "Auslan",
          "Australian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asg",
        Description: [
          "Cishingini"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ash",
        Description: [
          "Abishira"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asi",
        Description: [
          "Buruwai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asj",
        Description: [
          "Sari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ask",
        Description: [
          "Ashkun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asl",
        Description: [
          "Asilulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asn",
        Description: [
          "Xing\xFA Asurin\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aso",
        Description: [
          "Dano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asp",
        Description: [
          "Algerian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asq",
        Description: [
          "Austrian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asr",
        Description: [
          "Asuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ass",
        Description: [
          "Ipulo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ast",
        Description: [
          "Asturian",
          "Asturleonese",
          "Bable",
          "Leonese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "asu",
        Description: [
          "Tocantins Asurini"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asv",
        Description: [
          "Asoa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asw",
        Description: [
          "Australian Aborigines Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asx",
        Description: [
          "Muratayak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asy",
        Description: [
          "Yaosakor Asmat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "asz",
        Description: [
          "As"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ata",
        Description: [
          "Pele-Ata"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atb",
        Description: [
          "Zaiwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atc",
        Description: [
          "Atsahuaca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atd",
        Description: [
          "Ata Manobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ate",
        Description: [
          "Atemble"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atg",
        Description: [
          "Ivbie North-Okpela-Arhe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ath",
        Description: [
          "Athapascan languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "ati",
        Description: [
          "Atti\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atj",
        Description: [
          "Atikamekw"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atk",
        Description: [
          "Ati"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atl",
        Description: [
          "Mt. Iraya Agta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atm",
        Description: [
          "Ata"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atn",
        Description: [
          "Ashtiani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ato",
        Description: [
          "Atong (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atp",
        Description: [
          "Pudtol Atta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atq",
        Description: [
          "Aralle-Tabulahan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atr",
        Description: [
          "Waimiri-Atroari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ats",
        Description: [
          "Gros Ventre"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "att",
        Description: [
          "Pamplona Atta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atu",
        Description: [
          "Reel"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atv",
        Description: [
          "Northern Altai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atw",
        Description: [
          "Atsugewi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atx",
        Description: [
          "Arutani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aty",
        Description: [
          "Aneityum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "atz",
        Description: [
          "Arta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aua",
        Description: [
          "Asumboa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aub",
        Description: [
          "Alugu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "auc",
        Description: [
          "Waorani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aud",
        Description: [
          "Anuta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aue",
        Description: [
          "\u01C2Kx\u02BCau\u01C1\u02BCein"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "ktz"
      },
      {
        Type: "language",
        Subtag: "auf",
        Description: [
          "Arauan languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "aug",
        Description: [
          "Aguna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "auh",
        Description: [
          "Aushi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aui",
        Description: [
          "Anuki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "auj",
        Description: [
          "Awjilah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "auk",
        Description: [
          "Heyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aul",
        Description: [
          "Aulua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aum",
        Description: [
          "Asu (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aun",
        Description: [
          "Molmo One"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "auo",
        Description: [
          "Auyokawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aup",
        Description: [
          "Makayam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "auq",
        Description: [
          "Anus",
          "Korur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aur",
        Description: [
          "Aruek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aus",
        Description: [
          "Australian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "aut",
        Description: [
          "Austral"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "auu",
        Description: [
          "Auye"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "auw",
        Description: [
          "Awyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aux",
        Description: [
          "Aur\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "auy",
        Description: [
          "Awiyaana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "auz",
        Description: [
          "Uzbeki Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "avb",
        Description: [
          "Avau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "avd",
        Description: [
          "Alviri-Vidari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "avi",
        Description: [
          "Avikam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "avk",
        Description: [
          "Kotava"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "avl",
        Description: [
          "Eastern Egyptian Bedawi Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "avm",
        Description: [
          "Angkamuthi"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "avn",
        Description: [
          "Avatime"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "avo",
        Description: [
          "Agavotaguerra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "avs",
        Description: [
          "Aushiri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "avt",
        Description: [
          "Au"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "avu",
        Description: [
          "Avokaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "avv",
        Description: [
          "Av\xE1-Canoeiro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awa",
        Description: [
          "Awadhi"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "awb",
        Description: [
          "Awa (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awc",
        Description: [
          "Cicipu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awd",
        Description: [
          "Arawakan languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "awe",
        Description: [
          "Awet\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awg",
        Description: [
          "Anguthimri"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "awh",
        Description: [
          "Awbono"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awi",
        Description: [
          "Aekyom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awk",
        Description: [
          "Awabakal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awm",
        Description: [
          "Arawum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awn",
        Description: [
          "Awngi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awo",
        Description: [
          "Awak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awr",
        Description: [
          "Awera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aws",
        Description: [
          "South Awyu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awt",
        Description: [
          "Arawet\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awu",
        Description: [
          "Central Awyu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awv",
        Description: [
          "Jair Awyu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aww",
        Description: [
          "Awun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awx",
        Description: [
          "Awara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "awy",
        Description: [
          "Edera Awyu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "axb",
        Description: [
          "Abipon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "axe",
        Description: [
          "Ayerrerenge"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "axg",
        Description: [
          "Mato Grosso Ar\xE1ra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "axk",
        Description: [
          "Yaka (Central African Republic)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "axl",
        Description: [
          "Lower Southern Aranda"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "axm",
        Description: [
          "Middle Armenian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "axx",
        Description: [
          "X\xE2r\xE2gur\xE8"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aya",
        Description: [
          "Awar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ayb",
        Description: [
          "Ayizo Gbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ayc",
        Description: [
          "Southern Aymara"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ay"
      },
      {
        Type: "language",
        Subtag: "ayd",
        Description: [
          "Ayabadhu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aye",
        Description: [
          "Ayere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ayg",
        Description: [
          "Ginyanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ayh",
        Description: [
          "Hadrami Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "ayi",
        Description: [
          "Leyigha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ayk",
        Description: [
          "Akuku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ayl",
        Description: [
          "Libyan Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "ayn",
        Description: [
          "Sanaani Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "ayo",
        Description: [
          "Ayoreo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ayp",
        Description: [
          "North Mesopotamian Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "ayq",
        Description: [
          "Ayi (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ayr",
        Description: [
          "Central Aymara"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ay"
      },
      {
        Type: "language",
        Subtag: "ays",
        Description: [
          "Sorsogon Ayta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ayt",
        Description: [
          "Magbukun Ayta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ayu",
        Description: [
          "Ayu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ayx",
        Description: [
          "Ayi (China)"
        ],
        Added: "2009-07-29",
        Deprecated: "2011-08-16",
        "Preferred-Value": "nun"
      },
      {
        Type: "language",
        Subtag: "ayy",
        Description: [
          "Tayabas Ayta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ayz",
        Description: [
          "Mai Brat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "aza",
        Description: [
          "Azha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "azb",
        Description: [
          "South Azerbaijani"
        ],
        Added: "2009-07-29",
        Macrolanguage: "az"
      },
      {
        Type: "language",
        Subtag: "azc",
        Description: [
          "Uto-Aztecan languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "azd",
        Description: [
          "Eastern Durango Nahuatl"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "azg",
        Description: [
          "San Pedro Amuzgos Amuzgo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "azj",
        Description: [
          "North Azerbaijani"
        ],
        Added: "2009-07-29",
        Macrolanguage: "az"
      },
      {
        Type: "language",
        Subtag: "azm",
        Description: [
          "Ipalapa Amuzgo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "azn",
        Description: [
          "Western Durango Nahuatl"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "azo",
        Description: [
          "Awing"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "azt",
        Description: [
          "Faire Atta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "azz",
        Description: [
          "Highland Puebla Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "baa",
        Description: [
          "Babatana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bab",
        Description: [
          "Bainouk-Gunyu\xF1o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bac",
        Description: [
          "Badui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bad",
        Description: [
          "Banda languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "bae",
        Description: [
          "Bar\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "baf",
        Description: [
          "Nubaca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bag",
        Description: [
          "Tuki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bah",
        Description: [
          "Bahamas Creole English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bai",
        Description: [
          "Bamileke languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "baj",
        Description: [
          "Barakai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bal",
        Description: [
          "Baluchi"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "ban",
        Description: [
          "Balinese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "bao",
        Description: [
          "Waimaha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bap",
        Description: [
          "Bantawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bar",
        Description: [
          "Bavarian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bas",
        Description: [
          "Basa (Cameroon)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "bat",
        Description: [
          "Baltic languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "bau",
        Description: [
          "Bada (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bav",
        Description: [
          "Vengo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "baw",
        Description: [
          "Bambili-Bambui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bax",
        Description: [
          "Bamun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bay",
        Description: [
          "Batuley"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "baz",
        Description: [
          "Tunen"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see nvo, tvu"
        ]
      },
      {
        Type: "language",
        Subtag: "bba",
        Description: [
          "Baatonum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbb",
        Description: [
          "Barai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbc",
        Description: [
          "Batak Toba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbd",
        Description: [
          "Bau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbe",
        Description: [
          "Bangba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbf",
        Description: [
          "Baibai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbg",
        Description: [
          "Barama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbh",
        Description: [
          "Bugan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbi",
        Description: [
          "Barombi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbj",
        Description: [
          "Ghom\xE1l\xE1'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbk",
        Description: [
          "Babanki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbl",
        Description: [
          "Bats"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbm",
        Description: [
          "Babango"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbn",
        Description: [
          "Uneapa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbo",
        Description: [
          "Northern Bobo Madar\xE9",
          "Konab\xE9r\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbp",
        Description: [
          "West Central Banda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbq",
        Description: [
          "Bamali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbr",
        Description: [
          "Girawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbs",
        Description: [
          "Bakpinka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbt",
        Description: [
          "Mburku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbu",
        Description: [
          "Kulung (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbv",
        Description: [
          "Karnai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbw",
        Description: [
          "Baba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbx",
        Description: [
          "Bubia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bby",
        Description: [
          "Befang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bbz",
        Description: [
          "Babalia Creole Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "bca",
        Description: [
          "Central Bai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcb",
        Description: [
          "Bainouk-Samik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcc",
        Description: [
          "Southern Balochi"
        ],
        Added: "2009-07-29",
        Macrolanguage: "bal"
      },
      {
        Type: "language",
        Subtag: "bcd",
        Description: [
          "North Babar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bce",
        Description: [
          "Bamenyam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcf",
        Description: [
          "Bamu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcg",
        Description: [
          "Baga Pokur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bch",
        Description: [
          "Bariai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bci",
        Description: [
          "Baoul\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcj",
        Description: [
          "Bardi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bck",
        Description: [
          "Bunuba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcl",
        Description: [
          "Central Bikol"
        ],
        Added: "2009-07-29",
        Macrolanguage: "bik"
      },
      {
        Type: "language",
        Subtag: "bcm",
        Description: [
          "Bannoni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcn",
        Description: [
          "Bali (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bco",
        Description: [
          "Kaluli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcp",
        Description: [
          "Bali (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcq",
        Description: [
          "Bench"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcr",
        Description: [
          "Babine"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcs",
        Description: [
          "Kohumono"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bct",
        Description: [
          "Bendi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcu",
        Description: [
          "Awad Bing"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcv",
        Description: [
          "Shoo-Minda-Nye"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcw",
        Description: [
          "Bana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcy",
        Description: [
          "Bacama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bcz",
        Description: [
          "Bainouk-Gunyaamolo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bda",
        Description: [
          "Bayot"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdb",
        Description: [
          "Basap"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdc",
        Description: [
          "Ember\xE1-Baud\xF3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdd",
        Description: [
          "Bunama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bde",
        Description: [
          "Bade"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdf",
        Description: [
          "Biage"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "bdg",
        Description: [
          "Bonggi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdh",
        Description: [
          "Baka (South Sudan)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdi",
        Description: [
          "Burun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdj",
        Description: [
          "Bai (South Sudan)",
          "Bai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdk",
        Description: [
          "Budukh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdl",
        Description: [
          "Indonesian Bajau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdm",
        Description: [
          "Buduma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdn",
        Description: [
          "Baldemu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdo",
        Description: [
          "Morom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdp",
        Description: [
          "Bende"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdq",
        Description: [
          "Bahnar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdr",
        Description: [
          "West Coast Bajau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bds",
        Description: [
          "Burunge"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdt",
        Description: [
          "Bokoto"
        ],
        Added: "2009-07-29",
        Macrolanguage: "gba"
      },
      {
        Type: "language",
        Subtag: "bdu",
        Description: [
          "Oroko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdv",
        Description: [
          "Bodo Parja"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdw",
        Description: [
          "Baham"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdx",
        Description: [
          "Budong-Budong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdy",
        Description: [
          "Bandjalang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bdz",
        Description: [
          "Badeshi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bea",
        Description: [
          "Beaver"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "beb",
        Description: [
          "Bebele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bec",
        Description: [
          "Iceve-Maci"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bed",
        Description: [
          "Bedoanas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bee",
        Description: [
          "Byangsi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bef",
        Description: [
          "Benabena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "beg",
        Description: [
          "Belait"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "beh",
        Description: [
          "Biali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bei",
        Description: [
          "Bekati'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bej",
        Description: [
          "Beja",
          "Bedawiyet"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "bek",
        Description: [
          "Bebeli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bem",
        Description: [
          "Bemba (Zambia)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "beo",
        Description: [
          "Beami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bep",
        Description: [
          "Besoa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "beq",
        Description: [
          "Beembe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ber",
        Description: [
          "Berber languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "bes",
        Description: [
          "Besme"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bet",
        Description: [
          "Guiberoua B\xE9te"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "beu",
        Description: [
          "Blagar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bev",
        Description: [
          "Daloa B\xE9t\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bew",
        Description: [
          "Betawi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bex",
        Description: [
          "Jur Modo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bey",
        Description: [
          "Beli (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bez",
        Description: [
          "Bena (Tanzania)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfa",
        Description: [
          "Bari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfb",
        Description: [
          "Pauri Bareli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfc",
        Description: [
          "Panyi Bai",
          "Northern Bai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfd",
        Description: [
          "Bafut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfe",
        Description: [
          "Betaf",
          "Tena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bff",
        Description: [
          "Bofi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfg",
        Description: [
          "Busang Kayan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfh",
        Description: [
          "Blafe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfi",
        Description: [
          "British Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfj",
        Description: [
          "Bafanji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfk",
        Description: [
          "Ban Khor Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfl",
        Description: [
          "Banda-Nd\xE9l\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfm",
        Description: [
          "Mmen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfn",
        Description: [
          "Bunak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfo",
        Description: [
          "Malba Birifor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfp",
        Description: [
          "Beba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfq",
        Description: [
          "Badaga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfr",
        Description: [
          "Bazigar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfs",
        Description: [
          "Southern Bai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bft",
        Description: [
          "Balti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfu",
        Description: [
          "Gahri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfw",
        Description: [
          "Bondo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfx",
        Description: [
          "Bantayanon"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "bfy",
        Description: [
          "Bagheli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bfz",
        Description: [
          "Mahasu Pahari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bga",
        Description: [
          "Gwamhi-Wuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgb",
        Description: [
          "Bobongko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgc",
        Description: [
          "Haryanvi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgd",
        Description: [
          "Rathwi Bareli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bge",
        Description: [
          "Bauria"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgf",
        Description: [
          "Bangandu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgg",
        Description: [
          "Bugun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgi",
        Description: [
          "Giangan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgj",
        Description: [
          "Bangolan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgk",
        Description: [
          "Bit",
          "Buxinhua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgl",
        Description: [
          "Bo (Laos)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgm",
        Description: [
          "Baga Mboteni"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "bcg"
      },
      {
        Type: "language",
        Subtag: "bgn",
        Description: [
          "Western Balochi"
        ],
        Added: "2009-07-29",
        Macrolanguage: "bal"
      },
      {
        Type: "language",
        Subtag: "bgo",
        Description: [
          "Baga Koga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgp",
        Description: [
          "Eastern Balochi"
        ],
        Added: "2009-07-29",
        Macrolanguage: "bal"
      },
      {
        Type: "language",
        Subtag: "bgq",
        Description: [
          "Bagri"
        ],
        Added: "2009-07-29",
        Macrolanguage: "raj"
      },
      {
        Type: "language",
        Subtag: "bgr",
        Description: [
          "Bawm Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgs",
        Description: [
          "Tagabawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgt",
        Description: [
          "Bughotu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgu",
        Description: [
          "Mbongno"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgv",
        Description: [
          "Warkay-Bipim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgw",
        Description: [
          "Bhatri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgx",
        Description: [
          "Balkan Gagauz Turkish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgy",
        Description: [
          "Benggoi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bgz",
        Description: [
          "Banggai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bha",
        Description: [
          "Bharia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhb",
        Description: [
          "Bhili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhc",
        Description: [
          "Biga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhd",
        Description: [
          "Bhadrawahi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhe",
        Description: [
          "Bhaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhf",
        Description: [
          "Odiai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhg",
        Description: [
          "Binandere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhh",
        Description: [
          "Bukharic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhi",
        Description: [
          "Bhilali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhj",
        Description: [
          "Bahing"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhk",
        Description: [
          "Albay Bicolano"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        Macrolanguage: "bik",
        Comments: [
          "see fbl, lbl, rbl, ubl"
        ]
      },
      {
        Type: "language",
        Subtag: "bhl",
        Description: [
          "Bimin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhm",
        Description: [
          "Bathari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhn",
        Description: [
          "Bohtan Neo-Aramaic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bho",
        Description: [
          "Bhojpuri"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "bhp",
        Description: [
          "Bima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhq",
        Description: [
          "Tukang Besi South"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhr",
        Description: [
          "Bara Malagasy"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mg"
      },
      {
        Type: "language",
        Subtag: "bhs",
        Description: [
          "Buwal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bht",
        Description: [
          "Bhattiyali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhu",
        Description: [
          "Bhunjia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhv",
        Description: [
          "Bahau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhw",
        Description: [
          "Biak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhx",
        Description: [
          "Bhalay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhy",
        Description: [
          "Bhele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bhz",
        Description: [
          "Bada (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bia",
        Description: [
          "Badimaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bib",
        Description: [
          "Bissa",
          "Bisa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bic",
        Description: [
          "Bikaru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bid",
        Description: [
          "Bidiyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bie",
        Description: [
          "Bepour"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bif",
        Description: [
          "Biafada"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "big",
        Description: [
          "Biangai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bij",
        Description: [
          "Vaghat-Ya-Bijim-Legeri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bik",
        Description: [
          "Bikol"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "bil",
        Description: [
          "Bile"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bim",
        Description: [
          "Bimoba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bin",
        Description: [
          "Bini",
          "Edo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "bio",
        Description: [
          "Nai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bip",
        Description: [
          "Bila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "biq",
        Description: [
          "Bipi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bir",
        Description: [
          "Bisorio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bit",
        Description: [
          "Berinomo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "biu",
        Description: [
          "Biete"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "biv",
        Description: [
          "Southern Birifor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "biw",
        Description: [
          "Kol (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bix",
        Description: [
          "Bijori"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "biy",
        Description: [
          "Birhor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "biz",
        Description: [
          "Baloi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bja",
        Description: [
          "Budza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjb",
        Description: [
          "Banggarla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjc",
        Description: [
          "Bariji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjd",
        Description: [
          "Bandjigali"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        "Preferred-Value": "drl"
      },
      {
        Type: "language",
        Subtag: "bje",
        Description: [
          "Biao-Jiao Mien"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjf",
        Description: [
          "Barzani Jewish Neo-Aramaic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjg",
        Description: [
          "Bidyogo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjh",
        Description: [
          "Bahinemo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bji",
        Description: [
          "Burji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjj",
        Description: [
          "Kanauji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjk",
        Description: [
          "Barok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjl",
        Description: [
          "Bulu (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjm",
        Description: [
          "Bajelani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjn",
        Description: [
          "Banjar"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "bjo",
        Description: [
          "Mid-Southern Banda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjp",
        Description: [
          "Fanamaket"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "bjq",
        Description: [
          "Southern Betsimisaraka Malagasy"
        ],
        Added: "2009-07-29",
        Deprecated: "2011-08-16",
        Macrolanguage: "mg",
        Comments: [
          "see bzc, tkg"
        ]
      },
      {
        Type: "language",
        Subtag: "bjr",
        Description: [
          "Binumarien"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjs",
        Description: [
          "Bajan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjt",
        Description: [
          "Balanta-Ganja"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bju",
        Description: [
          "Busuu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjv",
        Description: [
          "Bedjond"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjw",
        Description: [
          "Bakw\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjx",
        Description: [
          "Banao Itneg"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjy",
        Description: [
          "Bayali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bjz",
        Description: [
          "Baruga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bka",
        Description: [
          "Kyak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkb",
        Description: [
          "Finallig"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        Comments: [
          "see ebk, obk"
        ]
      },
      {
        Type: "language",
        Subtag: "bkc",
        Description: [
          "Baka (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkd",
        Description: [
          "Binukid",
          "Talaandig"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkf",
        Description: [
          "Beeke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkg",
        Description: [
          "Buraka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkh",
        Description: [
          "Bakoko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bki",
        Description: [
          "Baki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkj",
        Description: [
          "Pande"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkk",
        Description: [
          "Brokskat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkl",
        Description: [
          "Berik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkm",
        Description: [
          "Kom (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkn",
        Description: [
          "Bukitan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bko",
        Description: [
          "Kwa'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkp",
        Description: [
          "Boko (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkq",
        Description: [
          "Bakair\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkr",
        Description: [
          "Bakumpai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bks",
        Description: [
          "Northern Sorsoganon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkt",
        Description: [
          "Boloki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bku",
        Description: [
          "Buhid"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkv",
        Description: [
          "Bekwarra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkw",
        Description: [
          "Bekwel"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkx",
        Description: [
          "Baikeno"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bky",
        Description: [
          "Bokyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bkz",
        Description: [
          "Bungku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bla",
        Description: [
          "Siksika"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "blb",
        Description: [
          "Bilua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blc",
        Description: [
          "Bella Coola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bld",
        Description: [
          "Bolango"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ble",
        Description: [
          "Balanta-Kentohe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blf",
        Description: [
          "Buol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blg",
        Description: [
          "Balau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blh",
        Description: [
          "Kuwaa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bli",
        Description: [
          "Bolia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blj",
        Description: [
          "Bolongan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blk",
        Description: [
          "Pa'o Karen",
          "Pa'O"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bll",
        Description: [
          "Biloxi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blm",
        Description: [
          "Beli (South Sudan)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bln",
        Description: [
          "Southern Catanduanes Bikol"
        ],
        Added: "2009-07-29",
        Macrolanguage: "bik"
      },
      {
        Type: "language",
        Subtag: "blo",
        Description: [
          "Anii"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blp",
        Description: [
          "Blablanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blq",
        Description: [
          "Baluan-Pam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blr",
        Description: [
          "Blang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bls",
        Description: [
          "Balaesang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blt",
        Description: [
          "Tai Dam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blv",
        Description: [
          "Kibala",
          "Bolo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blw",
        Description: [
          "Balangao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blx",
        Description: [
          "Mag-Indi Ayta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bly",
        Description: [
          "Notre"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "blz",
        Description: [
          "Balantak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bma",
        Description: [
          "Lame"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmb",
        Description: [
          "Bembe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmc",
        Description: [
          "Biem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmd",
        Description: [
          "Baga Manduri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bme",
        Description: [
          "Limassa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmf",
        Description: [
          "Bom-Kim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmg",
        Description: [
          "Bamwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmh",
        Description: [
          "Kein"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmi",
        Description: [
          "Bagirmi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmj",
        Description: [
          "Bote-Majhi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmk",
        Description: [
          "Ghayavi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bml",
        Description: [
          "Bomboli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmm",
        Description: [
          "Northern Betsimisaraka Malagasy"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mg"
      },
      {
        Type: "language",
        Subtag: "bmn",
        Description: [
          "Bina (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmo",
        Description: [
          "Bambalang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmp",
        Description: [
          "Bulgebi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmq",
        Description: [
          "Bomu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmr",
        Description: [
          "Muinane"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bms",
        Description: [
          "Bilma Kanuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmt",
        Description: [
          "Biao Mon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmu",
        Description: [
          "Somba-Siawari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmv",
        Description: [
          "Bum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmw",
        Description: [
          "Bomwali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmx",
        Description: [
          "Baimak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bmy",
        Description: [
          "Bemba (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "bmz",
        Description: [
          "Baramu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bna",
        Description: [
          "Bonerate"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnb",
        Description: [
          "Bookan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnc",
        Description: [
          "Bontok"
        ],
        Added: "2009-07-29",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "bnd",
        Description: [
          "Banda (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bne",
        Description: [
          "Bintauna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnf",
        Description: [
          "Masiwang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bng",
        Description: [
          "Benga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bni",
        Description: [
          "Bangi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnj",
        Description: [
          "Eastern Tawbuid"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnk",
        Description: [
          "Bierebo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnl",
        Description: [
          "Boon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnm",
        Description: [
          "Batanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnn",
        Description: [
          "Bunun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bno",
        Description: [
          "Bantoanon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnp",
        Description: [
          "Bola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnq",
        Description: [
          "Bantik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnr",
        Description: [
          "Butmas-Tur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bns",
        Description: [
          "Bundeli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnt",
        Description: [
          "Bantu languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "bnu",
        Description: [
          "Bentong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnv",
        Description: [
          "Bonerif",
          "Beneraf",
          "Edwas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnw",
        Description: [
          "Bisis"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnx",
        Description: [
          "Bangubangu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bny",
        Description: [
          "Bintulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bnz",
        Description: [
          "Beezen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "boa",
        Description: [
          "Bora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bob",
        Description: [
          "Aweer"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "boe",
        Description: [
          "Mundabli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bof",
        Description: [
          "Bolon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bog",
        Description: [
          "Bamako Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "boh",
        Description: [
          "Boma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "boi",
        Description: [
          "Barbare\xF1o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "boj",
        Description: [
          "Anjam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bok",
        Description: [
          "Bonjo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bol",
        Description: [
          "Bole"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bom",
        Description: [
          "Berom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bon",
        Description: [
          "Bine"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "boo",
        Description: [
          "Tiemac\xE8w\xE8 Bozo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bop",
        Description: [
          "Bonkiman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "boq",
        Description: [
          "Bogaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bor",
        Description: [
          "Bor\xF4ro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bot",
        Description: [
          "Bongo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bou",
        Description: [
          "Bondei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bov",
        Description: [
          "Tuwuli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bow",
        Description: [
          "Rema"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "box",
        Description: [
          "Buamu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "boy",
        Description: [
          "Bodo (Central African Republic)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "boz",
        Description: [
          "Ti\xE9yaxo Bozo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpa",
        Description: [
          "Daakaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpb",
        Description: [
          "Barbacoas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpd",
        Description: [
          "Banda-Banda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpg",
        Description: [
          "Bonggo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bph",
        Description: [
          "Botlikh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpi",
        Description: [
          "Bagupi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpj",
        Description: [
          "Binji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpk",
        Description: [
          "Orowe",
          "'\xD4r\xF4\xEA"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpl",
        Description: [
          "Broome Pearling Lugger Pidgin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpm",
        Description: [
          "Biyom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpn",
        Description: [
          "Dzao Min"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpo",
        Description: [
          "Anasi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpp",
        Description: [
          "Kaure"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpq",
        Description: [
          "Banda Malay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpr",
        Description: [
          "Koronadal Blaan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bps",
        Description: [
          "Sarangani Blaan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpt",
        Description: [
          "Barrow Point"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpu",
        Description: [
          "Bongu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpv",
        Description: [
          "Bian Marind"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpw",
        Description: [
          "Bo (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpx",
        Description: [
          "Palya Bareli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpy",
        Description: [
          "Bishnupriya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bpz",
        Description: [
          "Bilba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqa",
        Description: [
          "Tchumbuli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqb",
        Description: [
          "Bagusa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqc",
        Description: [
          "Boko (Benin)",
          "Boo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqd",
        Description: [
          "Bung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqf",
        Description: [
          "Baga Kaloum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqg",
        Description: [
          "Bago-Kusuntu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqh",
        Description: [
          "Baima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqi",
        Description: [
          "Bakhtiari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqj",
        Description: [
          "Bandial"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqk",
        Description: [
          "Banda-Mbr\xE8s"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bql",
        Description: [
          "Bilakura"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqm",
        Description: [
          "Wumboko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqn",
        Description: [
          "Bulgarian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqo",
        Description: [
          "Balo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqp",
        Description: [
          "Busa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqq",
        Description: [
          "Biritai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqr",
        Description: [
          "Burusu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqs",
        Description: [
          "Bosngun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqt",
        Description: [
          "Bamukumbit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqu",
        Description: [
          "Boguru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqv",
        Description: [
          "Koro Wachi",
          "Begbere-Ejar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqw",
        Description: [
          "Buru (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqx",
        Description: [
          "Baangi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqy",
        Description: [
          "Bengkala Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bqz",
        Description: [
          "Bakaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bra",
        Description: [
          "Braj"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "brb",
        Description: [
          "Lave"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brc",
        Description: [
          "Berbice Creole Dutch"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brd",
        Description: [
          "Baraamu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brf",
        Description: [
          "Bera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brg",
        Description: [
          "Baure"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brh",
        Description: [
          "Brahui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bri",
        Description: [
          "Mokpwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brj",
        Description: [
          "Bieria"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brk",
        Description: [
          "Birked"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brl",
        Description: [
          "Birwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brm",
        Description: [
          "Barambu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brn",
        Description: [
          "Boruca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bro",
        Description: [
          "Brokkat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brp",
        Description: [
          "Barapasi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brq",
        Description: [
          "Breri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brr",
        Description: [
          "Birao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brs",
        Description: [
          "Baras"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brt",
        Description: [
          "Bitare"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bru",
        Description: [
          "Eastern Bru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brv",
        Description: [
          "Western Bru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brw",
        Description: [
          "Bellari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brx",
        Description: [
          "Bodo (India)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bry",
        Description: [
          "Burui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "brz",
        Description: [
          "Bilbil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsa",
        Description: [
          "Abinomn"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsb",
        Description: [
          "Brunei Bisaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsc",
        Description: [
          "Bassari",
          "Oniyan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bse",
        Description: [
          "Wushi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsf",
        Description: [
          "Bauchi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsg",
        Description: [
          "Bashkardi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsh",
        Description: [
          "Kati"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsi",
        Description: [
          "Bassossi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsj",
        Description: [
          "Bangwinji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsk",
        Description: [
          "Burushaski"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsl",
        Description: [
          "Basa-Gumna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsm",
        Description: [
          "Busami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsn",
        Description: [
          "Barasana-Eduria"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bso",
        Description: [
          "Buso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsp",
        Description: [
          "Baga Sitemu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsq",
        Description: [
          "Bassa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsr",
        Description: [
          "Bassa-Kontagora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bss",
        Description: [
          "Akoose"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bst",
        Description: [
          "Basketo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsu",
        Description: [
          "Bahonsuai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsv",
        Description: [
          "Baga Soban\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsw",
        Description: [
          "Baiso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsx",
        Description: [
          "Yangkam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bsy",
        Description: [
          "Sabah Bisaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bta",
        Description: [
          "Bata"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "btb",
        Description: [
          "Beti (Cameroon)"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        Comments: [
          "see beb, bum, bxp, eto, ewo, fan, mct"
        ]
      },
      {
        Type: "language",
        Subtag: "btc",
        Description: [
          "Bati (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "btd",
        Description: [
          "Batak Dairi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bte",
        Description: [
          "Gamo-Ningi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "btf",
        Description: [
          "Birgit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "btg",
        Description: [
          "Gagnoa B\xE9t\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bth",
        Description: [
          "Biatah Bidayuh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bti",
        Description: [
          "Burate"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "btj",
        Description: [
          "Bacanese Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "btk",
        Description: [
          "Batak languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "btl",
        Description: [
          "Bhatola"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "btm",
        Description: [
          "Batak Mandailing"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "btn",
        Description: [
          "Ratagnon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bto",
        Description: [
          "Rinconada Bikol"
        ],
        Added: "2009-07-29",
        Macrolanguage: "bik"
      },
      {
        Type: "language",
        Subtag: "btp",
        Description: [
          "Budibud"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "btq",
        Description: [
          "Batek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "btr",
        Description: [
          "Baetora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bts",
        Description: [
          "Batak Simalungun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "btt",
        Description: [
          "Bete-Bendi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "btu",
        Description: [
          "Batu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "btv",
        Description: [
          "Bateri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "btw",
        Description: [
          "Butuanon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "btx",
        Description: [
          "Batak Karo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bty",
        Description: [
          "Bobot"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "btz",
        Description: [
          "Batak Alas-Kluet"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bua",
        Description: [
          "Buriat"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "bub",
        Description: [
          "Bua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "buc",
        Description: [
          "Bushi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bud",
        Description: [
          "Ntcham"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bue",
        Description: [
          "Beothuk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "buf",
        Description: [
          "Bushoong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bug",
        Description: [
          "Buginese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "buh",
        Description: [
          "Younuo Bunu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bui",
        Description: [
          "Bongili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "buj",
        Description: [
          "Basa-Gurmana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "buk",
        Description: [
          "Bugawac"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bum",
        Description: [
          "Bulu (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bun",
        Description: [
          "Sherbro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "buo",
        Description: [
          "Terei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bup",
        Description: [
          "Busoa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "buq",
        Description: [
          "Brem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bus",
        Description: [
          "Bokobaru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "but",
        Description: [
          "Bungain"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "buu",
        Description: [
          "Budu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "buv",
        Description: [
          "Bun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "buw",
        Description: [
          "Bubi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bux",
        Description: [
          "Boghom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "buy",
        Description: [
          "Bullom So"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "buz",
        Description: [
          "Bukwen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bva",
        Description: [
          "Barein"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvb",
        Description: [
          "Bube"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvc",
        Description: [
          "Baelelea"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvd",
        Description: [
          "Baeggu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bve",
        Description: [
          "Berau Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "bvf",
        Description: [
          "Boor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvg",
        Description: [
          "Bonkeng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvh",
        Description: [
          "Bure"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvi",
        Description: [
          "Belanda Viri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvj",
        Description: [
          "Baan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvk",
        Description: [
          "Bukat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvl",
        Description: [
          "Bolivian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvm",
        Description: [
          "Bamunka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvn",
        Description: [
          "Buna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvo",
        Description: [
          "Bolgo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvp",
        Description: [
          "Bumang"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "bvq",
        Description: [
          "Birri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvr",
        Description: [
          "Burarra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvt",
        Description: [
          "Bati (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvu",
        Description: [
          "Bukit Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "bvv",
        Description: [
          "Baniva"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvw",
        Description: [
          "Boga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvx",
        Description: [
          "Dibole"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bvy",
        Description: [
          "Baybayanon"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "bvz",
        Description: [
          "Bauzi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwa",
        Description: [
          "Bwatoo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwb",
        Description: [
          "Namosi-Naitasiri-Serua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwc",
        Description: [
          "Bwile"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwd",
        Description: [
          "Bwaidoka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwe",
        Description: [
          "Bwe Karen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwf",
        Description: [
          "Boselewa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwg",
        Description: [
          "Barwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwh",
        Description: [
          "Bishuo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwi",
        Description: [
          "Baniwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwj",
        Description: [
          "L\xE1\xE1 L\xE1\xE1 Bwamu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwk",
        Description: [
          "Bauwaki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwl",
        Description: [
          "Bwela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwm",
        Description: [
          "Biwat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwn",
        Description: [
          "Wunai Bunu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwo",
        Description: [
          "Boro (Ethiopia)",
          "Borna (Ethiopia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwp",
        Description: [
          "Mandobo Bawah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwq",
        Description: [
          "Southern Bobo Madar\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwr",
        Description: [
          "Bura-Pabir"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bws",
        Description: [
          "Bomboma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwt",
        Description: [
          "Bafaw-Balong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwu",
        Description: [
          "Buli (Ghana)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bww",
        Description: [
          "Bwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwx",
        Description: [
          "Bu-Nao Bunu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwy",
        Description: [
          "Cwi Bwamu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bwz",
        Description: [
          "Bwisi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxa",
        Description: [
          "Tairaha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxb",
        Description: [
          "Belanda Bor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxc",
        Description: [
          "Molengue"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxd",
        Description: [
          "Pela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxe",
        Description: [
          "Birale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxf",
        Description: [
          "Bilur",
          "Minigir"
        ],
        Added: "2009-07-29",
        Comments: [
          "see also vmg"
        ]
      },
      {
        Type: "language",
        Subtag: "bxg",
        Description: [
          "Bangala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxh",
        Description: [
          "Buhutu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxi",
        Description: [
          "Pirlatapa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxj",
        Description: [
          "Bayungu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxk",
        Description: [
          "Bukusu",
          "Lubukusu"
        ],
        Added: "2009-07-29",
        Macrolanguage: "luy"
      },
      {
        Type: "language",
        Subtag: "bxl",
        Description: [
          "Jalkunan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxm",
        Description: [
          "Mongolia Buriat"
        ],
        Added: "2009-07-29",
        Macrolanguage: "bua"
      },
      {
        Type: "language",
        Subtag: "bxn",
        Description: [
          "Burduna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxo",
        Description: [
          "Barikanchi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxp",
        Description: [
          "Bebil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxq",
        Description: [
          "Beele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxr",
        Description: [
          "Russia Buriat"
        ],
        Added: "2009-07-29",
        Macrolanguage: "bua"
      },
      {
        Type: "language",
        Subtag: "bxs",
        Description: [
          "Busam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxu",
        Description: [
          "China Buriat"
        ],
        Added: "2009-07-29",
        Macrolanguage: "bua"
      },
      {
        Type: "language",
        Subtag: "bxv",
        Description: [
          "Berakou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxw",
        Description: [
          "Bankagooma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bxx",
        Description: [
          "Borna (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "bxz",
        Description: [
          "Binahari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bya",
        Description: [
          "Batak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byb",
        Description: [
          "Bikya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byc",
        Description: [
          "Ubaghara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byd",
        Description: [
          "Benyadu'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bye",
        Description: [
          "Pouye"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byf",
        Description: [
          "Bete"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byg",
        Description: [
          "Baygo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byh",
        Description: [
          "Bhujel"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byi",
        Description: [
          "Buyu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byj",
        Description: [
          "Bina (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byk",
        Description: [
          "Biao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byl",
        Description: [
          "Bayono"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bym",
        Description: [
          "Bidjara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byn",
        Description: [
          "Bilin",
          "Blin"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "byo",
        Description: [
          "Biyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byp",
        Description: [
          "Bumaji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byq",
        Description: [
          "Basay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byr",
        Description: [
          "Baruya",
          "Yipma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bys",
        Description: [
          "Burak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byt",
        Description: [
          "Berti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byv",
        Description: [
          "Medumba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byw",
        Description: [
          "Belhariya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byx",
        Description: [
          "Qaqet"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "byy",
        Description: [
          "Buya"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "byz",
        Description: [
          "Banaro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bza",
        Description: [
          "Bandi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzb",
        Description: [
          "Andio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzc",
        Description: [
          "Southern Betsimisaraka Malagasy"
        ],
        Added: "2011-08-16",
        Macrolanguage: "mg"
      },
      {
        Type: "language",
        Subtag: "bzd",
        Description: [
          "Bribri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bze",
        Description: [
          "Jenaama Bozo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzf",
        Description: [
          "Boikin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzg",
        Description: [
          "Babuza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzh",
        Description: [
          "Mapos Buang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzi",
        Description: [
          "Bisu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzj",
        Description: [
          "Belize Kriol English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzk",
        Description: [
          "Nicaragua Creole English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzl",
        Description: [
          "Boano (Sulawesi)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzm",
        Description: [
          "Bolondo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzn",
        Description: [
          "Boano (Maluku)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzo",
        Description: [
          "Bozaba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzp",
        Description: [
          "Kemberano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzq",
        Description: [
          "Buli (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzr",
        Description: [
          "Biri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzs",
        Description: [
          "Brazilian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzt",
        Description: [
          "Brithenig"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzu",
        Description: [
          "Burmeso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzv",
        Description: [
          "Naami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzw",
        Description: [
          "Basa (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzx",
        Description: [
          "K\u025Bl\u025Bngaxo Bozo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzy",
        Description: [
          "Obanliku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "bzz",
        Description: [
          "Evant"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "caa",
        Description: [
          "Chort\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cab",
        Description: [
          "Garifuna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cac",
        Description: [
          "Chuj"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cad",
        Description: [
          "Caddo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "cae",
        Description: [
          "Lehar",
          "Laalaa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "caf",
        Description: [
          "Southern Carrier"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cag",
        Description: [
          "Nivacl\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cah",
        Description: [
          "Cahuarano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cai",
        Description: [
          "Central American Indian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "caj",
        Description: [
          "Chan\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cak",
        Description: [
          "Kaqchikel",
          "Cakchiquel"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cal",
        Description: [
          "Carolinian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cam",
        Description: [
          "Cemuh\xEE"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "can",
        Description: [
          "Chambri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cao",
        Description: [
          "Ch\xE1cobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cap",
        Description: [
          "Chipaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "caq",
        Description: [
          "Car Nicobarese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "car",
        Description: [
          "Galibi Carib"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "cas",
        Description: [
          "Tsiman\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cau",
        Description: [
          "Caucasian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "cav",
        Description: [
          "Cavine\xF1a"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "caw",
        Description: [
          "Callawalla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cax",
        Description: [
          "Chiquitano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cay",
        Description: [
          "Cayuga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "caz",
        Description: [
          "Canichana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cba",
        Description: [
          "Chibchan languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "cbb",
        Description: [
          "Cabiyar\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbc",
        Description: [
          "Carapana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbd",
        Description: [
          "Carijona"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbe",
        Description: [
          "Chipiajes"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "cbg",
        Description: [
          "Chimila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbh",
        Description: [
          "Cagua"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "cbi",
        Description: [
          "Chachi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbj",
        Description: [
          "Ede Cabe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbk",
        Description: [
          "Chavacano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbl",
        Description: [
          "Bualkhaw Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbn",
        Description: [
          "Nyahkur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbo",
        Description: [
          "Izora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbq",
        Description: [
          "Tsucuba",
          "Cuba"
        ],
        Added: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "cbr",
        Description: [
          "Cashibo-Cacataibo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbs",
        Description: [
          "Cashinahua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbt",
        Description: [
          "Chayahuita"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbu",
        Description: [
          "Candoshi-Shapra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbv",
        Description: [
          "Cacua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cbw",
        Description: [
          "Kinabalian"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "cby",
        Description: [
          "Carabayo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cca",
        Description: [
          "Cauca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ccc",
        Description: [
          "Chamicuro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ccd",
        Description: [
          "Cafundo Creole"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cce",
        Description: [
          "Chopi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ccg",
        Description: [
          "Samba Daka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cch",
        Description: [
          "Atsam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ccj",
        Description: [
          "Kasanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ccl",
        Description: [
          "Cutchi-Swahili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ccm",
        Description: [
          "Malaccan Creole Malay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ccn",
        Description: [
          "North Caucasian languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "cco",
        Description: [
          "Comaltepec Chinantec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ccp",
        Description: [
          "Chakma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ccq",
        Description: [
          "Chaungtha"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        "Preferred-Value": "rki"
      },
      {
        Type: "language",
        Subtag: "ccr",
        Description: [
          "Cacaopera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ccs",
        Description: [
          "South Caucasian languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "cda",
        Description: [
          "Choni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cdc",
        Description: [
          "Chadic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "cdd",
        Description: [
          "Caddoan languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "cde",
        Description: [
          "Chenchu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cdf",
        Description: [
          "Chiru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cdg",
        Description: [
          "Chamari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cdh",
        Description: [
          "Chambeali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cdi",
        Description: [
          "Chodri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cdj",
        Description: [
          "Churahi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cdm",
        Description: [
          "Chepang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cdn",
        Description: [
          "Chaudangsi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cdo",
        Description: [
          "Min Dong Chinese"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zh"
      },
      {
        Type: "language",
        Subtag: "cdr",
        Description: [
          "Cinda-Regi-Tiyal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cds",
        Description: [
          "Chadian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cdy",
        Description: [
          "Chadong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cdz",
        Description: [
          "Koda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cea",
        Description: [
          "Lower Chehalis"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ceb",
        Description: [
          "Cebuano"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ceg",
        Description: [
          "Chamacoco"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cek",
        Description: [
          "Eastern Khumi Chin"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "cel",
        Description: [
          "Celtic languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "cen",
        Description: [
          "Cen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cet",
        Description: [
          "Cent\xFA\xFAm"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cey",
        Description: [
          "Ekai Chin"
        ],
        Added: "2019-04-16"
      },
      {
        Type: "language",
        Subtag: "cfa",
        Description: [
          "Dijim-Bwilim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cfd",
        Description: [
          "Cara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cfg",
        Description: [
          "Como Karim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cfm",
        Description: [
          "Falam Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cga",
        Description: [
          "Changriwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cgc",
        Description: [
          "Kagayanen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cgg",
        Description: [
          "Chiga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cgk",
        Description: [
          "Chocangacakha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "chb",
        Description: [
          "Chibcha"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "chc",
        Description: [
          "Catawba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "chd",
        Description: [
          "Highland Oaxaca Chontal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "chf",
        Description: [
          "Tabasco Chontal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "chg",
        Description: [
          "Chagatai"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "chh",
        Description: [
          "Chinook"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "chj",
        Description: [
          "Ojitl\xE1n Chinantec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "chk",
        Description: [
          "Chuukese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "chl",
        Description: [
          "Cahuilla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "chm",
        Description: [
          "Mari (Russia)"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "chn",
        Description: [
          "Chinook jargon"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "cho",
        Description: [
          "Choctaw"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "chp",
        Description: [
          "Chipewyan",
          "Dene Suline"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "chq",
        Description: [
          "Quiotepec Chinantec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "chr",
        Description: [
          "Cherokee"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "cht",
        Description: [
          "Chol\xF3n"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "chw",
        Description: [
          "Chuwabu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "chx",
        Description: [
          "Chantyal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "chy",
        Description: [
          "Cheyenne"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "chz",
        Description: [
          "Ozumac\xEDn Chinantec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cia",
        Description: [
          "Cia-Cia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cib",
        Description: [
          "Ci Gbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cic",
        Description: [
          "Chickasaw"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cid",
        Description: [
          "Chimariko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cie",
        Description: [
          "Cineni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cih",
        Description: [
          "Chinali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cik",
        Description: [
          "Chitkuli Kinnauri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cim",
        Description: [
          "Cimbrian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cin",
        Description: [
          "Cinta Larga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cip",
        Description: [
          "Chiapanec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cir",
        Description: [
          "Tiri",
          "Ham\xE9a",
          "M\xE9a"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ciw",
        Description: [
          "Chippewa"
        ],
        Added: "2009-07-29",
        Macrolanguage: "oj"
      },
      {
        Type: "language",
        Subtag: "ciy",
        Description: [
          "Chaima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cja",
        Description: [
          "Western Cham"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cje",
        Description: [
          "Chru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cjh",
        Description: [
          "Upper Chehalis"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cji",
        Description: [
          "Chamalal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cjk",
        Description: [
          "Chokwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cjm",
        Description: [
          "Eastern Cham"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cjn",
        Description: [
          "Chenapian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cjo",
        Description: [
          "Ash\xE9ninka Pajonal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cjp",
        Description: [
          "Cab\xE9car"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cjr",
        Description: [
          "Chorotega"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        "Preferred-Value": "mom"
      },
      {
        Type: "language",
        Subtag: "cjs",
        Description: [
          "Shor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cjv",
        Description: [
          "Chuave"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cjy",
        Description: [
          "Jinyu Chinese"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zh"
      },
      {
        Type: "language",
        Subtag: "cka",
        Description: [
          "Khumi Awa Chin"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        "Preferred-Value": "cmr"
      },
      {
        Type: "language",
        Subtag: "ckb",
        Description: [
          "Central Kurdish"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ku"
      },
      {
        Type: "language",
        Subtag: "ckh",
        Description: [
          "Chak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ckl",
        Description: [
          "Cibak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ckn",
        Description: [
          "Kaang Chin"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "cko",
        Description: [
          "Anufo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ckq",
        Description: [
          "Kajakse"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ckr",
        Description: [
          "Kairak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cks",
        Description: [
          "Tayo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ckt",
        Description: [
          "Chukot"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cku",
        Description: [
          "Koasati"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ckv",
        Description: [
          "Kavalan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ckx",
        Description: [
          "Caka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cky",
        Description: [
          "Cakfem-Mushere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ckz",
        Description: [
          "Cakchiquel-Quich\xE9 Mixed Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cla",
        Description: [
          "Ron"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "clc",
        Description: [
          "Chilcotin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cld",
        Description: [
          "Chaldean Neo-Aramaic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "syr"
      },
      {
        Type: "language",
        Subtag: "cle",
        Description: [
          "Lealao Chinantec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "clh",
        Description: [
          "Chilisso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cli",
        Description: [
          "Chakali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "clj",
        Description: [
          "Laitu Chin"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "clk",
        Description: [
          "Idu-Mishmi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cll",
        Description: [
          "Chala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "clm",
        Description: [
          "Clallam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "clo",
        Description: [
          "Lowland Oaxaca Chontal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "clt",
        Description: [
          "Lautu Chin"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "clu",
        Description: [
          "Caluyanun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "clw",
        Description: [
          "Chulym"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cly",
        Description: [
          "Eastern Highland Chatino"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cma",
        Description: [
          "Maa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cmc",
        Description: [
          "Chamic languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "cme",
        Description: [
          "Cerma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cmg",
        Description: [
          "Classical Mongolian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cmi",
        Description: [
          "Ember\xE1-Cham\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cmk",
        Description: [
          "Chimakum"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        "Preferred-Value": "xch"
      },
      {
        Type: "language",
        Subtag: "cml",
        Description: [
          "Campalagian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cmm",
        Description: [
          "Michigamea"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cmn",
        Description: [
          "Mandarin Chinese"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zh"
      },
      {
        Type: "language",
        Subtag: "cmo",
        Description: [
          "Central Mnong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cmr",
        Description: [
          "Mro-Khimi Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cms",
        Description: [
          "Messapic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cmt",
        Description: [
          "Camtho"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cna",
        Description: [
          "Changthang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cnb",
        Description: [
          "Chinbon Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cnc",
        Description: [
          "C\xF4\xF4ng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cng",
        Description: [
          "Northern Qiang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cnh",
        Description: [
          "Hakha Chin",
          "Haka Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cni",
        Description: [
          "Ash\xE1ninka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cnk",
        Description: [
          "Khumi Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cnl",
        Description: [
          "Lalana Chinantec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cno",
        Description: [
          "Con"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cnr",
        Description: [
          "Montenegrin"
        ],
        Added: "2018-01-23",
        Macrolanguage: "sh",
        Comments: [
          "see sr for Serbian"
        ]
      },
      {
        Type: "language",
        Subtag: "cns",
        Description: [
          "Central Asmat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cnt",
        Description: [
          "Tepetotutla Chinantec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cnu",
        Description: [
          "Chenoua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cnw",
        Description: [
          "Ngawn Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cnx",
        Description: [
          "Middle Cornish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "coa",
        Description: [
          "Cocos Islands Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "cob",
        Description: [
          "Chicomuceltec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "coc",
        Description: [
          "Cocopa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cod",
        Description: [
          "Cocama-Cocamilla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "coe",
        Description: [
          "Koreguaje"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cof",
        Description: [
          "Colorado"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cog",
        Description: [
          "Chong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "coh",
        Description: [
          "Chonyi-Dzihana-Kauma",
          "Chichonyi-Chidzihana-Chikauma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "coj",
        Description: [
          "Cochimi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cok",
        Description: [
          "Santa Teresa Cora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "col",
        Description: [
          "Columbia-Wenatchi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "com",
        Description: [
          "Comanche"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "con",
        Description: [
          "Cof\xE1n"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "coo",
        Description: [
          "Comox"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cop",
        Description: [
          "Coptic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "coq",
        Description: [
          "Coquille"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cot",
        Description: [
          "Caquinte"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cou",
        Description: [
          "Wamey"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cov",
        Description: [
          "Cao Miao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cow",
        Description: [
          "Cowlitz"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cox",
        Description: [
          "Nanti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "coy",
        Description: [
          "Coyaima"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "pij"
      },
      {
        Type: "language",
        Subtag: "coz",
        Description: [
          "Chochotec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cpa",
        Description: [
          "Palantla Chinantec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cpb",
        Description: [
          "Ucayali-Yur\xFAa Ash\xE9ninka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cpc",
        Description: [
          "Ajy\xEDninka Apurucayali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cpe",
        Description: [
          "English-based creoles and pidgins"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "cpf",
        Description: [
          "French-based creoles and pidgins"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "cpg",
        Description: [
          "Cappadocian Greek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cpi",
        Description: [
          "Chinese Pidgin English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cpn",
        Description: [
          "Cherepon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cpo",
        Description: [
          "Kpeego"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "cpp",
        Description: [
          "Portuguese-based creoles and pidgins"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "cps",
        Description: [
          "Capiznon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cpu",
        Description: [
          "Pichis Ash\xE9ninka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cpx",
        Description: [
          "Pu-Xian Chinese"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zh"
      },
      {
        Type: "language",
        Subtag: "cpy",
        Description: [
          "South Ucayali Ash\xE9ninka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cqd",
        Description: [
          "Chuanqiandian Cluster Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "cqu",
        Description: [
          "Chilean Quechua"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "quh",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "cra",
        Description: [
          "Chara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crb",
        Description: [
          "Island Carib"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crc",
        Description: [
          "Lonwolwol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crd",
        Description: [
          "Coeur d'Alene"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crf",
        Description: [
          "Caramanta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crg",
        Description: [
          "Michif"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crh",
        Description: [
          "Crimean Tatar",
          "Crimean Turkish"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "cri",
        Description: [
          "S\xE3otomense"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crj",
        Description: [
          "Southern East Cree"
        ],
        Added: "2009-07-29",
        Macrolanguage: "cr"
      },
      {
        Type: "language",
        Subtag: "crk",
        Description: [
          "Plains Cree"
        ],
        Added: "2009-07-29",
        Macrolanguage: "cr"
      },
      {
        Type: "language",
        Subtag: "crl",
        Description: [
          "Northern East Cree"
        ],
        Added: "2009-07-29",
        Macrolanguage: "cr"
      },
      {
        Type: "language",
        Subtag: "crm",
        Description: [
          "Moose Cree"
        ],
        Added: "2009-07-29",
        Macrolanguage: "cr"
      },
      {
        Type: "language",
        Subtag: "crn",
        Description: [
          "El Nayar Cora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cro",
        Description: [
          "Crow"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crp",
        Description: [
          "Creoles and pidgins"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "crq",
        Description: [
          "Iyo'wujwa Chorote"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crr",
        Description: [
          "Carolina Algonquian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crs",
        Description: [
          "Seselwa Creole French"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crt",
        Description: [
          "Iyojwa'ja Chorote"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crv",
        Description: [
          "Chaura"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crw",
        Description: [
          "Chrau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crx",
        Description: [
          "Carrier"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cry",
        Description: [
          "Cori"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "crz",
        Description: [
          "Cruze\xF1o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csa",
        Description: [
          "Chiltepec Chinantec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csb",
        Description: [
          "Kashubian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "csc",
        Description: [
          "Catalan Sign Language",
          "Lengua de se\xF1as catalana",
          "Llengua de Signes Catalana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csd",
        Description: [
          "Chiangmai Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cse",
        Description: [
          "Czech Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csf",
        Description: [
          "Cuba Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csg",
        Description: [
          "Chilean Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csh",
        Description: [
          "Asho Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csi",
        Description: [
          "Coast Miwok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csj",
        Description: [
          "Songlai Chin"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "csk",
        Description: [
          "Jola-Kasa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csl",
        Description: [
          "Chinese Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csm",
        Description: [
          "Central Sierra Miwok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csn",
        Description: [
          "Colombian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cso",
        Description: [
          "Sochiapam Chinantec",
          "Sochiapan Chinantec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csq",
        Description: [
          "Croatia Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csr",
        Description: [
          "Costa Rican Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "css",
        Description: [
          "Southern Ohlone"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cst",
        Description: [
          "Northern Ohlone"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csu",
        Description: [
          "Central Sudanic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "csv",
        Description: [
          "Sumtu Chin"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "csw",
        Description: [
          "Swampy Cree"
        ],
        Added: "2009-07-29",
        Macrolanguage: "cr"
      },
      {
        Type: "language",
        Subtag: "csy",
        Description: [
          "Siyin Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "csz",
        Description: [
          "Coos"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cta",
        Description: [
          "Tataltepec Chatino"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ctc",
        Description: [
          "Chetco"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ctd",
        Description: [
          "Tedim Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cte",
        Description: [
          "Tepinapa Chinantec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ctg",
        Description: [
          "Chittagonian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cth",
        Description: [
          "Thaiphum Chin"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "ctl",
        Description: [
          "Tlacoatzintepec Chinantec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ctm",
        Description: [
          "Chitimacha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ctn",
        Description: [
          "Chhintange"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cto",
        Description: [
          "Ember\xE1-Cat\xEDo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ctp",
        Description: [
          "Western Highland Chatino"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cts",
        Description: [
          "Northern Catanduanes Bikol"
        ],
        Added: "2009-07-29",
        Macrolanguage: "bik"
      },
      {
        Type: "language",
        Subtag: "ctt",
        Description: [
          "Wayanad Chetti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ctu",
        Description: [
          "Chol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ctz",
        Description: [
          "Zacatepec Chatino"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cua",
        Description: [
          "Cua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cub",
        Description: [
          "Cubeo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cuc",
        Description: [
          "Usila Chinantec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cug",
        Description: [
          "Chungmboko",
          "Cung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cuh",
        Description: [
          "Chuka",
          "Gichuka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cui",
        Description: [
          "Cuiba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cuj",
        Description: [
          "Mashco Piro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cuk",
        Description: [
          "San Blas Kuna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cul",
        Description: [
          "Culina",
          "Kulina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cum",
        Description: [
          "Cumeral"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "cuo",
        Description: [
          "Cumanagoto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cup",
        Description: [
          "Cupe\xF1o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cuq",
        Description: [
          "Cun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cur",
        Description: [
          "Chhulung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cus",
        Description: [
          "Cushitic languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "cut",
        Description: [
          "Teutila Cuicatec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cuu",
        Description: [
          "Tai Ya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cuv",
        Description: [
          "Cuvok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cuw",
        Description: [
          "Chukwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cux",
        Description: [
          "Tepeuxila Cuicatec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cuy",
        Description: [
          "Cuitlatec"
        ],
        Added: "2018-03-08"
      },
      {
        Type: "language",
        Subtag: "cvg",
        Description: [
          "Chug"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cvn",
        Description: [
          "Valle Nacional Chinantec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cwa",
        Description: [
          "Kabwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cwb",
        Description: [
          "Maindo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cwd",
        Description: [
          "Woods Cree"
        ],
        Added: "2009-07-29",
        Macrolanguage: "cr"
      },
      {
        Type: "language",
        Subtag: "cwe",
        Description: [
          "Kwere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cwg",
        Description: [
          "Chewong",
          "Cheq Wong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cwt",
        Description: [
          "Kuwaataay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cya",
        Description: [
          "Nopala Chatino"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cyb",
        Description: [
          "Cayubaba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "cyo",
        Description: [
          "Cuyonon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "czh",
        Description: [
          "Huizhou Chinese"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zh"
      },
      {
        Type: "language",
        Subtag: "czk",
        Description: [
          "Knaanic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "czn",
        Description: [
          "Zenzontepec Chatino"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "czo",
        Description: [
          "Min Zhong Chinese"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zh"
      },
      {
        Type: "language",
        Subtag: "czt",
        Description: [
          "Zotung Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "daa",
        Description: [
          "Dangal\xE9at"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dac",
        Description: [
          "Dambi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dad",
        Description: [
          "Marik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dae",
        Description: [
          "Duupa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "daf",
        Description: [
          "Dan"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        Comments: [
          "see dnj, lda"
        ]
      },
      {
        Type: "language",
        Subtag: "dag",
        Description: [
          "Dagbani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dah",
        Description: [
          "Gwahatike"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dai",
        Description: [
          "Day"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "daj",
        Description: [
          "Dar Fur Daju"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dak",
        Description: [
          "Dakota"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "dal",
        Description: [
          "Dahalo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dam",
        Description: [
          "Damakawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dao",
        Description: [
          "Daai Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dap",
        Description: [
          "Nisi (India)"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see njz, tgj"
        ]
      },
      {
        Type: "language",
        Subtag: "daq",
        Description: [
          "Dandami Maria"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dar",
        Description: [
          "Dargwa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "das",
        Description: [
          "Daho-Doo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dau",
        Description: [
          "Dar Sila Daju"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dav",
        Description: [
          "Taita",
          "Dawida"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "daw",
        Description: [
          "Davawenyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dax",
        Description: [
          "Dayi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "day",
        Description: [
          "Land Dayak languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "daz",
        Description: [
          "Dao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dba",
        Description: [
          "Bangime"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbb",
        Description: [
          "Deno"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbd",
        Description: [
          "Dadiya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbe",
        Description: [
          "Dabe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbf",
        Description: [
          "Edopi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbg",
        Description: [
          "Dogul Dom Dogon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbi",
        Description: [
          "Doka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbj",
        Description: [
          "Ida'an"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbl",
        Description: [
          "Dyirbal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbm",
        Description: [
          "Duguri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbn",
        Description: [
          "Duriankere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbo",
        Description: [
          "Dulbu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbp",
        Description: [
          "Duwai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbq",
        Description: [
          "Daba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbr",
        Description: [
          "Dabarre"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbt",
        Description: [
          "Ben Tey Dogon"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "dbu",
        Description: [
          "Bondum Dom Dogon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbv",
        Description: [
          "Dungu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dbw",
        Description: [
          "Bankan Tey Dogon"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "dby",
        Description: [
          "Dibiyaso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dcc",
        Description: [
          "Deccan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dcr",
        Description: [
          "Negerhollands"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dda",
        Description: [
          "Dadi Dadi"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "ddd",
        Description: [
          "Dongotono"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dde",
        Description: [
          "Doondo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ddg",
        Description: [
          "Fataluku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ddi",
        Description: [
          "West Goodenough"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ddj",
        Description: [
          "Jaru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ddn",
        Description: [
          "Dendi (Benin)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ddo",
        Description: [
          "Dido"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ddr",
        Description: [
          "Dhudhuroa"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "dds",
        Description: [
          "Donno So Dogon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ddw",
        Description: [
          "Dawera-Daweloor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dec",
        Description: [
          "Dagik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ded",
        Description: [
          "Dedua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dee",
        Description: [
          "Dewoin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "def",
        Description: [
          "Dezfuli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "deg",
        Description: [
          "Degema"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "deh",
        Description: [
          "Dehwari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dei",
        Description: [
          "Demisa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dek",
        Description: [
          "Dek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "del",
        Description: [
          "Delaware"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "dem",
        Description: [
          "Dem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "den",
        Description: [
          "Slave (Athapascan)"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "dep",
        Description: [
          "Pidgin Delaware"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "deq",
        Description: [
          "Dendi (Central African Republic)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "der",
        Description: [
          "Deori"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "des",
        Description: [
          "Desano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dev",
        Description: [
          "Domung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dez",
        Description: [
          "Dengese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dga",
        Description: [
          "Southern Dagaare"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dgb",
        Description: [
          "Bunoge Dogon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dgc",
        Description: [
          "Casiguran Dumagat Agta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dgd",
        Description: [
          "Dagaari Dioula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dge",
        Description: [
          "Degenan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dgg",
        Description: [
          "Doga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dgh",
        Description: [
          "Dghwede"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dgi",
        Description: [
          "Northern Dagara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dgk",
        Description: [
          "Dagba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dgl",
        Description: [
          "Andaandi",
          "Dongolawi"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "dgn",
        Description: [
          "Dagoman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dgo",
        Description: [
          "Dogri (individual language)"
        ],
        Added: "2009-07-29",
        Macrolanguage: "doi"
      },
      {
        Type: "language",
        Subtag: "dgr",
        Description: [
          "Dogrib"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "dgs",
        Description: [
          "Dogoso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dgt",
        Description: [
          "Ndra'ngith"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "dgu",
        Description: [
          "Degaru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dgw",
        Description: [
          "Daungwurrung"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "dgx",
        Description: [
          "Doghoro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dgz",
        Description: [
          "Daga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dha",
        Description: [
          "Dhanwar (India)"
        ],
        Added: "2009-07-29",
        Deprecated: "2011-08-16"
      },
      {
        Type: "language",
        Subtag: "dhd",
        Description: [
          "Dhundari"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mwr"
      },
      {
        Type: "language",
        Subtag: "dhg",
        Description: [
          "Dhangu-Djangu",
          "Dhangu",
          "Djangu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dhi",
        Description: [
          "Dhimal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dhl",
        Description: [
          "Dhalandji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dhm",
        Description: [
          "Zemba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dhn",
        Description: [
          "Dhanki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dho",
        Description: [
          "Dhodia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dhr",
        Description: [
          "Dhargari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dhs",
        Description: [
          "Dhaiso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dhu",
        Description: [
          "Dhurga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dhv",
        Description: [
          "Dehu",
          "Drehu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dhw",
        Description: [
          "Dhanwar (Nepal)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dhx",
        Description: [
          "Dhungaloo"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "dia",
        Description: [
          "Dia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dib",
        Description: [
          "South Central Dinka"
        ],
        Added: "2009-07-29",
        Macrolanguage: "din"
      },
      {
        Type: "language",
        Subtag: "dic",
        Description: [
          "Lakota Dida"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "did",
        Description: [
          "Didinga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dif",
        Description: [
          "Dieri",
          "Diyari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dig",
        Description: [
          "Digo",
          "Chidigo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dih",
        Description: [
          "Kumiai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dii",
        Description: [
          "Dimbong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dij",
        Description: [
          "Dai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dik",
        Description: [
          "Southwestern Dinka"
        ],
        Added: "2009-07-29",
        Macrolanguage: "din"
      },
      {
        Type: "language",
        Subtag: "dil",
        Description: [
          "Dilling"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dim",
        Description: [
          "Dime"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "din",
        Description: [
          "Dinka"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "dio",
        Description: [
          "Dibo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dip",
        Description: [
          "Northeastern Dinka"
        ],
        Added: "2009-07-29",
        Macrolanguage: "din"
      },
      {
        Type: "language",
        Subtag: "diq",
        Description: [
          "Dimli (individual language)"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zza"
      },
      {
        Type: "language",
        Subtag: "dir",
        Description: [
          "Dirim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dis",
        Description: [
          "Dimasa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dit",
        Description: [
          "Dirari"
        ],
        Added: "2009-07-29",
        Deprecated: "2019-04-29",
        "Preferred-Value": "dif"
      },
      {
        Type: "language",
        Subtag: "diu",
        Description: [
          "Diriku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "diw",
        Description: [
          "Northwestern Dinka"
        ],
        Added: "2009-07-29",
        Macrolanguage: "din"
      },
      {
        Type: "language",
        Subtag: "dix",
        Description: [
          "Dixon Reef"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "diy",
        Description: [
          "Diuwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "diz",
        Description: [
          "Ding"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dja",
        Description: [
          "Djadjawurrung"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "djb",
        Description: [
          "Djinba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "djc",
        Description: [
          "Dar Daju Daju"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "djd",
        Description: [
          "Djamindjung",
          "Ngaliwurru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dje",
        Description: [
          "Zarma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "djf",
        Description: [
          "Djangun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dji",
        Description: [
          "Djinang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "djj",
        Description: [
          "Djeebbana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "djk",
        Description: [
          "Eastern Maroon Creole",
          "Businenge Tongo",
          "Nenge"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "djl",
        Description: [
          "Djiwarli"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        Comments: [
          "see dze, iin"
        ]
      },
      {
        Type: "language",
        Subtag: "djm",
        Description: [
          "Jamsay Dogon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "djn",
        Description: [
          "Jawoyn",
          "Djauan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "djo",
        Description: [
          "Jangkang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "djr",
        Description: [
          "Djambarrpuyngu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dju",
        Description: [
          "Kapriman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "djw",
        Description: [
          "Djawi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dka",
        Description: [
          "Dakpakha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dkk",
        Description: [
          "Dakka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dkl",
        Description: [
          "Kolum So Dogon"
        ],
        Added: "2009-07-29",
        Deprecated: "2011-08-16",
        Comments: [
          "see aqd, dmb"
        ]
      },
      {
        Type: "language",
        Subtag: "dkr",
        Description: [
          "Kuijau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dks",
        Description: [
          "Southeastern Dinka"
        ],
        Added: "2009-07-29",
        Macrolanguage: "din"
      },
      {
        Type: "language",
        Subtag: "dkx",
        Description: [
          "Mazagway"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dlg",
        Description: [
          "Dolgan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dlk",
        Description: [
          "Dahalik"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "dlm",
        Description: [
          "Dalmatian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dln",
        Description: [
          "Darlong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dma",
        Description: [
          "Duma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dmb",
        Description: [
          "Mombo Dogon"
        ],
        Added: "2011-08-16"
      },
      {
        Type: "language",
        Subtag: "dmc",
        Description: [
          "Gavak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dmd",
        Description: [
          "Madhi Madhi"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "dme",
        Description: [
          "Dugwor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dmg",
        Description: [
          "Upper Kinabatangan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dmk",
        Description: [
          "Domaaki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dml",
        Description: [
          "Dameli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dmm",
        Description: [
          "Dama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dmn",
        Description: [
          "Mande languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "dmo",
        Description: [
          "Kemedzung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dmr",
        Description: [
          "East Damar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dms",
        Description: [
          "Dampelas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dmu",
        Description: [
          "Dubu",
          "Tebi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dmv",
        Description: [
          "Dumpas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dmw",
        Description: [
          "Mudburra"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "dmx",
        Description: [
          "Dema"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dmy",
        Description: [
          "Demta",
          "Sowari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dna",
        Description: [
          "Upper Grand Valley Dani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dnd",
        Description: [
          "Daonda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dne",
        Description: [
          "Ndendeule"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dng",
        Description: [
          "Dungan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dni",
        Description: [
          "Lower Grand Valley Dani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dnj",
        Description: [
          "Dan"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "dnk",
        Description: [
          "Dengka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dnn",
        Description: [
          "Dz\xF9\xF9ngoo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dno",
        Description: [
          "Ndrulo",
          "Northern Lendu"
        ],
        Added: "2018-10-28"
      },
      {
        Type: "language",
        Subtag: "dnr",
        Description: [
          "Danaru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dnt",
        Description: [
          "Mid Grand Valley Dani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dnu",
        Description: [
          "Danau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dnv",
        Description: [
          "Danu"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "dnw",
        Description: [
          "Western Dani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dny",
        Description: [
          "Den\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "doa",
        Description: [
          "Dom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dob",
        Description: [
          "Dobu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "doc",
        Description: [
          "Northern Dong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "doe",
        Description: [
          "Doe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dof",
        Description: [
          "Domu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "doh",
        Description: [
          "Dong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "doi",
        Description: [
          "Dogri (macrolanguage)"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "dok",
        Description: [
          "Dondo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dol",
        Description: [
          "Doso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "don",
        Description: [
          "Toura (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "doo",
        Description: [
          "Dongo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dop",
        Description: [
          "Lukpa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "doq",
        Description: [
          "Dominican Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dor",
        Description: [
          "Dori'o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dos",
        Description: [
          "Dogos\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dot",
        Description: [
          "Dass"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dov",
        Description: [
          "Dombe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dow",
        Description: [
          "Doyayo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dox",
        Description: [
          "Bussa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "doy",
        Description: [
          "Dompo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "doz",
        Description: [
          "Dorze"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dpp",
        Description: [
          "Papar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dra",
        Description: [
          "Dravidian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "drb",
        Description: [
          "Dair"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "drc",
        Description: [
          "Minderico"
        ],
        Added: "2011-08-16"
      },
      {
        Type: "language",
        Subtag: "drd",
        Description: [
          "Darmiya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dre",
        Description: [
          "Dolpo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "drg",
        Description: [
          "Rungus"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "drh",
        Description: [
          "Darkhat"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        "Preferred-Value": "khk"
      },
      {
        Type: "language",
        Subtag: "dri",
        Description: [
          "C'Lela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "drl",
        Description: [
          "Paakantyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "drn",
        Description: [
          "West Damar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dro",
        Description: [
          "Daro-Matu Melanau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "drq",
        Description: [
          "Dura"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "drr",
        Description: [
          "Dororo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "drs",
        Description: [
          "Gedeo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "drt",
        Description: [
          "Drents"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dru",
        Description: [
          "Rukai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "drw",
        Description: [
          "Darwazi"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        "Preferred-Value": "prs"
      },
      {
        Type: "language",
        Subtag: "dry",
        Description: [
          "Darai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dsb",
        Description: [
          "Lower Sorbian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "dse",
        Description: [
          "Dutch Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dsh",
        Description: [
          "Daasanach"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dsi",
        Description: [
          "Disa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dsl",
        Description: [
          "Danish Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dsn",
        Description: [
          "Dusner"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dso",
        Description: [
          "Desiya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dsq",
        Description: [
          "Tadaksahak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dta",
        Description: [
          "Daur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dtb",
        Description: [
          "Labuk-Kinabatangan Kadazan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dtd",
        Description: [
          "Ditidaht"
        ],
        Added: "2011-08-16"
      },
      {
        Type: "language",
        Subtag: "dth",
        Description: [
          "Adithinngithigh"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "dti",
        Description: [
          "Ana Tinga Dogon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dtk",
        Description: [
          "Tene Kan Dogon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dtm",
        Description: [
          "Tomo Kan Dogon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dtn",
        Description: [
          "Daats\u02BC\xEDin"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "dto",
        Description: [
          "Tommo So Dogon"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "dtp",
        Description: [
          "Kadazan Dusun",
          "Central Dusun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dtr",
        Description: [
          "Lotud"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dts",
        Description: [
          "Toro So Dogon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dtt",
        Description: [
          "Toro Tegu Dogon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dtu",
        Description: [
          "Tebul Ure Dogon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dty",
        Description: [
          "Dotyali"
        ],
        Added: "2012-08-12",
        Macrolanguage: "ne"
      },
      {
        Type: "language",
        Subtag: "dua",
        Description: [
          "Duala"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "dub",
        Description: [
          "Dubli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "duc",
        Description: [
          "Duna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dud",
        Description: [
          "Hun-Saare"
        ],
        Added: "2009-07-29",
        Deprecated: "2019-04-16",
        Comments: [
          "see uth, uss"
        ]
      },
      {
        Type: "language",
        Subtag: "due",
        Description: [
          "Umiray Dumaget Agta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "duf",
        Description: [
          "Dumbea",
          "Drubea"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dug",
        Description: [
          "Duruma",
          "Chiduruma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "duh",
        Description: [
          "Dungra Bhil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dui",
        Description: [
          "Dumun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "duj",
        Description: [
          "Dhuwal"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        Comments: [
          "see dwu, dwy"
        ]
      },
      {
        Type: "language",
        Subtag: "duk",
        Description: [
          "Uyajitaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dul",
        Description: [
          "Alabat Island Agta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dum",
        Description: [
          "Middle Dutch (ca. 1050-1350)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "dun",
        Description: [
          "Dusun Deyah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "duo",
        Description: [
          "Dupaninan Agta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dup",
        Description: [
          "Duano"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "duq",
        Description: [
          "Dusun Malang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dur",
        Description: [
          "Dii"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dus",
        Description: [
          "Dumi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "duu",
        Description: [
          "Drung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "duv",
        Description: [
          "Duvle"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "duw",
        Description: [
          "Dusun Witu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dux",
        Description: [
          "Duungooma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "duy",
        Description: [
          "Dicamay Agta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "duz",
        Description: [
          "Duli-Gey"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dva",
        Description: [
          "Duau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dwa",
        Description: [
          "Diri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dwl",
        Description: [
          "Walo Kumbe Dogon"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see dbt, dbw"
        ]
      },
      {
        Type: "language",
        Subtag: "dwr",
        Description: [
          "Dawro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dws",
        Description: [
          "Dutton World Speedwords"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dwu",
        Description: [
          "Dhuwal"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "dww",
        Description: [
          "Dawawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dwy",
        Description: [
          "Dhuwaya"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "dwz",
        Description: [
          "Dewas Rai"
        ],
        Added: "2018-10-28"
      },
      {
        Type: "language",
        Subtag: "dya",
        Description: [
          "Dyan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dyb",
        Description: [
          "Dyaberdyaber"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dyd",
        Description: [
          "Dyugun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dyg",
        Description: [
          "Villa Viciosa Agta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dyi",
        Description: [
          "Djimini Senoufo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dym",
        Description: [
          "Yanda Dom Dogon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dyn",
        Description: [
          "Dyangadi",
          "Dhanggatti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dyo",
        Description: [
          "Jola-Fonyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dyu",
        Description: [
          "Dyula"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "dyy",
        Description: [
          "Djabugay",
          "Dyaabugay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dza",
        Description: [
          "Tunzu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dzd",
        Description: [
          "Daza"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "dze",
        Description: [
          "Djiwarli"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "dzg",
        Description: [
          "Dazaga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dzl",
        Description: [
          "Dzalakha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "dzn",
        Description: [
          "Dzando"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eaa",
        Description: [
          "Karenggapa"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "ebg",
        Description: [
          "Ebughu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ebk",
        Description: [
          "Eastern Bontok"
        ],
        Added: "2010-03-11",
        Macrolanguage: "bnc"
      },
      {
        Type: "language",
        Subtag: "ebo",
        Description: [
          "Teke-Ebo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ebr",
        Description: [
          "Ebri\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ebu",
        Description: [
          "Embu",
          "Kiembu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ecr",
        Description: [
          "Eteocretan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ecs",
        Description: [
          "Ecuadorian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ecy",
        Description: [
          "Eteocypriot"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eee",
        Description: [
          "E"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "efa",
        Description: [
          "Efai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "efe",
        Description: [
          "Efe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "efi",
        Description: [
          "Efik"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ega",
        Description: [
          "Ega"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "egl",
        Description: [
          "Emilian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ego",
        Description: [
          "Eggon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "egx",
        Description: [
          "Egyptian languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "egy",
        Description: [
          "Egyptian (Ancient)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ehu",
        Description: [
          "Ehueun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eip",
        Description: [
          "Eipomek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eit",
        Description: [
          "Eitiep"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eiv",
        Description: [
          "Askopan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eja",
        Description: [
          "Ejamat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eka",
        Description: [
          "Ekajuk"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ekc",
        Description: [
          "Eastern Karnic"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "eke",
        Description: [
          "Ekit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ekg",
        Description: [
          "Ekari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eki",
        Description: [
          "Eki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ekk",
        Description: [
          "Standard Estonian"
        ],
        Added: "2009-07-29",
        Macrolanguage: "et"
      },
      {
        Type: "language",
        Subtag: "ekl",
        Description: [
          "Kol (Bangladesh)",
          "Kol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ekm",
        Description: [
          "Elip"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eko",
        Description: [
          "Koti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ekp",
        Description: [
          "Ekpeye"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ekr",
        Description: [
          "Yace"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eky",
        Description: [
          "Eastern Kayah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ele",
        Description: [
          "Elepi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "elh",
        Description: [
          "El Hugeirat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eli",
        Description: [
          "Nding"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "elk",
        Description: [
          "Elkei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "elm",
        Description: [
          "Eleme"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "elo",
        Description: [
          "El Molo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "elp",
        Description: [
          "Elpaputih"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see amq, plh"
        ]
      },
      {
        Type: "language",
        Subtag: "elu",
        Description: [
          "Elu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "elx",
        Description: [
          "Elamite"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ema",
        Description: [
          "Emai-Iuleha-Ora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "emb",
        Description: [
          "Embaloh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eme",
        Description: [
          "Emerillon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "emg",
        Description: [
          "Eastern Meohang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "emi",
        Description: [
          "Mussau-Emira"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "emk",
        Description: [
          "Eastern Maninkakan"
        ],
        Added: "2009-07-29",
        Macrolanguage: "man"
      },
      {
        Type: "language",
        Subtag: "emm",
        Description: [
          "Mamulique"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "emn",
        Description: [
          "Eman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "emo",
        Description: [
          "Emok"
        ],
        Added: "2009-07-29",
        Deprecated: "2014-02-28"
      },
      {
        Type: "language",
        Subtag: "emp",
        Description: [
          "Northern Ember\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ems",
        Description: [
          "Pacific Gulf Yupik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "emu",
        Description: [
          "Eastern Muria"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "emw",
        Description: [
          "Emplawas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "emx",
        Description: [
          "Erromintxela"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "emy",
        Description: [
          "Epigraphic Mayan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ena",
        Description: [
          "Apali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "enb",
        Description: [
          "Markweeta"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kln"
      },
      {
        Type: "language",
        Subtag: "enc",
        Description: [
          "En"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "end",
        Description: [
          "Ende"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "enf",
        Description: [
          "Forest Enets"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "enh",
        Description: [
          "Tundra Enets"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "enl",
        Description: [
          "Enlhet"
        ],
        Added: "2014-02-28"
      },
      {
        Type: "language",
        Subtag: "enm",
        Description: [
          "Middle English (1100-1500)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "enn",
        Description: [
          "Engenni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eno",
        Description: [
          "Enggano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "enq",
        Description: [
          "Enga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "enr",
        Description: [
          "Emumu",
          "Emem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "enu",
        Description: [
          "Enu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "env",
        Description: [
          "Enwan (Edu State)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "enw",
        Description: [
          "Enwan (Akwa Ibom State)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "enx",
        Description: [
          "Enxet"
        ],
        Added: "2014-02-28"
      },
      {
        Type: "language",
        Subtag: "eot",
        Description: [
          "Beti (C\xF4te d'Ivoire)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "epi",
        Description: [
          "Epie"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "era",
        Description: [
          "Eravallan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "erg",
        Description: [
          "Sie"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "erh",
        Description: [
          "Eruwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eri",
        Description: [
          "Ogea"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "erk",
        Description: [
          "South Efate"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ero",
        Description: [
          "Horpa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "err",
        Description: [
          "Erre"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ers",
        Description: [
          "Ersu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ert",
        Description: [
          "Eritai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "erw",
        Description: [
          "Erokwanas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ese",
        Description: [
          "Ese Ejja"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "esg",
        Description: [
          "Aheri Gondi"
        ],
        Added: "2016-05-30",
        Macrolanguage: "gon"
      },
      {
        Type: "language",
        Subtag: "esh",
        Description: [
          "Eshtehardi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "esi",
        Description: [
          "North Alaskan Inupiatun"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ik"
      },
      {
        Type: "language",
        Subtag: "esk",
        Description: [
          "Northwest Alaska Inupiatun"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ik"
      },
      {
        Type: "language",
        Subtag: "esl",
        Description: [
          "Egypt Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "esm",
        Description: [
          "Esuma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "esn",
        Description: [
          "Salvadoran Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eso",
        Description: [
          "Estonian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "esq",
        Description: [
          "Esselen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ess",
        Description: [
          "Central Siberian Yupik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "esu",
        Description: [
          "Central Yupik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "esx",
        Description: [
          "Eskimo-Aleut languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "esy",
        Description: [
          "Eskayan"
        ],
        Added: "2014-04-06"
      },
      {
        Type: "language",
        Subtag: "etb",
        Description: [
          "Etebi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "etc",
        Description: [
          "Etchemin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eth",
        Description: [
          "Ethiopian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "etn",
        Description: [
          "Eton (Vanuatu)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eto",
        Description: [
          "Eton (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "etr",
        Description: [
          "Edolo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ets",
        Description: [
          "Yekhee"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ett",
        Description: [
          "Etruscan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "etu",
        Description: [
          "Ejagham"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "etx",
        Description: [
          "Eten"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "etz",
        Description: [
          "Semimi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "euq",
        Description: [
          "Basque (family)"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "eve",
        Description: [
          "Even"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "evh",
        Description: [
          "Uvbie"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "evn",
        Description: [
          "Evenki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ewo",
        Description: [
          "Ewondo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ext",
        Description: [
          "Extremaduran"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eya",
        Description: [
          "Eyak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "eyo",
        Description: [
          "Keiyo"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kln"
      },
      {
        Type: "language",
        Subtag: "eza",
        Description: [
          "Ezaa"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "eze",
        Description: [
          "Uzekwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "faa",
        Description: [
          "Fasu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fab",
        Description: [
          "Fa d'Ambu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fad",
        Description: [
          "Wagi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "faf",
        Description: [
          "Fagani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fag",
        Description: [
          "Finongan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fah",
        Description: [
          "Baissa Fali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fai",
        Description: [
          "Faiwol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "faj",
        Description: [
          "Faita"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fak",
        Description: [
          "Fang (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fal",
        Description: [
          "South Fali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fam",
        Description: [
          "Fam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fan",
        Description: [
          "Fang (Equatorial Guinea)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "fap",
        Description: [
          "Paloor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "far",
        Description: [
          "Fataleka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fat",
        Description: [
          "Fanti"
        ],
        Added: "2005-10-16",
        Macrolanguage: "ak"
      },
      {
        Type: "language",
        Subtag: "fau",
        Description: [
          "Fayu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fax",
        Description: [
          "Fala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fay",
        Description: [
          "Southwestern Fars"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "faz",
        Description: [
          "Northwestern Fars"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fbl",
        Description: [
          "West Albay Bikol"
        ],
        Added: "2010-03-11",
        Macrolanguage: "bik"
      },
      {
        Type: "language",
        Subtag: "fcs",
        Description: [
          "Quebec Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fer",
        Description: [
          "Feroge"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ffi",
        Description: [
          "Foia Foia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ffm",
        Description: [
          "Maasina Fulfulde"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ff"
      },
      {
        Type: "language",
        Subtag: "fgr",
        Description: [
          "Fongoro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fia",
        Description: [
          "Nobiin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fie",
        Description: [
          "Fyer"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fil",
        Description: [
          "Filipino",
          "Pilipino"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "fip",
        Description: [
          "Fipa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fir",
        Description: [
          "Firan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fit",
        Description: [
          "Tornedalen Finnish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fiu",
        Description: [
          "Finno-Ugrian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "fiw",
        Description: [
          "Fiwaga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fkk",
        Description: [
          "Kirya-Konz\u0259l"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "fkv",
        Description: [
          "Kven Finnish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fla",
        Description: [
          "Kalispel-Pend d'Oreille"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "flh",
        Description: [
          "Foau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fli",
        Description: [
          "Fali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fll",
        Description: [
          "North Fali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fln",
        Description: [
          "Flinders Island"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "flr",
        Description: [
          "Fuliiru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fly",
        Description: [
          "Flaaitaal",
          "Tsotsitaal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fmp",
        Description: [
          "Fe'fe'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fmu",
        Description: [
          "Far Western Muria"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fnb",
        Description: [
          "Fanbak"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "fng",
        Description: [
          "Fanagalo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fni",
        Description: [
          "Fania"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fod",
        Description: [
          "Foodo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "foi",
        Description: [
          "Foi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fom",
        Description: [
          "Foma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fon",
        Description: [
          "Fon"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "for",
        Description: [
          "Fore"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fos",
        Description: [
          "Siraya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fox",
        Description: [
          "Formosan languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "fpe",
        Description: [
          "Fernando Po Creole English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fqs",
        Description: [
          "Fas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "frc",
        Description: [
          "Cajun French"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "frd",
        Description: [
          "Fordata"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "frk",
        Description: [
          "Frankish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "frm",
        Description: [
          "Middle French (ca. 1400-1600)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "fro",
        Description: [
          "Old French (842-ca. 1400)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "frp",
        Description: [
          "Arpitan",
          "Francoproven\xE7al"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "frq",
        Description: [
          "Forak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "frr",
        Description: [
          "Northern Frisian"
        ],
        Added: "2006-03-08",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "frs",
        Description: [
          "Eastern Frisian"
        ],
        Added: "2006-03-08",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "frt",
        Description: [
          "Fortsenal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fse",
        Description: [
          "Finnish Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fsl",
        Description: [
          "French Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fss",
        Description: [
          "Finland-Swedish Sign Language",
          "finlandssvenskt teckenspr\xE5k",
          "suomenruotsalainen viittomakieli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fub",
        Description: [
          "Adamawa Fulfulde"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ff"
      },
      {
        Type: "language",
        Subtag: "fuc",
        Description: [
          "Pulaar"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ff"
      },
      {
        Type: "language",
        Subtag: "fud",
        Description: [
          "East Futuna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fue",
        Description: [
          "Borgu Fulfulde"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ff"
      },
      {
        Type: "language",
        Subtag: "fuf",
        Description: [
          "Pular"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ff"
      },
      {
        Type: "language",
        Subtag: "fuh",
        Description: [
          "Western Niger Fulfulde"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ff"
      },
      {
        Type: "language",
        Subtag: "fui",
        Description: [
          "Bagirmi Fulfulde"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ff"
      },
      {
        Type: "language",
        Subtag: "fuj",
        Description: [
          "Ko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fum",
        Description: [
          "Fum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fun",
        Description: [
          "Fulni\xF4"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fuq",
        Description: [
          "Central-Eastern Niger Fulfulde"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ff"
      },
      {
        Type: "language",
        Subtag: "fur",
        Description: [
          "Friulian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "fut",
        Description: [
          "Futuna-Aniwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fuu",
        Description: [
          "Furu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fuv",
        Description: [
          "Nigerian Fulfulde"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ff"
      },
      {
        Type: "language",
        Subtag: "fuy",
        Description: [
          "Fuyug"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fvr",
        Description: [
          "Fur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fwa",
        Description: [
          "Fw\xE2i"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "fwe",
        Description: [
          "Fwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gaa",
        Description: [
          "Ga"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "gab",
        Description: [
          "Gabri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gac",
        Description: [
          "Mixed Great Andamanese"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "gad",
        Description: [
          "Gaddang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gae",
        Description: [
          "Guarequena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gaf",
        Description: [
          "Gende"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gag",
        Description: [
          "Gagauz"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gah",
        Description: [
          "Alekano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gai",
        Description: [
          "Borei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gaj",
        Description: [
          "Gadsup"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gak",
        Description: [
          "Gamkonora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gal",
        Description: [
          "Galolen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gam",
        Description: [
          "Kandawo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gan",
        Description: [
          "Gan Chinese"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zh"
      },
      {
        Type: "language",
        Subtag: "gao",
        Description: [
          "Gants"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gap",
        Description: [
          "Gal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gaq",
        Description: [
          "Gata'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gar",
        Description: [
          "Galeya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gas",
        Description: [
          "Adiwasi Garasia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gat",
        Description: [
          "Kenati"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gau",
        Description: [
          "Mudhili Gadaba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gav",
        Description: [
          "Gabutamon"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        "Preferred-Value": "dev"
      },
      {
        Type: "language",
        Subtag: "gaw",
        Description: [
          "Nobonob"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gax",
        Description: [
          "Borana-Arsi-Guji Oromo"
        ],
        Added: "2009-07-29",
        Macrolanguage: "om"
      },
      {
        Type: "language",
        Subtag: "gay",
        Description: [
          "Gayo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "gaz",
        Description: [
          "West Central Oromo"
        ],
        Added: "2009-07-29",
        Macrolanguage: "om"
      },
      {
        Type: "language",
        Subtag: "gba",
        Description: [
          "Gbaya (Central African Republic)"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "gbb",
        Description: [
          "Kaytetye"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbc",
        Description: [
          "Garawa"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see wny, wrk"
        ]
      },
      {
        Type: "language",
        Subtag: "gbd",
        Description: [
          "Karajarri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbe",
        Description: [
          "Niksek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbf",
        Description: [
          "Gaikundi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbg",
        Description: [
          "Gbanziri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbh",
        Description: [
          "Defi Gbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbi",
        Description: [
          "Galela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbj",
        Description: [
          "Bodo Gadaba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbk",
        Description: [
          "Gaddi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbl",
        Description: [
          "Gamit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbm",
        Description: [
          "Garhwali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbn",
        Description: [
          "Mo'da"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbo",
        Description: [
          "Northern Grebo"
        ],
        Added: "2009-07-29",
        Macrolanguage: "grb"
      },
      {
        Type: "language",
        Subtag: "gbp",
        Description: [
          "Gbaya-Bossangoa"
        ],
        Added: "2009-07-29",
        Macrolanguage: "gba"
      },
      {
        Type: "language",
        Subtag: "gbq",
        Description: [
          "Gbaya-Bozoum"
        ],
        Added: "2009-07-29",
        Macrolanguage: "gba"
      },
      {
        Type: "language",
        Subtag: "gbr",
        Description: [
          "Gbagyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbs",
        Description: [
          "Gbesi Gbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbu",
        Description: [
          "Gagadu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbv",
        Description: [
          "Gbanu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbw",
        Description: [
          "Gabi-Gabi"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "gbx",
        Description: [
          "Eastern Xwla Gbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gby",
        Description: [
          "Gbari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gbz",
        Description: [
          "Zoroastrian Dari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gcc",
        Description: [
          "Mali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gcd",
        Description: [
          "Ganggalida"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gce",
        Description: [
          "Galice"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gcf",
        Description: [
          "Guadeloupean Creole French"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gcl",
        Description: [
          "Grenadian Creole English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gcn",
        Description: [
          "Gaina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gcr",
        Description: [
          "Guianese Creole French"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gct",
        Description: [
          "Colonia Tovar German"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gda",
        Description: [
          "Gade Lohar"
        ],
        Added: "2009-07-29",
        Macrolanguage: "raj"
      },
      {
        Type: "language",
        Subtag: "gdb",
        Description: [
          "Pottangi Ollar Gadaba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdc",
        Description: [
          "Gugu Badhun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdd",
        Description: [
          "Gedaged"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gde",
        Description: [
          "Gude"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdf",
        Description: [
          "Guduf-Gava"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdg",
        Description: [
          "Ga'dang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdh",
        Description: [
          "Gadjerawang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdi",
        Description: [
          "Gundi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdj",
        Description: [
          "Gurdjar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdk",
        Description: [
          "Gadang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdl",
        Description: [
          "Dirasha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdm",
        Description: [
          "Laal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdn",
        Description: [
          "Umanakaina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdo",
        Description: [
          "Ghodoberi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdq",
        Description: [
          "Mehri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdr",
        Description: [
          "Wipi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gds",
        Description: [
          "Ghandruk Sign Language"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "gdt",
        Description: [
          "Kungardutyi"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "gdu",
        Description: [
          "Gudu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gdx",
        Description: [
          "Godwari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gea",
        Description: [
          "Geruma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "geb",
        Description: [
          "Kire"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gec",
        Description: [
          "Gboloo Grebo"
        ],
        Added: "2009-07-29",
        Macrolanguage: "grb"
      },
      {
        Type: "language",
        Subtag: "ged",
        Description: [
          "Gade"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "geg",
        Description: [
          "Gengle"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "geh",
        Description: [
          "Hutterite German",
          "Hutterisch"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gei",
        Description: [
          "Gebe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gej",
        Description: [
          "Gen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gek",
        Description: [
          "Ywom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gel",
        Description: [
          "ut-Ma'in"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gem",
        Description: [
          "Germanic languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "geq",
        Description: [
          "Geme"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ges",
        Description: [
          "Geser-Gorom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gev",
        Description: [
          "Eviya"
        ],
        Added: "2014-02-28"
      },
      {
        Type: "language",
        Subtag: "gew",
        Description: [
          "Gera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gex",
        Description: [
          "Garre"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gey",
        Description: [
          "Enya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gez",
        Description: [
          "Geez"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "gfk",
        Description: [
          "Patpatar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gft",
        Description: [
          "Gafat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gfx",
        Description: [
          "Mangetti Dune \u01C3Xung"
        ],
        Added: "2012-08-12",
        Deprecated: "2015-02-12",
        "Preferred-Value": "vaj"
      },
      {
        Type: "language",
        Subtag: "gga",
        Description: [
          "Gao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ggb",
        Description: [
          "Gbii"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ggd",
        Description: [
          "Gugadj"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gge",
        Description: [
          "Gurr-goni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ggg",
        Description: [
          "Gurgula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ggk",
        Description: [
          "Kungarakany"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ggl",
        Description: [
          "Ganglau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ggn",
        Description: [
          "Eastern Gurung"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "gvr"
      },
      {
        Type: "language",
        Subtag: "ggo",
        Description: [
          "Southern Gondi"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        Comments: [
          "see esg, wsg"
        ]
      },
      {
        Type: "language",
        Subtag: "ggr",
        Description: [
          "Aghu Tharnggalu"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        Comments: [
          "see gtu, ikr"
        ]
      },
      {
        Type: "language",
        Subtag: "ggt",
        Description: [
          "Gitua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ggu",
        Description: [
          "Gagu",
          "Gban"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ggw",
        Description: [
          "Gogodala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gha",
        Description: [
          "Ghadam\xE8s"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ghc",
        Description: [
          "Hiberno-Scottish Gaelic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ghe",
        Description: [
          "Southern Ghale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ghh",
        Description: [
          "Northern Ghale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ghk",
        Description: [
          "Geko Karen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ghl",
        Description: [
          "Ghulfan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ghn",
        Description: [
          "Ghanongga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gho",
        Description: [
          "Ghomara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ghr",
        Description: [
          "Ghera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ghs",
        Description: [
          "Guhu-Samane"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ght",
        Description: [
          "Kuke",
          "Kutang Ghale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gia",
        Description: [
          "Kija"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gib",
        Description: [
          "Gibanawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gic",
        Description: [
          "Gail"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gid",
        Description: [
          "Gidar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gie",
        Description: [
          "Ga\u0253ogbo",
          "Gu\xE9bie"
        ],
        Added: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "gig",
        Description: [
          "Goaria"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gih",
        Description: [
          "Githabul"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "gil",
        Description: [
          "Gilbertese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "gim",
        Description: [
          "Gimi (Eastern Highlands)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gin",
        Description: [
          "Hinukh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gio",
        Description: [
          "Gelao"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see aou, gqu"
        ]
      },
      {
        Type: "language",
        Subtag: "gip",
        Description: [
          "Gimi (West New Britain)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "giq",
        Description: [
          "Green Gelao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gir",
        Description: [
          "Red Gelao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gis",
        Description: [
          "North Giziga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "git",
        Description: [
          "Gitxsan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "giu",
        Description: [
          "Mulao"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "giw",
        Description: [
          "White Gelao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gix",
        Description: [
          "Gilima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "giy",
        Description: [
          "Giyug"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "giz",
        Description: [
          "South Giziga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gji",
        Description: [
          "Geji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gjk",
        Description: [
          "Kachi Koli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gjm",
        Description: [
          "Gunditjmara"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "gjn",
        Description: [
          "Gonja"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gjr",
        Description: [
          "Gurindji Kriol"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "gju",
        Description: [
          "Gujari"
        ],
        Added: "2009-07-29",
        Macrolanguage: "raj"
      },
      {
        Type: "language",
        Subtag: "gka",
        Description: [
          "Guya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gkd",
        Description: [
          "Mag\u0268 (Madang Province)"
        ],
        Added: "2018-03-08"
      },
      {
        Type: "language",
        Subtag: "gke",
        Description: [
          "Ndai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gkn",
        Description: [
          "Gokana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gko",
        Description: [
          "Kok-Nar"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "gkp",
        Description: [
          "Guinea Kpelle"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kpe"
      },
      {
        Type: "language",
        Subtag: "gku",
        Description: [
          "\u01C2Ungkue"
        ],
        Added: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "glc",
        Description: [
          "Bon Gula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gld",
        Description: [
          "Nanai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "glh",
        Description: [
          "Northwest Pashai",
          "Northwest Pashayi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gli",
        Description: [
          "Guliguli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "glj",
        Description: [
          "Gula Iro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "glk",
        Description: [
          "Gilaki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gll",
        Description: [
          "Garlali"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "glo",
        Description: [
          "Galambu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "glr",
        Description: [
          "Glaro-Twabo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "glu",
        Description: [
          "Gula (Chad)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "glw",
        Description: [
          "Glavda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gly",
        Description: [
          "Gule"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gma",
        Description: [
          "Gambera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gmb",
        Description: [
          "Gula'alaa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gmd",
        Description: [
          "M\xE1ghd\xEC"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gme",
        Description: [
          "East Germanic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "gmg",
        Description: [
          "Mag\u0268yi"
        ],
        Added: "2014-02-28"
      },
      {
        Type: "language",
        Subtag: "gmh",
        Description: [
          "Middle High German (ca. 1050-1500)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "gml",
        Description: [
          "Middle Low German"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gmm",
        Description: [
          "Gbaya-Mbodomo"
        ],
        Added: "2009-07-29",
        Macrolanguage: "gba"
      },
      {
        Type: "language",
        Subtag: "gmn",
        Description: [
          "Gimnime"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gmq",
        Description: [
          "North Germanic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "gmu",
        Description: [
          "Gumalu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gmv",
        Description: [
          "Gamo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gmw",
        Description: [
          "West Germanic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "gmx",
        Description: [
          "Magoma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gmy",
        Description: [
          "Mycenaean Greek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gmz",
        Description: [
          "Mgbolizhia"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "gna",
        Description: [
          "Kaansa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gnb",
        Description: [
          "Gangte"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gnc",
        Description: [
          "Guanche"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gnd",
        Description: [
          "Zulgo-Gemzek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gne",
        Description: [
          "Ganang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gng",
        Description: [
          "Ngangam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gnh",
        Description: [
          "Lere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gni",
        Description: [
          "Gooniyandi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gnj",
        Description: [
          "Ngen"
        ],
        Added: "2018-03-08"
      },
      {
        Type: "language",
        Subtag: "gnk",
        Description: [
          "\u01C1Gana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gnl",
        Description: [
          "Gangulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gnm",
        Description: [
          "Ginuman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gnn",
        Description: [
          "Gumatj"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gno",
        Description: [
          "Northern Gondi"
        ],
        Added: "2009-07-29",
        Macrolanguage: "gon"
      },
      {
        Type: "language",
        Subtag: "gnq",
        Description: [
          "Gana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gnr",
        Description: [
          "Gureng Gureng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gnt",
        Description: [
          "Guntai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gnu",
        Description: [
          "Gnau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gnw",
        Description: [
          "Western Bolivian Guaran\xED"
        ],
        Added: "2009-07-29",
        Macrolanguage: "gn"
      },
      {
        Type: "language",
        Subtag: "gnz",
        Description: [
          "Ganzi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "goa",
        Description: [
          "Guro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gob",
        Description: [
          "Playero"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "goc",
        Description: [
          "Gorakor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "god",
        Description: [
          "Godi\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "goe",
        Description: [
          "Gongduk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gof",
        Description: [
          "Gofa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gog",
        Description: [
          "Gogo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "goh",
        Description: [
          "Old High German (ca. 750-1050)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "goi",
        Description: [
          "Gobasi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "goj",
        Description: [
          "Gowlan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gok",
        Description: [
          "Gowli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gol",
        Description: [
          "Gola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gom",
        Description: [
          "Goan Konkani"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kok"
      },
      {
        Type: "language",
        Subtag: "gon",
        Description: [
          "Gondi"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "goo",
        Description: [
          "Gone Dau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gop",
        Description: [
          "Yeretuar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "goq",
        Description: [
          "Gorap"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gor",
        Description: [
          "Gorontalo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "gos",
        Description: [
          "Gronings"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "got",
        Description: [
          "Gothic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "gou",
        Description: [
          "Gavar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gow",
        Description: [
          "Gorowa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gox",
        Description: [
          "Gobu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "goy",
        Description: [
          "Goundo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "goz",
        Description: [
          "Gozarkhani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gpa",
        Description: [
          "Gupa-Abawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gpe",
        Description: [
          "Ghanaian Pidgin English"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "gpn",
        Description: [
          "Taiap"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gqa",
        Description: [
          "Ga'anda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gqi",
        Description: [
          "Guiqiong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gqn",
        Description: [
          "Guana (Brazil)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gqr",
        Description: [
          "Gor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gqu",
        Description: [
          "Qau"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "gra",
        Description: [
          "Rajput Garasia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "grb",
        Description: [
          "Grebo"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "grc",
        Description: [
          "Ancient Greek (to 1453)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "grd",
        Description: [
          "Guruntum-Mbaaru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "grg",
        Description: [
          "Madi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "grh",
        Description: [
          "Gbiri-Niragu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gri",
        Description: [
          "Ghari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "grj",
        Description: [
          "Southern Grebo"
        ],
        Added: "2009-07-29",
        Macrolanguage: "grb"
      },
      {
        Type: "language",
        Subtag: "grk",
        Description: [
          "Greek languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "grm",
        Description: [
          "Kota Marudu Talantang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gro",
        Description: [
          "Groma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "grq",
        Description: [
          "Gorovu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "grr",
        Description: [
          "Taznatit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "grs",
        Description: [
          "Gresi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "grt",
        Description: [
          "Garo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gru",
        Description: [
          "Kistane"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "grv",
        Description: [
          "Central Grebo"
        ],
        Added: "2009-07-29",
        Macrolanguage: "grb"
      },
      {
        Type: "language",
        Subtag: "grw",
        Description: [
          "Gweda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "grx",
        Description: [
          "Guriaso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gry",
        Description: [
          "Barclayville Grebo"
        ],
        Added: "2009-07-29",
        Macrolanguage: "grb"
      },
      {
        Type: "language",
        Subtag: "grz",
        Description: [
          "Guramalum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gse",
        Description: [
          "Ghanaian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gsg",
        Description: [
          "German Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gsl",
        Description: [
          "Gusilay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gsm",
        Description: [
          "Guatemalan Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gsn",
        Description: [
          "Nema",
          "Gusan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gso",
        Description: [
          "Southwest Gbaya"
        ],
        Added: "2009-07-29",
        Macrolanguage: "gba"
      },
      {
        Type: "language",
        Subtag: "gsp",
        Description: [
          "Wasembo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gss",
        Description: [
          "Greek Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gsw",
        Description: [
          "Swiss German",
          "Alemannic",
          "Alsatian"
        ],
        Added: "2006-03-08",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "gta",
        Description: [
          "Guat\xF3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gti",
        Description: [
          "Gbati-ri"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "nyc"
      },
      {
        Type: "language",
        Subtag: "gtu",
        Description: [
          "Aghu-Tharnggala"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "gua",
        Description: [
          "Shiki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gub",
        Description: [
          "Guajaj\xE1ra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "guc",
        Description: [
          "Wayuu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gud",
        Description: [
          "Yocobou\xE9 Dida"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gue",
        Description: [
          "Gurindji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "guf",
        Description: [
          "Gupapuyngu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gug",
        Description: [
          "Paraguayan Guaran\xED"
        ],
        Added: "2009-07-29",
        Macrolanguage: "gn"
      },
      {
        Type: "language",
        Subtag: "guh",
        Description: [
          "Guahibo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gui",
        Description: [
          "Eastern Bolivian Guaran\xED"
        ],
        Added: "2009-07-29",
        Macrolanguage: "gn"
      },
      {
        Type: "language",
        Subtag: "guk",
        Description: [
          "Gumuz"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gul",
        Description: [
          "Sea Island Creole English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gum",
        Description: [
          "Guambiano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gun",
        Description: [
          "Mby\xE1 Guaran\xED"
        ],
        Added: "2009-07-29",
        Macrolanguage: "gn"
      },
      {
        Type: "language",
        Subtag: "guo",
        Description: [
          "Guayabero"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gup",
        Description: [
          "Gunwinggu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "guq",
        Description: [
          "Ach\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gur",
        Description: [
          "Farefare"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gus",
        Description: [
          "Guinean Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gut",
        Description: [
          "Mal\xE9ku Ja\xEDka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "guu",
        Description: [
          "Yanomam\xF6"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "guv",
        Description: [
          "Gey"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "duz"
      },
      {
        Type: "language",
        Subtag: "guw",
        Description: [
          "Gun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gux",
        Description: [
          "Gourmanch\xE9ma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "guz",
        Description: [
          "Gusii",
          "Ekegusii"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gva",
        Description: [
          "Guana (Paraguay)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gvc",
        Description: [
          "Guanano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gve",
        Description: [
          "Duwet"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gvf",
        Description: [
          "Golin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gvj",
        Description: [
          "Guaj\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gvl",
        Description: [
          "Gulay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gvm",
        Description: [
          "Gurmana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gvn",
        Description: [
          "Kuku-Yalanji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gvo",
        Description: [
          "Gavi\xE3o Do Jiparan\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gvp",
        Description: [
          "Par\xE1 Gavi\xE3o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gvr",
        Description: [
          "Gurung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gvs",
        Description: [
          "Gumawana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gvy",
        Description: [
          "Guyani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gwa",
        Description: [
          "Mbato"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gwb",
        Description: [
          "Gwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gwc",
        Description: [
          "Kalami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gwd",
        Description: [
          "Gawwada"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gwe",
        Description: [
          "Gweno"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gwf",
        Description: [
          "Gowro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gwg",
        Description: [
          "Moo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gwi",
        Description: [
          "Gwich\u02BCin"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "gwj",
        Description: [
          "\u01C0Gwi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gwm",
        Description: [
          "Awngthim"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "gwn",
        Description: [
          "Gwandara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gwr",
        Description: [
          "Gwere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gwt",
        Description: [
          "Gawar-Bati"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gwu",
        Description: [
          "Guwamu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gww",
        Description: [
          "Kwini"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gwx",
        Description: [
          "Gua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gxx",
        Description: [
          "W\xE8 Southern"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gya",
        Description: [
          "Northwest Gbaya"
        ],
        Added: "2009-07-29",
        Macrolanguage: "gba"
      },
      {
        Type: "language",
        Subtag: "gyb",
        Description: [
          "Garus"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gyd",
        Description: [
          "Kayardild"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gye",
        Description: [
          "Gyem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gyf",
        Description: [
          "Gungabula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gyg",
        Description: [
          "Gbayi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gyi",
        Description: [
          "Gyele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gyl",
        Description: [
          "Gayil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gym",
        Description: [
          "Ng\xE4bere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gyn",
        Description: [
          "Guyanese Creole English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gyo",
        Description: [
          "Gyalsumdo"
        ],
        Added: "2018-03-08"
      },
      {
        Type: "language",
        Subtag: "gyr",
        Description: [
          "Guarayu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gyy",
        Description: [
          "Gunya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gza",
        Description: [
          "Ganza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gzi",
        Description: [
          "Gazi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "gzn",
        Description: [
          "Gane"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "haa",
        Description: [
          "Han"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hab",
        Description: [
          "Hanoi Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hac",
        Description: [
          "Gurani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "had",
        Description: [
          "Hatam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hae",
        Description: [
          "Eastern Oromo"
        ],
        Added: "2009-07-29",
        Macrolanguage: "om"
      },
      {
        Type: "language",
        Subtag: "haf",
        Description: [
          "Haiphong Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hag",
        Description: [
          "Hanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hah",
        Description: [
          "Hahon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hai",
        Description: [
          "Haida"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "haj",
        Description: [
          "Hajong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hak",
        Description: [
          "Hakka Chinese"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zh"
      },
      {
        Type: "language",
        Subtag: "hal",
        Description: [
          "Halang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ham",
        Description: [
          "Hewa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "han",
        Description: [
          "Hangaza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hao",
        Description: [
          "Hak\xF6"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hap",
        Description: [
          "Hupla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "haq",
        Description: [
          "Ha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "har",
        Description: [
          "Harari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "has",
        Description: [
          "Haisla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hav",
        Description: [
          "Havu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "haw",
        Description: [
          "Hawaiian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "hax",
        Description: [
          "Southern Haida"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hai"
      },
      {
        Type: "language",
        Subtag: "hay",
        Description: [
          "Haya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "haz",
        Description: [
          "Hazaragi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hba",
        Description: [
          "Hamba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hbb",
        Description: [
          "Huba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hbn",
        Description: [
          "Heiban"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hbo",
        Description: [
          "Ancient Hebrew"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hbu",
        Description: [
          "Habu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hca",
        Description: [
          "Andaman Creole Hindi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hch",
        Description: [
          "Huichol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hdn",
        Description: [
          "Northern Haida"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hai"
      },
      {
        Type: "language",
        Subtag: "hds",
        Description: [
          "Honduras Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hdy",
        Description: [
          "Hadiyya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hea",
        Description: [
          "Northern Qiandong Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hed",
        Description: [
          "Herd\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "heg",
        Description: [
          "Helong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "heh",
        Description: [
          "Hehe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hei",
        Description: [
          "Heiltsuk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hem",
        Description: [
          "Hemba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hgm",
        Description: [
          "Hai\u01C1om"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hgw",
        Description: [
          "Haigwai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hhi",
        Description: [
          "Hoia Hoia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hhr",
        Description: [
          "Kerak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hhy",
        Description: [
          "Hoyahoya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hia",
        Description: [
          "Lamang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hib",
        Description: [
          "Hibito"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hid",
        Description: [
          "Hidatsa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hif",
        Description: [
          "Fiji Hindi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hig",
        Description: [
          "Kamwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hih",
        Description: [
          "Pamosu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hii",
        Description: [
          "Hinduri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hij",
        Description: [
          "Hijuk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hik",
        Description: [
          "Seit-Kaitetu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hil",
        Description: [
          "Hiligaynon"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "him",
        Description: [
          "Himachali languages",
          "Western Pahari languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "hio",
        Description: [
          "Tsoa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hir",
        Description: [
          "Himarim\xE3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hit",
        Description: [
          "Hittite"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "hiw",
        Description: [
          "Hiw"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hix",
        Description: [
          "Hixkary\xE1na"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hji",
        Description: [
          "Haji"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "hka",
        Description: [
          "Kahe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hke",
        Description: [
          "Hunde"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hkk",
        Description: [
          "Hunjara-Kaina Ke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hkn",
        Description: [
          "Mel-Khaonh"
        ],
        Added: "2018-03-08"
      },
      {
        Type: "language",
        Subtag: "hks",
        Description: [
          "Hong Kong Sign Language",
          "Heung Kong Sau Yue"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hla",
        Description: [
          "Halia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hlb",
        Description: [
          "Halbi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hld",
        Description: [
          "Halang Doan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hle",
        Description: [
          "Hlersu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hlt",
        Description: [
          "Matu Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hlu",
        Description: [
          "Hieroglyphic Luwian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hma",
        Description: [
          "Southern Mashan Hmong",
          "Southern Mashan Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hmb",
        Description: [
          "Humburi Senni Songhay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hmc",
        Description: [
          "Central Huishui Hmong",
          "Central Huishui Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hmd",
        Description: [
          "Large Flowery Miao",
          "A-hmaos",
          "Da-Hua Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hme",
        Description: [
          "Eastern Huishui Hmong",
          "Eastern Huishui Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hmf",
        Description: [
          "Hmong Don"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hmg",
        Description: [
          "Southwestern Guiyang Hmong"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hmh",
        Description: [
          "Southwestern Huishui Hmong",
          "Southwestern Huishui Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hmi",
        Description: [
          "Northern Huishui Hmong",
          "Northern Huishui Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hmj",
        Description: [
          "Ge",
          "Gejia"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hmk",
        Description: [
          "Maek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hml",
        Description: [
          "Luopohe Hmong",
          "Luopohe Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hmm",
        Description: [
          "Central Mashan Hmong",
          "Central Mashan Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hmn",
        Description: [
          "Hmong",
          "Mong"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "hmp",
        Description: [
          "Northern Mashan Hmong",
          "Northern Mashan Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hmq",
        Description: [
          "Eastern Qiandong Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hmr",
        Description: [
          "Hmar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hms",
        Description: [
          "Southern Qiandong Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hmt",
        Description: [
          "Hamtai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hmu",
        Description: [
          "Hamap"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hmv",
        Description: [
          "Hmong D\xF4"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hmw",
        Description: [
          "Western Mashan Hmong",
          "Western Mashan Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hmx",
        Description: [
          "Hmong-Mien languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "hmy",
        Description: [
          "Southern Guiyang Hmong",
          "Southern Guiyang Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hmz",
        Description: [
          "Hmong Shua",
          "Sinicized Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hna",
        Description: [
          "Mina (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hnd",
        Description: [
          "Southern Hindko"
        ],
        Added: "2009-07-29",
        Macrolanguage: "lah"
      },
      {
        Type: "language",
        Subtag: "hne",
        Description: [
          "Chhattisgarhi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hnh",
        Description: [
          "\u01C1Ani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hni",
        Description: [
          "Hani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hnj",
        Description: [
          "Hmong Njua",
          "Mong Leng",
          "Mong Njua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hnn",
        Description: [
          "Hanunoo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hno",
        Description: [
          "Northern Hindko"
        ],
        Added: "2009-07-29",
        Macrolanguage: "lah"
      },
      {
        Type: "language",
        Subtag: "hns",
        Description: [
          "Caribbean Hindustani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hnu",
        Description: [
          "Hung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hoa",
        Description: [
          "Hoava"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hob",
        Description: [
          "Mari (Madang Province)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hoc",
        Description: [
          "Ho"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hod",
        Description: [
          "Holma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hoe",
        Description: [
          "Horom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hoh",
        Description: [
          "Hoby\xF3t"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hoi",
        Description: [
          "Holikachuk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hoj",
        Description: [
          "Hadothi",
          "Haroti"
        ],
        Added: "2009-07-29",
        Macrolanguage: "raj"
      },
      {
        Type: "language",
        Subtag: "hok",
        Description: [
          "Hokan languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "hol",
        Description: [
          "Holu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hom",
        Description: [
          "Homa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hoo",
        Description: [
          "Holoholo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hop",
        Description: [
          "Hopi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hor",
        Description: [
          "Horo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hos",
        Description: [
          "Ho Chi Minh City Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hot",
        Description: [
          "Hote",
          "Mal\xEA"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hov",
        Description: [
          "Hovongan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "how",
        Description: [
          "Honi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hoy",
        Description: [
          "Holiya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hoz",
        Description: [
          "Hozo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hpo",
        Description: [
          "Hpon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hps",
        Description: [
          "Hawai'i Sign Language (HSL)",
          "Hawai'i Pidgin Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hra",
        Description: [
          "Hrangkhol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hrc",
        Description: [
          "Niwer Mil"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "hre",
        Description: [
          "Hre"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hrk",
        Description: [
          "Haruku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hrm",
        Description: [
          "Horned Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "hro",
        Description: [
          "Haroi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hrp",
        Description: [
          "Nhirrpi"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "hrr",
        Description: [
          "Horuru"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        "Preferred-Value": "jal"
      },
      {
        Type: "language",
        Subtag: "hrt",
        Description: [
          "H\xE9rtevin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hru",
        Description: [
          "Hruso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hrw",
        Description: [
          "Warwar Feni"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "hrx",
        Description: [
          "Hunsrik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hrz",
        Description: [
          "Harzani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hsb",
        Description: [
          "Upper Sorbian"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "hsh",
        Description: [
          "Hungarian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hsl",
        Description: [
          "Hausa Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hsn",
        Description: [
          "Xiang Chinese"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zh"
      },
      {
        Type: "language",
        Subtag: "hss",
        Description: [
          "Harsusi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hti",
        Description: [
          "Hoti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hto",
        Description: [
          "Minica Huitoto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hts",
        Description: [
          "Hadza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "htu",
        Description: [
          "Hitu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "htx",
        Description: [
          "Middle Hittite"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hub",
        Description: [
          "Huambisa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "huc",
        Description: [
          "\u01C2Hua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hud",
        Description: [
          "Huaulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hue",
        Description: [
          "San Francisco Del Mar Huave"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "huf",
        Description: [
          "Humene"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hug",
        Description: [
          "Huachipaeri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "huh",
        Description: [
          "Huilliche"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hui",
        Description: [
          "Huli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "huj",
        Description: [
          "Northern Guiyang Hmong",
          "Northern Guiyang Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "huk",
        Description: [
          "Hulung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hul",
        Description: [
          "Hula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hum",
        Description: [
          "Hungana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "huo",
        Description: [
          "Hu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hup",
        Description: [
          "Hupa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "huq",
        Description: [
          "Tsat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hur",
        Description: [
          "Halkomelem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hus",
        Description: [
          "Huastec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hut",
        Description: [
          "Humla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "huu",
        Description: [
          "Murui Huitoto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "huv",
        Description: [
          "San Mateo Del Mar Huave"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "huw",
        Description: [
          "Hukumina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hux",
        Description: [
          "N\xFCpode Huitoto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "huy",
        Description: [
          "Hulaul\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "huz",
        Description: [
          "Hunzib"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hvc",
        Description: [
          "Haitian Vodoun Culture Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hve",
        Description: [
          "San Dionisio Del Mar Huave"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hvk",
        Description: [
          "Haveke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hvn",
        Description: [
          "Sabu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hvv",
        Description: [
          "Santa Mar\xEDa Del Mar Huave"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hwa",
        Description: [
          "Wan\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hwc",
        Description: [
          "Hawai'i Creole English",
          "Hawai'i Pidgin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hwo",
        Description: [
          "Hwana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hya",
        Description: [
          "Hya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "hyw",
        Description: [
          "Western Armenian"
        ],
        Added: "2018-03-08",
        Comments: [
          "see also hy"
        ]
      },
      {
        Type: "language",
        Subtag: "hyx",
        Description: [
          "Armenian (family)"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "iai",
        Description: [
          "Iaai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ian",
        Description: [
          "Iatmul"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iap",
        Description: [
          "Iapama"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "iar",
        Description: [
          "Purari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iba",
        Description: [
          "Iban"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ibb",
        Description: [
          "Ibibio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ibd",
        Description: [
          "Iwaidja"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ibe",
        Description: [
          "Akpes"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ibg",
        Description: [
          "Ibanag"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ibh",
        Description: [
          "Bih"
        ],
        Added: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "ibi",
        Description: [
          "Ibilo"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        "Preferred-Value": "opa"
      },
      {
        Type: "language",
        Subtag: "ibl",
        Description: [
          "Ibaloi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ibm",
        Description: [
          "Agoi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ibn",
        Description: [
          "Ibino"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ibr",
        Description: [
          "Ibuoro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ibu",
        Description: [
          "Ibu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iby",
        Description: [
          "Ibani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ica",
        Description: [
          "Ede Ica"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ich",
        Description: [
          "Etkywan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "icl",
        Description: [
          "Icelandic Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "icr",
        Description: [
          "Islander Creole English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ida",
        Description: [
          "Idakho-Isukha-Tiriki",
          "Luidakho-Luisukha-Lutirichi"
        ],
        Added: "2009-07-29",
        Macrolanguage: "luy"
      },
      {
        Type: "language",
        Subtag: "idb",
        Description: [
          "Indo-Portuguese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "idc",
        Description: [
          "Idon",
          "Ajiya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "idd",
        Description: [
          "Ede Idaca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ide",
        Description: [
          "Idere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "idi",
        Description: [
          "Idi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "idr",
        Description: [
          "Indri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ids",
        Description: [
          "Idesa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "idt",
        Description: [
          "Idat\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "idu",
        Description: [
          "Idoma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ifa",
        Description: [
          "Amganad Ifugao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ifb",
        Description: [
          "Batad Ifugao",
          "Ayangan Ifugao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ife",
        Description: [
          "If\xE8"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iff",
        Description: [
          "Ifo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ifk",
        Description: [
          "Tuwali Ifugao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ifm",
        Description: [
          "Teke-Fuumu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ifu",
        Description: [
          "Mayoyao Ifugao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ify",
        Description: [
          "Keley-I Kallahan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "igb",
        Description: [
          "Ebira"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ige",
        Description: [
          "Igede"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "igg",
        Description: [
          "Igana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "igl",
        Description: [
          "Igala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "igm",
        Description: [
          "Kanggape"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ign",
        Description: [
          "Ignaciano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "igo",
        Description: [
          "Isebe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "igs",
        Description: [
          "Interglossa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "igw",
        Description: [
          "Igwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ihb",
        Description: [
          "Iha Based Pidgin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ihi",
        Description: [
          "Ihievbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ihp",
        Description: [
          "Iha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ihw",
        Description: [
          "Bidhawal"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "iin",
        Description: [
          "Thiin"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "iir",
        Description: [
          "Indo-Iranian languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "ijc",
        Description: [
          "Izon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ije",
        Description: [
          "Biseni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ijj",
        Description: [
          "Ede Ije"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ijn",
        Description: [
          "Kalabari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ijo",
        Description: [
          "Ijo languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "ijs",
        Description: [
          "Southeast Ijo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ike",
        Description: [
          "Eastern Canadian Inuktitut"
        ],
        Added: "2009-07-29",
        Macrolanguage: "iu"
      },
      {
        Type: "language",
        Subtag: "iki",
        Description: [
          "Iko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ikk",
        Description: [
          "Ika"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ikl",
        Description: [
          "Ikulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iko",
        Description: [
          "Olulumo-Ikom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ikp",
        Description: [
          "Ikpeshi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ikr",
        Description: [
          "Ikaranggal"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "iks",
        Description: [
          "Inuit Sign Language"
        ],
        Added: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "ikt",
        Description: [
          "Inuinnaqtun",
          "Western Canadian Inuktitut"
        ],
        Added: "2009-07-29",
        Macrolanguage: "iu"
      },
      {
        Type: "language",
        Subtag: "ikv",
        Description: [
          "Iku-Gora-Ankwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ikw",
        Description: [
          "Ikwere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ikx",
        Description: [
          "Ik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ikz",
        Description: [
          "Ikizu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ila",
        Description: [
          "Ile Ape"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ilb",
        Description: [
          "Ila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ilg",
        Description: [
          "Garig-Ilgar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ili",
        Description: [
          "Ili Turki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ilk",
        Description: [
          "Ilongot"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ill",
        Description: [
          "Iranun"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        Comments: [
          "see ilm, ilp"
        ]
      },
      {
        Type: "language",
        Subtag: "ilm",
        Description: [
          "Iranun (Malaysia)"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "ilo",
        Description: [
          "Iloko"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ilp",
        Description: [
          "Iranun (Philippines)"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "ils",
        Description: [
          "International Sign"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ilu",
        Description: [
          "Ili'uun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ilv",
        Description: [
          "Ilue"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ilw",
        Description: [
          "Talur"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        "Preferred-Value": "gal"
      },
      {
        Type: "language",
        Subtag: "ima",
        Description: [
          "Mala Malasar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ime",
        Description: [
          "Imeraguen"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "imi",
        Description: [
          "Anamgura"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iml",
        Description: [
          "Miluk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "imn",
        Description: [
          "Imonda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "imo",
        Description: [
          "Imbongu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "imr",
        Description: [
          "Imroing"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ims",
        Description: [
          "Marsian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "imy",
        Description: [
          "Milyan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "inb",
        Description: [
          "Inga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "inc",
        Description: [
          "Indic languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "ine",
        Description: [
          "Indo-European languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "ing",
        Description: [
          "Degexit'an"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "inh",
        Description: [
          "Ingush"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "inj",
        Description: [
          "Jungle Inga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "inl",
        Description: [
          "Indonesian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "inm",
        Description: [
          "Minaean"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "inn",
        Description: [
          "Isinai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ino",
        Description: [
          "Inoke-Yate"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "inp",
        Description: [
          "I\xF1apari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ins",
        Description: [
          "Indian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "int",
        Description: [
          "Intha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "inz",
        Description: [
          "Inese\xF1o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ior",
        Description: [
          "Inor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iou",
        Description: [
          "Tuma-Irumu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iow",
        Description: [
          "Iowa-Oto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ipi",
        Description: [
          "Ipili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ipo",
        Description: [
          "Ipiko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iqu",
        Description: [
          "Iquito"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iqw",
        Description: [
          "Ikwo"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "ira",
        Description: [
          "Iranian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "ire",
        Description: [
          "Iresim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "irh",
        Description: [
          "Irarutu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iri",
        Description: [
          "Rigwe",
          "Irigwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "irk",
        Description: [
          "Iraqw"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "irn",
        Description: [
          "Ir\xE1ntxe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iro",
        Description: [
          "Iroquoian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "irr",
        Description: [
          "Ir"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iru",
        Description: [
          "Irula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "irx",
        Description: [
          "Kamberau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iry",
        Description: [
          "Iraya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "isa",
        Description: [
          "Isabi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "isc",
        Description: [
          "Isconahua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "isd",
        Description: [
          "Isnag"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ise",
        Description: [
          "Italian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "isg",
        Description: [
          "Irish Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ish",
        Description: [
          "Esan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "isi",
        Description: [
          "Nkem-Nkum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "isk",
        Description: [
          "Ishkashimi"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "ism",
        Description: [
          "Masimasi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "isn",
        Description: [
          "Isanzu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iso",
        Description: [
          "Isoko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "isr",
        Description: [
          "Israeli Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ist",
        Description: [
          "Istriot"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "isu",
        Description: [
          "Isu (Menchum Division)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "itb",
        Description: [
          "Binongan Itneg"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "itc",
        Description: [
          "Italic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "itd",
        Description: [
          "Southern Tidung"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "ite",
        Description: [
          "Itene"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iti",
        Description: [
          "Inlaod Itneg"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "itk",
        Description: [
          "Judeo-Italian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "itl",
        Description: [
          "Itelmen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "itm",
        Description: [
          "Itu Mbon Uzo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ito",
        Description: [
          "Itonama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "itr",
        Description: [
          "Iteri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "its",
        Description: [
          "Isekiri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "itt",
        Description: [
          "Maeng Itneg"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "itv",
        Description: [
          "Itawit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "itw",
        Description: [
          "Ito"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "itx",
        Description: [
          "Itik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ity",
        Description: [
          "Moyadan Itneg"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "itz",
        Description: [
          "Itz\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ium",
        Description: [
          "Iu Mien"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ivb",
        Description: [
          "Ibatan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ivv",
        Description: [
          "Ivatan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iwk",
        Description: [
          "I-Wak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iwm",
        Description: [
          "Iwam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iwo",
        Description: [
          "Iwur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iws",
        Description: [
          "Sepik Iwam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ixc",
        Description: [
          "Ixcatec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ixl",
        Description: [
          "Ixil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iya",
        Description: [
          "Iyayu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iyo",
        Description: [
          "Mesaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "iyx",
        Description: [
          "Yaka (Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "izh",
        Description: [
          "Ingrian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "izi",
        Description: [
          "Izi-Ezaa-Ikwo-Mgbo"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        Comments: [
          "see eza, gmz, iqw, izz"
        ]
      },
      {
        Type: "language",
        Subtag: "izr",
        Description: [
          "Izere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "izz",
        Description: [
          "Izii"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "jaa",
        Description: [
          "Jamamad\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jab",
        Description: [
          "Hyam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jac",
        Description: [
          "Popti'",
          "Jakalteko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jad",
        Description: [
          "Jahanka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jae",
        Description: [
          "Yabem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jaf",
        Description: [
          "Jara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jah",
        Description: [
          "Jah Hut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jaj",
        Description: [
          "Zazao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jak",
        Description: [
          "Jakun"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "jal",
        Description: [
          "Yalahatan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jam",
        Description: [
          "Jamaican Creole English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jan",
        Description: [
          "Jandai"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "jao",
        Description: [
          "Yanyuwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jaq",
        Description: [
          "Yaqay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jar",
        Description: [
          "Jarawa (Nigeria)"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see jgk, jjr"
        ]
      },
      {
        Type: "language",
        Subtag: "jas",
        Description: [
          "New Caledonian Javanese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jat",
        Description: [
          "Jakati"
        ],
        Added: "2009-07-29",
        Macrolanguage: "lah"
      },
      {
        Type: "language",
        Subtag: "jau",
        Description: [
          "Yaur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jax",
        Description: [
          "Jambi Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "jay",
        Description: [
          "Yan-nhangu",
          "Nhangu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jaz",
        Description: [
          "Jawe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jbe",
        Description: [
          "Judeo-Berber"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jbi",
        Description: [
          "Badjiri"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "jbj",
        Description: [
          "Arandai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jbk",
        Description: [
          "Barikewa"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "jbn",
        Description: [
          "Nafusi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jbo",
        Description: [
          "Lojban"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "jbr",
        Description: [
          "Jofotek-Bromnya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jbt",
        Description: [
          "Jabut\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jbu",
        Description: [
          "Jukun Takum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jbw",
        Description: [
          "Yawijibaya"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "jcs",
        Description: [
          "Jamaican Country Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jct",
        Description: [
          "Krymchak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jda",
        Description: [
          "Jad"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jdg",
        Description: [
          "Jadgali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jdt",
        Description: [
          "Judeo-Tat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jeb",
        Description: [
          "Jebero"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jee",
        Description: [
          "Jerung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jeg",
        Description: [
          "Jeng"
        ],
        Added: "2009-07-29",
        Deprecated: "2017-02-23",
        "Preferred-Value": "oyb"
      },
      {
        Type: "language",
        Subtag: "jeh",
        Description: [
          "Jeh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jei",
        Description: [
          "Yei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jek",
        Description: [
          "Jeri Kuo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jel",
        Description: [
          "Yelmek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jen",
        Description: [
          "Dza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jer",
        Description: [
          "Jere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jet",
        Description: [
          "Manem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jeu",
        Description: [
          "Jonkor Bourmataguil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jgb",
        Description: [
          "Ngbee"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jge",
        Description: [
          "Judeo-Georgian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jgk",
        Description: [
          "Gwak"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "jgo",
        Description: [
          "Ngomba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jhi",
        Description: [
          "Jehai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jhs",
        Description: [
          "Jhankot Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jia",
        Description: [
          "Jina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jib",
        Description: [
          "Jibu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jic",
        Description: [
          "Tol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jid",
        Description: [
          "Bu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jie",
        Description: [
          "Jilbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jig",
        Description: [
          "Jingulu",
          "Djingili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jih",
        Description: [
          "sTodsde",
          "Shangzhai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jii",
        Description: [
          "Jiiddu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jil",
        Description: [
          "Jilim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jim",
        Description: [
          "Jimi (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jio",
        Description: [
          "Jiamao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jiq",
        Description: [
          "Guanyinqiao",
          "Lavrung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jit",
        Description: [
          "Jita"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jiu",
        Description: [
          "Youle Jinuo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jiv",
        Description: [
          "Shuar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jiy",
        Description: [
          "Buyuan Jinuo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jje",
        Description: [
          "Jejueo"
        ],
        Added: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "jjr",
        Description: [
          "Bankal"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "jka",
        Description: [
          "Kaera"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "jkm",
        Description: [
          "Mobwa Karen"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "jko",
        Description: [
          "Kubo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jkp",
        Description: [
          "Paku Karen"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "jkr",
        Description: [
          "Koro (India)"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "jku",
        Description: [
          "Labir"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jle",
        Description: [
          "Ngile"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jls",
        Description: [
          "Jamaican Sign Language"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "jma",
        Description: [
          "Dima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jmb",
        Description: [
          "Zumbun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jmc",
        Description: [
          "Machame"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jmd",
        Description: [
          "Yamdena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jmi",
        Description: [
          "Jimi (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jml",
        Description: [
          "Jumli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jmn",
        Description: [
          "Makuri Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jmr",
        Description: [
          "Kamara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jms",
        Description: [
          "Mashi (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jmw",
        Description: [
          "Mouwase"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "jmx",
        Description: [
          "Western Juxtlahuaca Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jna",
        Description: [
          "Jangshung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jnd",
        Description: [
          "Jandavra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jng",
        Description: [
          "Yangman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jni",
        Description: [
          "Janji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jnj",
        Description: [
          "Yemsa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jnl",
        Description: [
          "Rawat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jns",
        Description: [
          "Jaunsari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "job",
        Description: [
          "Joba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jod",
        Description: [
          "Wojenaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jog",
        Description: [
          "Jogi"
        ],
        Added: "2015-05-27"
      },
      {
        Type: "language",
        Subtag: "jor",
        Description: [
          "Jor\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jos",
        Description: [
          "Jordanian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jow",
        Description: [
          "Jowulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jpa",
        Description: [
          "Jewish Palestinian Aramaic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jpr",
        Description: [
          "Judeo-Persian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "jpx",
        Description: [
          "Japanese (family)"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "jqr",
        Description: [
          "Jaqaru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jra",
        Description: [
          "Jarai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jrb",
        Description: [
          "Judeo-Arabic"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "jrr",
        Description: [
          "Jiru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jrt",
        Description: [
          "Jorto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jru",
        Description: [
          "Japrer\xEDa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jsl",
        Description: [
          "Japanese Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jua",
        Description: [
          "J\xFAma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jub",
        Description: [
          "Wannu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "juc",
        Description: [
          "Jurchen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jud",
        Description: [
          "Worodougou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "juh",
        Description: [
          "H\xF5ne"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jui",
        Description: [
          "Ngadjuri"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "juk",
        Description: [
          "Wapan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jul",
        Description: [
          "Jirel"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jum",
        Description: [
          "Jumjum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jun",
        Description: [
          "Juang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "juo",
        Description: [
          "Jiba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jup",
        Description: [
          "Hupd\xEB"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jur",
        Description: [
          "Jur\xFAna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jus",
        Description: [
          "Jumla Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jut",
        Description: [
          "Jutish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "juu",
        Description: [
          "Ju"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "juw",
        Description: [
          "W\xE3pha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "juy",
        Description: [
          "Juray"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jvd",
        Description: [
          "Javindo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jvn",
        Description: [
          "Caribbean Javanese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jwi",
        Description: [
          "Jwira-Pepesa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jya",
        Description: [
          "Jiarong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "jye",
        Description: [
          "Judeo-Yemeni Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "jrb"
      },
      {
        Type: "language",
        Subtag: "jyy",
        Description: [
          "Jaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kaa",
        Description: [
          "Kara-Kalpak"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "kab",
        Description: [
          "Kabyle"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "kac",
        Description: [
          "Kachin",
          "Jingpho"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "kad",
        Description: [
          "Adara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kae",
        Description: [
          "Ketangalan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kaf",
        Description: [
          "Katso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kag",
        Description: [
          "Kajaman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kah",
        Description: [
          "Kara (Central African Republic)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kai",
        Description: [
          "Karekare"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kaj",
        Description: [
          "Jju"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kak",
        Description: [
          "Kalanguya",
          "Kayapa Kallahan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kam",
        Description: [
          "Kamba (Kenya)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "kao",
        Description: [
          "Xaasongaxango"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kap",
        Description: [
          "Bezhta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kaq",
        Description: [
          "Capanahua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kar",
        Description: [
          "Karen languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "kav",
        Description: [
          "Katuk\xEDna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kaw",
        Description: [
          "Kawi"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "kax",
        Description: [
          "Kao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kay",
        Description: [
          "Kamayur\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kba",
        Description: [
          "Kalarko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbb",
        Description: [
          "Kaxui\xE2na"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbc",
        Description: [
          "Kadiw\xE9u"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbd",
        Description: [
          "Kabardian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "kbe",
        Description: [
          "Kanju"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbf",
        Description: [
          "Kakauhua"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "kbg",
        Description: [
          "Khamba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbh",
        Description: [
          "Cams\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbi",
        Description: [
          "Kaptiau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbj",
        Description: [
          "Kari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbk",
        Description: [
          "Grass Koiari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbl",
        Description: [
          "Kanembu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbm",
        Description: [
          "Iwal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbn",
        Description: [
          "Kare (Central African Republic)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbo",
        Description: [
          "Keliko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbp",
        Description: [
          "Kabiy\xE8"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbq",
        Description: [
          "Kamano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbr",
        Description: [
          "Kafa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbs",
        Description: [
          "Kande"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbt",
        Description: [
          "Abadi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbu",
        Description: [
          "Kabutra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbv",
        Description: [
          "Dera (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbw",
        Description: [
          "Kaiep"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kbx",
        Description: [
          "Ap Ma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kby",
        Description: [
          "Manga Kanuri"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kr"
      },
      {
        Type: "language",
        Subtag: "kbz",
        Description: [
          "Duhwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kca",
        Description: [
          "Khanty"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcb",
        Description: [
          "Kawacha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcc",
        Description: [
          "Lubila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcd",
        Description: [
          "Ngk\xE2lmpw Kanum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kce",
        Description: [
          "Kaivi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcf",
        Description: [
          "Ukaan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcg",
        Description: [
          "Tyap"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kch",
        Description: [
          "Vono"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kci",
        Description: [
          "Kamantan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcj",
        Description: [
          "Kobiana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kck",
        Description: [
          "Kalanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcl",
        Description: [
          "Kela (Papua New Guinea)",
          "Kala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcm",
        Description: [
          "Gula (Central African Republic)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcn",
        Description: [
          "Nubi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kco",
        Description: [
          "Kinalakna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcp",
        Description: [
          "Kanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcq",
        Description: [
          "Kamo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcr",
        Description: [
          "Katla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcs",
        Description: [
          "Koenoem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kct",
        Description: [
          "Kaian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcu",
        Description: [
          "Kami (Tanzania)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcv",
        Description: [
          "Kete"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcw",
        Description: [
          "Kabwari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcx",
        Description: [
          "Kachama-Ganjule"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcy",
        Description: [
          "Korandje"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kcz",
        Description: [
          "Konongo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kda",
        Description: [
          "Worimi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdc",
        Description: [
          "Kutu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdd",
        Description: [
          "Yankunytjatjara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kde",
        Description: [
          "Makonde"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdf",
        Description: [
          "Mamusi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdg",
        Description: [
          "Seba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdh",
        Description: [
          "Tem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdi",
        Description: [
          "Kumam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdj",
        Description: [
          "Karamojong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdk",
        Description: [
          "Num\xE8\xE8",
          "Kw\xE9nyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdl",
        Description: [
          "Tsikimba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdm",
        Description: [
          "Kagoma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdn",
        Description: [
          "Kunda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdo",
        Description: [
          "Kordofanian languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "kdp",
        Description: [
          "Kaningdon-Nindem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdq",
        Description: [
          "Koch"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdr",
        Description: [
          "Karaim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdt",
        Description: [
          "Kuy"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdu",
        Description: [
          "Kadaru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdv",
        Description: [
          "Kado"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see zkd, zkn"
        ]
      },
      {
        Type: "language",
        Subtag: "kdw",
        Description: [
          "Koneraw"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdx",
        Description: [
          "Kam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdy",
        Description: [
          "Keder",
          "Keijar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kdz",
        Description: [
          "Kwaja"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kea",
        Description: [
          "Kabuverdianu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "keb",
        Description: [
          "K\xE9l\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kec",
        Description: [
          "Keiga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ked",
        Description: [
          "Kerewe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kee",
        Description: [
          "Eastern Keres"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kef",
        Description: [
          "Kpessi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "keg",
        Description: [
          "Tese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "keh",
        Description: [
          "Keak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kei",
        Description: [
          "Kei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kej",
        Description: [
          "Kadar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kek",
        Description: [
          "Kekch\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kel",
        Description: [
          "Kela (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kem",
        Description: [
          "Kemak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ken",
        Description: [
          "Kenyang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "keo",
        Description: [
          "Kakwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kep",
        Description: [
          "Kaikadi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "keq",
        Description: [
          "Kamar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ker",
        Description: [
          "Kera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kes",
        Description: [
          "Kugbo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ket",
        Description: [
          "Ket"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "keu",
        Description: [
          "Akebu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kev",
        Description: [
          "Kanikkaran"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kew",
        Description: [
          "West Kewa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kex",
        Description: [
          "Kukna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "key",
        Description: [
          "Kupia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kez",
        Description: [
          "Kukele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfa",
        Description: [
          "Kodava"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfb",
        Description: [
          "Northwestern Kolami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfc",
        Description: [
          "Konda-Dora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfd",
        Description: [
          "Korra Koraga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfe",
        Description: [
          "Kota (India)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kff",
        Description: [
          "Koya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfg",
        Description: [
          "Kudiya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfh",
        Description: [
          "Kurichiya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfi",
        Description: [
          "Kannada Kurumba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfj",
        Description: [
          "Kemiehua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfk",
        Description: [
          "Kinnauri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfl",
        Description: [
          "Kung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfm",
        Description: [
          "Khunsari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfn",
        Description: [
          "Kuk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfo",
        Description: [
          "Koro (C\xF4te d'Ivoire)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfp",
        Description: [
          "Korwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfq",
        Description: [
          "Korku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfr",
        Description: [
          "Kachhi",
          "Kutchi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfs",
        Description: [
          "Bilaspuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kft",
        Description: [
          "Kanjari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfu",
        Description: [
          "Katkari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfv",
        Description: [
          "Kurmukar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfw",
        Description: [
          "Kharam Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfx",
        Description: [
          "Kullu Pahari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfy",
        Description: [
          "Kumaoni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kfz",
        Description: [
          "Koromf\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kga",
        Description: [
          "Koyaga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgb",
        Description: [
          "Kawe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgc",
        Description: [
          "Kasseng"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "tdf"
      },
      {
        Type: "language",
        Subtag: "kgd",
        Description: [
          "Kataang"
        ],
        Added: "2009-07-29",
        Deprecated: "2017-02-23",
        Comments: [
          "see ncq, sct"
        ]
      },
      {
        Type: "language",
        Subtag: "kge",
        Description: [
          "Komering"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgf",
        Description: [
          "Kube"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgg",
        Description: [
          "Kusunda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgh",
        Description: [
          "Upper Tanudan Kalinga"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        "Preferred-Value": "kml"
      },
      {
        Type: "language",
        Subtag: "kgi",
        Description: [
          "Selangor Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgj",
        Description: [
          "Gamale Kham"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgk",
        Description: [
          "Kaiw\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgl",
        Description: [
          "Kunggari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgm",
        Description: [
          "Karip\xFAna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgn",
        Description: [
          "Karingani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgo",
        Description: [
          "Krongo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgp",
        Description: [
          "Kaingang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgq",
        Description: [
          "Kamoro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgr",
        Description: [
          "Abun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgs",
        Description: [
          "Kumbainggar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgt",
        Description: [
          "Somyev"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgu",
        Description: [
          "Kobol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgv",
        Description: [
          "Karas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgw",
        Description: [
          "Karon Dori"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgx",
        Description: [
          "Kamaru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kgy",
        Description: [
          "Kyerung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kha",
        Description: [
          "Khasi"
        ],
        Added: "2005-10-16",
        Comments: [
          "as of 2008-04-21 this subtag does not include Lyngngam; see lyg"
        ]
      },
      {
        Type: "language",
        Subtag: "khb",
        Description: [
          "L\xFC"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khc",
        Description: [
          "Tukang Besi North"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khd",
        Description: [
          "B\xE4di Kanum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khe",
        Description: [
          "Korowai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khf",
        Description: [
          "Khuen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khg",
        Description: [
          "Khams Tibetan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khh",
        Description: [
          "Kehu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khi",
        Description: [
          "Khoisan languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "khj",
        Description: [
          "Kuturmi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khk",
        Description: [
          "Halh Mongolian"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mn"
      },
      {
        Type: "language",
        Subtag: "khl",
        Description: [
          "Lusi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khn",
        Description: [
          "Khandesi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kho",
        Description: [
          "Khotanese",
          "Sakan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "khp",
        Description: [
          "Kapori",
          "Kapauri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khq",
        Description: [
          "Koyra Chiini Songhay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khr",
        Description: [
          "Kharia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khs",
        Description: [
          "Kasua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kht",
        Description: [
          "Khamti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khu",
        Description: [
          "Nkhumbi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khv",
        Description: [
          "Khvarshi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khw",
        Description: [
          "Khowar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khx",
        Description: [
          "Kanu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khy",
        Description: [
          "Kele (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "khz",
        Description: [
          "Keapara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kia",
        Description: [
          "Kim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kib",
        Description: [
          "Koalib"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kic",
        Description: [
          "Kickapoo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kid",
        Description: [
          "Koshin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kie",
        Description: [
          "Kibet"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kif",
        Description: [
          "Eastern Parbate Kham"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kig",
        Description: [
          "Kimaama",
          "Kimaghima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kih",
        Description: [
          "Kilmeri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kii",
        Description: [
          "Kitsai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kij",
        Description: [
          "Kilivila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kil",
        Description: [
          "Kariya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kim",
        Description: [
          "Karagas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kio",
        Description: [
          "Kiowa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kip",
        Description: [
          "Sheshi Kham"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kiq",
        Description: [
          "Kosadle",
          "Kosare"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kis",
        Description: [
          "Kis"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kit",
        Description: [
          "Agob"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kiu",
        Description: [
          "Kirmanjki (individual language)"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zza"
      },
      {
        Type: "language",
        Subtag: "kiv",
        Description: [
          "Kimbu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kiw",
        Description: [
          "Northeast Kiwai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kix",
        Description: [
          "Khiamniungan Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kiy",
        Description: [
          "Kirikiri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kiz",
        Description: [
          "Kisi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kja",
        Description: [
          "Mlap"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjb",
        Description: [
          "Q'anjob'al",
          "Kanjobal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjc",
        Description: [
          "Coastal Konjo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjd",
        Description: [
          "Southern Kiwai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kje",
        Description: [
          "Kisar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjf",
        Description: [
          "Khalaj"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjg",
        Description: [
          "Khmu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjh",
        Description: [
          "Khakas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kji",
        Description: [
          "Zabana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjj",
        Description: [
          "Khinalugh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjk",
        Description: [
          "Highland Konjo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjl",
        Description: [
          "Western Parbate Kham"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjm",
        Description: [
          "Kh\xE1ng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjn",
        Description: [
          "Kunjen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjo",
        Description: [
          "Harijan Kinnauri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjp",
        Description: [
          "Pwo Eastern Karen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjq",
        Description: [
          "Western Keres"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjr",
        Description: [
          "Kurudu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjs",
        Description: [
          "East Kewa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjt",
        Description: [
          "Phrae Pwo Karen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kju",
        Description: [
          "Kashaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjv",
        Description: [
          "Kaikavian Literary Language"
        ],
        Added: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "kjx",
        Description: [
          "Ramopa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjy",
        Description: [
          "Erave"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kjz",
        Description: [
          "Bumthangkha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kka",
        Description: [
          "Kakanda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkb",
        Description: [
          "Kwerisa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkc",
        Description: [
          "Odoodee"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkd",
        Description: [
          "Kinuku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kke",
        Description: [
          "Kakabe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkf",
        Description: [
          "Kalaktang Monpa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkg",
        Description: [
          "Mabaka Valley Kalinga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkh",
        Description: [
          "Kh\xFCn"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kki",
        Description: [
          "Kagulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkj",
        Description: [
          "Kako"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkk",
        Description: [
          "Kokota"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkl",
        Description: [
          "Kosarek Yale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkm",
        Description: [
          "Kiong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkn",
        Description: [
          "Kon Keu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kko",
        Description: [
          "Karko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkp",
        Description: [
          "Gugubera",
          "Koko-Bera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkq",
        Description: [
          "Kaiku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkr",
        Description: [
          "Kir-Balar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kks",
        Description: [
          "Giiwo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkt",
        Description: [
          "Koi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kku",
        Description: [
          "Tumi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkv",
        Description: [
          "Kangean"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkw",
        Description: [
          "Teke-Kukuya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkx",
        Description: [
          "Kohin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kky",
        Description: [
          "Guugu Yimidhirr",
          "Guguyimidjir"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kkz",
        Description: [
          "Kaska"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kla",
        Description: [
          "Klamath-Modoc"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klb",
        Description: [
          "Kiliwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klc",
        Description: [
          "Kolbila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kld",
        Description: [
          "Gamilaraay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kle",
        Description: [
          "Kulung (Nepal)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klf",
        Description: [
          "Kendeje"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klg",
        Description: [
          "Tagakaulo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klh",
        Description: [
          "Weliki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kli",
        Description: [
          "Kalumpang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klj",
        Description: [
          "Turkic Khalaj"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klk",
        Description: [
          "Kono (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kll",
        Description: [
          "Kagan Kalagan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klm",
        Description: [
          "Migum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kln",
        Description: [
          "Kalenjin"
        ],
        Added: "2009-07-29",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "klo",
        Description: [
          "Kapya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klp",
        Description: [
          "Kamasa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klq",
        Description: [
          "Rumu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klr",
        Description: [
          "Khaling"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kls",
        Description: [
          "Kalasha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klt",
        Description: [
          "Nukna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klu",
        Description: [
          "Klao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klv",
        Description: [
          "Maskelynes"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klw",
        Description: [
          "Tado",
          "Lindu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klx",
        Description: [
          "Koluwawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kly",
        Description: [
          "Kalao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "klz",
        Description: [
          "Kabola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kma",
        Description: [
          "Konni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmb",
        Description: [
          "Kimbundu"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "kmc",
        Description: [
          "Southern Dong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmd",
        Description: [
          "Majukayang Kalinga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kme",
        Description: [
          "Bakole"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmf",
        Description: [
          "Kare (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmg",
        Description: [
          "K\xE2te"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmh",
        Description: [
          "Kalam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmi",
        Description: [
          "Kami (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmj",
        Description: [
          "Kumarbhag Paharia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmk",
        Description: [
          "Limos Kalinga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kml",
        Description: [
          "Tanudan Kalinga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmm",
        Description: [
          "Kom (India)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmn",
        Description: [
          "Awtuw"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmo",
        Description: [
          "Kwoma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmp",
        Description: [
          "Gimme"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmq",
        Description: [
          "Kwama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmr",
        Description: [
          "Northern Kurdish"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ku"
      },
      {
        Type: "language",
        Subtag: "kms",
        Description: [
          "Kamasau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmt",
        Description: [
          "Kemtuik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmu",
        Description: [
          "Kanite"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmv",
        Description: [
          "Karip\xFAna Creole French"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmw",
        Description: [
          "Komo (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmx",
        Description: [
          "Waboda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmy",
        Description: [
          "Koma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kmz",
        Description: [
          "Khorasani Turkish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kna",
        Description: [
          "Dera (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knb",
        Description: [
          "Lubuagan Kalinga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knc",
        Description: [
          "Central Kanuri"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kr"
      },
      {
        Type: "language",
        Subtag: "knd",
        Description: [
          "Konda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kne",
        Description: [
          "Kankanaey"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knf",
        Description: [
          "Mankanya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kng",
        Description: [
          "Koongo"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kg"
      },
      {
        Type: "language",
        Subtag: "kni",
        Description: [
          "Kanufi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knj",
        Description: [
          "Western Kanjobal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knk",
        Description: [
          "Kuranko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knl",
        Description: [
          "Keninjal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knm",
        Description: [
          "Kanamar\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knn",
        Description: [
          "Konkani (individual language)"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kok"
      },
      {
        Type: "language",
        Subtag: "kno",
        Description: [
          "Kono (Sierra Leone)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knp",
        Description: [
          "Kwanja"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knq",
        Description: [
          "Kintaq"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knr",
        Description: [
          "Kaningra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kns",
        Description: [
          "Kensiu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knt",
        Description: [
          "Panoan Katuk\xEDna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knu",
        Description: [
          "Kono (Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knv",
        Description: [
          "Tabo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knw",
        Description: [
          "Kung-Ekoka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knx",
        Description: [
          "Kendayan",
          "Salako"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kny",
        Description: [
          "Kanyok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "knz",
        Description: [
          "Kalams\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "koa",
        Description: [
          "Konomala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "koc",
        Description: [
          "Kpati"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kod",
        Description: [
          "Kodi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "koe",
        Description: [
          "Kacipo-Balesi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kof",
        Description: [
          "Kubi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kog",
        Description: [
          "Cogui",
          "Kogi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "koh",
        Description: [
          "Koyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "koi",
        Description: [
          "Komi-Permyak"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kv"
      },
      {
        Type: "language",
        Subtag: "koj",
        Description: [
          "Sara Dunjo"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "kwv"
      },
      {
        Type: "language",
        Subtag: "kok",
        Description: [
          "Konkani (macrolanguage)"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Deva",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "kol",
        Description: [
          "Kol (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "koo",
        Description: [
          "Konzo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kop",
        Description: [
          "Waube"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "koq",
        Description: [
          "Kota (Gabon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kos",
        Description: [
          "Kosraean"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "kot",
        Description: [
          "Lagwan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kou",
        Description: [
          "Koke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kov",
        Description: [
          "Kudu-Camo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kow",
        Description: [
          "Kugama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kox",
        Description: [
          "Coxima"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "koy",
        Description: [
          "Koyukon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "koz",
        Description: [
          "Korak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpa",
        Description: [
          "Kutto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpb",
        Description: [
          "Mullu Kurumba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpc",
        Description: [
          "Curripaco"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpd",
        Description: [
          "Koba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpe",
        Description: [
          "Kpelle"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "kpf",
        Description: [
          "Komba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpg",
        Description: [
          "Kapingamarangi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kph",
        Description: [
          "Kplang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpi",
        Description: [
          "Kofei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpj",
        Description: [
          "Karaj\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpk",
        Description: [
          "Kpan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpl",
        Description: [
          "Kpala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpm",
        Description: [
          "Koho"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpn",
        Description: [
          "Kepkiriw\xE1t"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpo",
        Description: [
          "Ikposo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpp",
        Description: [
          "Paku Karen"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see jkm, jkp"
        ]
      },
      {
        Type: "language",
        Subtag: "kpq",
        Description: [
          "Korupun-Sela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpr",
        Description: [
          "Korafe-Yegha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kps",
        Description: [
          "Tehit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpt",
        Description: [
          "Karata"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpu",
        Description: [
          "Kafoa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpv",
        Description: [
          "Komi-Zyrian"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kv"
      },
      {
        Type: "language",
        Subtag: "kpw",
        Description: [
          "Kobon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpx",
        Description: [
          "Mountain Koiali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpy",
        Description: [
          "Koryak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kpz",
        Description: [
          "Kupsabiny"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqa",
        Description: [
          "Mum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqb",
        Description: [
          "Kovai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqc",
        Description: [
          "Doromu-Koki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqd",
        Description: [
          "Koy Sanjaq Surat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqe",
        Description: [
          "Kalagan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqf",
        Description: [
          "Kakabai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqg",
        Description: [
          "Khe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqh",
        Description: [
          "Kisankasa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqi",
        Description: [
          "Koitabu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqj",
        Description: [
          "Koromira"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqk",
        Description: [
          "Kotafon Gbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kql",
        Description: [
          "Kyenele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqm",
        Description: [
          "Khisa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqn",
        Description: [
          "Kaonde"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqo",
        Description: [
          "Eastern Krahn"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqp",
        Description: [
          "Kimr\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqq",
        Description: [
          "Krenak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqr",
        Description: [
          "Kimaragang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqs",
        Description: [
          "Northern Kissi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqt",
        Description: [
          "Klias River Kadazan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqu",
        Description: [
          "Seroa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqv",
        Description: [
          "Okolod"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqw",
        Description: [
          "Kandas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqx",
        Description: [
          "Mser"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqy",
        Description: [
          "Koorete"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kqz",
        Description: [
          "Korana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kra",
        Description: [
          "Kumhali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "krb",
        Description: [
          "Karkin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "krc",
        Description: [
          "Karachay-Balkar"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "krd",
        Description: [
          "Kairui-Midiki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kre",
        Description: [
          "Panar\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "krf",
        Description: [
          "Koro (Vanuatu)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "krh",
        Description: [
          "Kurama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kri",
        Description: [
          "Krio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "krj",
        Description: [
          "Kinaray-A"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "krk",
        Description: [
          "Kerek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "krl",
        Description: [
          "Karelian"
        ],
        Added: "2006-03-08"
      },
      {
        Type: "language",
        Subtag: "krm",
        Description: [
          "Krim"
        ],
        Added: "2009-07-29",
        Deprecated: "2017-02-23",
        "Preferred-Value": "bmf"
      },
      {
        Type: "language",
        Subtag: "krn",
        Description: [
          "Sapo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kro",
        Description: [
          "Kru languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "krp",
        Description: [
          "Korop"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "krr",
        Description: [
          "Krung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "krs",
        Description: [
          "Gbaya (Sudan)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "krt",
        Description: [
          "Tumari Kanuri"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kr"
      },
      {
        Type: "language",
        Subtag: "kru",
        Description: [
          "Kurukh"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "krv",
        Description: [
          "Kavet"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "krw",
        Description: [
          "Western Krahn"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "krx",
        Description: [
          "Karon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kry",
        Description: [
          "Kryts"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "krz",
        Description: [
          "Sota Kanum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksa",
        Description: [
          "Shuwa-Zamani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksb",
        Description: [
          "Shambala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksc",
        Description: [
          "Southern Kalinga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksd",
        Description: [
          "Kuanua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kse",
        Description: [
          "Kuni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksf",
        Description: [
          "Bafia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksg",
        Description: [
          "Kusaghe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksh",
        Description: [
          "K\xF6lsch"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksi",
        Description: [
          "Krisa",
          "I'saka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksj",
        Description: [
          "Uare"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksk",
        Description: [
          "Kansa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksl",
        Description: [
          "Kumalu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksm",
        Description: [
          "Kumba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksn",
        Description: [
          "Kasiguranin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kso",
        Description: [
          "Kofa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksp",
        Description: [
          "Kaba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksq",
        Description: [
          "Kwaami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksr",
        Description: [
          "Borong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kss",
        Description: [
          "Southern Kisi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kst",
        Description: [
          "Winy\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksu",
        Description: [
          "Khamyang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksv",
        Description: [
          "Kusu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksw",
        Description: [
          "S'gaw Karen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksx",
        Description: [
          "Kedang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksy",
        Description: [
          "Kharia Thar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ksz",
        Description: [
          "Kodaku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kta",
        Description: [
          "Katua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktb",
        Description: [
          "Kambaata"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktc",
        Description: [
          "Kholok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktd",
        Description: [
          "Kokata",
          "Kukatha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kte",
        Description: [
          "Nubri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktf",
        Description: [
          "Kwami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktg",
        Description: [
          "Kalkutung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kth",
        Description: [
          "Karanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kti",
        Description: [
          "North Muyu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktj",
        Description: [
          "Plapo Krumen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktk",
        Description: [
          "Kaniet"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktl",
        Description: [
          "Koroshi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktm",
        Description: [
          "Kurti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktn",
        Description: [
          "Kariti\xE2na"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kto",
        Description: [
          "Kuot"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktp",
        Description: [
          "Kaduo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktq",
        Description: [
          "Katabaga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktr",
        Description: [
          "Kota Marudu Tinagas"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "dtp"
      },
      {
        Type: "language",
        Subtag: "kts",
        Description: [
          "South Muyu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktt",
        Description: [
          "Ketum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktu",
        Description: [
          "Kituba (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktv",
        Description: [
          "Eastern Katu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktw",
        Description: [
          "Kato"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktx",
        Description: [
          "Kaxarar\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kty",
        Description: [
          "Kango (Bas-U\xE9l\xE9 District)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ktz",
        Description: [
          "Ju\u01C0\u02BChoan",
          "Ju\u01C0\u02BChoansi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kub",
        Description: [
          "Kutep"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kuc",
        Description: [
          "Kwinsu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kud",
        Description: [
          "'Auhelawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kue",
        Description: [
          "Kuman (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kuf",
        Description: [
          "Western Katu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kug",
        Description: [
          "Kupa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kuh",
        Description: [
          "Kushi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kui",
        Description: [
          "Kuik\xFAro-Kalap\xE1lo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kuj",
        Description: [
          "Kuria"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kuk",
        Description: [
          "Kepo'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kul",
        Description: [
          "Kulere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kum",
        Description: [
          "Kumyk"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "kun",
        Description: [
          "Kunama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kuo",
        Description: [
          "Kumukio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kup",
        Description: [
          "Kunimaipa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kuq",
        Description: [
          "Karipuna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kus",
        Description: [
          "Kusaal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kut",
        Description: [
          "Kutenai"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "kuu",
        Description: [
          "Upper Kuskokwim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kuv",
        Description: [
          "Kur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kuw",
        Description: [
          "Kpagua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kux",
        Description: [
          "Kukatja"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kuy",
        Description: [
          "Kuuku-Ya'u"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kuz",
        Description: [
          "Kunza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kva",
        Description: [
          "Bagvalal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvb",
        Description: [
          "Kubu"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "kvc",
        Description: [
          "Kove"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvd",
        Description: [
          "Kui (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kve",
        Description: [
          "Kalabakan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvf",
        Description: [
          "Kabalai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvg",
        Description: [
          "Kuni-Boazi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvh",
        Description: [
          "Komodo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvi",
        Description: [
          "Kwang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvj",
        Description: [
          "Psikye"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvk",
        Description: [
          "Korean Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvl",
        Description: [
          "Kayaw"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvm",
        Description: [
          "Kendem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvn",
        Description: [
          "Border Kuna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvo",
        Description: [
          "Dobel"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvp",
        Description: [
          "Kompane"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvq",
        Description: [
          "Geba Karen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvr",
        Description: [
          "Kerinci"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "kvs",
        Description: [
          "Kunggara"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "gdj"
      },
      {
        Type: "language",
        Subtag: "kvt",
        Description: [
          "Lahta Karen",
          "Lahta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvu",
        Description: [
          "Yinbaw Karen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvv",
        Description: [
          "Kola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvw",
        Description: [
          "Wersing"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvx",
        Description: [
          "Parkari Koli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvy",
        Description: [
          "Yintale Karen",
          "Yintale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kvz",
        Description: [
          "Tsakwambo",
          "Tsaukambo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwa",
        Description: [
          "D\xE2w"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwb",
        Description: [
          "Kwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwc",
        Description: [
          "Likwala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwd",
        Description: [
          "Kwaio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwe",
        Description: [
          "Kwerba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwf",
        Description: [
          "Kwara'ae"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwg",
        Description: [
          "Sara Kaba Deme"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwh",
        Description: [
          "Kowiai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwi",
        Description: [
          "Awa-Cuaiquer"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwj",
        Description: [
          "Kwanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwk",
        Description: [
          "Kwakiutl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwl",
        Description: [
          "Kofyar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwm",
        Description: [
          "Kwambi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwn",
        Description: [
          "Kwangali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwo",
        Description: [
          "Kwomtari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwp",
        Description: [
          "Kodia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwq",
        Description: [
          "Kwak"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "yam"
      },
      {
        Type: "language",
        Subtag: "kwr",
        Description: [
          "Kwer"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kws",
        Description: [
          "Kwese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwt",
        Description: [
          "Kwesten"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwu",
        Description: [
          "Kwakum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwv",
        Description: [
          "Sara Kaba N\xE1\xE0"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kww",
        Description: [
          "Kwinti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwx",
        Description: [
          "Khirwar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kwy",
        Description: [
          "San Salvador Kongo"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kg"
      },
      {
        Type: "language",
        Subtag: "kwz",
        Description: [
          "Kwadi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxa",
        Description: [
          "Kairiru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxb",
        Description: [
          "Krobu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxc",
        Description: [
          "Konso",
          "Khonso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxd",
        Description: [
          "Brunei"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "kxe",
        Description: [
          "Kakihum"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "tvd"
      },
      {
        Type: "language",
        Subtag: "kxf",
        Description: [
          "Manumanaw Karen",
          "Manumanaw"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxh",
        Description: [
          "Karo (Ethiopia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxi",
        Description: [
          "Keningau Murut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxj",
        Description: [
          "Kulfa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxk",
        Description: [
          "Zayein Karen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxl",
        Description: [
          "Nepali Kurux"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxm",
        Description: [
          "Northern Khmer"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxn",
        Description: [
          "Kanowit-Tanjong Melanau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxo",
        Description: [
          "Kano\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxp",
        Description: [
          "Wadiyara Koli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxq",
        Description: [
          "Sm\xE4rky Kanum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxr",
        Description: [
          "Koro (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxs",
        Description: [
          "Kangjia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxt",
        Description: [
          "Koiwat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxu",
        Description: [
          "Kui (India)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxv",
        Description: [
          "Kuvi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxw",
        Description: [
          "Konai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxx",
        Description: [
          "Likuba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxy",
        Description: [
          "Kayong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kxz",
        Description: [
          "Kerewo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kya",
        Description: [
          "Kwaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyb",
        Description: [
          "Butbut Kalinga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyc",
        Description: [
          "Kyaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyd",
        Description: [
          "Karey"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kye",
        Description: [
          "Krache"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyf",
        Description: [
          "Kouya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyg",
        Description: [
          "Keyagana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyh",
        Description: [
          "Karok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyi",
        Description: [
          "Kiput"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyj",
        Description: [
          "Karao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyk",
        Description: [
          "Kamayo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyl",
        Description: [
          "Kalapuya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kym",
        Description: [
          "Kpatili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyn",
        Description: [
          "Northern Binukidnon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyo",
        Description: [
          "Kelon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyp",
        Description: [
          "Kang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyq",
        Description: [
          "Kenga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyr",
        Description: [
          "Kuru\xE1ya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kys",
        Description: [
          "Baram Kayan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyt",
        Description: [
          "Kayagar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyu",
        Description: [
          "Western Kayah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyv",
        Description: [
          "Kayort"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyw",
        Description: [
          "Kudmali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyx",
        Description: [
          "Rapoisi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyy",
        Description: [
          "Kambaira"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kyz",
        Description: [
          "Kayab\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kza",
        Description: [
          "Western Karaboro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzb",
        Description: [
          "Kaibobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzc",
        Description: [
          "Bondoukou Kulango"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzd",
        Description: [
          "Kadai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kze",
        Description: [
          "Kosena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzf",
        Description: [
          "Da'a Kaili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzg",
        Description: [
          "Kikai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzh",
        Description: [
          "Kenuzi-Dongola"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see dgl, xnz"
        ]
      },
      {
        Type: "language",
        Subtag: "kzi",
        Description: [
          "Kelabit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzj",
        Description: [
          "Coastal Kadazan"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "dtp"
      },
      {
        Type: "language",
        Subtag: "kzk",
        Description: [
          "Kazukuru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzl",
        Description: [
          "Kayeli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzm",
        Description: [
          "Kais"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzn",
        Description: [
          "Kokola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzo",
        Description: [
          "Kaningi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzp",
        Description: [
          "Kaidipang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzq",
        Description: [
          "Kaike"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzr",
        Description: [
          "Karang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzs",
        Description: [
          "Sugut Dusun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzt",
        Description: [
          "Tambunan Dusun"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "dtp"
      },
      {
        Type: "language",
        Subtag: "kzu",
        Description: [
          "Kayupulau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzv",
        Description: [
          "Komyandaret"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzw",
        Description: [
          "Karir\xED-Xoc\xF3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzx",
        Description: [
          "Kamarian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzy",
        Description: [
          "Kango (Tshopo District)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "kzz",
        Description: [
          "Kalabra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "laa",
        Description: [
          "Southern Subanen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lab",
        Description: [
          "Linear A"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lac",
        Description: [
          "Lacandon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lad",
        Description: [
          "Ladino"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "lae",
        Description: [
          "Pattani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "laf",
        Description: [
          "Lafofa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lag",
        Description: [
          "Langi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lah",
        Description: [
          "Lahnda"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "lai",
        Description: [
          "Lambya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "laj",
        Description: [
          "Lango (Uganda)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lak",
        Description: [
          "Laka (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lal",
        Description: [
          "Lalia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lam",
        Description: [
          "Lamba"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "lan",
        Description: [
          "Laru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lap",
        Description: [
          "Laka (Chad)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "laq",
        Description: [
          "Qabiao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lar",
        Description: [
          "Larteh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "las",
        Description: [
          "Lama (Togo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lau",
        Description: [
          "Laba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "law",
        Description: [
          "Lauje"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lax",
        Description: [
          "Tiwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lay",
        Description: [
          "Lama Bai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "laz",
        Description: [
          "Aribwatsa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lba",
        Description: [
          "Lui"
        ],
        Added: "2009-07-29",
        Deprecated: "2019-04-16"
      },
      {
        Type: "language",
        Subtag: "lbb",
        Description: [
          "Label"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbc",
        Description: [
          "Lakkia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbe",
        Description: [
          "Lak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbf",
        Description: [
          "Tinani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbg",
        Description: [
          "Laopang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbi",
        Description: [
          "La'bi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbj",
        Description: [
          "Ladakhi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbk",
        Description: [
          "Central Bontok"
        ],
        Added: "2010-03-11",
        Macrolanguage: "bnc"
      },
      {
        Type: "language",
        Subtag: "lbl",
        Description: [
          "Libon Bikol"
        ],
        Added: "2010-03-11",
        Macrolanguage: "bik"
      },
      {
        Type: "language",
        Subtag: "lbm",
        Description: [
          "Lodhi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbn",
        Description: [
          "Rmeet"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbo",
        Description: [
          "Laven"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbq",
        Description: [
          "Wampar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbr",
        Description: [
          "Lohorung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbs",
        Description: [
          "Libyan Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbt",
        Description: [
          "Lachi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbu",
        Description: [
          "Labu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbv",
        Description: [
          "Lavatbura-Lamusong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbw",
        Description: [
          "Tolaki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbx",
        Description: [
          "Lawangan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lby",
        Description: [
          "Lamalama",
          "Lamu-Lamu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lbz",
        Description: [
          "Lardil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lcc",
        Description: [
          "Legenyem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lcd",
        Description: [
          "Lola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lce",
        Description: [
          "Loncong",
          "Sekak"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "lcf",
        Description: [
          "Lubu"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "lch",
        Description: [
          "Luchazi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lcl",
        Description: [
          "Lisela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lcm",
        Description: [
          "Tungag"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lcp",
        Description: [
          "Western Lawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lcq",
        Description: [
          "Luhu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lcs",
        Description: [
          "Lisabata-Nuniali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lda",
        Description: [
          "Kla-Dan"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "ldb",
        Description: [
          "D\u0169ya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ldd",
        Description: [
          "Luri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ldg",
        Description: [
          "Lenyima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ldh",
        Description: [
          "Lamja-Dengsa-Tola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ldi",
        Description: [
          "Laari"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kg"
      },
      {
        Type: "language",
        Subtag: "ldj",
        Description: [
          "Lemoro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ldk",
        Description: [
          "Leelau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ldl",
        Description: [
          "Kaan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ldm",
        Description: [
          "Landoma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ldn",
        Description: [
          "L\xE1adan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ldo",
        Description: [
          "Loo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ldp",
        Description: [
          "Tso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ldq",
        Description: [
          "Lufu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lea",
        Description: [
          "Lega-Shabunda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "leb",
        Description: [
          "Lala-Bisa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lec",
        Description: [
          "Leco"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "led",
        Description: [
          "Lendu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lee",
        Description: [
          "Ly\xE9l\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lef",
        Description: [
          "Lelemi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "leg",
        Description: [
          "Lengua"
        ],
        Added: "2009-07-29",
        Deprecated: "2014-02-28",
        Comments: [
          "see enl, enx"
        ]
      },
      {
        Type: "language",
        Subtag: "leh",
        Description: [
          "Lenje"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lei",
        Description: [
          "Lemio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lej",
        Description: [
          "Lengola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lek",
        Description: [
          "Leipon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lel",
        Description: [
          "Lele (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lem",
        Description: [
          "Nomaande"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "len",
        Description: [
          "Lenca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "leo",
        Description: [
          "Leti (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lep",
        Description: [
          "Lepcha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "leq",
        Description: [
          "Lembena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ler",
        Description: [
          "Lenkau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "les",
        Description: [
          "Lese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "let",
        Description: [
          "Lesing-Gelimi",
          "Amio-Gelimi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "leu",
        Description: [
          "Kara (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lev",
        Description: [
          "Lamma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lew",
        Description: [
          "Ledo Kaili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lex",
        Description: [
          "Luang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ley",
        Description: [
          "Lemolang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lez",
        Description: [
          "Lezghian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "lfa",
        Description: [
          "Lefa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lfn",
        Description: [
          "Lingua Franca Nova"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lga",
        Description: [
          "Lungga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lgb",
        Description: [
          "Laghu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lgg",
        Description: [
          "Lugbara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lgh",
        Description: [
          "Laghuu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lgi",
        Description: [
          "Lengilu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lgk",
        Description: [
          "Lingarak",
          "Neverver"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lgl",
        Description: [
          "Wala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lgm",
        Description: [
          "Lega-Mwenga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lgn",
        Description: [
          "T'apo",
          "Opuuo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lgq",
        Description: [
          "Logba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lgr",
        Description: [
          "Lengo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lgt",
        Description: [
          "Pahi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lgu",
        Description: [
          "Longgu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lgz",
        Description: [
          "Ligenza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lha",
        Description: [
          "Laha (Viet Nam)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lhh",
        Description: [
          "Laha (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lhi",
        Description: [
          "Lahu Shi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lhl",
        Description: [
          "Lahul Lohar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lhm",
        Description: [
          "Lhomi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lhn",
        Description: [
          "Lahanan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lhp",
        Description: [
          "Lhokpu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lhs",
        Description: [
          "Mlahs\xF6"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lht",
        Description: [
          "Lo-Toga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lhu",
        Description: [
          "Lahu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lia",
        Description: [
          "West-Central Limba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lib",
        Description: [
          "Likum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lic",
        Description: [
          "Hlai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lid",
        Description: [
          "Nyindrou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lie",
        Description: [
          "Likila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lif",
        Description: [
          "Limbu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lig",
        Description: [
          "Ligbi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lih",
        Description: [
          "Lihir"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lii",
        Description: [
          "Lingkhim"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "raq"
      },
      {
        Type: "language",
        Subtag: "lij",
        Description: [
          "Ligurian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lik",
        Description: [
          "Lika"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lil",
        Description: [
          "Lillooet"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lio",
        Description: [
          "Liki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lip",
        Description: [
          "Sekpele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "liq",
        Description: [
          "Libido"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lir",
        Description: [
          "Liberian English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lis",
        Description: [
          "Lisu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "liu",
        Description: [
          "Logorik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "liv",
        Description: [
          "Liv"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "liw",
        Description: [
          "Col"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "lix",
        Description: [
          "Liabuku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "liy",
        Description: [
          "Banda-Bambari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "liz",
        Description: [
          "Libinza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lja",
        Description: [
          "Golpa"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "lje",
        Description: [
          "Rampi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lji",
        Description: [
          "Laiyolo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ljl",
        Description: [
          "Li'o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ljp",
        Description: [
          "Lampung Api"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ljw",
        Description: [
          "Yirandali"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "ljx",
        Description: [
          "Yuru"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "lka",
        Description: [
          "Lakalei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lkb",
        Description: [
          "Kabras",
          "Lukabaras"
        ],
        Added: "2009-07-29",
        Macrolanguage: "luy"
      },
      {
        Type: "language",
        Subtag: "lkc",
        Description: [
          "Kucong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lkd",
        Description: [
          "Lakond\xEA"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lke",
        Description: [
          "Kenyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lkh",
        Description: [
          "Lakha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lki",
        Description: [
          "Laki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lkj",
        Description: [
          "Remun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lkl",
        Description: [
          "Laeko-Libuat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lkm",
        Description: [
          "Kalaamaya"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "lkn",
        Description: [
          "Lakon",
          "Vure"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lko",
        Description: [
          "Khayo",
          "Olukhayo"
        ],
        Added: "2009-07-29",
        Macrolanguage: "luy"
      },
      {
        Type: "language",
        Subtag: "lkr",
        Description: [
          "P\xE4ri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lks",
        Description: [
          "Kisa",
          "Olushisa"
        ],
        Added: "2009-07-29",
        Macrolanguage: "luy"
      },
      {
        Type: "language",
        Subtag: "lkt",
        Description: [
          "Lakota"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lku",
        Description: [
          "Kungkari"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "lky",
        Description: [
          "Lokoya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lla",
        Description: [
          "Lala-Roba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "llb",
        Description: [
          "Lolo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "llc",
        Description: [
          "Lele (Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lld",
        Description: [
          "Ladin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lle",
        Description: [
          "Lele (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "llf",
        Description: [
          "Hermit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "llg",
        Description: [
          "Lole"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "llh",
        Description: [
          "Lamu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lli",
        Description: [
          "Teke-Laali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "llj",
        Description: [
          "Ladji Ladji"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "llk",
        Description: [
          "Lelak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lll",
        Description: [
          "Lilau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "llm",
        Description: [
          "Lasalimu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lln",
        Description: [
          "Lele (Chad)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "llo",
        Description: [
          "Khlor"
        ],
        Added: "2009-07-29",
        Deprecated: "2019-04-16",
        "Preferred-Value": "ngt"
      },
      {
        Type: "language",
        Subtag: "llp",
        Description: [
          "North Efate"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "llq",
        Description: [
          "Lolak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lls",
        Description: [
          "Lithuanian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "llu",
        Description: [
          "Lau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "llx",
        Description: [
          "Lauan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lma",
        Description: [
          "East Limba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmb",
        Description: [
          "Merei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmc",
        Description: [
          "Limilngan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmd",
        Description: [
          "Lumun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lme",
        Description: [
          "P\xE9v\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmf",
        Description: [
          "South Lembata"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmg",
        Description: [
          "Lamogai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmh",
        Description: [
          "Lambichhong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmi",
        Description: [
          "Lombi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmj",
        Description: [
          "West Lembata"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmk",
        Description: [
          "Lamkang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lml",
        Description: [
          "Hano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmm",
        Description: [
          "Lamam"
        ],
        Added: "2009-07-29",
        Deprecated: "2014-02-28",
        "Preferred-Value": "rmx"
      },
      {
        Type: "language",
        Subtag: "lmn",
        Description: [
          "Lambadi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmo",
        Description: [
          "Lombard"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmp",
        Description: [
          "Limbum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmq",
        Description: [
          "Lamatuka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmr",
        Description: [
          "Lamalera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmu",
        Description: [
          "Lamenu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmv",
        Description: [
          "Lomaiviti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmw",
        Description: [
          "Lake Miwok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmx",
        Description: [
          "Laimbue"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmy",
        Description: [
          "Lamboya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lmz",
        Description: [
          "Lumbee"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lna",
        Description: [
          "Langbashe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lnb",
        Description: [
          "Mbalanhu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lnd",
        Description: [
          "Lundayeh",
          "Lun Bawang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lng",
        Description: [
          "Langobardic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lnh",
        Description: [
          "Lanoh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lni",
        Description: [
          "Daantanai'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lnj",
        Description: [
          "Leningitij"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lnl",
        Description: [
          "South Central Banda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lnm",
        Description: [
          "Langam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lnn",
        Description: [
          "Lorediakarkar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lno",
        Description: [
          "Lango (South Sudan)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lns",
        Description: [
          "Lamnso'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lnu",
        Description: [
          "Longuda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lnw",
        Description: [
          "Lanima"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "lnz",
        Description: [
          "Lonzo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "loa",
        Description: [
          "Loloda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lob",
        Description: [
          "Lobi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "loc",
        Description: [
          "Inonhan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "loe",
        Description: [
          "Saluan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lof",
        Description: [
          "Logol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "log",
        Description: [
          "Logo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "loh",
        Description: [
          "Narim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "loi",
        Description: [
          "Loma (C\xF4te d'Ivoire)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "loj",
        Description: [
          "Lou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lok",
        Description: [
          "Loko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lol",
        Description: [
          "Mongo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "lom",
        Description: [
          "Loma (Liberia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lon",
        Description: [
          "Malawi Lomwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "loo",
        Description: [
          "Lombo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lop",
        Description: [
          "Lopa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "loq",
        Description: [
          "Lobala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lor",
        Description: [
          "T\xE9\xE9n"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "los",
        Description: [
          "Loniu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lot",
        Description: [
          "Otuho"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lou",
        Description: [
          "Louisiana Creole"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lov",
        Description: [
          "Lopi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "low",
        Description: [
          "Tampias Lobu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lox",
        Description: [
          "Loun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "loy",
        Description: [
          "Loke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "loz",
        Description: [
          "Lozi"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "lpa",
        Description: [
          "Lelepa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lpe",
        Description: [
          "Lepki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lpn",
        Description: [
          "Long Phuri Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lpo",
        Description: [
          "Lipo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lpx",
        Description: [
          "Lopit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lra",
        Description: [
          "Rara Bakati'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lrc",
        Description: [
          "Northern Luri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lre",
        Description: [
          "Laurentian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lrg",
        Description: [
          "Laragia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lri",
        Description: [
          "Marachi",
          "Olumarachi"
        ],
        Added: "2009-07-29",
        Macrolanguage: "luy"
      },
      {
        Type: "language",
        Subtag: "lrk",
        Description: [
          "Loarki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lrl",
        Description: [
          "Lari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lrm",
        Description: [
          "Marama",
          "Olumarama"
        ],
        Added: "2009-07-29",
        Macrolanguage: "luy"
      },
      {
        Type: "language",
        Subtag: "lrn",
        Description: [
          "Lorang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lro",
        Description: [
          "Laro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lrr",
        Description: [
          "Southern Yamphu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lrt",
        Description: [
          "Larantuka Malay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lrv",
        Description: [
          "Larevat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lrz",
        Description: [
          "Lemerig"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lsa",
        Description: [
          "Lasgerdi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lsd",
        Description: [
          "Lishana Deni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lse",
        Description: [
          "Lusengo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lsg",
        Description: [
          "Lyons Sign Language"
        ],
        Added: "2009-07-29",
        Deprecated: "2018-03-08"
      },
      {
        Type: "language",
        Subtag: "lsh",
        Description: [
          "Lish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lsi",
        Description: [
          "Lashi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lsl",
        Description: [
          "Latvian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lsm",
        Description: [
          "Saamia",
          "Olusamia"
        ],
        Added: "2009-07-29",
        Macrolanguage: "luy"
      },
      {
        Type: "language",
        Subtag: "lsn",
        Description: [
          "Tibetan Sign Language"
        ],
        Added: "2019-04-16"
      },
      {
        Type: "language",
        Subtag: "lso",
        Description: [
          "Laos Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lsp",
        Description: [
          "Panamanian Sign Language",
          "Lengua de Se\xF1as Paname\xF1as"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lsr",
        Description: [
          "Aruop"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lss",
        Description: [
          "Lasi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lst",
        Description: [
          "Trinidad and Tobago Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lsv",
        Description: [
          "Sivia Sign Language"
        ],
        Added: "2019-04-16"
      },
      {
        Type: "language",
        Subtag: "lsy",
        Description: [
          "Mauritian Sign Language"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "ltc",
        Description: [
          "Late Middle Chinese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ltg",
        Description: [
          "Latgalian"
        ],
        Added: "2010-03-11",
        Macrolanguage: "lv"
      },
      {
        Type: "language",
        Subtag: "lth",
        Description: [
          "Thur"
        ],
        Added: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "lti",
        Description: [
          "Leti (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ltn",
        Description: [
          "Latund\xEA"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lto",
        Description: [
          "Tsotso",
          "Olutsotso"
        ],
        Added: "2009-07-29",
        Macrolanguage: "luy"
      },
      {
        Type: "language",
        Subtag: "lts",
        Description: [
          "Tachoni",
          "Lutachoni"
        ],
        Added: "2009-07-29",
        Macrolanguage: "luy"
      },
      {
        Type: "language",
        Subtag: "ltu",
        Description: [
          "Latu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lua",
        Description: [
          "Luba-Lulua"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "luc",
        Description: [
          "Aringa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lud",
        Description: [
          "Ludian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lue",
        Description: [
          "Luvale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "luf",
        Description: [
          "Laua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lui",
        Description: [
          "Luiseno"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "luj",
        Description: [
          "Luna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "luk",
        Description: [
          "Lunanakha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lul",
        Description: [
          "Olu'bo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lum",
        Description: [
          "Luimbi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lun",
        Description: [
          "Lunda"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "luo",
        Description: [
          "Luo (Kenya and Tanzania)",
          "Dholuo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "lup",
        Description: [
          "Lumbu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "luq",
        Description: [
          "Lucumi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lur",
        Description: [
          "Laura"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lus",
        Description: [
          "Lushai"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "lut",
        Description: [
          "Lushootseed"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "luu",
        Description: [
          "Lumba-Yakkha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "luv",
        Description: [
          "Luwati"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "luw",
        Description: [
          "Luo (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "luy",
        Description: [
          "Luyia",
          "Oluluyia"
        ],
        Added: "2009-07-29",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "luz",
        Description: [
          "Southern Luri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lva",
        Description: [
          "Maku'a"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lvi",
        Description: [
          "Lavi"
        ],
        Added: "2019-04-16"
      },
      {
        Type: "language",
        Subtag: "lvk",
        Description: [
          "Lavukaleve"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lvs",
        Description: [
          "Standard Latvian"
        ],
        Added: "2010-03-11",
        Macrolanguage: "lv"
      },
      {
        Type: "language",
        Subtag: "lvu",
        Description: [
          "Levuka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lwa",
        Description: [
          "Lwalu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lwe",
        Description: [
          "Lewo Eleng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lwg",
        Description: [
          "Wanga",
          "Oluwanga"
        ],
        Added: "2009-07-29",
        Macrolanguage: "luy"
      },
      {
        Type: "language",
        Subtag: "lwh",
        Description: [
          "White Lachi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lwl",
        Description: [
          "Eastern Lawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lwm",
        Description: [
          "Laomian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lwo",
        Description: [
          "Luwo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lws",
        Description: [
          "Malawian Sign Language"
        ],
        Added: "2018-03-08"
      },
      {
        Type: "language",
        Subtag: "lwt",
        Description: [
          "Lewotobi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lwu",
        Description: [
          "Lawu"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "lww",
        Description: [
          "Lewo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lya",
        Description: [
          "Layakha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lyg",
        Description: [
          "Lyngngam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lyn",
        Description: [
          "Luyana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lzh",
        Description: [
          "Literary Chinese"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zh"
      },
      {
        Type: "language",
        Subtag: "lzl",
        Description: [
          "Litzlitz"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lzn",
        Description: [
          "Leinong Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "lzz",
        Description: [
          "Laz"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "maa",
        Description: [
          "San Jer\xF3nimo Tec\xF3atl Mazatec"
        ],
        Added: "2009-07-29",
        Comments: [
          "see also pbm"
        ]
      },
      {
        Type: "language",
        Subtag: "mab",
        Description: [
          "Yutanduchi Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mad",
        Description: [
          "Madurese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "mae",
        Description: [
          "Bo-Rukul"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "maf",
        Description: [
          "Mafa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mag",
        Description: [
          "Magahi"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "mai",
        Description: [
          "Maithili"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Deva"
      },
      {
        Type: "language",
        Subtag: "maj",
        Description: [
          "Jalapa De D\xEDaz Mazatec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mak",
        Description: [
          "Makasar"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "mam",
        Description: [
          "Mam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "man",
        Description: [
          "Mandingo",
          "Manding"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "map",
        Description: [
          "Austronesian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "maq",
        Description: [
          "Chiquihuitl\xE1n Mazatec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mas",
        Description: [
          "Masai"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "mat",
        Description: [
          "San Francisco Matlatzinca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mau",
        Description: [
          "Huautla Mazatec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mav",
        Description: [
          "Sater\xE9-Maw\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "maw",
        Description: [
          "Mampruli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "max",
        Description: [
          "North Moluccan Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "maz",
        Description: [
          "Central Mazahua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mba",
        Description: [
          "Higaonon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbb",
        Description: [
          "Western Bukidnon Manobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbc",
        Description: [
          "Macushi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbd",
        Description: [
          "Dibabawon Manobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbe",
        Description: [
          "Molale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbf",
        Description: [
          "Baba Malay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbh",
        Description: [
          "Mangseng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbi",
        Description: [
          "Ilianen Manobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbj",
        Description: [
          "Nad\xEBb"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbk",
        Description: [
          "Malol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbl",
        Description: [
          "Maxakal\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbm",
        Description: [
          "Ombamba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbn",
        Description: [
          "Macagu\xE1n"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbo",
        Description: [
          "Mbo (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbp",
        Description: [
          "Malayo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbq",
        Description: [
          "Maisin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbr",
        Description: [
          "Nukak Mak\xFA"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbs",
        Description: [
          "Sarangani Manobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbt",
        Description: [
          "Matigsalug Manobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbu",
        Description: [
          "Mbula-Bwazza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbv",
        Description: [
          "Mbulungish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbw",
        Description: [
          "Maring"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbx",
        Description: [
          "Mari (East Sepik Province)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mby",
        Description: [
          "Memoni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mbz",
        Description: [
          "Amoltepec Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mca",
        Description: [
          "Maca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcb",
        Description: [
          "Machiguenga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcc",
        Description: [
          "Bitur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcd",
        Description: [
          "Sharanahua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mce",
        Description: [
          "Itundujia Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcf",
        Description: [
          "Mats\xE9s"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcg",
        Description: [
          "Mapoyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mch",
        Description: [
          "Maquiritari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mci",
        Description: [
          "Mese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcj",
        Description: [
          "Mvanip"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mck",
        Description: [
          "Mbunda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcl",
        Description: [
          "Macaguaje"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcm",
        Description: [
          "Malaccan Creole Portuguese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcn",
        Description: [
          "Masana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mco",
        Description: [
          "Coatl\xE1n Mixe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcp",
        Description: [
          "Makaa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcq",
        Description: [
          "Ese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcr",
        Description: [
          "Menya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcs",
        Description: [
          "Mambai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mct",
        Description: [
          "Mengisa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcu",
        Description: [
          "Cameroon Mambila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcv",
        Description: [
          "Minanibai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcw",
        Description: [
          "Mawa (Chad)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcx",
        Description: [
          "Mpiemo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcy",
        Description: [
          "South Watut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mcz",
        Description: [
          "Mawan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mda",
        Description: [
          "Mada (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdb",
        Description: [
          "Morigi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdc",
        Description: [
          "Male (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdd",
        Description: [
          "Mbum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mde",
        Description: [
          "Maba (Chad)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdf",
        Description: [
          "Moksha"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "mdg",
        Description: [
          "Massalat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdh",
        Description: [
          "Maguindanaon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdi",
        Description: [
          "Mamvu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdj",
        Description: [
          "Mangbetu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdk",
        Description: [
          "Mangbutu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdl",
        Description: [
          "Maltese Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdm",
        Description: [
          "Mayogo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdn",
        Description: [
          "Mbati"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdp",
        Description: [
          "Mbala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdq",
        Description: [
          "Mbole"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdr",
        Description: [
          "Mandar"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "mds",
        Description: [
          "Maria (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdt",
        Description: [
          "Mbere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdu",
        Description: [
          "Mboko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdv",
        Description: [
          "Santa Luc\xEDa Monteverde Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdw",
        Description: [
          "Mbosi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdx",
        Description: [
          "Dizin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdy",
        Description: [
          "Male (Ethiopia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mdz",
        Description: [
          "Suru\xED Do Par\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mea",
        Description: [
          "Menka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "meb",
        Description: [
          "Ikobi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mec",
        Description: [
          "Marra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "med",
        Description: [
          "Melpa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mee",
        Description: [
          "Mengen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mef",
        Description: [
          "Megam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "meg",
        Description: [
          "Mea"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        "Preferred-Value": "cir"
      },
      {
        Type: "language",
        Subtag: "meh",
        Description: [
          "Southwestern Tlaxiaco Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mei",
        Description: [
          "Midob"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mej",
        Description: [
          "Meyah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mek",
        Description: [
          "Mekeo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mel",
        Description: [
          "Central Melanau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mem",
        Description: [
          "Mangala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "men",
        Description: [
          "Mende (Sierra Leone)"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "meo",
        Description: [
          "Kedah Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "mep",
        Description: [
          "Miriwoong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "meq",
        Description: [
          "Merey"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mer",
        Description: [
          "Meru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mes",
        Description: [
          "Masmaje"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "met",
        Description: [
          "Mato"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "meu",
        Description: [
          "Motu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mev",
        Description: [
          "Mano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mew",
        Description: [
          "Maaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mey",
        Description: [
          "Hassaniyya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mez",
        Description: [
          "Menominee"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfa",
        Description: [
          "Pattani Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "mfb",
        Description: [
          "Bangka"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "mfc",
        Description: [
          "Mba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfd",
        Description: [
          "Mendankwe-Nkwen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfe",
        Description: [
          "Morisyen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mff",
        Description: [
          "Naki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfg",
        Description: [
          "Mogofin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfh",
        Description: [
          "Matal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfi",
        Description: [
          "Wandala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfj",
        Description: [
          "Mefele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfk",
        Description: [
          "North Mofu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfl",
        Description: [
          "Putai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfm",
        Description: [
          "Marghi South"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfn",
        Description: [
          "Cross River Mbembe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfo",
        Description: [
          "Mbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfp",
        Description: [
          "Makassar Malay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfq",
        Description: [
          "Moba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfr",
        Description: [
          "Marrithiyel"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfs",
        Description: [
          "Mexican Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mft",
        Description: [
          "Mokerang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfu",
        Description: [
          "Mbwela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfv",
        Description: [
          "Mandjak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfw",
        Description: [
          "Mulaha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfx",
        Description: [
          "Melo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfy",
        Description: [
          "Mayo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mfz",
        Description: [
          "Mabaan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mga",
        Description: [
          "Middle Irish (900-1200)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "mgb",
        Description: [
          "Mararit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgc",
        Description: [
          "Morokodo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgd",
        Description: [
          "Moru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mge",
        Description: [
          "Mango"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgf",
        Description: [
          "Maklew"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgg",
        Description: [
          "Mpumpong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgh",
        Description: [
          "Makhuwa-Meetto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgi",
        Description: [
          "Lijili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgj",
        Description: [
          "Abureni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgk",
        Description: [
          "Mawes"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgl",
        Description: [
          "Maleu-Kilenge"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgm",
        Description: [
          "Mambae"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgn",
        Description: [
          "Mbangi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgo",
        Description: [
          "Meta'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgp",
        Description: [
          "Eastern Magar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgq",
        Description: [
          "Malila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgr",
        Description: [
          "Mambwe-Lungu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgs",
        Description: [
          "Manda (Tanzania)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgt",
        Description: [
          "Mongol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgu",
        Description: [
          "Mailu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgv",
        Description: [
          "Matengo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgw",
        Description: [
          "Matumbi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgx",
        Description: [
          "Omati"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see jbk, jmw"
        ]
      },
      {
        Type: "language",
        Subtag: "mgy",
        Description: [
          "Mbunga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mgz",
        Description: [
          "Mbugwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mha",
        Description: [
          "Manda (India)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhb",
        Description: [
          "Mahongwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhc",
        Description: [
          "Mocho"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhd",
        Description: [
          "Mbugu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhe",
        Description: [
          "Besisi",
          "Mah Meri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhf",
        Description: [
          "Mamaa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhg",
        Description: [
          "Margu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhh",
        Description: [
          "Maskoy Pidgin"
        ],
        Added: "2009-07-29",
        Deprecated: "2014-02-28"
      },
      {
        Type: "language",
        Subtag: "mhi",
        Description: [
          "Ma'di"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhj",
        Description: [
          "Mogholi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhk",
        Description: [
          "Mungaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhl",
        Description: [
          "Mauwake"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhm",
        Description: [
          "Makhuwa-Moniga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhn",
        Description: [
          "M\xF3cheno"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mho",
        Description: [
          "Mashi (Zambia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhp",
        Description: [
          "Balinese Malay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhq",
        Description: [
          "Mandan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhr",
        Description: [
          "Eastern Mari"
        ],
        Added: "2009-07-29",
        Macrolanguage: "chm"
      },
      {
        Type: "language",
        Subtag: "mhs",
        Description: [
          "Buru (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mht",
        Description: [
          "Mandahuaca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhu",
        Description: [
          "Digaro-Mishmi",
          "Darang Deng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhw",
        Description: [
          "Mbukushu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhx",
        Description: [
          "Maru",
          "Lhaovo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhy",
        Description: [
          "Ma'anyan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mhz",
        Description: [
          "Mor (Mor Islands)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mia",
        Description: [
          "Miami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mib",
        Description: [
          "Atatl\xE1huca Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mic",
        Description: [
          "Mi'kmaq",
          "Micmac"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "mid",
        Description: [
          "Mandaic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mie",
        Description: [
          "Ocotepec Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mif",
        Description: [
          "Mofu-Gudur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mig",
        Description: [
          "San Miguel El Grande Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mih",
        Description: [
          "Chayuco Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mii",
        Description: [
          "Chigmecatitl\xE1n Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mij",
        Description: [
          "Abar",
          "Mungbam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mik",
        Description: [
          "Mikasuki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mil",
        Description: [
          "Pe\xF1oles Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mim",
        Description: [
          "Alacatlatzala Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "min",
        Description: [
          "Minangkabau"
        ],
        Added: "2005-10-16",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "mio",
        Description: [
          "Pinotepa Nacional Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mip",
        Description: [
          "Apasco-Apoala Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "miq",
        Description: [
          "M\xEDskito"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mir",
        Description: [
          "Isthmus Mixe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mis",
        Description: [
          "Uncoded languages"
        ],
        Added: "2005-10-16",
        Scope: "special"
      },
      {
        Type: "language",
        Subtag: "mit",
        Description: [
          "Southern Puebla Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "miu",
        Description: [
          "Cacaloxtepec Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "miw",
        Description: [
          "Akoye"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mix",
        Description: [
          "Mixtepec Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "miy",
        Description: [
          "Ayutla Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "miz",
        Description: [
          "Coatzospan Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mja",
        Description: [
          "Mahei"
        ],
        Added: "2009-07-29",
        Deprecated: "2011-08-16"
      },
      {
        Type: "language",
        Subtag: "mjb",
        Description: [
          "Makalero"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "mjc",
        Description: [
          "San Juan Colorado Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjd",
        Description: [
          "Northwest Maidu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mje",
        Description: [
          "Muskum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjg",
        Description: [
          "Tu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjh",
        Description: [
          "Mwera (Nyasa)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mji",
        Description: [
          "Kim Mun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjj",
        Description: [
          "Mawak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjk",
        Description: [
          "Matukar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjl",
        Description: [
          "Mandeali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjm",
        Description: [
          "Medebur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjn",
        Description: [
          "Ma (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjo",
        Description: [
          "Malankuravan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjp",
        Description: [
          "Malapandaram"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjq",
        Description: [
          "Malaryan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjr",
        Description: [
          "Malavedan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjs",
        Description: [
          "Miship"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjt",
        Description: [
          "Sauria Paharia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mju",
        Description: [
          "Manna-Dora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjv",
        Description: [
          "Mannan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjw",
        Description: [
          "Karbi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjx",
        Description: [
          "Mahali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjy",
        Description: [
          "Mahican"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mjz",
        Description: [
          "Majhi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mka",
        Description: [
          "Mbre"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkb",
        Description: [
          "Mal Paharia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkc",
        Description: [
          "Siliput"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mke",
        Description: [
          "Mawchi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkf",
        Description: [
          "Miya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkg",
        Description: [
          "Mak (China)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkh",
        Description: [
          "Mon-Khmer languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "mki",
        Description: [
          "Dhatki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkj",
        Description: [
          "Mokilese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkk",
        Description: [
          "Byep"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkl",
        Description: [
          "Mokole"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkm",
        Description: [
          "Moklen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkn",
        Description: [
          "Kupang Malay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mko",
        Description: [
          "Mingang Doso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkp",
        Description: [
          "Moikodi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkq",
        Description: [
          "Bay Miwok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkr",
        Description: [
          "Malas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mks",
        Description: [
          "Silacayoapan Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkt",
        Description: [
          "Vamale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mku",
        Description: [
          "Konyanka Maninka"
        ],
        Added: "2009-07-29",
        Macrolanguage: "man"
      },
      {
        Type: "language",
        Subtag: "mkv",
        Description: [
          "Mafea"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkw",
        Description: [
          "Kituba (Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkx",
        Description: [
          "Kinamiging Manobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mky",
        Description: [
          "East Makian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mkz",
        Description: [
          "Makasae"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mla",
        Description: [
          "Malo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlb",
        Description: [
          "Mbule"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlc",
        Description: [
          "Cao Lan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mld",
        Description: [
          "Malakhel"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "mle",
        Description: [
          "Manambu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlf",
        Description: [
          "Mal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlh",
        Description: [
          "Mape"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mli",
        Description: [
          "Malimpung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlj",
        Description: [
          "Miltu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlk",
        Description: [
          "Ilwana",
          "Kiwilwana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mll",
        Description: [
          "Malua Bay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlm",
        Description: [
          "Mulam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mln",
        Description: [
          "Malango"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlo",
        Description: [
          "Mlomp"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlp",
        Description: [
          "Bargam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlq",
        Description: [
          "Western Maninkakan"
        ],
        Added: "2009-07-29",
        Macrolanguage: "man"
      },
      {
        Type: "language",
        Subtag: "mlr",
        Description: [
          "Vame"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mls",
        Description: [
          "Masalit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlu",
        Description: [
          "To'abaita"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlv",
        Description: [
          "Motlav",
          "Mwotlap"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlw",
        Description: [
          "Moloko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlx",
        Description: [
          "Malfaxal",
          "Naha'ai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mlz",
        Description: [
          "Malaynon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mma",
        Description: [
          "Mama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmb",
        Description: [
          "Momina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmc",
        Description: [
          "Michoac\xE1n Mazahua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmd",
        Description: [
          "Maonan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mme",
        Description: [
          "Mae"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmf",
        Description: [
          "Mundat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmg",
        Description: [
          "North Ambrym"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmh",
        Description: [
          "Mehin\xE1ku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmi",
        Description: [
          "Musar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmj",
        Description: [
          "Majhwar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmk",
        Description: [
          "Mukha-Dora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mml",
        Description: [
          "Man Met"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmm",
        Description: [
          "Maii"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmn",
        Description: [
          "Mamanwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmo",
        Description: [
          "Mangga Buang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmp",
        Description: [
          "Siawi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmq",
        Description: [
          "Musak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmr",
        Description: [
          "Western Xiangxi Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "mmt",
        Description: [
          "Malalamai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmu",
        Description: [
          "Mmaala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmv",
        Description: [
          "Miriti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmw",
        Description: [
          "Emae"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmx",
        Description: [
          "Madak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmy",
        Description: [
          "Migaama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mmz",
        Description: [
          "Mabaale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mna",
        Description: [
          "Mbula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mnb",
        Description: [
          "Muna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mnc",
        Description: [
          "Manchu"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "mnd",
        Description: [
          "Mond\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mne",
        Description: [
          "Naba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mnf",
        Description: [
          "Mundani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mng",
        Description: [
          "Eastern Mnong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mnh",
        Description: [
          "Mono (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mni",
        Description: [
          "Manipuri"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "mnj",
        Description: [
          "Munji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mnk",
        Description: [
          "Mandinka"
        ],
        Added: "2009-07-29",
        Macrolanguage: "man"
      },
      {
        Type: "language",
        Subtag: "mnl",
        Description: [
          "Tiale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mnm",
        Description: [
          "Mapena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mnn",
        Description: [
          "Southern Mnong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mno",
        Description: [
          "Manobo languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "mnp",
        Description: [
          "Min Bei Chinese"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zh"
      },
      {
        Type: "language",
        Subtag: "mnq",
        Description: [
          "Minriq"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mnr",
        Description: [
          "Mono (USA)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mns",
        Description: [
          "Mansi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mnt",
        Description: [
          "Maykulan"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        Comments: [
          "see wnn, xyj, xyk, xyt"
        ]
      },
      {
        Type: "language",
        Subtag: "mnu",
        Description: [
          "Mer"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mnv",
        Description: [
          "Rennell-Bellona"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mnw",
        Description: [
          "Mon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mnx",
        Description: [
          "Manikion"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mny",
        Description: [
          "Manyawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mnz",
        Description: [
          "Moni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "moa",
        Description: [
          "Mwan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "moc",
        Description: [
          "Mocov\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mod",
        Description: [
          "Mobilian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "moe",
        Description: [
          "Montagnais"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mof",
        Description: [
          "Mohegan-Montauk-Narragansett"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        Comments: [
          "see xnt, xpq"
        ]
      },
      {
        Type: "language",
        Subtag: "mog",
        Description: [
          "Mongondow"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "moh",
        Description: [
          "Mohawk"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "moi",
        Description: [
          "Mboi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "moj",
        Description: [
          "Monzombo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mok",
        Description: [
          "Morori"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mom",
        Description: [
          "Mangue"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "moo",
        Description: [
          "Monom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mop",
        Description: [
          "Mop\xE1n Maya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "moq",
        Description: [
          "Mor (Bomberai Peninsula)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mor",
        Description: [
          "Moro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mos",
        Description: [
          "Mossi"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "mot",
        Description: [
          "Bar\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mou",
        Description: [
          "Mogum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mov",
        Description: [
          "Mohave"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mow",
        Description: [
          "Moi (Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mox",
        Description: [
          "Molima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "moy",
        Description: [
          "Shekkacho"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "moz",
        Description: [
          "Mukulu",
          "Gergiko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpa",
        Description: [
          "Mpoto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpb",
        Description: [
          "Malak Malak",
          "Mullukmulluk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpc",
        Description: [
          "Mangarrayi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpd",
        Description: [
          "Machinere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpe",
        Description: [
          "Majang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpg",
        Description: [
          "Marba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mph",
        Description: [
          "Maung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpi",
        Description: [
          "Mpade"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpj",
        Description: [
          "Martu Wangka",
          "Wangkajunga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpk",
        Description: [
          "Mbara (Chad)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpl",
        Description: [
          "Middle Watut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpm",
        Description: [
          "Yosond\xFAa Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpn",
        Description: [
          "Mindiri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpo",
        Description: [
          "Miu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpp",
        Description: [
          "Migabac"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpq",
        Description: [
          "Mat\xEDs"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpr",
        Description: [
          "Vangunu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mps",
        Description: [
          "Dadibi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpt",
        Description: [
          "Mian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpu",
        Description: [
          "Makur\xE1p"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpv",
        Description: [
          "Mungkip"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpw",
        Description: [
          "Mapidian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpx",
        Description: [
          "Misima-Panaeati"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpy",
        Description: [
          "Mapia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mpz",
        Description: [
          "Mpi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqa",
        Description: [
          "Maba (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqb",
        Description: [
          "Mbuko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqc",
        Description: [
          "Mangole"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqe",
        Description: [
          "Matepi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqf",
        Description: [
          "Momuna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqg",
        Description: [
          "Kota Bangun Kutai Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "mqh",
        Description: [
          "Tlazoyaltepec Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqi",
        Description: [
          "Mariri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqj",
        Description: [
          "Mamasa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqk",
        Description: [
          "Rajah Kabunsuwan Manobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mql",
        Description: [
          "Mbelime"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqm",
        Description: [
          "South Marquesan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqn",
        Description: [
          "Moronene"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqo",
        Description: [
          "Modole"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqp",
        Description: [
          "Manipa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqq",
        Description: [
          "Minokok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqr",
        Description: [
          "Mander"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqs",
        Description: [
          "West Makian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqt",
        Description: [
          "Mok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqu",
        Description: [
          "Mandari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqv",
        Description: [
          "Mosimo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqw",
        Description: [
          "Murupi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqx",
        Description: [
          "Mamuju"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqy",
        Description: [
          "Manggarai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mqz",
        Description: [
          "Pano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mra",
        Description: [
          "Mlabri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrb",
        Description: [
          "Marino"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrc",
        Description: [
          "Maricopa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrd",
        Description: [
          "Western Magar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mre",
        Description: [
          "Martha's Vineyard Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrf",
        Description: [
          "Elseng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrg",
        Description: [
          "Mising"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrh",
        Description: [
          "Mara Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrj",
        Description: [
          "Western Mari"
        ],
        Added: "2009-07-29",
        Macrolanguage: "chm"
      },
      {
        Type: "language",
        Subtag: "mrk",
        Description: [
          "Hmwaveke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrl",
        Description: [
          "Mortlockese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrm",
        Description: [
          "Merlav",
          "Mwerlap"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrn",
        Description: [
          "Cheke Holo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mro",
        Description: [
          "Mru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrp",
        Description: [
          "Morouas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrq",
        Description: [
          "North Marquesan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrr",
        Description: [
          "Maria (India)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrs",
        Description: [
          "Maragus"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrt",
        Description: [
          "Marghi Central"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mru",
        Description: [
          "Mono (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrv",
        Description: [
          "Mangareva"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrw",
        Description: [
          "Maranao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrx",
        Description: [
          "Maremgi",
          "Dineor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mry",
        Description: [
          "Mandaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mrz",
        Description: [
          "Marind"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msb",
        Description: [
          "Masbatenyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msc",
        Description: [
          "Sankaran Maninka"
        ],
        Added: "2009-07-29",
        Macrolanguage: "man"
      },
      {
        Type: "language",
        Subtag: "msd",
        Description: [
          "Yucatec Maya Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mse",
        Description: [
          "Musey"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msf",
        Description: [
          "Mekwei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msg",
        Description: [
          "Moraid"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msh",
        Description: [
          "Masikoro Malagasy"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mg"
      },
      {
        Type: "language",
        Subtag: "msi",
        Description: [
          "Sabah Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "msj",
        Description: [
          "Ma (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msk",
        Description: [
          "Mansaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msl",
        Description: [
          "Molof",
          "Poule"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msm",
        Description: [
          "Agusan Manobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msn",
        Description: [
          "Vur\xEBs"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mso",
        Description: [
          "Mombum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msp",
        Description: [
          "Maritsau\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msq",
        Description: [
          "Caac"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msr",
        Description: [
          "Mongolian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mss",
        Description: [
          "West Masela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mst",
        Description: [
          "Cataelano Mandaya"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        "Preferred-Value": "mry"
      },
      {
        Type: "language",
        Subtag: "msu",
        Description: [
          "Musom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msv",
        Description: [
          "Maslam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msw",
        Description: [
          "Mansoanka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msx",
        Description: [
          "Moresada"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msy",
        Description: [
          "Aruamu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "msz",
        Description: [
          "Momare"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mta",
        Description: [
          "Cotabato Manobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtb",
        Description: [
          "Anyin Morofo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtc",
        Description: [
          "Munit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtd",
        Description: [
          "Mualang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mte",
        Description: [
          "Mono (Solomon Islands)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtf",
        Description: [
          "Murik (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtg",
        Description: [
          "Una"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mth",
        Description: [
          "Munggui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mti",
        Description: [
          "Maiwa (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtj",
        Description: [
          "Moskona"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtk",
        Description: [
          "Mbe'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtl",
        Description: [
          "Montol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtm",
        Description: [
          "Mator"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtn",
        Description: [
          "Matagalpa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mto",
        Description: [
          "Totontepec Mixe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtp",
        Description: [
          "Wich\xED Lhamt\xE9s Nocten"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtq",
        Description: [
          "Muong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtr",
        Description: [
          "Mewari"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mwr"
      },
      {
        Type: "language",
        Subtag: "mts",
        Description: [
          "Yora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtt",
        Description: [
          "Mota"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtu",
        Description: [
          "Tututepec Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtv",
        Description: [
          "Asaro'o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtw",
        Description: [
          "Southern Binukidnon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mtx",
        Description: [
          "Tida\xE1 Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mty",
        Description: [
          "Nabi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mua",
        Description: [
          "Mundang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mub",
        Description: [
          "Mubi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "muc",
        Description: [
          "Ajumbu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mud",
        Description: [
          "Mednyj Aleut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mue",
        Description: [
          "Media Lengua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mug",
        Description: [
          "Musgu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "muh",
        Description: [
          "M\xFCnd\xFC"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mui",
        Description: [
          "Musi"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "muj",
        Description: [
          "Mabire"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "muk",
        Description: [
          "Mugom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mul",
        Description: [
          "Multiple languages"
        ],
        Added: "2005-10-16",
        Scope: "special"
      },
      {
        Type: "language",
        Subtag: "mum",
        Description: [
          "Maiwala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mun",
        Description: [
          "Munda languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "muo",
        Description: [
          "Nyong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mup",
        Description: [
          "Malvi"
        ],
        Added: "2009-07-29",
        Macrolanguage: "raj"
      },
      {
        Type: "language",
        Subtag: "muq",
        Description: [
          "Eastern Xiangxi Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "mur",
        Description: [
          "Murle"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mus",
        Description: [
          "Creek"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "mut",
        Description: [
          "Western Muria"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "muu",
        Description: [
          "Yaaku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "muv",
        Description: [
          "Muthuvan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mux",
        Description: [
          "Bo-Ung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "muy",
        Description: [
          "Muyang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "muz",
        Description: [
          "Mursi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mva",
        Description: [
          "Manam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvb",
        Description: [
          "Mattole"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvd",
        Description: [
          "Mamboru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mve",
        Description: [
          "Marwari (Pakistan)"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mwr"
      },
      {
        Type: "language",
        Subtag: "mvf",
        Description: [
          "Peripheral Mongolian"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mn"
      },
      {
        Type: "language",
        Subtag: "mvg",
        Description: [
          "Yucua\xF1e Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvh",
        Description: [
          "Mulgi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvi",
        Description: [
          "Miyako"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvk",
        Description: [
          "Mekmek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvl",
        Description: [
          "Mbara (Australia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvm",
        Description: [
          "Muya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvn",
        Description: [
          "Minaveha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvo",
        Description: [
          "Marovo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvp",
        Description: [
          "Duri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvq",
        Description: [
          "Moere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvr",
        Description: [
          "Marau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvs",
        Description: [
          "Massep"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvt",
        Description: [
          "Mpotovoro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvu",
        Description: [
          "Marfa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvv",
        Description: [
          "Tagal Murut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvw",
        Description: [
          "Machinga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvx",
        Description: [
          "Meoswar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvy",
        Description: [
          "Indus Kohistani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mvz",
        Description: [
          "Mesqan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwa",
        Description: [
          "Mwatebu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwb",
        Description: [
          "Juwal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwc",
        Description: [
          "Are"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwd",
        Description: [
          "Mudbura"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        Comments: [
          "see dmw, xrq"
        ]
      },
      {
        Type: "language",
        Subtag: "mwe",
        Description: [
          "Mwera (Chimwera)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwf",
        Description: [
          "Murrinh-Patha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwg",
        Description: [
          "Aiklep"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwh",
        Description: [
          "Mouk-Aria"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwi",
        Description: [
          "Labo",
          "Ninde"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwj",
        Description: [
          "Maligo"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "vaj"
      },
      {
        Type: "language",
        Subtag: "mwk",
        Description: [
          "Kita Maninkakan"
        ],
        Added: "2009-07-29",
        Macrolanguage: "man"
      },
      {
        Type: "language",
        Subtag: "mwl",
        Description: [
          "Mirandese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "mwm",
        Description: [
          "Sar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwn",
        Description: [
          "Nyamwanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwo",
        Description: [
          "Central Maewo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwp",
        Description: [
          "Kala Lagaw Ya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwq",
        Description: [
          "M\xFCn Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwr",
        Description: [
          "Marwari"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "mws",
        Description: [
          "Mwimbi-Muthambi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwt",
        Description: [
          "Moken"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwu",
        Description: [
          "Mittu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mwv",
        Description: [
          "Mentawai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mww",
        Description: [
          "Hmong Daw"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "mwx",
        Description: [
          "Mediak"
        ],
        Added: "2009-07-29",
        Deprecated: "2018-03-08"
      },
      {
        Type: "language",
        Subtag: "mwy",
        Description: [
          "Mosiro"
        ],
        Added: "2009-07-29",
        Deprecated: "2018-03-08"
      },
      {
        Type: "language",
        Subtag: "mwz",
        Description: [
          "Moingi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxa",
        Description: [
          "Northwest Oaxaca Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxb",
        Description: [
          "Tezoatl\xE1n Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxc",
        Description: [
          "Manyika"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxd",
        Description: [
          "Modang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxe",
        Description: [
          "Mele-Fila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxf",
        Description: [
          "Malgbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxg",
        Description: [
          "Mbangala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxh",
        Description: [
          "Mvuba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxi",
        Description: [
          "Mozarabic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxj",
        Description: [
          "Miju-Mishmi",
          "Geman Deng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxk",
        Description: [
          "Monumbo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxl",
        Description: [
          "Maxi Gbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxm",
        Description: [
          "Meramera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxn",
        Description: [
          "Moi (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxo",
        Description: [
          "Mbowe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxp",
        Description: [
          "Tlahuitoltepec Mixe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxq",
        Description: [
          "Juquila Mixe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxr",
        Description: [
          "Murik (Malaysia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxs",
        Description: [
          "Huitepec Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxt",
        Description: [
          "Jamiltepec Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxu",
        Description: [
          "Mada (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxv",
        Description: [
          "Metlat\xF3noc Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxw",
        Description: [
          "Namo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxx",
        Description: [
          "Mahou",
          "Mawukakan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxy",
        Description: [
          "Southeastern Nochixtl\xE1n Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mxz",
        Description: [
          "Central Masela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myb",
        Description: [
          "Mbay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myc",
        Description: [
          "Mayeka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myd",
        Description: [
          "Maramba"
        ],
        Added: "2009-07-29",
        Deprecated: "2019-04-16",
        "Preferred-Value": "aog"
      },
      {
        Type: "language",
        Subtag: "mye",
        Description: [
          "Myene"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myf",
        Description: [
          "Bambassi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myg",
        Description: [
          "Manta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myh",
        Description: [
          "Makah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myi",
        Description: [
          "Mina (India)"
        ],
        Added: "2009-07-29",
        Deprecated: "2019-04-16"
      },
      {
        Type: "language",
        Subtag: "myj",
        Description: [
          "Mangayat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myk",
        Description: [
          "Mamara Senoufo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myl",
        Description: [
          "Moma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mym",
        Description: [
          "Me'en"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myn",
        Description: [
          "Mayan languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "myo",
        Description: [
          "Anfillo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myp",
        Description: [
          "Pirah\xE3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myq",
        Description: [
          "Forest Maninka"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        Macrolanguage: "man"
      },
      {
        Type: "language",
        Subtag: "myr",
        Description: [
          "Muniche"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mys",
        Description: [
          "Mesmes"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myt",
        Description: [
          "Sangab Mandaya"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        "Preferred-Value": "mry"
      },
      {
        Type: "language",
        Subtag: "myu",
        Description: [
          "Munduruk\xFA"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myv",
        Description: [
          "Erzya"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "myw",
        Description: [
          "Muyuw"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myx",
        Description: [
          "Masaaba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myy",
        Description: [
          "Macuna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "myz",
        Description: [
          "Classical Mandaic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mza",
        Description: [
          "Santa Mar\xEDa Zacatepec Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzb",
        Description: [
          "Tumzabt"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzc",
        Description: [
          "Madagascar Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzd",
        Description: [
          "Malimba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mze",
        Description: [
          "Morawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzg",
        Description: [
          "Monastic Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzh",
        Description: [
          "Wich\xED Lhamt\xE9s G\xFCisnay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzi",
        Description: [
          "Ixcatl\xE1n Mazatec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzj",
        Description: [
          "Manya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzk",
        Description: [
          "Nigeria Mambila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzl",
        Description: [
          "Mazatl\xE1n Mixe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzm",
        Description: [
          "Mumuye"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzn",
        Description: [
          "Mazanderani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzo",
        Description: [
          "Matipuhy"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzp",
        Description: [
          "Movima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzq",
        Description: [
          "Mori Atas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzr",
        Description: [
          "Mar\xFAbo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzs",
        Description: [
          "Macanese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzt",
        Description: [
          "Mintil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzu",
        Description: [
          "Inapang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzv",
        Description: [
          "Manza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzw",
        Description: [
          "Deg"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzx",
        Description: [
          "Mawayana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzy",
        Description: [
          "Mozambican Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "mzz",
        Description: [
          "Maiadomu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "naa",
        Description: [
          "Namla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nab",
        Description: [
          "Southern Nambiku\xE1ra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nac",
        Description: [
          "Narak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nad",
        Description: [
          "Nijadali"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "xny"
      },
      {
        Type: "language",
        Subtag: "nae",
        Description: [
          "Naka'ela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "naf",
        Description: [
          "Nabak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nag",
        Description: [
          "Naga Pidgin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nah",
        Description: [
          "Nahuatl languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "nai",
        Description: [
          "North American Indian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "naj",
        Description: [
          "Nalu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nak",
        Description: [
          "Nakanai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nal",
        Description: [
          "Nalik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nam",
        Description: [
          "Ngan'gityemerri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nan",
        Description: [
          "Min Nan Chinese"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zh"
      },
      {
        Type: "language",
        Subtag: "nao",
        Description: [
          "Naaba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nap",
        Description: [
          "Neapolitan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "naq",
        Description: [
          "Khoekhoe",
          "Nama (Namibia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nar",
        Description: [
          "Iguta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nas",
        Description: [
          "Naasioi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nat",
        Description: [
          "Ca\u0331hungwa\u0331rya\u0331",
          "Hungworo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "naw",
        Description: [
          "Nawuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nax",
        Description: [
          "Nakwi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nay",
        Description: [
          "Ngarrindjeri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "naz",
        Description: [
          "Coatepec Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nba",
        Description: [
          "Nyemba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbb",
        Description: [
          "Ndoe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbc",
        Description: [
          "Chang Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbd",
        Description: [
          "Ngbinda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbe",
        Description: [
          "Konyak Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbf",
        Description: [
          "Naxi"
        ],
        Added: "2009-07-29",
        Deprecated: "2011-08-16",
        Comments: [
          "see nru, nxq"
        ]
      },
      {
        Type: "language",
        Subtag: "nbg",
        Description: [
          "Nagarchal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbh",
        Description: [
          "Ngamo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbi",
        Description: [
          "Mao Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbj",
        Description: [
          "Ngarinyman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbk",
        Description: [
          "Nake"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbm",
        Description: [
          "Ngbaka Ma'bo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbn",
        Description: [
          "Kuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbo",
        Description: [
          "Nkukoli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbp",
        Description: [
          "Nnam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbq",
        Description: [
          "Nggem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbr",
        Description: [
          "Numana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbs",
        Description: [
          "Namibian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbt",
        Description: [
          "Na"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbu",
        Description: [
          "Rongmei Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbv",
        Description: [
          "Ngamambo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbw",
        Description: [
          "Southern Ngbandi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nbx",
        Description: [
          "Ngura"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        Comments: [
          "see ekc, gll, jbi, xpt, xwk"
        ]
      },
      {
        Type: "language",
        Subtag: "nby",
        Description: [
          "Ningera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nca",
        Description: [
          "Iyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ncb",
        Description: [
          "Central Nicobarese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ncc",
        Description: [
          "Ponam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ncd",
        Description: [
          "Nachering"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nce",
        Description: [
          "Yale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ncf",
        Description: [
          "Notsi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ncg",
        Description: [
          "Nisga'a"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nch",
        Description: [
          "Central Huasteca Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nci",
        Description: [
          "Classical Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ncj",
        Description: [
          "Northern Puebla Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nck",
        Description: [
          "Na-kara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ncl",
        Description: [
          "Michoac\xE1n Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ncm",
        Description: [
          "Nambo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ncn",
        Description: [
          "Nauna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nco",
        Description: [
          "Sibe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ncp",
        Description: [
          "Ndaktup"
        ],
        Added: "2009-07-29",
        Deprecated: "2018-03-08",
        "Preferred-Value": "kdz"
      },
      {
        Type: "language",
        Subtag: "ncq",
        Description: [
          "Northern Katang"
        ],
        Added: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "ncr",
        Description: [
          "Ncane"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ncs",
        Description: [
          "Nicaraguan Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nct",
        Description: [
          "Chothe Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ncu",
        Description: [
          "Chumburung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ncx",
        Description: [
          "Central Puebla Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ncz",
        Description: [
          "Natchez"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nda",
        Description: [
          "Ndasa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndb",
        Description: [
          "Kenswei Nsei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndc",
        Description: [
          "Ndau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndd",
        Description: [
          "Nde-Nsele-Nta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndf",
        Description: [
          "Nadruvian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndg",
        Description: [
          "Ndengereko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndh",
        Description: [
          "Ndali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndi",
        Description: [
          "Samba Leko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndj",
        Description: [
          "Ndamba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndk",
        Description: [
          "Ndaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndl",
        Description: [
          "Ndolo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndm",
        Description: [
          "Ndam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndn",
        Description: [
          "Ngundi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndp",
        Description: [
          "Ndo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndq",
        Description: [
          "Ndombe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndr",
        Description: [
          "Ndoola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nds",
        Description: [
          "Low German",
          "Low Saxon"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "ndt",
        Description: [
          "Ndunga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndu",
        Description: [
          "Dugun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndv",
        Description: [
          "Ndut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndw",
        Description: [
          "Ndobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndx",
        Description: [
          "Nduga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndy",
        Description: [
          "Lutos"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ndz",
        Description: [
          "Ndogo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nea",
        Description: [
          "Eastern Ngad'a"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "neb",
        Description: [
          "Toura (C\xF4te d'Ivoire)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nec",
        Description: [
          "Nedebang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ned",
        Description: [
          "Nde-Gbite"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nee",
        Description: [
          "N\xEAl\xEAmwa-Nixumwak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nef",
        Description: [
          "Nefamese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "neg",
        Description: [
          "Negidal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "neh",
        Description: [
          "Nyenkha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nei",
        Description: [
          "Neo-Hittite"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nej",
        Description: [
          "Neko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nek",
        Description: [
          "Neku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nem",
        Description: [
          "Nemi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nen",
        Description: [
          "Nengone"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "neo",
        Description: [
          "N\xE1-Meo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "neq",
        Description: [
          "North Central Mixe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ner",
        Description: [
          "Yahadian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nes",
        Description: [
          "Bhoti Kinnauri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "net",
        Description: [
          "Nete"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "neu",
        Description: [
          "Neo"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "nev",
        Description: [
          "Nyaheun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "new",
        Description: [
          "Newari",
          "Nepal Bhasa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "nex",
        Description: [
          "Neme"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ney",
        Description: [
          "Neyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nez",
        Description: [
          "Nez Perce"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nfa",
        Description: [
          "Dhao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nfd",
        Description: [
          "Ahwai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nfl",
        Description: [
          "Ayiwo",
          "\xC4iwoo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nfr",
        Description: [
          "Nafaanra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nfu",
        Description: [
          "Mfumte"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nga",
        Description: [
          "Ngbaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngb",
        Description: [
          "Northern Ngbandi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngc",
        Description: [
          "Ngombe (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngd",
        Description: [
          "Ngando (Central African Republic)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nge",
        Description: [
          "Ngemba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngf",
        Description: [
          "Trans-New Guinea languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "ngg",
        Description: [
          "Ngbaka Manza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngh",
        Description: [
          "N\u01C1ng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngi",
        Description: [
          "Ngizim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngj",
        Description: [
          "Ngie"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngk",
        Description: [
          "Dalabon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngl",
        Description: [
          "Lomwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngm",
        Description: [
          "Ngatik Men's Creole"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngn",
        Description: [
          "Ngwo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngo",
        Description: [
          "Ngoni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngp",
        Description: [
          "Ngulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngq",
        Description: [
          "Ngurimi",
          "Ngoreme"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngr",
        Description: [
          "Engdewu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngs",
        Description: [
          "Gvoko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngt",
        Description: [
          "Kriang",
          "Ngeq"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngu",
        Description: [
          "Guerrero Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngv",
        Description: [
          "Nagumi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngw",
        Description: [
          "Ngwaba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngx",
        Description: [
          "Nggwahyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngy",
        Description: [
          "Tibea"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ngz",
        Description: [
          "Ngungwel"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nha",
        Description: [
          "Nhanda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhb",
        Description: [
          "Beng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhc",
        Description: [
          "Tabasco Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhd",
        Description: [
          "Chirip\xE1",
          "Ava Guaran\xED"
        ],
        Added: "2009-07-29",
        Macrolanguage: "gn"
      },
      {
        Type: "language",
        Subtag: "nhe",
        Description: [
          "Eastern Huasteca Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhf",
        Description: [
          "Nhuwala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhg",
        Description: [
          "Tetelcingo Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhh",
        Description: [
          "Nahari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhi",
        Description: [
          "Zacatl\xE1n-Ahuacatl\xE1n-Tepetzintla Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhk",
        Description: [
          "Isthmus-Cosoleacaque Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhm",
        Description: [
          "Morelos Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhn",
        Description: [
          "Central Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nho",
        Description: [
          "Takuu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhp",
        Description: [
          "Isthmus-Pajapan Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhq",
        Description: [
          "Huaxcaleca Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhr",
        Description: [
          "Naro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nht",
        Description: [
          "Ometepec Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhu",
        Description: [
          "Noone"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhv",
        Description: [
          "Temascaltepec Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhw",
        Description: [
          "Western Huasteca Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhx",
        Description: [
          "Isthmus-Mecayapan Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhy",
        Description: [
          "Northern Oaxaca Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nhz",
        Description: [
          "Santa Mar\xEDa La Alta Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nia",
        Description: [
          "Nias"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "nib",
        Description: [
          "Nakame"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nic",
        Description: [
          "Niger-Kordofanian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "nid",
        Description: [
          "Ngandi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nie",
        Description: [
          "Niellim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nif",
        Description: [
          "Nek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nig",
        Description: [
          "Ngalakgan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nih",
        Description: [
          "Nyiha (Tanzania)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nii",
        Description: [
          "Nii"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nij",
        Description: [
          "Ngaju"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nik",
        Description: [
          "Southern Nicobarese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nil",
        Description: [
          "Nila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nim",
        Description: [
          "Nilamba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nin",
        Description: [
          "Ninzo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nio",
        Description: [
          "Nganasan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "niq",
        Description: [
          "Nandi"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kln"
      },
      {
        Type: "language",
        Subtag: "nir",
        Description: [
          "Nimboran"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nis",
        Description: [
          "Nimi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nit",
        Description: [
          "Southeastern Kolami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "niu",
        Description: [
          "Niuean"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "niv",
        Description: [
          "Gilyak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "niw",
        Description: [
          "Nimo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nix",
        Description: [
          "Hema"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "niy",
        Description: [
          "Ngiti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "niz",
        Description: [
          "Ningil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nja",
        Description: [
          "Nzanyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "njb",
        Description: [
          "Nocte Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "njd",
        Description: [
          "Ndonde Hamba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "njh",
        Description: [
          "Lotha Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nji",
        Description: [
          "Gudanji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "njj",
        Description: [
          "Njen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "njl",
        Description: [
          "Njalgulgule"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "njm",
        Description: [
          "Angami Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "njn",
        Description: [
          "Liangmai Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "njo",
        Description: [
          "Ao Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "njr",
        Description: [
          "Njerep"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "njs",
        Description: [
          "Nisa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "njt",
        Description: [
          "Ndyuka-Trio Pidgin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nju",
        Description: [
          "Ngadjunmaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "njx",
        Description: [
          "Kunyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "njy",
        Description: [
          "Njyem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "njz",
        Description: [
          "Nyishi"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "nka",
        Description: [
          "Nkoya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkb",
        Description: [
          "Khoibu Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkc",
        Description: [
          "Nkongho"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkd",
        Description: [
          "Koireng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nke",
        Description: [
          "Duke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkf",
        Description: [
          "Inpui Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkg",
        Description: [
          "Nekgini"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkh",
        Description: [
          "Khezha Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nki",
        Description: [
          "Thangal Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkj",
        Description: [
          "Nakai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkk",
        Description: [
          "Nokuku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkm",
        Description: [
          "Namat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkn",
        Description: [
          "Nkangala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nko",
        Description: [
          "Nkonya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkp",
        Description: [
          "Niuatoputapu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkq",
        Description: [
          "Nkami"
        ],
        Added: "2010-04-16"
      },
      {
        Type: "language",
        Subtag: "nkr",
        Description: [
          "Nukuoro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nks",
        Description: [
          "North Asmat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkt",
        Description: [
          "Nyika (Tanzania)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nku",
        Description: [
          "Bouna Kulango"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkv",
        Description: [
          "Nyika (Malawi and Zambia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkw",
        Description: [
          "Nkutu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkx",
        Description: [
          "Nkoroo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nkz",
        Description: [
          "Nkari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nla",
        Description: [
          "Ngombale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nlc",
        Description: [
          "Nalca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nle",
        Description: [
          "East Nyala"
        ],
        Added: "2009-07-29",
        Macrolanguage: "luy"
      },
      {
        Type: "language",
        Subtag: "nlg",
        Description: [
          "Gela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nli",
        Description: [
          "Grangali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nlj",
        Description: [
          "Nyali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nlk",
        Description: [
          "Ninia Yali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nll",
        Description: [
          "Nihali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nlm",
        Description: [
          "Mankiyali"
        ],
        Added: "2018-03-08"
      },
      {
        Type: "language",
        Subtag: "nln",
        Description: [
          "Durango Nahuatl"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see azd, azn"
        ]
      },
      {
        Type: "language",
        Subtag: "nlo",
        Description: [
          "Ngul"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nlq",
        Description: [
          "Lao Naga"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "nlr",
        Description: [
          "Ngarla"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        Comments: [
          "see nrk, ywg"
        ]
      },
      {
        Type: "language",
        Subtag: "nlu",
        Description: [
          "Nchumbulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nlv",
        Description: [
          "Orizaba Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nlw",
        Description: [
          "Walangama"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "nlx",
        Description: [
          "Nahali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nly",
        Description: [
          "Nyamal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nlz",
        Description: [
          "Nal\xF6go"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nma",
        Description: [
          "Maram Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmb",
        Description: [
          "Big Nambas",
          "V'\xEBnen Taut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmc",
        Description: [
          "Ngam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmd",
        Description: [
          "Ndumu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nme",
        Description: [
          "Mzieme Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmf",
        Description: [
          "Tangkhul Naga (India)"
        ],
        Added: "2009-07-29",
        Comments: [
          "see ntx"
        ]
      },
      {
        Type: "language",
        Subtag: "nmg",
        Description: [
          "Kwasio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmh",
        Description: [
          "Monsang Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmi",
        Description: [
          "Nyam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmj",
        Description: [
          "Ngombe (Central African Republic)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmk",
        Description: [
          "Namakura"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nml",
        Description: [
          "Ndemli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmm",
        Description: [
          "Manangba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmn",
        Description: [
          "\u01C3X\xF3\xF5"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmo",
        Description: [
          "Moyon Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmp",
        Description: [
          "Nimanbur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmq",
        Description: [
          "Nambya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmr",
        Description: [
          "Nimbari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nms",
        Description: [
          "Letemboi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmt",
        Description: [
          "Namonuito"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmu",
        Description: [
          "Northeast Maidu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmv",
        Description: [
          "Ngamini"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmw",
        Description: [
          "Nimoa",
          "Rifao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmx",
        Description: [
          "Nama (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmy",
        Description: [
          "Namuyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nmz",
        Description: [
          "Nawdm"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nna",
        Description: [
          "Nyangumarta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnb",
        Description: [
          "Nande"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnc",
        Description: [
          "Nancere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnd",
        Description: [
          "West Ambae"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nne",
        Description: [
          "Ngandyera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnf",
        Description: [
          "Ngaing"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nng",
        Description: [
          "Maring Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnh",
        Description: [
          "Ngiemboon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nni",
        Description: [
          "North Nuaulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnj",
        Description: [
          "Nyangatom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnk",
        Description: [
          "Nankina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnl",
        Description: [
          "Northern Rengma Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnm",
        Description: [
          "Namia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnn",
        Description: [
          "Ngete"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnp",
        Description: [
          "Wancho Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnq",
        Description: [
          "Ngindo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnr",
        Description: [
          "Narungga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nns",
        Description: [
          "Ningye"
        ],
        Added: "2009-07-29",
        Deprecated: "2019-04-16",
        "Preferred-Value": "nbr"
      },
      {
        Type: "language",
        Subtag: "nnt",
        Description: [
          "Nanticoke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnu",
        Description: [
          "Dwang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnv",
        Description: [
          "Nugunu (Australia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnw",
        Description: [
          "Southern Nuni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnx",
        Description: [
          "Ngong"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "ngv"
      },
      {
        Type: "language",
        Subtag: "nny",
        Description: [
          "Nyangga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nnz",
        Description: [
          "Nda'nda'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "noa",
        Description: [
          "Woun Meu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "noc",
        Description: [
          "Nuk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nod",
        Description: [
          "Northern Thai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "noe",
        Description: [
          "Nimadi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nof",
        Description: [
          "Nomane"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nog",
        Description: [
          "Nogai"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "noh",
        Description: [
          "Nomu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "noi",
        Description: [
          "Noiri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "noj",
        Description: [
          "Nonuya"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "nok",
        Description: [
          "Nooksack"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nol",
        Description: [
          "Nomlaki"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "nom",
        Description: [
          "Nocam\xE1n"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "non",
        Description: [
          "Old Norse"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "noo",
        Description: [
          "Nootka"
        ],
        Added: "2009-07-29",
        Deprecated: "2011-08-16",
        Comments: [
          "see dtd, nuk"
        ]
      },
      {
        Type: "language",
        Subtag: "nop",
        Description: [
          "Numanggang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "noq",
        Description: [
          "Ngongo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nos",
        Description: [
          "Eastern Nisu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "not",
        Description: [
          "Nomatsiguenga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nou",
        Description: [
          "Ewage-Notu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nov",
        Description: [
          "Novial"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "now",
        Description: [
          "Nyambo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "noy",
        Description: [
          "Noy"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "noz",
        Description: [
          "Nayi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "npa",
        Description: [
          "Nar Phu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "npb",
        Description: [
          "Nupbikha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "npg",
        Description: [
          "Ponyo-Gongwang Naga"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "nph",
        Description: [
          "Phom Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "npi",
        Description: [
          "Nepali (individual language)"
        ],
        Added: "2012-08-12",
        Macrolanguage: "ne"
      },
      {
        Type: "language",
        Subtag: "npl",
        Description: [
          "Southeastern Puebla Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "npn",
        Description: [
          "Mondropolon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "npo",
        Description: [
          "Pochuri Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nps",
        Description: [
          "Nipsan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "npu",
        Description: [
          "Puimei Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "npx",
        Description: [
          "Noipx"
        ],
        Added: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "npy",
        Description: [
          "Napu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nqg",
        Description: [
          "Southern Nago"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nqk",
        Description: [
          "Kura Ede Nago"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nql",
        Description: [
          "Ngendelengo"
        ],
        Added: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "nqm",
        Description: [
          "Ndom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nqn",
        Description: [
          "Nen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nqo",
        Description: [
          "N'Ko",
          "N\u2019Ko"
        ],
        Added: "2006-06-05",
        "Suppress-Script": "Nkoo"
      },
      {
        Type: "language",
        Subtag: "nqq",
        Description: [
          "Kyan-Karyaw Naga"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "nqy",
        Description: [
          "Akyaung Ari Naga"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "nra",
        Description: [
          "Ngom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nrb",
        Description: [
          "Nara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nrc",
        Description: [
          "Noric"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nre",
        Description: [
          "Southern Rengma Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nrf",
        Description: [
          "J\xE8rriais",
          "Guern\xE9siais"
        ],
        Added: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "nrg",
        Description: [
          "Narango"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nri",
        Description: [
          "Chokri Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nrk",
        Description: [
          "Ngarla"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "nrl",
        Description: [
          "Ngarluma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nrm",
        Description: [
          "Narom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nrn",
        Description: [
          "Norn"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nrp",
        Description: [
          "North Picene"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nrr",
        Description: [
          "Norra",
          "Nora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nrt",
        Description: [
          "Northern Kalapuya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nru",
        Description: [
          "Narua"
        ],
        Added: "2011-08-16"
      },
      {
        Type: "language",
        Subtag: "nrx",
        Description: [
          "Ngurmbur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nrz",
        Description: [
          "Lala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsa",
        Description: [
          "Sangtam Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsc",
        Description: [
          "Nshi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsd",
        Description: [
          "Southern Nisu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nse",
        Description: [
          "Nsenga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsf",
        Description: [
          "Northwestern Nisu"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "nsg",
        Description: [
          "Ngasa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsh",
        Description: [
          "Ngoshie"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsi",
        Description: [
          "Nigerian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsk",
        Description: [
          "Naskapi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsl",
        Description: [
          "Norwegian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsm",
        Description: [
          "Sumi Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsn",
        Description: [
          "Nehan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nso",
        Description: [
          "Pedi",
          "Northern Sotho",
          "Sepedi"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "nsp",
        Description: [
          "Nepalese Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsq",
        Description: [
          "Northern Sierra Miwok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsr",
        Description: [
          "Maritime Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nss",
        Description: [
          "Nali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nst",
        Description: [
          "Tase Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsu",
        Description: [
          "Sierra Negra Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsv",
        Description: [
          "Southwestern Nisu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsw",
        Description: [
          "Navut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsx",
        Description: [
          "Nsongo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsy",
        Description: [
          "Nasal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nsz",
        Description: [
          "Nisenan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ntd",
        Description: [
          "Northern Tidung"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "nte",
        Description: [
          "Nathembo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ntg",
        Description: [
          "Ngantangarra"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "nti",
        Description: [
          "Natioro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ntj",
        Description: [
          "Ngaanyatjarra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ntk",
        Description: [
          "Ikoma-Nata-Isenye"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ntm",
        Description: [
          "Nateni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nto",
        Description: [
          "Ntomba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ntp",
        Description: [
          "Northern Tepehuan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ntr",
        Description: [
          "Delo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nts",
        Description: [
          "Natagaimas"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "pij"
      },
      {
        Type: "language",
        Subtag: "ntu",
        Description: [
          "Nat\xFCgu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ntw",
        Description: [
          "Nottoway"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ntx",
        Description: [
          "Tangkhul Naga (Myanmar)"
        ],
        Added: "2012-08-12",
        Comments: [
          "see nmf"
        ]
      },
      {
        Type: "language",
        Subtag: "nty",
        Description: [
          "Mantsi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ntz",
        Description: [
          "Natanzi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nua",
        Description: [
          "Yuanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nub",
        Description: [
          "Nubian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "nuc",
        Description: [
          "Nukuini"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nud",
        Description: [
          "Ngala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nue",
        Description: [
          "Ngundu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nuf",
        Description: [
          "Nusu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nug",
        Description: [
          "Nungali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nuh",
        Description: [
          "Ndunda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nui",
        Description: [
          "Ngumbi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nuj",
        Description: [
          "Nyole"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nuk",
        Description: [
          "Nuu-chah-nulth",
          "Nuuchahnulth"
        ],
        Added: "2011-08-16"
      },
      {
        Type: "language",
        Subtag: "nul",
        Description: [
          "Nusa Laut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "num",
        Description: [
          "Niuafo'ou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nun",
        Description: [
          "Anong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nuo",
        Description: [
          "Ngu\xF4n"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nup",
        Description: [
          "Nupe-Nupe-Tako"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nuq",
        Description: [
          "Nukumanu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nur",
        Description: [
          "Nukuria"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nus",
        Description: [
          "Nuer"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nut",
        Description: [
          "Nung (Viet Nam)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nuu",
        Description: [
          "Ngbundu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nuv",
        Description: [
          "Northern Nuni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nuw",
        Description: [
          "Nguluwan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nux",
        Description: [
          "Mehek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nuy",
        Description: [
          "Nunggubuyu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nuz",
        Description: [
          "Tlamacazapa Nahuatl"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nvh",
        Description: [
          "Nasarian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nvm",
        Description: [
          "Namiae"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nvo",
        Description: [
          "Nyokon"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "nwa",
        Description: [
          "Nawathinehena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nwb",
        Description: [
          "Nyabwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nwc",
        Description: [
          "Classical Newari",
          "Classical Nepal Bhasa",
          "Old Newari"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "nwe",
        Description: [
          "Ngwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nwg",
        Description: [
          "Ngayawung"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "nwi",
        Description: [
          "Southwest Tanna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nwm",
        Description: [
          "Nyamusa-Molo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nwo",
        Description: [
          "Nauo"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "nwr",
        Description: [
          "Nawaru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nwx",
        Description: [
          "Middle Newar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nwy",
        Description: [
          "Nottoway-Meherrin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nxa",
        Description: [
          "Nauete"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nxd",
        Description: [
          "Ngando (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nxe",
        Description: [
          "Nage"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nxg",
        Description: [
          "Ngad'a"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nxi",
        Description: [
          "Nindi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nxk",
        Description: [
          "Koki Naga"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "nxl",
        Description: [
          "South Nuaulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nxm",
        Description: [
          "Numidian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nxn",
        Description: [
          "Ngawun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nxo",
        Description: [
          "Ndambomo"
        ],
        Added: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "nxq",
        Description: [
          "Naxi"
        ],
        Added: "2011-08-16"
      },
      {
        Type: "language",
        Subtag: "nxr",
        Description: [
          "Ninggerum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nxu",
        Description: [
          "Narau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nxx",
        Description: [
          "Nafri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyb",
        Description: [
          "Nyangbo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyc",
        Description: [
          "Nyanga-li"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyd",
        Description: [
          "Nyore",
          "Olunyole"
        ],
        Added: "2009-07-29",
        Macrolanguage: "luy"
      },
      {
        Type: "language",
        Subtag: "nye",
        Description: [
          "Nyengo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyf",
        Description: [
          "Giryama",
          "Kigiryama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyg",
        Description: [
          "Nyindu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyh",
        Description: [
          "Nyikina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyi",
        Description: [
          "Ama (Sudan)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyj",
        Description: [
          "Nyanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyk",
        Description: [
          "Nyaneka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyl",
        Description: [
          "Nyeu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nym",
        Description: [
          "Nyamwezi"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "nyn",
        Description: [
          "Nyankole"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "nyo",
        Description: [
          "Nyoro"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "nyp",
        Description: [
          "Nyang'i"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyq",
        Description: [
          "Nayini"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyr",
        Description: [
          "Nyiha (Malawi)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nys",
        Description: [
          "Nyungar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyt",
        Description: [
          "Nyawaygi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyu",
        Description: [
          "Nyungwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyv",
        Description: [
          "Nyulnyul"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyw",
        Description: [
          "Nyaw"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyx",
        Description: [
          "Nganyaywana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nyy",
        Description: [
          "Nyakyusa-Ngonde"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nza",
        Description: [
          "Tigon Mbembe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nzb",
        Description: [
          "Njebi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nzd",
        Description: [
          "Nzadi"
        ],
        Added: "2018-03-08"
      },
      {
        Type: "language",
        Subtag: "nzi",
        Description: [
          "Nzima"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "nzk",
        Description: [
          "Nzakara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nzm",
        Description: [
          "Zeme Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nzs",
        Description: [
          "New Zealand Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nzu",
        Description: [
          "Teke-Nzikou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nzy",
        Description: [
          "Nzakambay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "nzz",
        Description: [
          "Nanga Dama Dogon"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "oaa",
        Description: [
          "Orok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oac",
        Description: [
          "Oroch"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oar",
        Description: [
          "Old Aramaic (up to 700 BCE)",
          "Ancient Aramaic (up to 700 BCE)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oav",
        Description: [
          "Old Avar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "obi",
        Description: [
          "Obispe\xF1o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "obk",
        Description: [
          "Southern Bontok"
        ],
        Added: "2010-03-11",
        Macrolanguage: "bnc"
      },
      {
        Type: "language",
        Subtag: "obl",
        Description: [
          "Oblo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "obm",
        Description: [
          "Moabite"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "obo",
        Description: [
          "Obo Manobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "obr",
        Description: [
          "Old Burmese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "obt",
        Description: [
          "Old Breton"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "obu",
        Description: [
          "Obulom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oca",
        Description: [
          "Ocaina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "och",
        Description: [
          "Old Chinese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oco",
        Description: [
          "Old Cornish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ocu",
        Description: [
          "Atzingo Matlatzinca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oda",
        Description: [
          "Odut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "odk",
        Description: [
          "Od"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "odt",
        Description: [
          "Old Dutch"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "odu",
        Description: [
          "Odual"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ofo",
        Description: [
          "Ofo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ofs",
        Description: [
          "Old Frisian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ofu",
        Description: [
          "Efutop"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ogb",
        Description: [
          "Ogbia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ogc",
        Description: [
          "Ogbah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oge",
        Description: [
          "Old Georgian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ogg",
        Description: [
          "Ogbogolo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ogo",
        Description: [
          "Khana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ogu",
        Description: [
          "Ogbronuagum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oht",
        Description: [
          "Old Hittite"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ohu",
        Description: [
          "Old Hungarian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oia",
        Description: [
          "Oirata"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oin",
        Description: [
          "Inebu One"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ojb",
        Description: [
          "Northwestern Ojibwa"
        ],
        Added: "2009-07-29",
        Macrolanguage: "oj"
      },
      {
        Type: "language",
        Subtag: "ojc",
        Description: [
          "Central Ojibwa"
        ],
        Added: "2009-07-29",
        Macrolanguage: "oj"
      },
      {
        Type: "language",
        Subtag: "ojg",
        Description: [
          "Eastern Ojibwa"
        ],
        Added: "2009-07-29",
        Macrolanguage: "oj"
      },
      {
        Type: "language",
        Subtag: "ojp",
        Description: [
          "Old Japanese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ojs",
        Description: [
          "Severn Ojibwa"
        ],
        Added: "2009-07-29",
        Macrolanguage: "oj"
      },
      {
        Type: "language",
        Subtag: "ojv",
        Description: [
          "Ontong Java"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ojw",
        Description: [
          "Western Ojibwa"
        ],
        Added: "2009-07-29",
        Macrolanguage: "oj"
      },
      {
        Type: "language",
        Subtag: "oka",
        Description: [
          "Okanagan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "okb",
        Description: [
          "Okobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "okd",
        Description: [
          "Okodia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oke",
        Description: [
          "Okpe (Southwestern Edo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "okg",
        Description: [
          "Koko Babangk"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "okh",
        Description: [
          "Koresh-e Rostam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oki",
        Description: [
          "Okiek"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kln"
      },
      {
        Type: "language",
        Subtag: "okj",
        Description: [
          "Oko-Juwoi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "okk",
        Description: [
          "Kwamtim One"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "okl",
        Description: [
          "Old Kentish Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "okm",
        Description: [
          "Middle Korean (10th-16th cent.)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "okn",
        Description: [
          "Oki-No-Erabu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oko",
        Description: [
          "Old Korean (3rd-9th cent.)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "okr",
        Description: [
          "Kirike"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oks",
        Description: [
          "Oko-Eni-Osayen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oku",
        Description: [
          "Oku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "okv",
        Description: [
          "Orokaiva"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "okx",
        Description: [
          "Okpe (Northwestern Edo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ola",
        Description: [
          "Walungge"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "old",
        Description: [
          "Mochi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ole",
        Description: [
          "Olekha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "olk",
        Description: [
          "Olkol"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "olm",
        Description: [
          "Oloma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "olo",
        Description: [
          "Livvi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "olr",
        Description: [
          "Olrat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "olt",
        Description: [
          "Old Lithuanian"
        ],
        Added: "2014-02-28"
      },
      {
        Type: "language",
        Subtag: "olu",
        Description: [
          "Kuvale"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "oma",
        Description: [
          "Omaha-Ponca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "omb",
        Description: [
          "East Ambae"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "omc",
        Description: [
          "Mochica"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ome",
        Description: [
          "Omejes"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "omg",
        Description: [
          "Omagua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "omi",
        Description: [
          "Omi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "omk",
        Description: [
          "Omok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oml",
        Description: [
          "Ombo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "omn",
        Description: [
          "Minoan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "omo",
        Description: [
          "Utarmbung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "omp",
        Description: [
          "Old Manipuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "omq",
        Description: [
          "Oto-Manguean languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "omr",
        Description: [
          "Old Marathi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "omt",
        Description: [
          "Omotik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "omu",
        Description: [
          "Omurano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "omv",
        Description: [
          "Omotic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "omw",
        Description: [
          "South Tairora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "omx",
        Description: [
          "Old Mon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ona",
        Description: [
          "Ona"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "onb",
        Description: [
          "Lingao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "one",
        Description: [
          "Oneida"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ong",
        Description: [
          "Olo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oni",
        Description: [
          "Onin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "onj",
        Description: [
          "Onjob"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "onk",
        Description: [
          "Kabore One"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "onn",
        Description: [
          "Onobasulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ono",
        Description: [
          "Onondaga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "onp",
        Description: [
          "Sartang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "onr",
        Description: [
          "Northern One"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ons",
        Description: [
          "Ono"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ont",
        Description: [
          "Ontenu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "onu",
        Description: [
          "Unua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "onw",
        Description: [
          "Old Nubian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "onx",
        Description: [
          "Onin Based Pidgin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ood",
        Description: [
          "Tohono O'odham"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oog",
        Description: [
          "Ong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oon",
        Description: [
          "\xD6nge"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oor",
        Description: [
          "Oorlams"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oos",
        Description: [
          "Old Ossetic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "opa",
        Description: [
          "Okpamheri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "opk",
        Description: [
          "Kopkaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "opm",
        Description: [
          "Oksapmin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "opo",
        Description: [
          "Opao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "opt",
        Description: [
          "Opata"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "opy",
        Description: [
          "Ofay\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ora",
        Description: [
          "Oroha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "orc",
        Description: [
          "Orma"
        ],
        Added: "2009-07-29",
        Macrolanguage: "om"
      },
      {
        Type: "language",
        Subtag: "ore",
        Description: [
          "Orej\xF3n"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "org",
        Description: [
          "Oring"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "orh",
        Description: [
          "Oroqen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "orn",
        Description: [
          "Orang Kanaq"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "oro",
        Description: [
          "Orokolo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "orr",
        Description: [
          "Oruma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ors",
        Description: [
          "Orang Seletar"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "ort",
        Description: [
          "Adivasi Oriya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oru",
        Description: [
          "Ormuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "orv",
        Description: [
          "Old Russian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "orw",
        Description: [
          "Oro Win"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "orx",
        Description: [
          "Oro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ory",
        Description: [
          "Odia (individual language)",
          "Oriya (individual language)"
        ],
        Added: "2012-08-12",
        Macrolanguage: "or"
      },
      {
        Type: "language",
        Subtag: "orz",
        Description: [
          "Ormu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "osa",
        Description: [
          "Osage"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "osc",
        Description: [
          "Oscan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "osi",
        Description: [
          "Osing"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oso",
        Description: [
          "Ososo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "osp",
        Description: [
          "Old Spanish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ost",
        Description: [
          "Osatu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "osu",
        Description: [
          "Southern One"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "osx",
        Description: [
          "Old Saxon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ota",
        Description: [
          "Ottoman Turkish (1500-1928)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "otb",
        Description: [
          "Old Tibetan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "otd",
        Description: [
          "Ot Danum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ote",
        Description: [
          "Mezquital Otomi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oti",
        Description: [
          "Oti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "otk",
        Description: [
          "Old Turkish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "otl",
        Description: [
          "Tilapa Otomi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "otm",
        Description: [
          "Eastern Highland Otomi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "otn",
        Description: [
          "Tenango Otomi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oto",
        Description: [
          "Otomian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "otq",
        Description: [
          "Quer\xE9taro Otomi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "otr",
        Description: [
          "Otoro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ots",
        Description: [
          "Estado de M\xE9xico Otomi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ott",
        Description: [
          "Temoaya Otomi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "otu",
        Description: [
          "Otuke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "otw",
        Description: [
          "Ottawa"
        ],
        Added: "2009-07-29",
        Macrolanguage: "oj"
      },
      {
        Type: "language",
        Subtag: "otx",
        Description: [
          "Texcatepec Otomi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oty",
        Description: [
          "Old Tamil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "otz",
        Description: [
          "Ixtenco Otomi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oua",
        Description: [
          "Tagargrent"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oub",
        Description: [
          "Glio-Oubi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oue",
        Description: [
          "Oune"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oui",
        Description: [
          "Old Uighur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oum",
        Description: [
          "Ouma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oun",
        Description: [
          "\u01C3O\u01C3ung"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "vaj"
      },
      {
        Type: "language",
        Subtag: "ovd",
        Description: [
          "Elfdalian",
          "\xD6vdalian"
        ],
        Added: "2016-06-16"
      },
      {
        Type: "language",
        Subtag: "owi",
        Description: [
          "Owiniga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "owl",
        Description: [
          "Old Welsh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oyb",
        Description: [
          "Oy"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oyd",
        Description: [
          "Oyda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oym",
        Description: [
          "Wayampi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "oyy",
        Description: [
          "Oya'oya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ozm",
        Description: [
          "Koonzime"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "paa",
        Description: [
          "Papuan languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "pab",
        Description: [
          "Parec\xEDs"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pac",
        Description: [
          "Pacoh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pad",
        Description: [
          "Paumar\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pae",
        Description: [
          "Pagibete"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "paf",
        Description: [
          "Paranaw\xE1t"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pag",
        Description: [
          "Pangasinan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "pah",
        Description: [
          "Tenharim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pai",
        Description: [
          "Pe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pak",
        Description: [
          "Parakan\xE3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pal",
        Description: [
          "Pahlavi"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "pam",
        Description: [
          "Pampanga",
          "Kapampangan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "pao",
        Description: [
          "Northern Paiute"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pap",
        Description: [
          "Papiamento"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "paq",
        Description: [
          "Parya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "par",
        Description: [
          "Panamint",
          "Timbisha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pas",
        Description: [
          "Papasena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pat",
        Description: [
          "Papitalai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pau",
        Description: [
          "Palauan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "pav",
        Description: [
          "Paka\xE1snovos"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "paw",
        Description: [
          "Pawnee"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pax",
        Description: [
          "Pankarar\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pay",
        Description: [
          "Pech"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "paz",
        Description: [
          "Pankarar\xFA"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbb",
        Description: [
          "P\xE1ez"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbc",
        Description: [
          "Patamona"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbe",
        Description: [
          "Mezontla Popoloca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbf",
        Description: [
          "Coyotepec Popoloca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbg",
        Description: [
          "Paraujano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbh",
        Description: [
          "E'\xF1apa Woromaipu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbi",
        Description: [
          "Parkwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbl",
        Description: [
          "Mak (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbm",
        Description: [
          "Puebla Mazatec"
        ],
        Added: "2018-03-08",
        Comments: [
          "see also maa"
        ]
      },
      {
        Type: "language",
        Subtag: "pbn",
        Description: [
          "Kpasam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbo",
        Description: [
          "Papel"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbp",
        Description: [
          "Badyara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbr",
        Description: [
          "Pangwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbs",
        Description: [
          "Central Pame"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbt",
        Description: [
          "Southern Pashto"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ps"
      },
      {
        Type: "language",
        Subtag: "pbu",
        Description: [
          "Northern Pashto"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ps"
      },
      {
        Type: "language",
        Subtag: "pbv",
        Description: [
          "Pnar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pby",
        Description: [
          "Pyu (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pbz",
        Description: [
          "Palu"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "pca",
        Description: [
          "Santa In\xE9s Ahuatempan Popoloca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pcb",
        Description: [
          "Pear"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pcc",
        Description: [
          "Bouyei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pcd",
        Description: [
          "Picard"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pce",
        Description: [
          "Ruching Palaung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pcf",
        Description: [
          "Paliyan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pcg",
        Description: [
          "Paniya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pch",
        Description: [
          "Pardhan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pci",
        Description: [
          "Duruwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pcj",
        Description: [
          "Parenga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pck",
        Description: [
          "Paite Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pcl",
        Description: [
          "Pardhi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pcm",
        Description: [
          "Nigerian Pidgin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pcn",
        Description: [
          "Piti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pcp",
        Description: [
          "Pacahuara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pcr",
        Description: [
          "Panang"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        "Preferred-Value": "adx"
      },
      {
        Type: "language",
        Subtag: "pcw",
        Description: [
          "Pyapun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pda",
        Description: [
          "Anam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pdc",
        Description: [
          "Pennsylvania German"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pdi",
        Description: [
          "Pa Di"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pdn",
        Description: [
          "Podena",
          "Fedan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pdo",
        Description: [
          "Padoe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pdt",
        Description: [
          "Plautdietsch"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pdu",
        Description: [
          "Kayan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pea",
        Description: [
          "Peranakan Indonesian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "peb",
        Description: [
          "Eastern Pomo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ped",
        Description: [
          "Mala (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pee",
        Description: [
          "Taje"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pef",
        Description: [
          "Northeastern Pomo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "peg",
        Description: [
          "Pengo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "peh",
        Description: [
          "Bonan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pei",
        Description: [
          "Chichimeca-Jonaz"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pej",
        Description: [
          "Northern Pomo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pek",
        Description: [
          "Penchal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pel",
        Description: [
          "Pekal"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "pem",
        Description: [
          "Phende"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "peo",
        Description: [
          "Old Persian (ca. 600-400 B.C.)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "pep",
        Description: [
          "Kunja"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "peq",
        Description: [
          "Southern Pomo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pes",
        Description: [
          "Iranian Persian"
        ],
        Added: "2009-07-29",
        Macrolanguage: "fa"
      },
      {
        Type: "language",
        Subtag: "pev",
        Description: [
          "P\xE9mono"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pex",
        Description: [
          "Petats"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pey",
        Description: [
          "Petjo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pez",
        Description: [
          "Eastern Penan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pfa",
        Description: [
          "P\xE1\xE1fang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pfe",
        Description: [
          "Peere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pfl",
        Description: [
          "Pfaelzisch"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pga",
        Description: [
          "Sudanese Creole Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "pgd",
        Description: [
          "G\u0101ndh\u0101r\u012B"
        ],
        Added: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "pgg",
        Description: [
          "Pangwali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pgi",
        Description: [
          "Pagi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pgk",
        Description: [
          "Rerep"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pgl",
        Description: [
          "Primitive Irish"
        ],
        Added: "2011-08-16"
      },
      {
        Type: "language",
        Subtag: "pgn",
        Description: [
          "Paelignian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pgs",
        Description: [
          "Pangseng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pgu",
        Description: [
          "Pagu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pgy",
        Description: [
          "Pongyong"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "pgz",
        Description: [
          "Papua New Guinean Sign Language"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "pha",
        Description: [
          "Pa-Hng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "phd",
        Description: [
          "Phudagi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "phg",
        Description: [
          "Phuong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "phh",
        Description: [
          "Phukha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "phi",
        Description: [
          "Philippine languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "phk",
        Description: [
          "Phake"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "phl",
        Description: [
          "Phalura",
          "Palula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "phm",
        Description: [
          "Phimbi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "phn",
        Description: [
          "Phoenician"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "pho",
        Description: [
          "Phunoi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "phq",
        Description: [
          "Phana'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "phr",
        Description: [
          "Pahari-Potwari"
        ],
        Added: "2009-07-29",
        Macrolanguage: "lah"
      },
      {
        Type: "language",
        Subtag: "pht",
        Description: [
          "Phu Thai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "phu",
        Description: [
          "Phuan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "phv",
        Description: [
          "Pahlavani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "phw",
        Description: [
          "Phangduwali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pia",
        Description: [
          "Pima Bajo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pib",
        Description: [
          "Yine"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pic",
        Description: [
          "Pinji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pid",
        Description: [
          "Piaroa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pie",
        Description: [
          "Piro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pif",
        Description: [
          "Pingelapese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pig",
        Description: [
          "Pisabo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pih",
        Description: [
          "Pitcairn-Norfolk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pii",
        Description: [
          "Pini"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pij",
        Description: [
          "Pijao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pil",
        Description: [
          "Yom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pim",
        Description: [
          "Powhatan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pin",
        Description: [
          "Piame"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pio",
        Description: [
          "Piapoco"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pip",
        Description: [
          "Pero"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pir",
        Description: [
          "Piratapuyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pis",
        Description: [
          "Pijin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pit",
        Description: [
          "Pitta Pitta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "piu",
        Description: [
          "Pintupi-Luritja"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "piv",
        Description: [
          "Pileni",
          "Vaeakau-Taumako"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "piw",
        Description: [
          "Pimbwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pix",
        Description: [
          "Piu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "piy",
        Description: [
          "Piya-Kwonci"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "piz",
        Description: [
          "Pije"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pjt",
        Description: [
          "Pitjantjatjara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pka",
        Description: [
          "Ardham\u0101gadh\u012B Pr\u0101krit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pkb",
        Description: [
          "Pokomo",
          "Kipfokomo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pkc",
        Description: [
          "Paekche"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pkg",
        Description: [
          "Pak-Tong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pkh",
        Description: [
          "Pankhu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pkn",
        Description: [
          "Pakanha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pko",
        Description: [
          "P\xF6koot"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kln"
      },
      {
        Type: "language",
        Subtag: "pkp",
        Description: [
          "Pukapuka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pkr",
        Description: [
          "Attapady Kurumba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pks",
        Description: [
          "Pakistan Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pkt",
        Description: [
          "Maleng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pku",
        Description: [
          "Paku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pla",
        Description: [
          "Miani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "plb",
        Description: [
          "Polonombauk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "plc",
        Description: [
          "Central Palawano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pld",
        Description: [
          "Polari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ple",
        Description: [
          "Palu'e"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "plf",
        Description: [
          "Central Malayo-Polynesian languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "plg",
        Description: [
          "Pilag\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "plh",
        Description: [
          "Paulohi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "plj",
        Description: [
          "Polci"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "plk",
        Description: [
          "Kohistani Shina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pll",
        Description: [
          "Shwe Palaung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pln",
        Description: [
          "Palenquero"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "plo",
        Description: [
          "Oluta Popoluca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "plp",
        Description: [
          "Palpa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "plq",
        Description: [
          "Palaic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "plr",
        Description: [
          "Palaka Senoufo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pls",
        Description: [
          "San Marcos Tlacoyalco Popoloca",
          "San Marcos Tlalcoyalco Popoloca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "plt",
        Description: [
          "Plateau Malagasy"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mg"
      },
      {
        Type: "language",
        Subtag: "plu",
        Description: [
          "Palik\xFAr"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "plv",
        Description: [
          "Southwest Palawano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "plw",
        Description: [
          "Brooke's Point Palawano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ply",
        Description: [
          "Bolyu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "plz",
        Description: [
          "Paluan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pma",
        Description: [
          "Paama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmb",
        Description: [
          "Pambia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmc",
        Description: [
          "Palumata"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "huw"
      },
      {
        Type: "language",
        Subtag: "pmd",
        Description: [
          "Pallanganmiddang"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "pme",
        Description: [
          "Pwaamei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmf",
        Description: [
          "Pamona"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmh",
        Description: [
          "M\u0101h\u0101r\u0101\u1E63\u1E6Dri Pr\u0101krit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmi",
        Description: [
          "Northern Pumi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmj",
        Description: [
          "Southern Pumi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmk",
        Description: [
          "Pamlico"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pml",
        Description: [
          "Lingua Franca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmm",
        Description: [
          "Pomo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmn",
        Description: [
          "Pam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmo",
        Description: [
          "Pom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmq",
        Description: [
          "Northern Pame"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmr",
        Description: [
          "Paynamar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pms",
        Description: [
          "Piemontese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmt",
        Description: [
          "Tuamotuan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmu",
        Description: [
          "Mirpur Panjabi"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "phr",
        Macrolanguage: "lah"
      },
      {
        Type: "language",
        Subtag: "pmw",
        Description: [
          "Plains Miwok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmx",
        Description: [
          "Poumei Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmy",
        Description: [
          "Papuan Malay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pmz",
        Description: [
          "Southern Pame"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pna",
        Description: [
          "Punan Bah-Biau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pnb",
        Description: [
          "Western Panjabi"
        ],
        Added: "2009-07-29",
        Macrolanguage: "lah"
      },
      {
        Type: "language",
        Subtag: "pnc",
        Description: [
          "Pannei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pnd",
        Description: [
          "Mpinda"
        ],
        Added: "2019-04-16"
      },
      {
        Type: "language",
        Subtag: "pne",
        Description: [
          "Western Penan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "png",
        Description: [
          "Pongu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pnh",
        Description: [
          "Penrhyn"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pni",
        Description: [
          "Aoheng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pnj",
        Description: [
          "Pinjarup"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "pnk",
        Description: [
          "Paunaka"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "pnl",
        Description: [
          "Paleni"
        ],
        Added: "2013-09-10",
        Comments: [
          "see also wbf"
        ]
      },
      {
        Type: "language",
        Subtag: "pnm",
        Description: [
          "Punan Batu 1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pnn",
        Description: [
          "Pinai-Hagahai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pno",
        Description: [
          "Panobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pnp",
        Description: [
          "Pancana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pnq",
        Description: [
          "Pana (Burkina Faso)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pnr",
        Description: [
          "Panim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pns",
        Description: [
          "Ponosakan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pnt",
        Description: [
          "Pontic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pnu",
        Description: [
          "Jiongnai Bunu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pnv",
        Description: [
          "Pinigura"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pnw",
        Description: [
          "Banyjima",
          "Panytyima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pnx",
        Description: [
          "Phong-Kniang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pny",
        Description: [
          "Pinyin"
        ],
        Added: "2009-07-29",
        Comments: [
          "a Niger-Congo language spoken in Cameroon; not to be confused with the Pinyin romanization systems used for Chinese and Tibetan"
        ]
      },
      {
        Type: "language",
        Subtag: "pnz",
        Description: [
          "Pana (Central African Republic)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "poc",
        Description: [
          "Poqomam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pod",
        Description: [
          "Ponares"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "poe",
        Description: [
          "San Juan Atzingo Popoloca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pof",
        Description: [
          "Poke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pog",
        Description: [
          "Potigu\xE1ra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "poh",
        Description: [
          "Poqomchi'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "poi",
        Description: [
          "Highland Popoluca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pok",
        Description: [
          "Pokang\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pom",
        Description: [
          "Southeastern Pomo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pon",
        Description: [
          "Pohnpeian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "poo",
        Description: [
          "Central Pomo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pop",
        Description: [
          "Pwapw\xE2"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "poq",
        Description: [
          "Texistepec Popoluca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pos",
        Description: [
          "Sayula Popoluca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pot",
        Description: [
          "Potawatomi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pov",
        Description: [
          "Upper Guinea Crioulo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pow",
        Description: [
          "San Felipe Otlaltepec Popoloca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pox",
        Description: [
          "Polabian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "poy",
        Description: [
          "Pogolo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "poz",
        Description: [
          "Malayo-Polynesian languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "ppa",
        Description: [
          "Pao"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "bfy"
      },
      {
        Type: "language",
        Subtag: "ppe",
        Description: [
          "Papi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ppi",
        Description: [
          "Paipai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ppk",
        Description: [
          "Uma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ppl",
        Description: [
          "Pipil",
          "Nicarao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ppm",
        Description: [
          "Papuma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ppn",
        Description: [
          "Papapana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ppo",
        Description: [
          "Folopa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ppp",
        Description: [
          "Pelende"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ppq",
        Description: [
          "Pei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ppr",
        Description: [
          "Piru"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        "Preferred-Value": "lcq"
      },
      {
        Type: "language",
        Subtag: "pps",
        Description: [
          "San Lu\xEDs Temalacayuca Popoloca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ppt",
        Description: [
          "Pare"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ppu",
        Description: [
          "Papora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pqa",
        Description: [
          "Pa'a"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pqe",
        Description: [
          "Eastern Malayo-Polynesian languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "pqm",
        Description: [
          "Malecite-Passamaquoddy"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pqw",
        Description: [
          "Western Malayo-Polynesian languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "pra",
        Description: [
          "Prakrit languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "prb",
        Description: [
          "Lua'"
        ],
        Added: "2009-07-29",
        Deprecated: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "prc",
        Description: [
          "Parachi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "prd",
        Description: [
          "Parsi-Dari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pre",
        Description: [
          "Principense"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "prf",
        Description: [
          "Paranan"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "prg",
        Description: [
          "Prussian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "prh",
        Description: [
          "Porohanon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pri",
        Description: [
          "Paic\xEE"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "prk",
        Description: [
          "Parauk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "prl",
        Description: [
          "Peruvian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "prm",
        Description: [
          "Kibiri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "prn",
        Description: [
          "Prasuni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pro",
        Description: [
          "Old Proven\xE7al (to 1500)",
          "Old Occitan (to 1500)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "prp",
        Description: [
          "Parsi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "prq",
        Description: [
          "Ash\xE9ninka Peren\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "prr",
        Description: [
          "Puri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "prs",
        Description: [
          "Dari",
          "Afghan Persian"
        ],
        Added: "2009-07-29",
        Macrolanguage: "fa"
      },
      {
        Type: "language",
        Subtag: "prt",
        Description: [
          "Phai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pru",
        Description: [
          "Puragi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "prw",
        Description: [
          "Parawen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "prx",
        Description: [
          "Purik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pry",
        Description: [
          "Pray 3"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "prt"
      },
      {
        Type: "language",
        Subtag: "prz",
        Description: [
          "Providencia Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "psa",
        Description: [
          "Asue Awyu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "psc",
        Description: [
          "Persian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "psd",
        Description: [
          "Plains Indian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pse",
        Description: [
          "Central Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "psg",
        Description: [
          "Penang Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "psh",
        Description: [
          "Southwest Pashai",
          "Southwest Pashayi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "psi",
        Description: [
          "Southeast Pashai",
          "Southeast Pashayi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "psl",
        Description: [
          "Puerto Rican Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "psm",
        Description: [
          "Pauserna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "psn",
        Description: [
          "Panasuan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pso",
        Description: [
          "Polish Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "psp",
        Description: [
          "Philippine Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "psq",
        Description: [
          "Pasi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "psr",
        Description: [
          "Portuguese Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pss",
        Description: [
          "Kaulong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pst",
        Description: [
          "Central Pashto"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ps"
      },
      {
        Type: "language",
        Subtag: "psu",
        Description: [
          "Sauraseni Pr\u0101krit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "psw",
        Description: [
          "Port Sandwich"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "psy",
        Description: [
          "Piscataway"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pta",
        Description: [
          "Pai Tavytera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pth",
        Description: [
          "Patax\xF3 H\xE3-Ha-H\xE3e"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pti",
        Description: [
          "Pindiini",
          "Wangkatha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ptn",
        Description: [
          "Patani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pto",
        Description: [
          "Zo'\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ptp",
        Description: [
          "Patep"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ptq",
        Description: [
          "Pattapu"
        ],
        Added: "2014-04-06"
      },
      {
        Type: "language",
        Subtag: "ptr",
        Description: [
          "Piamatsina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ptt",
        Description: [
          "Enrekang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ptu",
        Description: [
          "Bambam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ptv",
        Description: [
          "Port Vato"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ptw",
        Description: [
          "Pentlatch"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pty",
        Description: [
          "Pathiya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pua",
        Description: [
          "Western Highland Purepecha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pub",
        Description: [
          "Purum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "puc",
        Description: [
          "Punan Merap"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pud",
        Description: [
          "Punan Aput"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pue",
        Description: [
          "Puelche"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "puf",
        Description: [
          "Punan Merah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pug",
        Description: [
          "Phuie"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pui",
        Description: [
          "Puinave"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "puj",
        Description: [
          "Punan Tubu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "puk",
        Description: [
          "Pu Ko"
        ],
        Added: "2009-07-29",
        Deprecated: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "pum",
        Description: [
          "Puma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "puo",
        Description: [
          "Puoc"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pup",
        Description: [
          "Pulabu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "puq",
        Description: [
          "Puquina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pur",
        Description: [
          "Purubor\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "put",
        Description: [
          "Putoh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "puu",
        Description: [
          "Punu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "puw",
        Description: [
          "Puluwatese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pux",
        Description: [
          "Puare"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "puy",
        Description: [
          "Purisime\xF1o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "puz",
        Description: [
          "Purum Naga"
        ],
        Added: "2009-07-29",
        Deprecated: "2014-02-28",
        "Preferred-Value": "pub"
      },
      {
        Type: "language",
        Subtag: "pwa",
        Description: [
          "Pawaia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pwb",
        Description: [
          "Panawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pwg",
        Description: [
          "Gapapaiwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pwi",
        Description: [
          "Patwin"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "pwm",
        Description: [
          "Molbog"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pwn",
        Description: [
          "Paiwan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pwo",
        Description: [
          "Pwo Western Karen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pwr",
        Description: [
          "Powari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pww",
        Description: [
          "Pwo Northern Karen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pxm",
        Description: [
          "Quetzaltepec Mixe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pye",
        Description: [
          "Pye Krumen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pym",
        Description: [
          "Fyam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pyn",
        Description: [
          "Poyan\xE1wa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pys",
        Description: [
          "Paraguayan Sign Language",
          "Lengua de Se\xF1as del Paraguay"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "pyu",
        Description: [
          "Puyuma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pyx",
        Description: [
          "Pyu (Myanmar)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pyy",
        Description: [
          "Pyen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "pzn",
        Description: [
          "Para Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "qaa..qtz",
        Description: [
          "Private use"
        ],
        Added: "2005-10-16",
        Scope: "private-use"
      },
      {
        Type: "language",
        Subtag: "qua",
        Description: [
          "Quapaw"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "qub",
        Description: [
          "Huallaga Hu\xE1nuco Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "quc",
        Description: [
          "K'iche'",
          "Quich\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "qud",
        Description: [
          "Calder\xF3n Highland Quichua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "quf",
        Description: [
          "Lambayeque Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qug",
        Description: [
          "Chimborazo Highland Quichua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "quh",
        Description: [
          "South Bolivian Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qui",
        Description: [
          "Quileute"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "quk",
        Description: [
          "Chachapoyas Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qul",
        Description: [
          "North Bolivian Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qum",
        Description: [
          "Sipacapense"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "qun",
        Description: [
          "Quinault"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "qup",
        Description: [
          "Southern Pastaza Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "quq",
        Description: [
          "Quinqui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "qur",
        Description: [
          "Yanahuanca Pasco Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qus",
        Description: [
          "Santiago del Estero Quichua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "quv",
        Description: [
          "Sacapulteco"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "quw",
        Description: [
          "Tena Lowland Quichua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qux",
        Description: [
          "Yauyos Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "quy",
        Description: [
          "Ayacucho Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "quz",
        Description: [
          "Cusco Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qva",
        Description: [
          "Ambo-Pasco Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qvc",
        Description: [
          "Cajamarca Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qve",
        Description: [
          "Eastern Apur\xEDmac Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qvh",
        Description: [
          "Huamal\xEDes-Dos de Mayo Hu\xE1nuco Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qvi",
        Description: [
          "Imbabura Highland Quichua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qvj",
        Description: [
          "Loja Highland Quichua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qvl",
        Description: [
          "Cajatambo North Lima Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qvm",
        Description: [
          "Margos-Yarowilca-Lauricocha Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qvn",
        Description: [
          "North Jun\xEDn Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qvo",
        Description: [
          "Napo Lowland Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qvp",
        Description: [
          "Pacaraos Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qvs",
        Description: [
          "San Mart\xEDn Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qvw",
        Description: [
          "Huaylla Wanca Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qvy",
        Description: [
          "Queyu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "qvz",
        Description: [
          "Northern Pastaza Quichua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qwa",
        Description: [
          "Corongo Ancash Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qwc",
        Description: [
          "Classical Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qwe",
        Description: [
          "Quechuan (family)"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "qwh",
        Description: [
          "Huaylas Ancash Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qwm",
        Description: [
          "Kuman (Russia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "qws",
        Description: [
          "Sihuas Ancash Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qwt",
        Description: [
          "Kwalhioqua-Tlatskanai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "qxa",
        Description: [
          "Chiqui\xE1n Ancash Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qxc",
        Description: [
          "Chincha Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qxh",
        Description: [
          "Panao Hu\xE1nuco Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qxl",
        Description: [
          "Salasaca Highland Quichua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qxn",
        Description: [
          "Northern Conchucos Ancash Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qxo",
        Description: [
          "Southern Conchucos Ancash Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qxp",
        Description: [
          "Puno Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qxq",
        Description: [
          "Qashqa'i"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "qxr",
        Description: [
          "Ca\xF1ar Highland Quichua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qxs",
        Description: [
          "Southern Qiang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "qxt",
        Description: [
          "Santa Ana de Tusi Pasco Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qxu",
        Description: [
          "Arequipa-La Uni\xF3n Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qxw",
        Description: [
          "Jauja Wanca Quechua"
        ],
        Added: "2009-07-29",
        Macrolanguage: "qu"
      },
      {
        Type: "language",
        Subtag: "qya",
        Description: [
          "Quenya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "qyp",
        Description: [
          "Quiripi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "raa",
        Description: [
          "Dungmali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rab",
        Description: [
          "Camling"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rac",
        Description: [
          "Rasawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rad",
        Description: [
          "Rade"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "raf",
        Description: [
          "Western Meohang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rag",
        Description: [
          "Logooli",
          "Lulogooli"
        ],
        Added: "2009-07-29",
        Macrolanguage: "luy"
      },
      {
        Type: "language",
        Subtag: "rah",
        Description: [
          "Rabha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rai",
        Description: [
          "Ramoaaina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "raj",
        Description: [
          "Rajasthani"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "rak",
        Description: [
          "Tulu-Bohuai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ral",
        Description: [
          "Ralte"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ram",
        Description: [
          "Canela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ran",
        Description: [
          "Riantana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rao",
        Description: [
          "Rao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rap",
        Description: [
          "Rapanui"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "raq",
        Description: [
          "Saam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rar",
        Description: [
          "Rarotongan",
          "Cook Islands Maori"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ras",
        Description: [
          "Tegali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rat",
        Description: [
          "Razajerdi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rau",
        Description: [
          "Raute"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rav",
        Description: [
          "Sampang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "raw",
        Description: [
          "Rawang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rax",
        Description: [
          "Rang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ray",
        Description: [
          "Rapa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "raz",
        Description: [
          "Rahambuu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rbb",
        Description: [
          "Rumai Palaung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rbk",
        Description: [
          "Northern Bontok"
        ],
        Added: "2010-03-11",
        Macrolanguage: "bnc"
      },
      {
        Type: "language",
        Subtag: "rbl",
        Description: [
          "Miraya Bikol"
        ],
        Added: "2010-03-11",
        Macrolanguage: "bik"
      },
      {
        Type: "language",
        Subtag: "rbp",
        Description: [
          "Barababaraba"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "rcf",
        Description: [
          "R\xE9union Creole French"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rdb",
        Description: [
          "Rudbari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rea",
        Description: [
          "Rerau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "reb",
        Description: [
          "Rembong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ree",
        Description: [
          "Rejang Kayan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "reg",
        Description: [
          "Kara (Tanzania)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rei",
        Description: [
          "Reli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rej",
        Description: [
          "Rejang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rel",
        Description: [
          "Rendille"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rem",
        Description: [
          "Remo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ren",
        Description: [
          "Rengao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rer",
        Description: [
          "Rer Bare"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "res",
        Description: [
          "Reshe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ret",
        Description: [
          "Retta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rey",
        Description: [
          "Reyesano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rga",
        Description: [
          "Roria"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rge",
        Description: [
          "Romano-Greek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rgk",
        Description: [
          "Rangkas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rgn",
        Description: [
          "Romagnol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rgr",
        Description: [
          "Res\xEDgaro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rgs",
        Description: [
          "Southern Roglai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rgu",
        Description: [
          "Ringgou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rhg",
        Description: [
          "Rohingya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rhp",
        Description: [
          "Yahang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ria",
        Description: [
          "Riang (India)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rie",
        Description: [
          "Rien"
        ],
        Added: "2009-07-29",
        Deprecated: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "rif",
        Description: [
          "Tarifit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ril",
        Description: [
          "Riang Lang",
          "Riang (Myanmar)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rim",
        Description: [
          "Nyaturu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rin",
        Description: [
          "Nungu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rir",
        Description: [
          "Ribun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rit",
        Description: [
          "Ritharrngu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "riu",
        Description: [
          "Riung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rjg",
        Description: [
          "Rajong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rji",
        Description: [
          "Raji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rjs",
        Description: [
          "Rajbanshi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rka",
        Description: [
          "Kraol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rkb",
        Description: [
          "Rikbaktsa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rkh",
        Description: [
          "Rakahanga-Manihiki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rki",
        Description: [
          "Rakhine"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rkm",
        Description: [
          "Marka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rkt",
        Description: [
          "Rangpuri",
          "Kamta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rkw",
        Description: [
          "Arakwal"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "rma",
        Description: [
          "Rama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rmb",
        Description: [
          "Rembarrnga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rmc",
        Description: [
          "Carpathian Romani"
        ],
        Added: "2009-07-29",
        Macrolanguage: "rom"
      },
      {
        Type: "language",
        Subtag: "rmd",
        Description: [
          "Traveller Danish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rme",
        Description: [
          "Angloromani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rmf",
        Description: [
          "Kalo Finnish Romani"
        ],
        Added: "2009-07-29",
        Macrolanguage: "rom"
      },
      {
        Type: "language",
        Subtag: "rmg",
        Description: [
          "Traveller Norwegian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rmh",
        Description: [
          "Murkim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rmi",
        Description: [
          "Lomavren"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rmk",
        Description: [
          "Romkun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rml",
        Description: [
          "Baltic Romani"
        ],
        Added: "2009-07-29",
        Macrolanguage: "rom"
      },
      {
        Type: "language",
        Subtag: "rmm",
        Description: [
          "Roma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rmn",
        Description: [
          "Balkan Romani"
        ],
        Added: "2009-07-29",
        Macrolanguage: "rom"
      },
      {
        Type: "language",
        Subtag: "rmo",
        Description: [
          "Sinte Romani"
        ],
        Added: "2009-07-29",
        Macrolanguage: "rom"
      },
      {
        Type: "language",
        Subtag: "rmp",
        Description: [
          "Rempi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rmq",
        Description: [
          "Cal\xF3"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "rmr",
        Description: [
          "Cal\xF3"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        Comments: [
          "see emx, rmq"
        ]
      },
      {
        Type: "language",
        Subtag: "rms",
        Description: [
          "Romanian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rmt",
        Description: [
          "Domari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rmu",
        Description: [
          "Tavringer Romani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rmv",
        Description: [
          "Romanova"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rmw",
        Description: [
          "Welsh Romani"
        ],
        Added: "2009-07-29",
        Macrolanguage: "rom"
      },
      {
        Type: "language",
        Subtag: "rmx",
        Description: [
          "Romam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rmy",
        Description: [
          "Vlax Romani"
        ],
        Added: "2009-07-29",
        Macrolanguage: "rom"
      },
      {
        Type: "language",
        Subtag: "rmz",
        Description: [
          "Marma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rna",
        Description: [
          "Runa"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "rnd",
        Description: [
          "Ruund"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rng",
        Description: [
          "Ronga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rnl",
        Description: [
          "Ranglong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rnn",
        Description: [
          "Roon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rnp",
        Description: [
          "Rongpo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rnr",
        Description: [
          "Nari Nari"
        ],
        Added: "2012-08-20"
      },
      {
        Type: "language",
        Subtag: "rnw",
        Description: [
          "Rungwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "roa",
        Description: [
          "Romance languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "rob",
        Description: [
          "Tae'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "roc",
        Description: [
          "Cacgia Roglai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rod",
        Description: [
          "Rogo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "roe",
        Description: [
          "Ronji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rof",
        Description: [
          "Rombo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rog",
        Description: [
          "Northern Roglai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rol",
        Description: [
          "Romblomanon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rom",
        Description: [
          "Romany"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "roo",
        Description: [
          "Rotokas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rop",
        Description: [
          "Kriol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ror",
        Description: [
          "Rongga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rou",
        Description: [
          "Runga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "row",
        Description: [
          "Dela-Oenale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rpn",
        Description: [
          "Repanbitip"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rpt",
        Description: [
          "Rapting"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rri",
        Description: [
          "Ririo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rro",
        Description: [
          "Waima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rrt",
        Description: [
          "Arritinngithigh"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "rsb",
        Description: [
          "Romano-Serbian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rsi",
        Description: [
          "Rennellese Sign Language"
        ],
        Added: "2009-07-29",
        Deprecated: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "rsl",
        Description: [
          "Russian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rsm",
        Description: [
          "Miriwoong Sign Language"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "rtc",
        Description: [
          "Rungtu Chin"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "rth",
        Description: [
          "Ratahan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rtm",
        Description: [
          "Rotuman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rts",
        Description: [
          "Yurats"
        ],
        Added: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "rtw",
        Description: [
          "Rathawi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rub",
        Description: [
          "Gungu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ruc",
        Description: [
          "Ruuli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rue",
        Description: [
          "Rusyn"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ruf",
        Description: [
          "Luguru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rug",
        Description: [
          "Roviana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ruh",
        Description: [
          "Ruga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rui",
        Description: [
          "Rufiji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ruk",
        Description: [
          "Che"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ruo",
        Description: [
          "Istro Romanian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rup",
        Description: [
          "Macedo-Romanian",
          "Aromanian",
          "Arumanian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ruq",
        Description: [
          "Megleno Romanian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rut",
        Description: [
          "Rutul"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ruu",
        Description: [
          "Lanas Lobu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ruy",
        Description: [
          "Mala (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ruz",
        Description: [
          "Ruma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rwa",
        Description: [
          "Rawo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rwk",
        Description: [
          "Rwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rwm",
        Description: [
          "Amba (Uganda)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rwo",
        Description: [
          "Rawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rwr",
        Description: [
          "Marwari (India)"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mwr"
      },
      {
        Type: "language",
        Subtag: "rxd",
        Description: [
          "Ngardi"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "rxw",
        Description: [
          "Karuwali",
          "Garuwali"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "ryn",
        Description: [
          "Northern Amami-Oshima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rys",
        Description: [
          "Yaeyama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ryu",
        Description: [
          "Central Okinawan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "rzh",
        Description: [
          "R\u0101zi\u1E25\u012B"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "saa",
        Description: [
          "Saba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sab",
        Description: [
          "Buglere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sac",
        Description: [
          "Meskwaki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sad",
        Description: [
          "Sandawe"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sae",
        Description: [
          "Saban\xEA"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "saf",
        Description: [
          "Safaliba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sah",
        Description: [
          "Yakut"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sai",
        Description: [
          "South American Indian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "saj",
        Description: [
          "Sahu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sak",
        Description: [
          "Sake"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sal",
        Description: [
          "Salishan languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "sam",
        Description: [
          "Samaritan Aramaic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sao",
        Description: [
          "Sause"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sap",
        Description: [
          "Sanapan\xE1"
        ],
        Added: "2009-07-29",
        Deprecated: "2014-02-28",
        Comments: [
          "see aqt, spn"
        ]
      },
      {
        Type: "language",
        Subtag: "saq",
        Description: [
          "Samburu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sar",
        Description: [
          "Saraveca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sas",
        Description: [
          "Sasak"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sat",
        Description: [
          "Santali"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sau",
        Description: [
          "Saleman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sav",
        Description: [
          "Saafi-Saafi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "saw",
        Description: [
          "Sawi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sax",
        Description: [
          "Sa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "say",
        Description: [
          "Saya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "saz",
        Description: [
          "Saurashtra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sba",
        Description: [
          "Ngambay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbb",
        Description: [
          "Simbo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbc",
        Description: [
          "Kele (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbd",
        Description: [
          "Southern Samo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbe",
        Description: [
          "Saliba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbf",
        Description: [
          "Chabu",
          "Shabo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbg",
        Description: [
          "Seget"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbh",
        Description: [
          "Sori-Harengan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbi",
        Description: [
          "Seti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbj",
        Description: [
          "Surbakhal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbk",
        Description: [
          "Safwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbl",
        Description: [
          "Botolan Sambal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbm",
        Description: [
          "Sagala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbn",
        Description: [
          "Sindhi Bhil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbo",
        Description: [
          "Sab\xFCm"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbp",
        Description: [
          "Sangu (Tanzania)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbq",
        Description: [
          "Sileibi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbr",
        Description: [
          "Sembakung Murut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbs",
        Description: [
          "Subiya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbt",
        Description: [
          "Kimki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbu",
        Description: [
          "Stod Bhoti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbv",
        Description: [
          "Sabine"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbw",
        Description: [
          "Simba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbx",
        Description: [
          "Seberuang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sby",
        Description: [
          "Soli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sbz",
        Description: [
          "Sara Kaba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sca",
        Description: [
          "Sansu"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        "Preferred-Value": "hle"
      },
      {
        Type: "language",
        Subtag: "scb",
        Description: [
          "Chut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sce",
        Description: [
          "Dongxiang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "scf",
        Description: [
          "San Miguel Creole French"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "scg",
        Description: [
          "Sanggau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sch",
        Description: [
          "Sakachep"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sci",
        Description: [
          "Sri Lankan Creole Malay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sck",
        Description: [
          "Sadri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "scl",
        Description: [
          "Shina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "scn",
        Description: [
          "Sicilian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sco",
        Description: [
          "Scots"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "scp",
        Description: [
          "Hyolmo",
          "Helambu Sherpa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "scq",
        Description: [
          "Sa'och"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "scs",
        Description: [
          "North Slavey"
        ],
        Added: "2009-07-29",
        Macrolanguage: "den"
      },
      {
        Type: "language",
        Subtag: "sct",
        Description: [
          "Southern Katang"
        ],
        Added: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "scu",
        Description: [
          "Shumcho"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "scv",
        Description: [
          "Sheni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "scw",
        Description: [
          "Sha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "scx",
        Description: [
          "Sicel"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sda",
        Description: [
          "Toraja-Sa'dan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdb",
        Description: [
          "Shabak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdc",
        Description: [
          "Sassarese Sardinian"
        ],
        Added: "2009-07-29",
        Macrolanguage: "sc"
      },
      {
        Type: "language",
        Subtag: "sde",
        Description: [
          "Surubu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdf",
        Description: [
          "Sarli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdg",
        Description: [
          "Savi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdh",
        Description: [
          "Southern Kurdish"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ku"
      },
      {
        Type: "language",
        Subtag: "sdj",
        Description: [
          "Suundi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdk",
        Description: [
          "Sos Kundi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdl",
        Description: [
          "Saudi Arabian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdm",
        Description: [
          "Semandang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdn",
        Description: [
          "Gallurese Sardinian"
        ],
        Added: "2009-07-29",
        Macrolanguage: "sc"
      },
      {
        Type: "language",
        Subtag: "sdo",
        Description: [
          "Bukar-Sadung Bidayuh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdp",
        Description: [
          "Sherdukpen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdr",
        Description: [
          "Oraon Sadri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sds",
        Description: [
          "Sened"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdt",
        Description: [
          "Shuadit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdu",
        Description: [
          "Sarudu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdv",
        Description: [
          "Eastern Sudanic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "sdx",
        Description: [
          "Sibu Melanau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sdz",
        Description: [
          "Sallands"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sea",
        Description: [
          "Semai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "seb",
        Description: [
          "Shempire Senoufo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sec",
        Description: [
          "Sechelt"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sed",
        Description: [
          "Sedang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "see",
        Description: [
          "Seneca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sef",
        Description: [
          "Cebaara Senoufo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "seg",
        Description: [
          "Segeju"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "seh",
        Description: [
          "Sena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sei",
        Description: [
          "Seri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sej",
        Description: [
          "Sene"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sek",
        Description: [
          "Sekani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sel",
        Description: [
          "Selkup"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sem",
        Description: [
          "Semitic languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "sen",
        Description: [
          "Nanerig\xE9 S\xE9noufo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "seo",
        Description: [
          "Suarmin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sep",
        Description: [
          "S\xECc\xECt\xE9 S\xE9noufo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "seq",
        Description: [
          "Senara S\xE9noufo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ser",
        Description: [
          "Serrano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ses",
        Description: [
          "Koyraboro Senni Songhai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "set",
        Description: [
          "Sentani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "seu",
        Description: [
          "Serui-Laut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sev",
        Description: [
          "Nyarafolo Senoufo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sew",
        Description: [
          "Sewa Bay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sey",
        Description: [
          "Secoya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sez",
        Description: [
          "Senthang Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sfb",
        Description: [
          "Langue des signes de Belgique Francophone",
          "French Belgian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sfe",
        Description: [
          "Eastern Subanen"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "sfm",
        Description: [
          "Small Flowery Miao"
        ],
        Added: "2009-07-29",
        Macrolanguage: "hmn"
      },
      {
        Type: "language",
        Subtag: "sfs",
        Description: [
          "South African Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sfw",
        Description: [
          "Sehwi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sga",
        Description: [
          "Old Irish (to 900)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sgb",
        Description: [
          "Mag-antsi Ayta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sgc",
        Description: [
          "Kipsigis"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kln"
      },
      {
        Type: "language",
        Subtag: "sgd",
        Description: [
          "Surigaonon"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "sge",
        Description: [
          "Segai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sgg",
        Description: [
          "Swiss-German Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sgh",
        Description: [
          "Shughni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sgi",
        Description: [
          "Suga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sgj",
        Description: [
          "Surgujia"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "sgk",
        Description: [
          "Sangkong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sgl",
        Description: [
          "Sanglechi-Ishkashimi"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        Comments: [
          "see isk, sgy"
        ]
      },
      {
        Type: "language",
        Subtag: "sgm",
        Description: [
          "Singa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sgn",
        Description: [
          "Sign languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "sgo",
        Description: [
          "Songa"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "sgp",
        Description: [
          "Singpho"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sgr",
        Description: [
          "Sangisari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sgs",
        Description: [
          "Samogitian"
        ],
        Added: "2010-07-26"
      },
      {
        Type: "language",
        Subtag: "sgt",
        Description: [
          "Brokpake"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sgu",
        Description: [
          "Salas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sgw",
        Description: [
          "Sebat Bet Gurage"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sgx",
        Description: [
          "Sierra Leone Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sgy",
        Description: [
          "Sanglechi"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "sgz",
        Description: [
          "Sursurunga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sha",
        Description: [
          "Shall-Zwall"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shb",
        Description: [
          "Ninam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shc",
        Description: [
          "Sonde"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shd",
        Description: [
          "Kundal Shahi"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "she",
        Description: [
          "Sheko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shg",
        Description: [
          "Shua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shh",
        Description: [
          "Shoshoni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shi",
        Description: [
          "Tachelhit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shj",
        Description: [
          "Shatt"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shk",
        Description: [
          "Shilluk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shl",
        Description: [
          "Shendu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shm",
        Description: [
          "Shahrudi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shn",
        Description: [
          "Shan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sho",
        Description: [
          "Shanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shp",
        Description: [
          "Shipibo-Conibo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shq",
        Description: [
          "Sala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shr",
        Description: [
          "Shi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shs",
        Description: [
          "Shuswap"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sht",
        Description: [
          "Shasta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shu",
        Description: [
          "Chadian Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "shv",
        Description: [
          "Shehri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shw",
        Description: [
          "Shwai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shx",
        Description: [
          "She"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shy",
        Description: [
          "Tachawit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "shz",
        Description: [
          "Syenara Senoufo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sia",
        Description: [
          "Akkala Sami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sib",
        Description: [
          "Sebop"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sid",
        Description: [
          "Sidamo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sie",
        Description: [
          "Simaa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sif",
        Description: [
          "Siamou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sig",
        Description: [
          "Paasaal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sih",
        Description: [
          "Zire",
          "S\xEEsh\xEB\xEB"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sii",
        Description: [
          "Shom Peng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sij",
        Description: [
          "Numbami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sik",
        Description: [
          "Sikiana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sil",
        Description: [
          "Tumulung Sisaala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sim",
        Description: [
          "Mende (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sio",
        Description: [
          "Siouan languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "sip",
        Description: [
          "Sikkimese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "siq",
        Description: [
          "Sonia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sir",
        Description: [
          "Siri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sis",
        Description: [
          "Siuslaw"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sit",
        Description: [
          "Sino-Tibetan languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "siu",
        Description: [
          "Sinagen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "siv",
        Description: [
          "Sumariup"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "siw",
        Description: [
          "Siwai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "six",
        Description: [
          "Sumau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "siy",
        Description: [
          "Sivandi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "siz",
        Description: [
          "Siwi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sja",
        Description: [
          "Epena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sjb",
        Description: [
          "Sajau Basap"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sjd",
        Description: [
          "Kildin Sami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sje",
        Description: [
          "Pite Sami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sjg",
        Description: [
          "Assangori"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sjk",
        Description: [
          "Kemi Sami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sjl",
        Description: [
          "Sajalong",
          "Miji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sjm",
        Description: [
          "Mapun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sjn",
        Description: [
          "Sindarin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sjo",
        Description: [
          "Xibe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sjp",
        Description: [
          "Surjapuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sjr",
        Description: [
          "Siar-Lak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sjs",
        Description: [
          "Senhaja De Srair"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sjt",
        Description: [
          "Ter Sami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sju",
        Description: [
          "Ume Sami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sjw",
        Description: [
          "Shawnee"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ska",
        Description: [
          "Skagit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skb",
        Description: [
          "Saek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skc",
        Description: [
          "Ma Manda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skd",
        Description: [
          "Southern Sierra Miwok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ske",
        Description: [
          "Seke (Vanuatu)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skf",
        Description: [
          "Sakirabi\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skg",
        Description: [
          "Sakalava Malagasy"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mg"
      },
      {
        Type: "language",
        Subtag: "skh",
        Description: [
          "Sikule"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ski",
        Description: [
          "Sika"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skj",
        Description: [
          "Seke (Nepal)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skk",
        Description: [
          "Sok"
        ],
        Added: "2009-07-29",
        Deprecated: "2017-02-23",
        "Preferred-Value": "oyb"
      },
      {
        Type: "language",
        Subtag: "skm",
        Description: [
          "Kutong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skn",
        Description: [
          "Kolibugan Subanon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sko",
        Description: [
          "Seko Tengah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skp",
        Description: [
          "Sekapan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skq",
        Description: [
          "Sininkere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skr",
        Description: [
          "Saraiki",
          "Seraiki"
        ],
        Added: "2009-07-29",
        Macrolanguage: "lah"
      },
      {
        Type: "language",
        Subtag: "sks",
        Description: [
          "Maia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skt",
        Description: [
          "Sakata"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sku",
        Description: [
          "Sakao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skv",
        Description: [
          "Skou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skw",
        Description: [
          "Skepi Creole Dutch"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skx",
        Description: [
          "Seko Padang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sky",
        Description: [
          "Sikaiana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "skz",
        Description: [
          "Sekar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sla",
        Description: [
          "Slavic languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "slc",
        Description: [
          "S\xE1liba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sld",
        Description: [
          "Sissala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sle",
        Description: [
          "Sholaga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "slf",
        Description: [
          "Swiss-Italian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "slg",
        Description: [
          "Selungai Murut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "slh",
        Description: [
          "Southern Puget Sound Salish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sli",
        Description: [
          "Lower Silesian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "slj",
        Description: [
          "Salum\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sll",
        Description: [
          "Salt-Yui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "slm",
        Description: [
          "Pangutaran Sama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sln",
        Description: [
          "Salinan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "slp",
        Description: [
          "Lamaholot"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "slq",
        Description: [
          "Salchuq"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "slr",
        Description: [
          "Salar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sls",
        Description: [
          "Singapore Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "slt",
        Description: [
          "Sila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "slu",
        Description: [
          "Selaru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "slw",
        Description: [
          "Sialum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "slx",
        Description: [
          "Salampasu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sly",
        Description: [
          "Selayar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "slz",
        Description: [
          "Ma'ya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sma",
        Description: [
          "Southern Sami"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "smb",
        Description: [
          "Simbari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smc",
        Description: [
          "Som"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smd",
        Description: [
          "Sama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smf",
        Description: [
          "Auwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smg",
        Description: [
          "Simbali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smh",
        Description: [
          "Samei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smi",
        Description: [
          "Sami languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "smj",
        Description: [
          "Lule Sami"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "smk",
        Description: [
          "Bolinao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sml",
        Description: [
          "Central Sama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smm",
        Description: [
          "Musasa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smn",
        Description: [
          "Inari Sami"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "smp",
        Description: [
          "Samaritan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smq",
        Description: [
          "Samo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smr",
        Description: [
          "Simeulue"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sms",
        Description: [
          "Skolt Sami"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "smt",
        Description: [
          "Simte"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smu",
        Description: [
          "Somray"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smv",
        Description: [
          "Samvedi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smw",
        Description: [
          "Sumbawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smx",
        Description: [
          "Samba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smy",
        Description: [
          "Semnani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "smz",
        Description: [
          "Simeku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snb",
        Description: [
          "Sebuyau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snc",
        Description: [
          "Sinaugoro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sne",
        Description: [
          "Bau Bidayuh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snf",
        Description: [
          "Noon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sng",
        Description: [
          "Sanga (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snh",
        Description: [
          "Shinabo"
        ],
        Added: "2009-07-29",
        Deprecated: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "sni",
        Description: [
          "Sensi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snj",
        Description: [
          "Riverain Sango"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snk",
        Description: [
          "Soninke"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "snl",
        Description: [
          "Sangil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snm",
        Description: [
          "Southern Ma'di"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snn",
        Description: [
          "Siona"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sno",
        Description: [
          "Snohomish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snp",
        Description: [
          "Siane"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snq",
        Description: [
          "Sangu (Gabon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snr",
        Description: [
          "Sihan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sns",
        Description: [
          "South West Bay",
          "Nahavaq"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snu",
        Description: [
          "Senggi",
          "Viid"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snv",
        Description: [
          "Sa'ban"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snw",
        Description: [
          "Selee"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snx",
        Description: [
          "Sam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sny",
        Description: [
          "Saniyo-Hiyewe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "snz",
        Description: [
          "Kou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "soa",
        Description: [
          "Thai Song"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sob",
        Description: [
          "Sobei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "soc",
        Description: [
          "So (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sod",
        Description: [
          "Songoora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "soe",
        Description: [
          "Songomeno"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sog",
        Description: [
          "Sogdian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "soh",
        Description: [
          "Aka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "soi",
        Description: [
          "Sonha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "soj",
        Description: [
          "Soi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sok",
        Description: [
          "Sokoro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sol",
        Description: [
          "Solos"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "son",
        Description: [
          "Songhai languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "soo",
        Description: [
          "Songo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sop",
        Description: [
          "Songe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "soq",
        Description: [
          "Kanasi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sor",
        Description: [
          "Somrai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sos",
        Description: [
          "Seeku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sou",
        Description: [
          "Southern Thai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sov",
        Description: [
          "Sonsorol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sow",
        Description: [
          "Sowanda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sox",
        Description: [
          "Swo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "soy",
        Description: [
          "Miyobe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "soz",
        Description: [
          "Temi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spb",
        Description: [
          "Sepa (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spc",
        Description: [
          "Sap\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spd",
        Description: [
          "Saep"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spe",
        Description: [
          "Sepa (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spg",
        Description: [
          "Sian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spi",
        Description: [
          "Saponi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spk",
        Description: [
          "Sengo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spl",
        Description: [
          "Selepet"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spm",
        Description: [
          "Akukem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spn",
        Description: [
          "Sanapan\xE1"
        ],
        Added: "2014-02-28"
      },
      {
        Type: "language",
        Subtag: "spo",
        Description: [
          "Spokane"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spp",
        Description: [
          "Supyire Senoufo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spq",
        Description: [
          "Loreto-Ucayali Spanish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spr",
        Description: [
          "Saparua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sps",
        Description: [
          "Saposa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spt",
        Description: [
          "Spiti Bhoti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spu",
        Description: [
          "Sapuan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spv",
        Description: [
          "Sambalpuri",
          "Kosli"
        ],
        Added: "2012-08-12",
        Macrolanguage: "or"
      },
      {
        Type: "language",
        Subtag: "spx",
        Description: [
          "South Picene"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "spy",
        Description: [
          "Sabaot"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kln"
      },
      {
        Type: "language",
        Subtag: "sqa",
        Description: [
          "Shama-Sambuga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sqh",
        Description: [
          "Shau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sqj",
        Description: [
          "Albanian languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "sqk",
        Description: [
          "Albanian Sign Language"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "sqm",
        Description: [
          "Suma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sqn",
        Description: [
          "Susquehannock"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sqo",
        Description: [
          "Sorkhei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sqq",
        Description: [
          "Sou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sqr",
        Description: [
          "Siculo Arabic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sqs",
        Description: [
          "Sri Lankan Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sqt",
        Description: [
          "Soqotri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "squ",
        Description: [
          "Squamish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sra",
        Description: [
          "Saruga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "srb",
        Description: [
          "Sora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "src",
        Description: [
          "Logudorese Sardinian"
        ],
        Added: "2009-07-29",
        Macrolanguage: "sc"
      },
      {
        Type: "language",
        Subtag: "sre",
        Description: [
          "Sara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "srf",
        Description: [
          "Nafi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "srg",
        Description: [
          "Sulod"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "srh",
        Description: [
          "Sarikoli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sri",
        Description: [
          "Siriano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "srk",
        Description: [
          "Serudung Murut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "srl",
        Description: [
          "Isirawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "srm",
        Description: [
          "Saramaccan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "srn",
        Description: [
          "Sranan Tongo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sro",
        Description: [
          "Campidanese Sardinian"
        ],
        Added: "2009-07-29",
        Macrolanguage: "sc"
      },
      {
        Type: "language",
        Subtag: "srq",
        Description: [
          "Sirion\xF3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "srr",
        Description: [
          "Serer"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "srs",
        Description: [
          "Sarsi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "srt",
        Description: [
          "Sauri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sru",
        Description: [
          "Suru\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "srv",
        Description: [
          "Southern Sorsoganon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "srw",
        Description: [
          "Serua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "srx",
        Description: [
          "Sirmauri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sry",
        Description: [
          "Sera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "srz",
        Description: [
          "Shahmirzadi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssa",
        Description: [
          "Nilo-Saharan languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "ssb",
        Description: [
          "Southern Sama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssc",
        Description: [
          "Suba-Simbiti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssd",
        Description: [
          "Siroi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sse",
        Description: [
          "Balangingi",
          "Bangingih Sama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssf",
        Description: [
          "Thao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssg",
        Description: [
          "Seimat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssh",
        Description: [
          "Shihhi Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ar"
      },
      {
        Type: "language",
        Subtag: "ssi",
        Description: [
          "Sansi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssj",
        Description: [
          "Sausi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssk",
        Description: [
          "Sunam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssl",
        Description: [
          "Western Sisaala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssm",
        Description: [
          "Semnam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssn",
        Description: [
          "Waata"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sso",
        Description: [
          "Sissano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssp",
        Description: [
          "Spanish Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssq",
        Description: [
          "So'a"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssr",
        Description: [
          "Swiss-French Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sss",
        Description: [
          "S\xF4"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sst",
        Description: [
          "Sinasina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssu",
        Description: [
          "Susuami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssv",
        Description: [
          "Shark Bay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssx",
        Description: [
          "Samberigi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssy",
        Description: [
          "Saho"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ssz",
        Description: [
          "Sengseng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sta",
        Description: [
          "Settla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "stb",
        Description: [
          "Northern Subanen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "std",
        Description: [
          "Sentinel"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ste",
        Description: [
          "Liana-Seti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "stf",
        Description: [
          "Seta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "stg",
        Description: [
          "Trieng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sth",
        Description: [
          "Shelta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sti",
        Description: [
          "Bulo Stieng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "stj",
        Description: [
          "Matya Samo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "stk",
        Description: [
          "Arammba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "stl",
        Description: [
          "Stellingwerfs"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "stm",
        Description: [
          "Setaman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "stn",
        Description: [
          "Owa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sto",
        Description: [
          "Stoney"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "stp",
        Description: [
          "Southeastern Tepehuan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "stq",
        Description: [
          "Saterfriesisch"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "str",
        Description: [
          "Straits Salish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sts",
        Description: [
          "Shumashti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "stt",
        Description: [
          "Budeh Stieng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "stu",
        Description: [
          "Samtao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "stv",
        Description: [
          "Silt'e"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "stw",
        Description: [
          "Satawalese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sty",
        Description: [
          "Siberian Tatar"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "sua",
        Description: [
          "Sulka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sub",
        Description: [
          "Suku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "suc",
        Description: [
          "Western Subanon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sue",
        Description: [
          "Suena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sug",
        Description: [
          "Suganga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sui",
        Description: [
          "Suki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "suj",
        Description: [
          "Shubi"
        ],
        Added: "2009-07-29",
        Comments: [
          "see also xsj"
        ]
      },
      {
        Type: "language",
        Subtag: "suk",
        Description: [
          "Sukuma"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sul",
        Description: [
          "Surigaonon"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        Comments: [
          "see sgd, tgn"
        ]
      },
      {
        Type: "language",
        Subtag: "sum",
        Description: [
          "Sumo-Mayangna"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        Comments: [
          "see ulw, yan"
        ]
      },
      {
        Type: "language",
        Subtag: "suq",
        Description: [
          "Suri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sur",
        Description: [
          "Mwaghavul"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sus",
        Description: [
          "Susu"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "sut",
        Description: [
          "Subtiaba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "suv",
        Description: [
          "Puroik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "suw",
        Description: [
          "Sumbwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sux",
        Description: [
          "Sumerian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "suy",
        Description: [
          "Suy\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "suz",
        Description: [
          "Sunwar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sva",
        Description: [
          "Svan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "svb",
        Description: [
          "Ulau-Suain"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "svc",
        Description: [
          "Vincentian Creole English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sve",
        Description: [
          "Serili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "svk",
        Description: [
          "Slovakian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "svm",
        Description: [
          "Slavomolisano"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "svr",
        Description: [
          "Savara"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "svs",
        Description: [
          "Savosavo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "svx",
        Description: [
          "Skalvian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swb",
        Description: [
          "Maore Comorian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swc",
        Description: [
          "Congo Swahili"
        ],
        Added: "2009-07-29",
        Macrolanguage: "sw"
      },
      {
        Type: "language",
        Subtag: "swf",
        Description: [
          "Sere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swg",
        Description: [
          "Swabian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swh",
        Description: [
          "Swahili (individual language)",
          "Kiswahili"
        ],
        Added: "2009-07-29",
        Macrolanguage: "sw"
      },
      {
        Type: "language",
        Subtag: "swi",
        Description: [
          "Sui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swj",
        Description: [
          "Sira"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swk",
        Description: [
          "Malawi Sena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swl",
        Description: [
          "Swedish Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swm",
        Description: [
          "Samosa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swn",
        Description: [
          "Sawknah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swo",
        Description: [
          "Shanenawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swp",
        Description: [
          "Suau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swq",
        Description: [
          "Sharwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swr",
        Description: [
          "Saweru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sws",
        Description: [
          "Seluwasan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swt",
        Description: [
          "Sawila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swu",
        Description: [
          "Suwawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swv",
        Description: [
          "Shekhawati"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mwr"
      },
      {
        Type: "language",
        Subtag: "sww",
        Description: [
          "Sowa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swx",
        Description: [
          "Suruah\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "swy",
        Description: [
          "Sarua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sxb",
        Description: [
          "Suba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sxc",
        Description: [
          "Sicanian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sxe",
        Description: [
          "Sighu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sxg",
        Description: [
          "Shuhi",
          "Shixing"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sxk",
        Description: [
          "Southern Kalapuya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sxl",
        Description: [
          "Selian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sxm",
        Description: [
          "Samre"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sxn",
        Description: [
          "Sangir"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sxo",
        Description: [
          "Sorothaptic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sxr",
        Description: [
          "Saaroa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sxs",
        Description: [
          "Sasaru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sxu",
        Description: [
          "Upper Saxon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sxw",
        Description: [
          "Saxwe Gbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sya",
        Description: [
          "Siang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "syb",
        Description: [
          "Central Subanen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "syc",
        Description: [
          "Classical Syriac"
        ],
        Added: "2007-04-03"
      },
      {
        Type: "language",
        Subtag: "syd",
        Description: [
          "Samoyedic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "syi",
        Description: [
          "Seki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "syk",
        Description: [
          "Sukur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "syl",
        Description: [
          "Sylheti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sym",
        Description: [
          "Maya Samo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "syn",
        Description: [
          "Senaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "syo",
        Description: [
          "Suoy"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "syr",
        Description: [
          "Syriac"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "sys",
        Description: [
          "Sinyar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "syw",
        Description: [
          "Kagate"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "syx",
        Description: [
          "Samay"
        ],
        Added: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "syy",
        Description: [
          "Al-Sayyid Bedouin Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sza",
        Description: [
          "Semelai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "szb",
        Description: [
          "Ngalum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "szc",
        Description: [
          "Semaq Beri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "szd",
        Description: [
          "Seru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "sze",
        Description: [
          "Seze"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "szg",
        Description: [
          "Sengele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "szl",
        Description: [
          "Silesian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "szn",
        Description: [
          "Sula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "szp",
        Description: [
          "Suabo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "szs",
        Description: [
          "Solomon Islands Sign Language"
        ],
        Added: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "szv",
        Description: [
          "Isu (Fako Division)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "szw",
        Description: [
          "Sawai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "szy",
        Description: [
          "Sakizaya"
        ],
        Added: "2019-04-16"
      },
      {
        Type: "language",
        Subtag: "taa",
        Description: [
          "Lower Tanana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tab",
        Description: [
          "Tabassaran"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tac",
        Description: [
          "Lowland Tarahumara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tad",
        Description: [
          "Tause"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tae",
        Description: [
          "Tariana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "taf",
        Description: [
          "Tapirap\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tag",
        Description: [
          "Tagoi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tai",
        Description: [
          "Tai languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "taj",
        Description: [
          "Eastern Tamang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tak",
        Description: [
          "Tala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tal",
        Description: [
          "Tal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tan",
        Description: [
          "Tangale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tao",
        Description: [
          "Yami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tap",
        Description: [
          "Taabwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "taq",
        Description: [
          "Tamasheq"
        ],
        Added: "2009-07-29",
        Macrolanguage: "tmh"
      },
      {
        Type: "language",
        Subtag: "tar",
        Description: [
          "Central Tarahumara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tas",
        Description: [
          "Tay Boi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tau",
        Description: [
          "Upper Tanana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tav",
        Description: [
          "Tatuyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "taw",
        Description: [
          "Tai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tax",
        Description: [
          "Tamki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tay",
        Description: [
          "Atayal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "taz",
        Description: [
          "Tocho"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tba",
        Description: [
          "Aikan\xE3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbb",
        Description: [
          "Tapeba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbc",
        Description: [
          "Takia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbd",
        Description: [
          "Kaki Ae"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbe",
        Description: [
          "Tanimbili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbf",
        Description: [
          "Mandara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbg",
        Description: [
          "North Tairora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbh",
        Description: [
          "Dharawal",
          "Thurawal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbi",
        Description: [
          "Gaam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbj",
        Description: [
          "Tiang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbk",
        Description: [
          "Calamian Tagbanwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbl",
        Description: [
          "Tboli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbm",
        Description: [
          "Tagbu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbn",
        Description: [
          "Barro Negro Tunebo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbo",
        Description: [
          "Tawala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbp",
        Description: [
          "Taworta",
          "Diebroud"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbq",
        Description: [
          "Tibeto-Burman languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "tbr",
        Description: [
          "Tumtum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbs",
        Description: [
          "Tanguat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbt",
        Description: [
          "Tembo (Kitembo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbu",
        Description: [
          "Tubar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbv",
        Description: [
          "Tobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbw",
        Description: [
          "Tagbanwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbx",
        Description: [
          "Kapin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tby",
        Description: [
          "Tabaru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tbz",
        Description: [
          "Ditammari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tca",
        Description: [
          "Ticuna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcb",
        Description: [
          "Tanacross"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcc",
        Description: [
          "Datooga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcd",
        Description: [
          "Tafi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tce",
        Description: [
          "Southern Tutchone"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcf",
        Description: [
          "Malinaltepec Me'phaa",
          "Malinaltepec Tlapanec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcg",
        Description: [
          "Tamagario"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tch",
        Description: [
          "Turks And Caicos Creole English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tci",
        Description: [
          "W\xE1ra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tck",
        Description: [
          "Tchitchege"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcl",
        Description: [
          "Taman (Myanmar)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcm",
        Description: [
          "Tanahmerah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcn",
        Description: [
          "Tichurong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tco",
        Description: [
          "Taungyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcp",
        Description: [
          "Tawr Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcq",
        Description: [
          "Kaiy"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcs",
        Description: [
          "Torres Strait Creole",
          "Yumplatok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tct",
        Description: [
          "T'en"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcu",
        Description: [
          "Southeastern Tarahumara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcw",
        Description: [
          "Tecpatl\xE1n Totonac"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcx",
        Description: [
          "Toda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcy",
        Description: [
          "Tulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tcz",
        Description: [
          "Thado Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tda",
        Description: [
          "Tagdal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdb",
        Description: [
          "Panchpargania"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdc",
        Description: [
          "Ember\xE1-Tad\xF3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdd",
        Description: [
          "Tai N\xFCa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tde",
        Description: [
          "Tiranige Diga Dogon"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "tdf",
        Description: [
          "Talieng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdg",
        Description: [
          "Western Tamang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdh",
        Description: [
          "Thulung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdi",
        Description: [
          "Tomadino"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdj",
        Description: [
          "Tajio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdk",
        Description: [
          "Tambas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdl",
        Description: [
          "Sur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdm",
        Description: [
          "Taruma"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "tdn",
        Description: [
          "Tondano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdo",
        Description: [
          "Teme"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdq",
        Description: [
          "Tita"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdr",
        Description: [
          "Todrah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tds",
        Description: [
          "Doutai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdt",
        Description: [
          "Tetun Dili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdu",
        Description: [
          "Tempasuk Dusun"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "dtp"
      },
      {
        Type: "language",
        Subtag: "tdv",
        Description: [
          "Toro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tdx",
        Description: [
          "Tandroy-Mahafaly Malagasy"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mg"
      },
      {
        Type: "language",
        Subtag: "tdy",
        Description: [
          "Tadyawan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tea",
        Description: [
          "Temiar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "teb",
        Description: [
          "Tetete"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tec",
        Description: [
          "Terik"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kln"
      },
      {
        Type: "language",
        Subtag: "ted",
        Description: [
          "Tepo Krumen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tee",
        Description: [
          "Huehuetla Tepehua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tef",
        Description: [
          "Teressa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "teg",
        Description: [
          "Teke-Tege"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "teh",
        Description: [
          "Tehuelche"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tei",
        Description: [
          "Torricelli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tek",
        Description: [
          "Ibali Teke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tem",
        Description: [
          "Timne"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "ten",
        Description: [
          "Tama (Colombia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "teo",
        Description: [
          "Teso"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tep",
        Description: [
          "Tepecano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "teq",
        Description: [
          "Temein"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ter",
        Description: [
          "Tereno"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "tes",
        Description: [
          "Tengger"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tet",
        Description: [
          "Tetum"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "teu",
        Description: [
          "Soo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tev",
        Description: [
          "Teor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tew",
        Description: [
          "Tewa (USA)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tex",
        Description: [
          "Tennet"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tey",
        Description: [
          "Tulishi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tez",
        Description: [
          "Tetserret"
        ],
        Added: "2018-03-08"
      },
      {
        Type: "language",
        Subtag: "tfi",
        Description: [
          "Tofin Gbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tfn",
        Description: [
          "Tanaina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tfo",
        Description: [
          "Tefaro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tfr",
        Description: [
          "Teribe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tft",
        Description: [
          "Ternate"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tga",
        Description: [
          "Sagalla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgb",
        Description: [
          "Tobilung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgc",
        Description: [
          "Tigak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgd",
        Description: [
          "Ciwogai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tge",
        Description: [
          "Eastern Gorkha Tamang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgf",
        Description: [
          "Chalikha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgg",
        Description: [
          "Tangga"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        Comments: [
          "see bjp, hrc, hrw"
        ]
      },
      {
        Type: "language",
        Subtag: "tgh",
        Description: [
          "Tobagonian Creole English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgi",
        Description: [
          "Lawunuia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgj",
        Description: [
          "Tagin"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "tgn",
        Description: [
          "Tandaganon"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "tgo",
        Description: [
          "Sudest"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgp",
        Description: [
          "Tangoa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgq",
        Description: [
          "Tring"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgr",
        Description: [
          "Tareng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgs",
        Description: [
          "Nume"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgt",
        Description: [
          "Central Tagbanwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgu",
        Description: [
          "Tanggu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgv",
        Description: [
          "Tingui-Boto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgw",
        Description: [
          "Tagwana Senoufo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgx",
        Description: [
          "Tagish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgy",
        Description: [
          "Togoyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tgz",
        Description: [
          "Tagalaka"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "thc",
        Description: [
          "Tai Hang Tong"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "tpo"
      },
      {
        Type: "language",
        Subtag: "thd",
        Description: [
          "Kuuk Thaayorre",
          "Thayore"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "the",
        Description: [
          "Chitwania Tharu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "thf",
        Description: [
          "Thangmi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "thh",
        Description: [
          "Northern Tarahumara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "thi",
        Description: [
          "Tai Long"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "thk",
        Description: [
          "Tharaka",
          "Kitharaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "thl",
        Description: [
          "Dangaura Tharu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "thm",
        Description: [
          "Aheu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "thn",
        Description: [
          "Thachanadan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "thp",
        Description: [
          "Thompson"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "thq",
        Description: [
          "Kochila Tharu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "thr",
        Description: [
          "Rana Tharu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ths",
        Description: [
          "Thakali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tht",
        Description: [
          "Tahltan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "thu",
        Description: [
          "Thuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "thv",
        Description: [
          "Tahaggart Tamahaq"
        ],
        Added: "2009-07-29",
        Macrolanguage: "tmh"
      },
      {
        Type: "language",
        Subtag: "thw",
        Description: [
          "Thudam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "thx",
        Description: [
          "The"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "oyb"
      },
      {
        Type: "language",
        Subtag: "thy",
        Description: [
          "Tha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "thz",
        Description: [
          "Tayart Tamajeq"
        ],
        Added: "2009-07-29",
        Macrolanguage: "tmh"
      },
      {
        Type: "language",
        Subtag: "tia",
        Description: [
          "Tidikelt Tamazight"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tic",
        Description: [
          "Tira"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tid",
        Description: [
          "Tidong"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        Comments: [
          "see itd, ntd"
        ]
      },
      {
        Type: "language",
        Subtag: "tie",
        Description: [
          "Tingal"
        ],
        Added: "2009-07-29",
        Deprecated: "2011-08-16",
        "Preferred-Value": "ras"
      },
      {
        Type: "language",
        Subtag: "tif",
        Description: [
          "Tifal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tig",
        Description: [
          "Tigre"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "tih",
        Description: [
          "Timugon Murut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tii",
        Description: [
          "Tiene"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tij",
        Description: [
          "Tilung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tik",
        Description: [
          "Tikar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "til",
        Description: [
          "Tillamook"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tim",
        Description: [
          "Timbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tin",
        Description: [
          "Tindi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tio",
        Description: [
          "Teop"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tip",
        Description: [
          "Trimuris"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tiq",
        Description: [
          "Ti\xE9fo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tis",
        Description: [
          "Masadiit Itneg"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tit",
        Description: [
          "Tinigua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tiu",
        Description: [
          "Adasen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tiv",
        Description: [
          "Tiv"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "tiw",
        Description: [
          "Tiwi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tix",
        Description: [
          "Southern Tiwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tiy",
        Description: [
          "Tiruray"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tiz",
        Description: [
          "Tai Hongjin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tja",
        Description: [
          "Tajuasohn"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tjg",
        Description: [
          "Tunjung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tji",
        Description: [
          "Northern Tujia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tjj",
        Description: [
          "Tjungundji"
        ],
        Added: "2019-04-16"
      },
      {
        Type: "language",
        Subtag: "tjl",
        Description: [
          "Tai Laing"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "tjm",
        Description: [
          "Timucua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tjn",
        Description: [
          "Tonjon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tjo",
        Description: [
          "Temacine Tamazight"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tjp",
        Description: [
          "Tjupany"
        ],
        Added: "2019-04-16"
      },
      {
        Type: "language",
        Subtag: "tjs",
        Description: [
          "Southern Tujia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tju",
        Description: [
          "Tjurruru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tjw",
        Description: [
          "Djabwurrung"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "tka",
        Description: [
          "Truk\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tkb",
        Description: [
          "Buksa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tkd",
        Description: [
          "Tukudede"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tke",
        Description: [
          "Takwane"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tkf",
        Description: [
          "Tukumanf\xE9d"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tkg",
        Description: [
          "Tesaka Malagasy"
        ],
        Added: "2011-08-16",
        Macrolanguage: "mg"
      },
      {
        Type: "language",
        Subtag: "tkk",
        Description: [
          "Takpa"
        ],
        Added: "2009-07-29",
        Deprecated: "2011-08-16",
        "Preferred-Value": "twm"
      },
      {
        Type: "language",
        Subtag: "tkl",
        Description: [
          "Tokelau"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "tkm",
        Description: [
          "Takelma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tkn",
        Description: [
          "Toku-No-Shima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tkp",
        Description: [
          "Tikopia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tkq",
        Description: [
          "Tee"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tkr",
        Description: [
          "Tsakhur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tks",
        Description: [
          "Takestani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tkt",
        Description: [
          "Kathoriya Tharu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tku",
        Description: [
          "Upper Necaxa Totonac"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tkv",
        Description: [
          "Mur Pano"
        ],
        Added: "2014-02-28"
      },
      {
        Type: "language",
        Subtag: "tkw",
        Description: [
          "Teanu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tkx",
        Description: [
          "Tangko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tkz",
        Description: [
          "Takua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tla",
        Description: [
          "Southwestern Tepehuan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlb",
        Description: [
          "Tobelo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlc",
        Description: [
          "Yecuatla Totonac"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tld",
        Description: [
          "Talaud"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlf",
        Description: [
          "Telefol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlg",
        Description: [
          "Tofanma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlh",
        Description: [
          "Klingon",
          "tlhIngan Hol"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "tli",
        Description: [
          "Tlingit"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "tlj",
        Description: [
          "Talinga-Bwisi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlk",
        Description: [
          "Taloki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tll",
        Description: [
          "Tetela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlm",
        Description: [
          "Tolomako"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tln",
        Description: [
          "Talondo'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlo",
        Description: [
          "Talodi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlp",
        Description: [
          "Filomena Mata-Coahuitl\xE1n Totonac"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlq",
        Description: [
          "Tai Loi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlr",
        Description: [
          "Talise"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tls",
        Description: [
          "Tambotalo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlt",
        Description: [
          "Sou Nama",
          "Teluti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlu",
        Description: [
          "Tulehu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlv",
        Description: [
          "Taliabu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tlw",
        Description: [
          "South Wemale"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        "Preferred-Value": "weo"
      },
      {
        Type: "language",
        Subtag: "tlx",
        Description: [
          "Khehek"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tly",
        Description: [
          "Talysh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tma",
        Description: [
          "Tama (Chad)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmb",
        Description: [
          "Katbol",
          "Avava"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmc",
        Description: [
          "Tumak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmd",
        Description: [
          "Haruai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tme",
        Description: [
          "Trememb\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmf",
        Description: [
          "Toba-Maskoy"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmg",
        Description: [
          "Ternate\xF1o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmh",
        Description: [
          "Tamashek"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "tmi",
        Description: [
          "Tutuba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmj",
        Description: [
          "Samarokena"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmk",
        Description: [
          "Northwestern Tamang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tml",
        Description: [
          "Tamnim Citak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmm",
        Description: [
          "Tai Thanh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmn",
        Description: [
          "Taman (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmo",
        Description: [
          "Temoq"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmp",
        Description: [
          "Tai M\xE8ne"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "tyj"
      },
      {
        Type: "language",
        Subtag: "tmq",
        Description: [
          "Tumleo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmr",
        Description: [
          "Jewish Babylonian Aramaic (ca. 200-1200 CE)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tms",
        Description: [
          "Tima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmt",
        Description: [
          "Tasmate"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmu",
        Description: [
          "Iau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmv",
        Description: [
          "Tembo (Motembo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmw",
        Description: [
          "Temuan"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "tmy",
        Description: [
          "Tami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tmz",
        Description: [
          "Tamanaku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tna",
        Description: [
          "Tacana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnb",
        Description: [
          "Western Tunebo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnc",
        Description: [
          "Tanimuca-Retuar\xE3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnd",
        Description: [
          "Angosturas Tunebo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tne",
        Description: [
          "Tinoc Kallahan"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "kak"
      },
      {
        Type: "language",
        Subtag: "tnf",
        Description: [
          "Tangshewi"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        "Preferred-Value": "prs"
      },
      {
        Type: "language",
        Subtag: "tng",
        Description: [
          "Tobanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnh",
        Description: [
          "Maiani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tni",
        Description: [
          "Tandia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnk",
        Description: [
          "Kwamera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnl",
        Description: [
          "Lenakel"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnm",
        Description: [
          "Tabla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnn",
        Description: [
          "North Tanna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tno",
        Description: [
          "Toromono"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnp",
        Description: [
          "Whitesands"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnq",
        Description: [
          "Taino"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnr",
        Description: [
          "M\xE9nik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tns",
        Description: [
          "Tenis"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnt",
        Description: [
          "Tontemboan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnu",
        Description: [
          "Tay Khang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnv",
        Description: [
          "Tangchangya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnw",
        Description: [
          "Tonsawang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnx",
        Description: [
          "Tanema"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tny",
        Description: [
          "Tongwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tnz",
        Description: [
          "Ten'edn"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tob",
        Description: [
          "Toba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "toc",
        Description: [
          "Coyutla Totonac"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tod",
        Description: [
          "Toma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "toe",
        Description: [
          "Tomedes"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "tof",
        Description: [
          "Gizrra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tog",
        Description: [
          "Tonga (Nyasa)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "toh",
        Description: [
          "Gitonga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "toi",
        Description: [
          "Tonga (Zambia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "toj",
        Description: [
          "Tojolabal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tol",
        Description: [
          "Tolowa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tom",
        Description: [
          "Tombulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "too",
        Description: [
          "Xicotepec De Ju\xE1rez Totonac"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "top",
        Description: [
          "Papantla Totonac"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "toq",
        Description: [
          "Toposa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tor",
        Description: [
          "Togbo-Vara Banda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tos",
        Description: [
          "Highland Totonac"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tou",
        Description: [
          "Tho"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tov",
        Description: [
          "Upper Taromi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tow",
        Description: [
          "Jemez"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tox",
        Description: [
          "Tobian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "toy",
        Description: [
          "Topoiyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "toz",
        Description: [
          "To"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpa",
        Description: [
          "Taupota"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpc",
        Description: [
          "Azoy\xFA Me'phaa",
          "Azoy\xFA Tlapanec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpe",
        Description: [
          "Tippera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpf",
        Description: [
          "Tarpia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpg",
        Description: [
          "Kula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpi",
        Description: [
          "Tok Pisin"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "tpj",
        Description: [
          "Tapiet\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpk",
        Description: [
          "Tupinikin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpl",
        Description: [
          "Tlacoapa Me'phaa",
          "Tlacoapa Tlapanec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpm",
        Description: [
          "Tampulma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpn",
        Description: [
          "Tupinamb\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpo",
        Description: [
          "Tai Pao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpp",
        Description: [
          "Pisaflores Tepehua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpq",
        Description: [
          "Tukpa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpr",
        Description: [
          "Tupar\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpt",
        Description: [
          "Tlachichilco Tepehua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpu",
        Description: [
          "Tampuan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpv",
        Description: [
          "Tanapag"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpw",
        Description: [
          "Tup\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpx",
        Description: [
          "Acatepec Me'phaa",
          "Acatepec Tlapanec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpy",
        Description: [
          "Trumai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tpz",
        Description: [
          "Tinputz"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tqb",
        Description: [
          "Temb\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tql",
        Description: [
          "Lehali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tqm",
        Description: [
          "Turumsa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tqn",
        Description: [
          "Tenino"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tqo",
        Description: [
          "Toaripi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tqp",
        Description: [
          "Tomoip"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tqq",
        Description: [
          "Tunni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tqr",
        Description: [
          "Torona"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tqt",
        Description: [
          "Western Totonac"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tqu",
        Description: [
          "Touo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tqw",
        Description: [
          "Tonkawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tra",
        Description: [
          "Tirahi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trb",
        Description: [
          "Terebu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trc",
        Description: [
          "Copala Triqui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trd",
        Description: [
          "Turi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tre",
        Description: [
          "East Tarangan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trf",
        Description: [
          "Trinidadian Creole English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trg",
        Description: [
          "Lish\xE1n Did\xE1n"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trh",
        Description: [
          "Turaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tri",
        Description: [
          "Tri\xF3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trj",
        Description: [
          "Toram"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trk",
        Description: [
          "Turkic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "trl",
        Description: [
          "Traveller Scottish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trm",
        Description: [
          "Tregami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trn",
        Description: [
          "Trinitario"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tro",
        Description: [
          "Tarao Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trp",
        Description: [
          "Kok Borok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trq",
        Description: [
          "San Mart\xEDn Itunyoso Triqui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trr",
        Description: [
          "Taushiro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trs",
        Description: [
          "Chicahuaxtla Triqui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trt",
        Description: [
          "Tunggare"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tru",
        Description: [
          "Turoyo",
          "Surayt"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trv",
        Description: [
          "Taroko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trw",
        Description: [
          "Torwali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trx",
        Description: [
          "Tringgus-Sembaan Bidayuh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "try",
        Description: [
          "Turung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "trz",
        Description: [
          "Tor\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsa",
        Description: [
          "Tsaangi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsb",
        Description: [
          "Tsamai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsc",
        Description: [
          "Tswa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsd",
        Description: [
          "Tsakonian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tse",
        Description: [
          "Tunisian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsf",
        Description: [
          "Southwestern Tamang"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "taj"
      },
      {
        Type: "language",
        Subtag: "tsg",
        Description: [
          "Tausug"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsh",
        Description: [
          "Tsuvan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsi",
        Description: [
          "Tsimshian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "tsj",
        Description: [
          "Tshangla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsk",
        Description: [
          "Tseku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsl",
        Description: [
          "Ts'\xFCn-Lao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsm",
        Description: [
          "Turkish Sign Language",
          "T\xFCrk \u0130\u015Faret Dili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsp",
        Description: [
          "Northern Toussian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsq",
        Description: [
          "Thai Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsr",
        Description: [
          "Akei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tss",
        Description: [
          "Taiwan Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tst",
        Description: [
          "Tondi Songway Kiini"
        ],
        Added: "2011-08-16"
      },
      {
        Type: "language",
        Subtag: "tsu",
        Description: [
          "Tsou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsv",
        Description: [
          "Tsogo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsw",
        Description: [
          "Tsishingini"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsx",
        Description: [
          "Mubami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsy",
        Description: [
          "Tebul Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tsz",
        Description: [
          "Purepecha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tta",
        Description: [
          "Tutelo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttb",
        Description: [
          "Gaa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttc",
        Description: [
          "Tektiteko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttd",
        Description: [
          "Tauade"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tte",
        Description: [
          "Bwanabwana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttf",
        Description: [
          "Tuotomb"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttg",
        Description: [
          "Tutong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tth",
        Description: [
          "Upper Ta'oih"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tti",
        Description: [
          "Tobati"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttj",
        Description: [
          "Tooro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttk",
        Description: [
          "Totoro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttl",
        Description: [
          "Totela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttm",
        Description: [
          "Northern Tutchone"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttn",
        Description: [
          "Towei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tto",
        Description: [
          "Lower Ta'oih"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttp",
        Description: [
          "Tombelala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttq",
        Description: [
          "Tawallammat Tamajaq"
        ],
        Added: "2009-07-29",
        Macrolanguage: "tmh"
      },
      {
        Type: "language",
        Subtag: "ttr",
        Description: [
          "Tera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tts",
        Description: [
          "Northeastern Thai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttt",
        Description: [
          "Muslim Tat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttu",
        Description: [
          "Torau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttv",
        Description: [
          "Titan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttw",
        Description: [
          "Long Wat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tty",
        Description: [
          "Sikaritai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ttz",
        Description: [
          "Tsum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tua",
        Description: [
          "Wiarumus"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tub",
        Description: [
          "T\xFCbatulabal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tuc",
        Description: [
          "Mutu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tud",
        Description: [
          "Tux\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tue",
        Description: [
          "Tuyuca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tuf",
        Description: [
          "Central Tunebo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tug",
        Description: [
          "Tunia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tuh",
        Description: [
          "Taulil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tui",
        Description: [
          "Tupuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tuj",
        Description: [
          "Tugutil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tul",
        Description: [
          "Tula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tum",
        Description: [
          "Tumbuka"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "tun",
        Description: [
          "Tunica"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tuo",
        Description: [
          "Tucano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tup",
        Description: [
          "Tupi languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "tuq",
        Description: [
          "Tedaga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tus",
        Description: [
          "Tuscarora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tut",
        Description: [
          "Altaic languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "tuu",
        Description: [
          "Tututni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tuv",
        Description: [
          "Turkana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tuw",
        Description: [
          "Tungus languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "tux",
        Description: [
          "Tuxin\xE1wa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tuy",
        Description: [
          "Tugen"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kln"
      },
      {
        Type: "language",
        Subtag: "tuz",
        Description: [
          "Turka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tva",
        Description: [
          "Vaghua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tvd",
        Description: [
          "Tsuvadi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tve",
        Description: [
          "Te'un"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tvk",
        Description: [
          "Southeast Ambrym"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tvl",
        Description: [
          "Tuvalu"
        ],
        Added: "2005-10-16",
        "Suppress-Script": "Latn"
      },
      {
        Type: "language",
        Subtag: "tvm",
        Description: [
          "Tela-Masbuar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tvn",
        Description: [
          "Tavoyan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tvo",
        Description: [
          "Tidore"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tvs",
        Description: [
          "Taveta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tvt",
        Description: [
          "Tutsa Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tvu",
        Description: [
          "Tunen"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "tvw",
        Description: [
          "Sedoa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tvx",
        Description: [
          "Taivoan"
        ],
        Added: "2019-04-16"
      },
      {
        Type: "language",
        Subtag: "tvy",
        Description: [
          "Timor Pidgin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twa",
        Description: [
          "Twana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twb",
        Description: [
          "Western Tawbuid"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twc",
        Description: [
          "Teshenawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twd",
        Description: [
          "Twents"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twe",
        Description: [
          "Tewa (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twf",
        Description: [
          "Northern Tiwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twg",
        Description: [
          "Tereweng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twh",
        Description: [
          "Tai D\xF3n"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twl",
        Description: [
          "Tawara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twm",
        Description: [
          "Tawang Monpa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twn",
        Description: [
          "Twendi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "two",
        Description: [
          "Tswapong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twp",
        Description: [
          "Ere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twq",
        Description: [
          "Tasawaq"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twr",
        Description: [
          "Southwestern Tarahumara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twt",
        Description: [
          "Turiw\xE1ra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twu",
        Description: [
          "Termanu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tww",
        Description: [
          "Tuwari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twx",
        Description: [
          "Tewe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "twy",
        Description: [
          "Tawoyan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txa",
        Description: [
          "Tombonuo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txb",
        Description: [
          "Tokharian B"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txc",
        Description: [
          "Tsetsaut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txe",
        Description: [
          "Totoli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txg",
        Description: [
          "Tangut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txh",
        Description: [
          "Thracian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txi",
        Description: [
          "Ikpeng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txj",
        Description: [
          "Tarjumo"
        ],
        Added: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "txm",
        Description: [
          "Tomini"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txn",
        Description: [
          "West Tarangan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txo",
        Description: [
          "Toto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txq",
        Description: [
          "Tii"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txr",
        Description: [
          "Tartessian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txs",
        Description: [
          "Tonsea"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txt",
        Description: [
          "Citak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txu",
        Description: [
          "Kayap\xF3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txx",
        Description: [
          "Tatana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "txy",
        Description: [
          "Tanosy Malagasy"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mg"
      },
      {
        Type: "language",
        Subtag: "tya",
        Description: [
          "Tauya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tye",
        Description: [
          "Kyanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tyh",
        Description: [
          "O'du"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tyi",
        Description: [
          "Teke-Tsaayi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tyj",
        Description: [
          "Tai Do",
          "Tai Yo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tyl",
        Description: [
          "Thu Lao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tyn",
        Description: [
          "Kombai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "typ",
        Description: [
          "Thaypan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tyr",
        Description: [
          "Tai Daeng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tys",
        Description: [
          "T\xE0y Sa Pa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tyt",
        Description: [
          "T\xE0y Tac"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tyu",
        Description: [
          "Kua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tyv",
        Description: [
          "Tuvinian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "tyx",
        Description: [
          "Teke-Tyee"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tyz",
        Description: [
          "T\xE0y"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tza",
        Description: [
          "Tanzanian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tzh",
        Description: [
          "Tzeltal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tzj",
        Description: [
          "Tz'utujil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tzl",
        Description: [
          "Talossan"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "tzm",
        Description: [
          "Central Atlas Tamazight"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tzn",
        Description: [
          "Tugun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tzo",
        Description: [
          "Tzotzil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "tzx",
        Description: [
          "Tabriak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uam",
        Description: [
          "Uamu\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uan",
        Description: [
          "Kuan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uar",
        Description: [
          "Tairuma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uba",
        Description: [
          "Ubang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ubi",
        Description: [
          "Ubi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ubl",
        Description: [
          "Buhi'non Bikol"
        ],
        Added: "2010-03-11",
        Macrolanguage: "bik"
      },
      {
        Type: "language",
        Subtag: "ubr",
        Description: [
          "Ubir"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ubu",
        Description: [
          "Umbu-Ungu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uby",
        Description: [
          "Ubykh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uda",
        Description: [
          "Uda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ude",
        Description: [
          "Udihe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "udg",
        Description: [
          "Muduga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "udi",
        Description: [
          "Udi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "udj",
        Description: [
          "Ujir"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "udl",
        Description: [
          "Wuzlam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "udm",
        Description: [
          "Udmurt"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "udu",
        Description: [
          "Uduk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ues",
        Description: [
          "Kioko"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ufi",
        Description: [
          "Ufim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uga",
        Description: [
          "Ugaritic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "ugb",
        Description: [
          "Kuku-Ugbanh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uge",
        Description: [
          "Ughele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ugn",
        Description: [
          "Ugandan Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ugo",
        Description: [
          "Ugong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ugy",
        Description: [
          "Uruguayan Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uha",
        Description: [
          "Uhami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uhn",
        Description: [
          "Damal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uis",
        Description: [
          "Uisai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uiv",
        Description: [
          "Iyive"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uji",
        Description: [
          "Tanjijili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uka",
        Description: [
          "Kaburi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ukg",
        Description: [
          "Ukuriguma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ukh",
        Description: [
          "Ukhwejo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ukk",
        Description: [
          "Muak Sa-aak"
        ],
        Added: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "ukl",
        Description: [
          "Ukrainian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ukp",
        Description: [
          "Ukpe-Bayobiri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ukq",
        Description: [
          "Ukwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uks",
        Description: [
          "Urub\xFA-Kaapor Sign Language",
          "Kaapor Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uku",
        Description: [
          "Ukue"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ukw",
        Description: [
          "Ukwuani-Aboh-Ndoni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uky",
        Description: [
          "Kuuk-Yak"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "ula",
        Description: [
          "Fungwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ulb",
        Description: [
          "Ulukwumi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ulc",
        Description: [
          "Ulch"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ule",
        Description: [
          "Lule"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "ulf",
        Description: [
          "Usku",
          "Afra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uli",
        Description: [
          "Ulithian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ulk",
        Description: [
          "Meriam Mir"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ull",
        Description: [
          "Ullatan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ulm",
        Description: [
          "Ulumanda'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uln",
        Description: [
          "Unserdeutsch"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ulu",
        Description: [
          "Uma' Lung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ulw",
        Description: [
          "Ulwa"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "uma",
        Description: [
          "Umatilla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "umb",
        Description: [
          "Umbundu"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "umc",
        Description: [
          "Marrucinian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "umd",
        Description: [
          "Umbindhamu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "umg",
        Description: [
          "Morrobalama",
          "Umbuygamu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "umi",
        Description: [
          "Ukit"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "umm",
        Description: [
          "Umon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "umn",
        Description: [
          "Makyan Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "umo",
        Description: [
          "Umot\xEDna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ump",
        Description: [
          "Umpila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "umr",
        Description: [
          "Umbugarla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ums",
        Description: [
          "Pendau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "umu",
        Description: [
          "Munsee"
        ],
        Added: "2009-07-29",
        Macrolanguage: "del"
      },
      {
        Type: "language",
        Subtag: "una",
        Description: [
          "North Watut"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "und",
        Description: [
          "Undetermined"
        ],
        Added: "2005-10-16",
        Scope: "special"
      },
      {
        Type: "language",
        Subtag: "une",
        Description: [
          "Uneme"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ung",
        Description: [
          "Ngarinyin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "unk",
        Description: [
          "Enawen\xE9-Naw\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "unm",
        Description: [
          "Unami"
        ],
        Added: "2009-07-29",
        Macrolanguage: "del"
      },
      {
        Type: "language",
        Subtag: "unn",
        Description: [
          "Kurnai"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "unp",
        Description: [
          "Worora"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see wro, xgu"
        ]
      },
      {
        Type: "language",
        Subtag: "unr",
        Description: [
          "Mundari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "unu",
        Description: [
          "Unubahe"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "unx",
        Description: [
          "Munda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "unz",
        Description: [
          "Unde Kaili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uok",
        Description: [
          "Uokha"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "ema"
      },
      {
        Type: "language",
        Subtag: "upi",
        Description: [
          "Umeda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "upv",
        Description: [
          "Uripiv-Wala-Rano-Atchin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ura",
        Description: [
          "Urarina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urb",
        Description: [
          "Urub\xFA-Kaapor",
          "Kaapor"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urc",
        Description: [
          "Urningangg"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ure",
        Description: [
          "Uru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urf",
        Description: [
          "Uradhi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urg",
        Description: [
          "Urigina"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urh",
        Description: [
          "Urhobo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uri",
        Description: [
          "Urim"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urj",
        Description: [
          "Uralic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "urk",
        Description: [
          "Urak Lawoi'"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "url",
        Description: [
          "Urali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urm",
        Description: [
          "Urapmin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urn",
        Description: [
          "Uruangnirin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uro",
        Description: [
          "Ura (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urp",
        Description: [
          "Uru-Pa-In"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urr",
        Description: [
          "Lehalurup",
          "L\xF6y\xF6p"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urt",
        Description: [
          "Urat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uru",
        Description: [
          "Urumi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urv",
        Description: [
          "Uruava"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urw",
        Description: [
          "Sop"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urx",
        Description: [
          "Urimo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ury",
        Description: [
          "Orya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "urz",
        Description: [
          "Uru-Eu-Wau-Wau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "usa",
        Description: [
          "Usarufa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ush",
        Description: [
          "Ushojo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "usi",
        Description: [
          "Usui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "usk",
        Description: [
          "Usaghade"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "usp",
        Description: [
          "Uspanteco"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uss",
        Description: [
          "us-Saare"
        ],
        Added: "2019-04-16"
      },
      {
        Type: "language",
        Subtag: "usu",
        Description: [
          "Uya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uta",
        Description: [
          "Otank"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ute",
        Description: [
          "Ute-Southern Paiute"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uth",
        Description: [
          "ut-Hun"
        ],
        Added: "2019-04-16"
      },
      {
        Type: "language",
        Subtag: "utp",
        Description: [
          "Amba (Solomon Islands)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "utr",
        Description: [
          "Etulo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "utu",
        Description: [
          "Utu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uum",
        Description: [
          "Urum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uun",
        Description: [
          "Kulon-Pazeh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uur",
        Description: [
          "Ura (Vanuatu)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uuu",
        Description: [
          "U"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uve",
        Description: [
          "West Uvean",
          "Fagauvea"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uvh",
        Description: [
          "Uri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uvl",
        Description: [
          "Lote"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uwa",
        Description: [
          "Kuku-Uwanh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uya",
        Description: [
          "Doko-Uyanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "uzn",
        Description: [
          "Northern Uzbek"
        ],
        Added: "2009-07-29",
        Macrolanguage: "uz"
      },
      {
        Type: "language",
        Subtag: "uzs",
        Description: [
          "Southern Uzbek"
        ],
        Added: "2009-07-29",
        Macrolanguage: "uz"
      },
      {
        Type: "language",
        Subtag: "vaa",
        Description: [
          "Vaagri Booli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vae",
        Description: [
          "Vale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vaf",
        Description: [
          "Vafsi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vag",
        Description: [
          "Vagla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vah",
        Description: [
          "Varhadi-Nagpuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vai",
        Description: [
          "Vai"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "vaj",
        Description: [
          "Sekele",
          "Northwestern \u01C3Kung",
          "Vasekele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "val",
        Description: [
          "Vehes"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vam",
        Description: [
          "Vanimo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "van",
        Description: [
          "Valman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vao",
        Description: [
          "Vao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vap",
        Description: [
          "Vaiphei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "var",
        Description: [
          "Huarijio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vas",
        Description: [
          "Vasavi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vau",
        Description: [
          "Vanuma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vav",
        Description: [
          "Varli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vay",
        Description: [
          "Wayu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vbb",
        Description: [
          "Southeast Babar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vbk",
        Description: [
          "Southwestern Bontok"
        ],
        Added: "2010-03-11",
        Macrolanguage: "bnc"
      },
      {
        Type: "language",
        Subtag: "vec",
        Description: [
          "Venetian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ved",
        Description: [
          "Veddah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vel",
        Description: [
          "Veluws"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vem",
        Description: [
          "Vemgo-Mabas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "veo",
        Description: [
          "Venture\xF1o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vep",
        Description: [
          "Veps"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ver",
        Description: [
          "Mom Jango"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vgr",
        Description: [
          "Vaghri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vgt",
        Description: [
          "Vlaamse Gebarentaal",
          "Flemish Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vic",
        Description: [
          "Virgin Islands Creole English"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vid",
        Description: [
          "Vidunda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vif",
        Description: [
          "Vili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vig",
        Description: [
          "Viemo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vil",
        Description: [
          "Vilela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vin",
        Description: [
          "Vinza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vis",
        Description: [
          "Vishavan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vit",
        Description: [
          "Viti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "viv",
        Description: [
          "Iduna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vka",
        Description: [
          "Kariyarra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vki",
        Description: [
          "Ija-Zuba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vkj",
        Description: [
          "Kujarge"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vkk",
        Description: [
          "Kaur"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "vkl",
        Description: [
          "Kulisusu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vkm",
        Description: [
          "Kamakan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vko",
        Description: [
          "Kodeoha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vkp",
        Description: [
          "Korlai Creole Portuguese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vkt",
        Description: [
          "Tenggarong Kutai Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "vku",
        Description: [
          "Kurrama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vlp",
        Description: [
          "Valpei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vls",
        Description: [
          "Vlaams"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vma",
        Description: [
          "Martuyhunira"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmb",
        Description: [
          "Barbaram"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmc",
        Description: [
          "Juxtlahuaca Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmd",
        Description: [
          "Mudu Koraga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vme",
        Description: [
          "East Masela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmf",
        Description: [
          "Mainfr\xE4nkisch"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmg",
        Description: [
          "Lungalunga"
        ],
        Added: "2009-07-29",
        Comments: [
          "see also bxf"
        ]
      },
      {
        Type: "language",
        Subtag: "vmh",
        Description: [
          "Maraghei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmi",
        Description: [
          "Miwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmj",
        Description: [
          "Ixtayutla Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmk",
        Description: [
          "Makhuwa-Shirima"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vml",
        Description: [
          "Malgana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmm",
        Description: [
          "Mitlatongo Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmp",
        Description: [
          "Soyaltepec Mazatec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmq",
        Description: [
          "Soyaltepec Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmr",
        Description: [
          "Marenje"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vms",
        Description: [
          "Moksela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmu",
        Description: [
          "Muluridyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmv",
        Description: [
          "Valley Maidu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmw",
        Description: [
          "Makhuwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmx",
        Description: [
          "Tamazola Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmy",
        Description: [
          "Ayautla Mazatec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vmz",
        Description: [
          "Mazatl\xE1n Mazatec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vnk",
        Description: [
          "Vano",
          "Lovono"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vnm",
        Description: [
          "Vinmavis",
          "Neve'ei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vnp",
        Description: [
          "Vunapu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vor",
        Description: [
          "Voro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vot",
        Description: [
          "Votic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "vra",
        Description: [
          "Vera'a"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vro",
        Description: [
          "V\xF5ro"
        ],
        Added: "2009-07-29",
        Macrolanguage: "et"
      },
      {
        Type: "language",
        Subtag: "vrs",
        Description: [
          "Varisi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vrt",
        Description: [
          "Burmbar",
          "Banam Bay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vsi",
        Description: [
          "Moldova Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vsl",
        Description: [
          "Venezuelan Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vsv",
        Description: [
          "Valencian Sign Language",
          "Llengua de signes valenciana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vto",
        Description: [
          "Vitou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vum",
        Description: [
          "Vumbu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vun",
        Description: [
          "Vunjo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vut",
        Description: [
          "Vute"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "vwa",
        Description: [
          "Awa (China)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "waa",
        Description: [
          "Walla Walla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wab",
        Description: [
          "Wab"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wac",
        Description: [
          "Wasco-Wishram"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wad",
        Description: [
          "Wandamen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wae",
        Description: [
          "Walser"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "waf",
        Description: [
          "Wakon\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wag",
        Description: [
          "Wa'ema"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wah",
        Description: [
          "Watubela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wai",
        Description: [
          "Wares"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "waj",
        Description: [
          "Waffa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wak",
        Description: [
          "Wakashan languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "wal",
        Description: [
          "Wolaytta",
          "Wolaitta"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "wam",
        Description: [
          "Wampanoag"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wan",
        Description: [
          "Wan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wao",
        Description: [
          "Wappo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wap",
        Description: [
          "Wapishana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "waq",
        Description: [
          "Wagiman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "war",
        Description: [
          "Waray (Philippines)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "was",
        Description: [
          "Washo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "wat",
        Description: [
          "Kaninuwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wau",
        Description: [
          "Waur\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wav",
        Description: [
          "Waka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "waw",
        Description: [
          "Waiwai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wax",
        Description: [
          "Watam",
          "Marangis"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "way",
        Description: [
          "Wayana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "waz",
        Description: [
          "Wampur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wba",
        Description: [
          "Warao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wbb",
        Description: [
          "Wabo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wbe",
        Description: [
          "Waritai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wbf",
        Description: [
          "Wara"
        ],
        Added: "2009-07-29",
        Comments: [
          "see also pnl"
        ]
      },
      {
        Type: "language",
        Subtag: "wbh",
        Description: [
          "Wanda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wbi",
        Description: [
          "Vwanji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wbj",
        Description: [
          "Alagwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wbk",
        Description: [
          "Waigali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wbl",
        Description: [
          "Wakhi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wbm",
        Description: [
          "Wa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wbp",
        Description: [
          "Warlpiri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wbq",
        Description: [
          "Waddar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wbr",
        Description: [
          "Wagdi"
        ],
        Added: "2009-07-29",
        Macrolanguage: "raj"
      },
      {
        Type: "language",
        Subtag: "wbs",
        Description: [
          "West Bengal Sign Language"
        ],
        Added: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "wbt",
        Description: [
          "Warnman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wbv",
        Description: [
          "Wajarri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wbw",
        Description: [
          "Woi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wca",
        Description: [
          "Yanom\xE1mi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wci",
        Description: [
          "Waci Gbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wdd",
        Description: [
          "Wandji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wdg",
        Description: [
          "Wadaginam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wdj",
        Description: [
          "Wadjiginy"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wdk",
        Description: [
          "Wadikali"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "wdu",
        Description: [
          "Wadjigu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wdy",
        Description: [
          "Wadjabangayi"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "wea",
        Description: [
          "Wewaw"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wec",
        Description: [
          "W\xE8 Western"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wed",
        Description: [
          "Wedau"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "weg",
        Description: [
          "Wergaia"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "weh",
        Description: [
          "Weh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wei",
        Description: [
          "Kiunum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wem",
        Description: [
          "Weme Gbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wen",
        Description: [
          "Sorbian languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "weo",
        Description: [
          "Wemale"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wep",
        Description: [
          "Westphalien"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wer",
        Description: [
          "Weri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wes",
        Description: [
          "Cameroon Pidgin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wet",
        Description: [
          "Perai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "weu",
        Description: [
          "Rawngtu Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wew",
        Description: [
          "Wejewa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wfg",
        Description: [
          "Yafi",
          "Zorop"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wga",
        Description: [
          "Wagaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wgb",
        Description: [
          "Wagawaga"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "wgg",
        Description: [
          "Wangkangurru",
          "Wangganguru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wgi",
        Description: [
          "Wahgi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wgo",
        Description: [
          "Waigeo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wgu",
        Description: [
          "Wirangu"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "wgw",
        Description: [
          "Wagawaga"
        ],
        Added: "2009-07-29",
        Deprecated: "2010-03-11",
        Comments: [
          "see wgb, ylb"
        ]
      },
      {
        Type: "language",
        Subtag: "wgy",
        Description: [
          "Warrgamay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wha",
        Description: [
          "Sou Upaa",
          "Manusela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "whg",
        Description: [
          "North Wahgi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "whk",
        Description: [
          "Wahau Kenyah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "whu",
        Description: [
          "Wahau Kayan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wib",
        Description: [
          "Southern Toussian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wic",
        Description: [
          "Wichita"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wie",
        Description: [
          "Wik-Epa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wif",
        Description: [
          "Wik-Keyangan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wig",
        Description: [
          "Wik Ngathan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wih",
        Description: [
          "Wik-Me'anha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wii",
        Description: [
          "Minidien"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wij",
        Description: [
          "Wik-Iiyanh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wik",
        Description: [
          "Wikalkan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wil",
        Description: [
          "Wilawila"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wim",
        Description: [
          "Wik-Mungkan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "win",
        Description: [
          "Ho-Chunk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wir",
        Description: [
          "Wiraf\xE9d"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wit",
        Description: [
          "Wintu"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        Comments: [
          "see nol, pwi, wnw"
        ]
      },
      {
        Type: "language",
        Subtag: "wiu",
        Description: [
          "Wiru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wiv",
        Description: [
          "Vitu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wiw",
        Description: [
          "Wirangu"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see nwo, wgu"
        ]
      },
      {
        Type: "language",
        Subtag: "wiy",
        Description: [
          "Wiyot"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wja",
        Description: [
          "Waja"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wji",
        Description: [
          "Warji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wka",
        Description: [
          "Kw'adza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wkb",
        Description: [
          "Kumbaran"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wkd",
        Description: [
          "Wakde",
          "Mo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wkl",
        Description: [
          "Kalanadi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wkr",
        Description: [
          "Keerray-Woorroong"
        ],
        Added: "2019-04-16"
      },
      {
        Type: "language",
        Subtag: "wku",
        Description: [
          "Kunduvadi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wkw",
        Description: [
          "Wakawaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wky",
        Description: [
          "Wangkayutyuru"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "wla",
        Description: [
          "Walio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wlc",
        Description: [
          "Mwali Comorian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wle",
        Description: [
          "Wolane"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wlg",
        Description: [
          "Kunbarlang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wli",
        Description: [
          "Waioli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wlk",
        Description: [
          "Wailaki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wll",
        Description: [
          "Wali (Sudan)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wlm",
        Description: [
          "Middle Welsh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wlo",
        Description: [
          "Wolio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wlr",
        Description: [
          "Wailapa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wls",
        Description: [
          "Wallisian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wlu",
        Description: [
          "Wuliwuli"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wlv",
        Description: [
          "Wich\xED Lhamt\xE9s Vejoz"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wlw",
        Description: [
          "Walak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wlx",
        Description: [
          "Wali (Ghana)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wly",
        Description: [
          "Waling"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wma",
        Description: [
          "Mawa (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wmb",
        Description: [
          "Wambaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wmc",
        Description: [
          "Wamas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wmd",
        Description: [
          "Mamaind\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wme",
        Description: [
          "Wambule"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wmh",
        Description: [
          "Waima'a"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wmi",
        Description: [
          "Wamin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wmm",
        Description: [
          "Maiwa (Indonesia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wmn",
        Description: [
          "Waamwang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wmo",
        Description: [
          "Wom (Papua New Guinea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wms",
        Description: [
          "Wambon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wmt",
        Description: [
          "Walmajarri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wmw",
        Description: [
          "Mwani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wmx",
        Description: [
          "Womo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wnb",
        Description: [
          "Wanambre"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wnc",
        Description: [
          "Wantoat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wnd",
        Description: [
          "Wandarang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wne",
        Description: [
          "Waneci"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wng",
        Description: [
          "Wanggom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wni",
        Description: [
          "Ndzwani Comorian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wnk",
        Description: [
          "Wanukaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wnm",
        Description: [
          "Wanggamala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wnn",
        Description: [
          "Wunumara"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "wno",
        Description: [
          "Wano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wnp",
        Description: [
          "Wanap"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wnu",
        Description: [
          "Usan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wnw",
        Description: [
          "Wintu"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "wny",
        Description: [
          "Wanyi",
          "Waanyi"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "woa",
        Description: [
          "Kuwema",
          "Tyaraity"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wob",
        Description: [
          "W\xE8 Northern"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "woc",
        Description: [
          "Wogeo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wod",
        Description: [
          "Wolani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "woe",
        Description: [
          "Woleaian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wof",
        Description: [
          "Gambian Wolof"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wog",
        Description: [
          "Wogamusin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "woi",
        Description: [
          "Kamang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wok",
        Description: [
          "Longto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wom",
        Description: [
          "Wom (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "won",
        Description: [
          "Wongo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "woo",
        Description: [
          "Manombai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wor",
        Description: [
          "Woria"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wos",
        Description: [
          "Hanga Hundi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wow",
        Description: [
          "Wawonii"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "woy",
        Description: [
          "Weyto"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wpc",
        Description: [
          "Maco"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wra",
        Description: [
          "Warapu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wrb",
        Description: [
          "Waluwarra",
          "Warluwara"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wrd",
        Description: [
          "Warduji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wrg",
        Description: [
          "Warungu",
          "Gudjal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wrh",
        Description: [
          "Wiradjuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wri",
        Description: [
          "Wariyangga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wrk",
        Description: [
          "Garrwa"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "wrl",
        Description: [
          "Warlmanpa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wrm",
        Description: [
          "Warumungu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wrn",
        Description: [
          "Warnang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wro",
        Description: [
          "Worrorra"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "wrp",
        Description: [
          "Waropen"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wrr",
        Description: [
          "Wardaman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wrs",
        Description: [
          "Waris"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wru",
        Description: [
          "Waru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wrv",
        Description: [
          "Waruna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wrw",
        Description: [
          "Gugu Warra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wrx",
        Description: [
          "Wae Rana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wry",
        Description: [
          "Merwari"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mwr"
      },
      {
        Type: "language",
        Subtag: "wrz",
        Description: [
          "Waray (Australia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wsa",
        Description: [
          "Warembori"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wsg",
        Description: [
          "Adilabad Gondi"
        ],
        Added: "2016-05-30",
        Macrolanguage: "gon"
      },
      {
        Type: "language",
        Subtag: "wsi",
        Description: [
          "Wusi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wsk",
        Description: [
          "Waskia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wsr",
        Description: [
          "Owenia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wss",
        Description: [
          "Wasa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wsu",
        Description: [
          "Wasu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wsv",
        Description: [
          "Wotapuri-Katarqalai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wtf",
        Description: [
          "Watiwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wth",
        Description: [
          "Wathawurrung"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "wti",
        Description: [
          "Berta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wtk",
        Description: [
          "Watakataui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wtm",
        Description: [
          "Mewati"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wtw",
        Description: [
          "Wotu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wua",
        Description: [
          "Wikngenchera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wub",
        Description: [
          "Wunambal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wud",
        Description: [
          "Wudu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wuh",
        Description: [
          "Wutunhua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wul",
        Description: [
          "Silimo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wum",
        Description: [
          "Wumbvu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wun",
        Description: [
          "Bungu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wur",
        Description: [
          "Wurrugu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wut",
        Description: [
          "Wutung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wuu",
        Description: [
          "Wu Chinese"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zh"
      },
      {
        Type: "language",
        Subtag: "wuv",
        Description: [
          "Wuvulu-Aua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wux",
        Description: [
          "Wulna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wuy",
        Description: [
          "Wauyai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wwa",
        Description: [
          "Waama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wwb",
        Description: [
          "Wakabunga"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "wwo",
        Description: [
          "Wetamut",
          "Dorig"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wwr",
        Description: [
          "Warrwa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "www",
        Description: [
          "Wawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wxa",
        Description: [
          "Waxianghua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wxw",
        Description: [
          "Wardandi"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "wya",
        Description: [
          "Wyandot"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wyb",
        Description: [
          "Wangaaybuwan-Ngiyambaa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wyi",
        Description: [
          "Woiwurrung"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "wym",
        Description: [
          "Wymysorys"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wyr",
        Description: [
          "Wayor\xF3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "wyy",
        Description: [
          "Western Fijian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xaa",
        Description: [
          "Andalusian Arabic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xab",
        Description: [
          "Sambe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xac",
        Description: [
          "Kachari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xad",
        Description: [
          "Adai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xae",
        Description: [
          "Aequian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xag",
        Description: [
          "Aghwan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xai",
        Description: [
          "Kaimb\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xaj",
        Description: [
          "Ararandew\xE1ra"
        ],
        Added: "2014-02-28"
      },
      {
        Type: "language",
        Subtag: "xak",
        Description: [
          "M\xE1ku"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "xal",
        Description: [
          "Kalmyk",
          "Oirat"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "xam",
        Description: [
          "\u01C0Xam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xan",
        Description: [
          "Xamtanga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xao",
        Description: [
          "Khao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xap",
        Description: [
          "Apalachee"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xaq",
        Description: [
          "Aquitanian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xar",
        Description: [
          "Karami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xas",
        Description: [
          "Kamas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xat",
        Description: [
          "Katawixi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xau",
        Description: [
          "Kauwera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xav",
        Description: [
          "Xav\xE1nte"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xaw",
        Description: [
          "Kawaiisu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xay",
        Description: [
          "Kayan Mahakam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xba",
        Description: [
          "Kamba (Brazil)"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "cax"
      },
      {
        Type: "language",
        Subtag: "xbb",
        Description: [
          "Lower Burdekin"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "xbc",
        Description: [
          "Bactrian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xbd",
        Description: [
          "Bindal"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xbe",
        Description: [
          "Bigambal"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xbg",
        Description: [
          "Bunganditj"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xbi",
        Description: [
          "Kombio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xbj",
        Description: [
          "Birrpayi"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xbm",
        Description: [
          "Middle Breton"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xbn",
        Description: [
          "Kenaboi"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "xbo",
        Description: [
          "Bolgarian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xbp",
        Description: [
          "Bibbulman"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xbr",
        Description: [
          "Kambera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xbw",
        Description: [
          "Kambiw\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xbx",
        Description: [
          "Kabix\xED"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "xby",
        Description: [
          "Batjala",
          "Batyala"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xcb",
        Description: [
          "Cumbric"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xcc",
        Description: [
          "Camunic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xce",
        Description: [
          "Celtiberian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xcg",
        Description: [
          "Cisalpine Gaulish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xch",
        Description: [
          "Chemakum",
          "Chimakum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xcl",
        Description: [
          "Classical Armenian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xcm",
        Description: [
          "Comecrudo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xcn",
        Description: [
          "Cotoname"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xco",
        Description: [
          "Chorasmian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xcr",
        Description: [
          "Carian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xct",
        Description: [
          "Classical Tibetan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xcu",
        Description: [
          "Curonian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xcv",
        Description: [
          "Chuvantsy"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xcw",
        Description: [
          "Coahuilteco"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xcy",
        Description: [
          "Cayuse"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xda",
        Description: [
          "Darkinyung"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xdc",
        Description: [
          "Dacian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xdk",
        Description: [
          "Dharuk"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xdm",
        Description: [
          "Edomite"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xdo",
        Description: [
          "Kwandu"
        ],
        Added: "2017-02-23"
      },
      {
        Type: "language",
        Subtag: "xdy",
        Description: [
          "Malayic Dayak"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xeb",
        Description: [
          "Eblan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xed",
        Description: [
          "Hdi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xeg",
        Description: [
          "\u01C1Xegwi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xel",
        Description: [
          "Kelo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xem",
        Description: [
          "Kembayan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xep",
        Description: [
          "Epi-Olmec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xer",
        Description: [
          "Xer\xE9nte"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xes",
        Description: [
          "Kesawai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xet",
        Description: [
          "Xet\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xeu",
        Description: [
          "Keoru-Ahia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xfa",
        Description: [
          "Faliscan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xga",
        Description: [
          "Galatian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xgb",
        Description: [
          "Gbin"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "xgd",
        Description: [
          "Gudang"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xgf",
        Description: [
          "Gabrielino-Fernande\xF1o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xgg",
        Description: [
          "Goreng"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xgi",
        Description: [
          "Garingbal"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xgl",
        Description: [
          "Galindan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xgm",
        Description: [
          "Dharumbal",
          "Guwinmal"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xgn",
        Description: [
          "Mongolian languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "xgr",
        Description: [
          "Garza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xgu",
        Description: [
          "Unggumi"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "xgw",
        Description: [
          "Guwa"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xha",
        Description: [
          "Harami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xhc",
        Description: [
          "Hunnic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xhd",
        Description: [
          "Hadrami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xhe",
        Description: [
          "Khetrani"
        ],
        Added: "2009-07-29",
        Macrolanguage: "lah"
      },
      {
        Type: "language",
        Subtag: "xhr",
        Description: [
          "Hernican"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xht",
        Description: [
          "Hattic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xhu",
        Description: [
          "Hurrian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xhv",
        Description: [
          "Khua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xia",
        Description: [
          "Xiandao"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        "Preferred-Value": "acn"
      },
      {
        Type: "language",
        Subtag: "xib",
        Description: [
          "Iberian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xii",
        Description: [
          "Xiri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xil",
        Description: [
          "Illyrian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xin",
        Description: [
          "Xinca"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xip",
        Description: [
          "Xipin\xE1wa"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "xir",
        Description: [
          "Xiri\xE2na"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xis",
        Description: [
          "Kisan"
        ],
        Added: "2014-02-28"
      },
      {
        Type: "language",
        Subtag: "xiv",
        Description: [
          "Indus Valley Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xiy",
        Description: [
          "Xipaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xjb",
        Description: [
          "Minjungbal"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xjt",
        Description: [
          "Jaitmatang"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xka",
        Description: [
          "Kalkoti"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkb",
        Description: [
          "Northern Nago"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkc",
        Description: [
          "Kho'ini"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkd",
        Description: [
          "Mendalam Kayan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xke",
        Description: [
          "Kereho"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkf",
        Description: [
          "Khengkha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkg",
        Description: [
          "Kagoro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkh",
        Description: [
          "Karahawyana"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30",
        "Preferred-Value": "waw"
      },
      {
        Type: "language",
        Subtag: "xki",
        Description: [
          "Kenyan Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkj",
        Description: [
          "Kajali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkk",
        Description: [
          "Kaco'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkl",
        Description: [
          "Mainstream Kenyah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkn",
        Description: [
          "Kayan River Kayan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xko",
        Description: [
          "Kiorr"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkp",
        Description: [
          "Kabatei"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkq",
        Description: [
          "Koroni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkr",
        Description: [
          "Xakriab\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xks",
        Description: [
          "Kumbewaha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkt",
        Description: [
          "Kantosi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xku",
        Description: [
          "Kaamba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkv",
        Description: [
          "Kgalagadi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkw",
        Description: [
          "Kembra"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkx",
        Description: [
          "Karore"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xky",
        Description: [
          "Uma' Lasan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xkz",
        Description: [
          "Kurtokha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xla",
        Description: [
          "Kamula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xlb",
        Description: [
          "Loup B"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xlc",
        Description: [
          "Lycian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xld",
        Description: [
          "Lydian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xle",
        Description: [
          "Lemnian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xlg",
        Description: [
          "Ligurian (Ancient)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xli",
        Description: [
          "Liburnian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xln",
        Description: [
          "Alanic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xlo",
        Description: [
          "Loup A"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xlp",
        Description: [
          "Lepontic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xls",
        Description: [
          "Lusitanian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xlu",
        Description: [
          "Cuneiform Luwian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xly",
        Description: [
          "Elymian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xma",
        Description: [
          "Mushungulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmb",
        Description: [
          "Mbonga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmc",
        Description: [
          "Makhuwa-Marrevone"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmd",
        Description: [
          "Mbudum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xme",
        Description: [
          "Median"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmf",
        Description: [
          "Mingrelian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmg",
        Description: [
          "Mengaka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmh",
        Description: [
          "Kugu-Muminh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmj",
        Description: [
          "Majera"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmk",
        Description: [
          "Ancient Macedonian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xml",
        Description: [
          "Malaysian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmm",
        Description: [
          "Manado Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "xmn",
        Description: [
          "Manichaean Middle Persian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmo",
        Description: [
          "Morerebi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmp",
        Description: [
          "Kuku-Mu'inh"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmq",
        Description: [
          "Kuku-Mangk"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmr",
        Description: [
          "Meroitic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xms",
        Description: [
          "Moroccan Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmt",
        Description: [
          "Matbat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmu",
        Description: [
          "Kamu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmv",
        Description: [
          "Antankarana Malagasy",
          "Tankarana Malagasy"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mg"
      },
      {
        Type: "language",
        Subtag: "xmw",
        Description: [
          "Tsimihety Malagasy"
        ],
        Added: "2009-07-29",
        Macrolanguage: "mg"
      },
      {
        Type: "language",
        Subtag: "xmx",
        Description: [
          "Maden"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmy",
        Description: [
          "Mayaguduna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xmz",
        Description: [
          "Mori Bawah"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xna",
        Description: [
          "Ancient North Arabian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xnb",
        Description: [
          "Kanakanabu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xnd",
        Description: [
          "Na-Dene languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "xng",
        Description: [
          "Middle Mongolian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xnh",
        Description: [
          "Kuanhua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xni",
        Description: [
          "Ngarigu"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xnk",
        Description: [
          "Nganakarti"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xnn",
        Description: [
          "Northern Kankanay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xno",
        Description: [
          "Anglo-Norman"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xnr",
        Description: [
          "Kangri"
        ],
        Added: "2009-07-29",
        Macrolanguage: "doi"
      },
      {
        Type: "language",
        Subtag: "xns",
        Description: [
          "Kanashi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xnt",
        Description: [
          "Narragansett"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "xnu",
        Description: [
          "Nukunul"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xny",
        Description: [
          "Nyiyaparli"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xnz",
        Description: [
          "Kenzi",
          "Mattoki"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "xoc",
        Description: [
          "O'chi'chi'"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xod",
        Description: [
          "Kokoda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xog",
        Description: [
          "Soga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xoi",
        Description: [
          "Kominimung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xok",
        Description: [
          "Xokleng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xom",
        Description: [
          "Komo (Sudan)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xon",
        Description: [
          "Konkomba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xoo",
        Description: [
          "Xukur\xFA"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xop",
        Description: [
          "Kopar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xor",
        Description: [
          "Korubo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xow",
        Description: [
          "Kowaki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xpa",
        Description: [
          "Pirriya"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xpc",
        Description: [
          "Pecheneg"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xpe",
        Description: [
          "Liberia Kpelle"
        ],
        Added: "2009-07-29",
        Macrolanguage: "kpe"
      },
      {
        Type: "language",
        Subtag: "xpg",
        Description: [
          "Phrygian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xpi",
        Description: [
          "Pictish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xpj",
        Description: [
          "Mpalitjanh"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "xpk",
        Description: [
          "Kulina Pano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xpm",
        Description: [
          "Pumpokol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xpn",
        Description: [
          "Kapinaw\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xpo",
        Description: [
          "Pochutec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xpp",
        Description: [
          "Puyo-Paekche"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xpq",
        Description: [
          "Mohegan-Pequot"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "xpr",
        Description: [
          "Parthian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xps",
        Description: [
          "Pisidian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xpt",
        Description: [
          "Punthamara"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xpu",
        Description: [
          "Punic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xpy",
        Description: [
          "Puyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xqa",
        Description: [
          "Karakhanid"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xqt",
        Description: [
          "Qatabanian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xra",
        Description: [
          "Krah\xF4"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xrb",
        Description: [
          "Eastern Karaboro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xrd",
        Description: [
          "Gundungurra"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xre",
        Description: [
          "Kreye"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xrg",
        Description: [
          "Minang"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xri",
        Description: [
          "Krikati-Timbira"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xrm",
        Description: [
          "Armazic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xrn",
        Description: [
          "Arin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xrq",
        Description: [
          "Karranga"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xrr",
        Description: [
          "Raetic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xrt",
        Description: [
          "Aranama-Tamique"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xru",
        Description: [
          "Marriammu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xrw",
        Description: [
          "Karawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xsa",
        Description: [
          "Sabaean"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xsb",
        Description: [
          "Sambal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xsc",
        Description: [
          "Scythian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xsd",
        Description: [
          "Sidetic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xse",
        Description: [
          "Sempan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xsh",
        Description: [
          "Shamang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xsi",
        Description: [
          "Sio"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xsj",
        Description: [
          "Subi"
        ],
        Added: "2009-07-29",
        Comments: [
          "see also suj"
        ]
      },
      {
        Type: "language",
        Subtag: "xsl",
        Description: [
          "South Slavey"
        ],
        Added: "2009-07-29",
        Macrolanguage: "den"
      },
      {
        Type: "language",
        Subtag: "xsm",
        Description: [
          "Kasem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xsn",
        Description: [
          "Sanga (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xso",
        Description: [
          "Solano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xsp",
        Description: [
          "Silopi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xsq",
        Description: [
          "Makhuwa-Saka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xsr",
        Description: [
          "Sherpa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xss",
        Description: [
          "Assan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xsu",
        Description: [
          "Sanum\xE1"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xsv",
        Description: [
          "Sudovian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xsy",
        Description: [
          "Saisiyat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xta",
        Description: [
          "Alcozauca Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtb",
        Description: [
          "Chazumba Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtc",
        Description: [
          "Katcha-Kadugli-Miri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtd",
        Description: [
          "Diuxi-Tilantongo Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xte",
        Description: [
          "Ketengban"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtg",
        Description: [
          "Transalpine Gaulish"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xth",
        Description: [
          "Yitha Yitha"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xti",
        Description: [
          "Sinicahua Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtj",
        Description: [
          "San Juan Teita Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtl",
        Description: [
          "Tijaltepec Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtm",
        Description: [
          "Magdalena Pe\xF1asco Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtn",
        Description: [
          "Northern Tlaxiaco Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xto",
        Description: [
          "Tokharian A"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtp",
        Description: [
          "San Miguel Piedras Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtq",
        Description: [
          "Tumshuqese"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtr",
        Description: [
          "Early Tripuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xts",
        Description: [
          "Sindihui Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtt",
        Description: [
          "Tacahua Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtu",
        Description: [
          "Cuyamecalco Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtv",
        Description: [
          "Thawa"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xtw",
        Description: [
          "Tawand\xEA"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xty",
        Description: [
          "Yoloxochitl Mixtec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xtz",
        Description: [
          "Tasmanian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xua",
        Description: [
          "Alu Kurumba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xub",
        Description: [
          "Betta Kurumba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xud",
        Description: [
          "Umiida"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "xug",
        Description: [
          "Kunigami"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xuj",
        Description: [
          "Jennu Kurumba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xul",
        Description: [
          "Ngunawal"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xum",
        Description: [
          "Umbrian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xun",
        Description: [
          "Unggaranggu"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "xuo",
        Description: [
          "Kuo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xup",
        Description: [
          "Upper Umpqua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xur",
        Description: [
          "Urartian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xut",
        Description: [
          "Kuthant"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xuu",
        Description: [
          "Kxoe",
          "Khwedam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xve",
        Description: [
          "Venetic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xvi",
        Description: [
          "Kamviri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xvn",
        Description: [
          "Vandalic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xvo",
        Description: [
          "Volscian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xvs",
        Description: [
          "Vestinian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xwa",
        Description: [
          "Kwaza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xwc",
        Description: [
          "Woccon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xwd",
        Description: [
          "Wadi Wadi"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xwe",
        Description: [
          "Xwela Gbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xwg",
        Description: [
          "Kwegu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xwj",
        Description: [
          "Wajuk"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xwk",
        Description: [
          "Wangkumara"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xwl",
        Description: [
          "Western Xwla Gbe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xwo",
        Description: [
          "Written Oirat"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xwr",
        Description: [
          "Kwerba Mamberamo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xwt",
        Description: [
          "Wotjobaluk"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xww",
        Description: [
          "Wemba Wemba"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xxb",
        Description: [
          "Boro (Ghana)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xxk",
        Description: [
          "Ke'o"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xxm",
        Description: [
          "Minkin"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xxr",
        Description: [
          "Korop\xF3"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xxt",
        Description: [
          "Tambora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xya",
        Description: [
          "Yaygir"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xyb",
        Description: [
          "Yandjibara"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xyj",
        Description: [
          "Mayi-Yapi"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xyk",
        Description: [
          "Mayi-Kulan"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xyl",
        Description: [
          "Yalakalore"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xyt",
        Description: [
          "Mayi-Thakurti"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "xyy",
        Description: [
          "Yorta Yorta"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "xzh",
        Description: [
          "Zhang-Zhung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xzm",
        Description: [
          "Zemgalian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "xzp",
        Description: [
          "Ancient Zapotec"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yaa",
        Description: [
          "Yaminahua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yab",
        Description: [
          "Yuhup"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yac",
        Description: [
          "Pass Valley Yali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yad",
        Description: [
          "Yagua"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yae",
        Description: [
          "Pum\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yaf",
        Description: [
          "Yaka (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yag",
        Description: [
          "Y\xE1mana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yah",
        Description: [
          "Yazgulyam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yai",
        Description: [
          "Yagnobi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yaj",
        Description: [
          "Banda-Yangere"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yak",
        Description: [
          "Yakama"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yal",
        Description: [
          "Yalunka"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yam",
        Description: [
          "Yamba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yan",
        Description: [
          "Mayangna"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "yao",
        Description: [
          "Yao"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "yap",
        Description: [
          "Yapese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "yaq",
        Description: [
          "Yaqui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yar",
        Description: [
          "Yabarana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yas",
        Description: [
          "Nugunu (Cameroon)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yat",
        Description: [
          "Yambeta"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yau",
        Description: [
          "Yuwana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yav",
        Description: [
          "Yangben"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yaw",
        Description: [
          "Yawalapit\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yax",
        Description: [
          "Yauma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yay",
        Description: [
          "Agwagwune"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yaz",
        Description: [
          "Lokaa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yba",
        Description: [
          "Yala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ybb",
        Description: [
          "Yemba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ybd",
        Description: [
          "Yangbye"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        "Preferred-Value": "rki"
      },
      {
        Type: "language",
        Subtag: "ybe",
        Description: [
          "West Yugur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ybh",
        Description: [
          "Yakha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ybi",
        Description: [
          "Yamphu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ybj",
        Description: [
          "Hasha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ybk",
        Description: [
          "Bokha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ybl",
        Description: [
          "Yukuben"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ybm",
        Description: [
          "Yaben"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ybn",
        Description: [
          "Yaba\xE2na"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ybo",
        Description: [
          "Yabong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ybx",
        Description: [
          "Yawiyo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yby",
        Description: [
          "Yaweyuha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ych",
        Description: [
          "Chesu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ycl",
        Description: [
          "Lolopo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ycn",
        Description: [
          "Yucuna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ycp",
        Description: [
          "Chepya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yda",
        Description: [
          "Yanda"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "ydd",
        Description: [
          "Eastern Yiddish"
        ],
        Added: "2009-07-29",
        Macrolanguage: "yi"
      },
      {
        Type: "language",
        Subtag: "yde",
        Description: [
          "Yangum Dey"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ydg",
        Description: [
          "Yidgha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ydk",
        Description: [
          "Yoidik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yds",
        Description: [
          "Yiddish Sign Language"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "yea",
        Description: [
          "Ravula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yec",
        Description: [
          "Yeniche"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yee",
        Description: [
          "Yimas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yei",
        Description: [
          "Yeni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yej",
        Description: [
          "Yevanic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yel",
        Description: [
          "Yela"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yen",
        Description: [
          "Yendang"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        Comments: [
          "see ynq, yot"
        ]
      },
      {
        Type: "language",
        Subtag: "yer",
        Description: [
          "Tarok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yes",
        Description: [
          "Nyankpa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yet",
        Description: [
          "Yetfa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yeu",
        Description: [
          "Yerukula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yev",
        Description: [
          "Yapunda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yey",
        Description: [
          "Yeyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yga",
        Description: [
          "Malyangapa"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "ygi",
        Description: [
          "Yiningayi"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "ygl",
        Description: [
          "Yangum Gel"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ygm",
        Description: [
          "Yagomi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ygp",
        Description: [
          "Gepo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ygr",
        Description: [
          "Yagaria"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ygs",
        Description: [
          "Yol\u014Bu Sign Language"
        ],
        Added: "2014-02-28"
      },
      {
        Type: "language",
        Subtag: "ygu",
        Description: [
          "Yugul"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "ygw",
        Description: [
          "Yagwoia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yha",
        Description: [
          "Baha Buyang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yhd",
        Description: [
          "Judeo-Iraqi Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "jrb"
      },
      {
        Type: "language",
        Subtag: "yhl",
        Description: [
          "Hlepho Phowa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yhs",
        Description: [
          "Yan-nha\u014Bu Sign Language"
        ],
        Added: "2015-04-17"
      },
      {
        Type: "language",
        Subtag: "yia",
        Description: [
          "Yinggarda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yif",
        Description: [
          "Ache"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yig",
        Description: [
          "Wusa Nasu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yih",
        Description: [
          "Western Yiddish"
        ],
        Added: "2009-07-29",
        Macrolanguage: "yi"
      },
      {
        Type: "language",
        Subtag: "yii",
        Description: [
          "Yidiny"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yij",
        Description: [
          "Yindjibarndi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yik",
        Description: [
          "Dongshanba Lalo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yil",
        Description: [
          "Yindjilandji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yim",
        Description: [
          "Yimchungru Naga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yin",
        Description: [
          "Riang Lai",
          "Yinchia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yip",
        Description: [
          "Pholo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yiq",
        Description: [
          "Miqie"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yir",
        Description: [
          "North Awyu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yis",
        Description: [
          "Yis"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yit",
        Description: [
          "Eastern Lalu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yiu",
        Description: [
          "Awu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yiv",
        Description: [
          "Northern Nisu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yix",
        Description: [
          "Axi Yi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yiy",
        Description: [
          "Yir Yoront"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        Comments: [
          "see yrm, yyr"
        ]
      },
      {
        Type: "language",
        Subtag: "yiz",
        Description: [
          "Azhe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yka",
        Description: [
          "Yakan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ykg",
        Description: [
          "Northern Yukaghir"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yki",
        Description: [
          "Yoke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ykk",
        Description: [
          "Yakaikeke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ykl",
        Description: [
          "Khlula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ykm",
        Description: [
          "Kap"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ykn",
        Description: [
          "Kua-nsi"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "yko",
        Description: [
          "Yasa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ykr",
        Description: [
          "Yekora"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ykt",
        Description: [
          "Kathu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yku",
        Description: [
          "Kuamasi"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "yky",
        Description: [
          "Yakoma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yla",
        Description: [
          "Yaul"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ylb",
        Description: [
          "Yaleba"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "yle",
        Description: [
          "Yele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ylg",
        Description: [
          "Yelogu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yli",
        Description: [
          "Angguruk Yali"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yll",
        Description: [
          "Yil"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ylm",
        Description: [
          "Limi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yln",
        Description: [
          "Langnian Buyang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ylo",
        Description: [
          "Naluo Yi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ylr",
        Description: [
          "Yalarnnga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ylu",
        Description: [
          "Aribwaung"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yly",
        Description: [
          "Ny\xE2layu",
          "Nyel\xE2yu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yma",
        Description: [
          "Yamphe"
        ],
        Added: "2009-07-29",
        Deprecated: "2012-08-12",
        "Preferred-Value": "lrr"
      },
      {
        Type: "language",
        Subtag: "ymb",
        Description: [
          "Yambes"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ymc",
        Description: [
          "Southern Muji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ymd",
        Description: [
          "Muda"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yme",
        Description: [
          "Yameo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ymg",
        Description: [
          "Yamongeri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ymh",
        Description: [
          "Mili"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ymi",
        Description: [
          "Moji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ymk",
        Description: [
          "Makwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yml",
        Description: [
          "Iamalele"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ymm",
        Description: [
          "Maay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ymn",
        Description: [
          "Yamna",
          "Sunum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ymo",
        Description: [
          "Yangum Mon"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ymp",
        Description: [
          "Yamap"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ymq",
        Description: [
          "Qila Muji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ymr",
        Description: [
          "Malasar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yms",
        Description: [
          "Mysian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ymt",
        Description: [
          "Mator-Taygi-Karagas"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "mtm"
      },
      {
        Type: "language",
        Subtag: "ymx",
        Description: [
          "Northern Muji"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ymz",
        Description: [
          "Muzi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yna",
        Description: [
          "Aluo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ynd",
        Description: [
          "Yandruwandha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yne",
        Description: [
          "Lang'e"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yng",
        Description: [
          "Yango"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ynh",
        Description: [
          "Yangho"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12"
      },
      {
        Type: "language",
        Subtag: "ynk",
        Description: [
          "Naukan Yupik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ynl",
        Description: [
          "Yangulam"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ynn",
        Description: [
          "Yana"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yno",
        Description: [
          "Yong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ynq",
        Description: [
          "Yendang"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "yns",
        Description: [
          "Yansi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ynu",
        Description: [
          "Yahuna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yob",
        Description: [
          "Yoba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yog",
        Description: [
          "Yogad"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yoi",
        Description: [
          "Yonaguni"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yok",
        Description: [
          "Yokuts"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yol",
        Description: [
          "Yola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yom",
        Description: [
          "Yombe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yon",
        Description: [
          "Yongkom"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yos",
        Description: [
          "Yos"
        ],
        Added: "2009-07-29",
        Deprecated: "2013-09-10",
        "Preferred-Value": "zom"
      },
      {
        Type: "language",
        Subtag: "yot",
        Description: [
          "Yotti"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "yox",
        Description: [
          "Yoron"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yoy",
        Description: [
          "Yoy"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ypa",
        Description: [
          "Phala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ypb",
        Description: [
          "Labo Phowa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ypg",
        Description: [
          "Phola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yph",
        Description: [
          "Phupha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ypk",
        Description: [
          "Yupik languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "ypm",
        Description: [
          "Phuma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ypn",
        Description: [
          "Ani Phowa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ypo",
        Description: [
          "Alo Phola"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ypp",
        Description: [
          "Phupa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ypz",
        Description: [
          "Phuza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yra",
        Description: [
          "Yerakai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yrb",
        Description: [
          "Yareba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yre",
        Description: [
          "Yaour\xE9"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yri",
        Description: [
          "Yar\xED"
        ],
        Added: "2009-07-29",
        Deprecated: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "yrk",
        Description: [
          "Nenets"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yrl",
        Description: [
          "Nhengatu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yrm",
        Description: [
          "Yirrk-Mel"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "yrn",
        Description: [
          "Yerong"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yro",
        Description: [
          "Yaroam\xEB"
        ],
        Added: "2016-05-30"
      },
      {
        Type: "language",
        Subtag: "yrs",
        Description: [
          "Yarsun"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yrw",
        Description: [
          "Yarawata"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yry",
        Description: [
          "Yarluyandi"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "ysc",
        Description: [
          "Yassic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ysd",
        Description: [
          "Samatao"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ysg",
        Description: [
          "Sonaga"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "ysl",
        Description: [
          "Yugoslavian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ysn",
        Description: [
          "Sani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yso",
        Description: [
          "Nisi (China)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ysp",
        Description: [
          "Southern Lolopo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ysr",
        Description: [
          "Sirenik Yupik"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yss",
        Description: [
          "Yessan-Mayo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ysy",
        Description: [
          "Sanie"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yta",
        Description: [
          "Talu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ytl",
        Description: [
          "Tanglang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ytp",
        Description: [
          "Thopho"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ytw",
        Description: [
          "Yout Wam"
        ],
        Added: "2010-03-11"
      },
      {
        Type: "language",
        Subtag: "yty",
        Description: [
          "Yatay"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "yua",
        Description: [
          "Yucateco",
          "Yucatec Maya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yub",
        Description: [
          "Yugambal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yuc",
        Description: [
          "Yuchi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yud",
        Description: [
          "Judeo-Tripolitanian Arabic"
        ],
        Added: "2009-07-29",
        Macrolanguage: "jrb"
      },
      {
        Type: "language",
        Subtag: "yue",
        Description: [
          "Yue Chinese",
          "Cantonese"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zh"
      },
      {
        Type: "language",
        Subtag: "yuf",
        Description: [
          "Havasupai-Walapai-Yavapai"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yug",
        Description: [
          "Yug"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yui",
        Description: [
          "Yurut\xED"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yuj",
        Description: [
          "Karkar-Yuri"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yuk",
        Description: [
          "Yuki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yul",
        Description: [
          "Yulu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yum",
        Description: [
          "Quechan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yun",
        Description: [
          "Bena (Nigeria)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yup",
        Description: [
          "Yukpa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yuq",
        Description: [
          "Yuqui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yur",
        Description: [
          "Yurok"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yut",
        Description: [
          "Yopno"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yuu",
        Description: [
          "Yugh"
        ],
        Added: "2009-07-29",
        Deprecated: "2014-02-28",
        "Preferred-Value": "yug"
      },
      {
        Type: "language",
        Subtag: "yuw",
        Description: [
          "Yau (Morobe Province)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yux",
        Description: [
          "Southern Yukaghir"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yuy",
        Description: [
          "East Yugur"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yuz",
        Description: [
          "Yuracare"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yva",
        Description: [
          "Yawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yvt",
        Description: [
          "Yavitero"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ywa",
        Description: [
          "Kalou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ywg",
        Description: [
          "Yinhawangka"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "ywl",
        Description: [
          "Western Lalu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ywn",
        Description: [
          "Yawanawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ywq",
        Description: [
          "Wuding-Luquan Yi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ywr",
        Description: [
          "Yawuru"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ywt",
        Description: [
          "Xishanba Lalo",
          "Central Lalo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ywu",
        Description: [
          "Wumeng Nasu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yww",
        Description: [
          "Yawarawarga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yxa",
        Description: [
          "Mayawali"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "yxg",
        Description: [
          "Yagara"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "yxl",
        Description: [
          "Yardliyawarra"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "yxm",
        Description: [
          "Yinwum"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "yxu",
        Description: [
          "Yuyu"
        ],
        Added: "2013-09-10"
      },
      {
        Type: "language",
        Subtag: "yxy",
        Description: [
          "Yabula Yabula"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "yyr",
        Description: [
          "Yir Yoront"
        ],
        Added: "2013-09-03"
      },
      {
        Type: "language",
        Subtag: "yyu",
        Description: [
          "Yau (Sandaun Province)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yyz",
        Description: [
          "Ayizi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yzg",
        Description: [
          "E'ma Buyang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "yzk",
        Description: [
          "Zokhuo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zaa",
        Description: [
          "Sierra de Ju\xE1rez Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zab",
        Description: [
          "Western Tlacolula Valley Zapotec",
          "San Juan Guelav\xEDa Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zac",
        Description: [
          "Ocotl\xE1n Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zad",
        Description: [
          "Cajonos Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zae",
        Description: [
          "Yareni Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zaf",
        Description: [
          "Ayoquesco Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zag",
        Description: [
          "Zaghawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zah",
        Description: [
          "Zangwal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zai",
        Description: [
          "Isthmus Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zaj",
        Description: [
          "Zaramo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zak",
        Description: [
          "Zanaki"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zal",
        Description: [
          "Zauzou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zam",
        Description: [
          "Miahuatl\xE1n Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zao",
        Description: [
          "Ozolotepec Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zap",
        Description: [
          "Zapotec"
        ],
        Added: "2005-10-16",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "zaq",
        Description: [
          "Alo\xE1pam Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zar",
        Description: [
          "Rinc\xF3n Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zas",
        Description: [
          "Santo Domingo Albarradas Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zat",
        Description: [
          "Tabaa Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zau",
        Description: [
          "Zangskari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zav",
        Description: [
          "Yatzachi Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zaw",
        Description: [
          "Mitla Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zax",
        Description: [
          "Xadani Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zay",
        Description: [
          "Zayse-Zergulla",
          "Zaysete"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zaz",
        Description: [
          "Zari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zbc",
        Description: [
          "Central Berawan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zbe",
        Description: [
          "East Berawan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zbl",
        Description: [
          "Blissymbols",
          "Bliss",
          "Blissymbolics"
        ],
        Added: "2007-08-21",
        "Suppress-Script": "Blis"
      },
      {
        Type: "language",
        Subtag: "zbt",
        Description: [
          "Batui"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zbw",
        Description: [
          "West Berawan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zca",
        Description: [
          "Coatecas Altas Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zch",
        Description: [
          "Central Hongshuihe Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zdj",
        Description: [
          "Ngazidja Comorian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zea",
        Description: [
          "Zeeuws"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zeg",
        Description: [
          "Zenag"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zeh",
        Description: [
          "Eastern Hongshuihe Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zen",
        Description: [
          "Zenaga"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "zga",
        Description: [
          "Kinga"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zgb",
        Description: [
          "Guibei Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zgh",
        Description: [
          "Standard Moroccan Tamazight"
        ],
        Added: "2013-01-25"
      },
      {
        Type: "language",
        Subtag: "zgm",
        Description: [
          "Minz Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zgn",
        Description: [
          "Guibian Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zgr",
        Description: [
          "Magori"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zhb",
        Description: [
          "Zhaba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zhd",
        Description: [
          "Dai Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zhi",
        Description: [
          "Zhire"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zhn",
        Description: [
          "Nong Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zhw",
        Description: [
          "Zhoa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zhx",
        Description: [
          "Chinese (family)"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "zia",
        Description: [
          "Zia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zib",
        Description: [
          "Zimbabwe Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zik",
        Description: [
          "Zimakani"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zil",
        Description: [
          "Zialo"
        ],
        Added: "2011-08-16"
      },
      {
        Type: "language",
        Subtag: "zim",
        Description: [
          "Mesme"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zin",
        Description: [
          "Zinza"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zir",
        Description: [
          "Ziriya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ziw",
        Description: [
          "Zigula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "ziz",
        Description: [
          "Zizilivakan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zka",
        Description: [
          "Kaimbulawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zkb",
        Description: [
          "Koibal"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zkd",
        Description: [
          "Kadu"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "zkg",
        Description: [
          "Koguryo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zkh",
        Description: [
          "Khorezmian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zkk",
        Description: [
          "Karankawa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zkn",
        Description: [
          "Kanan"
        ],
        Added: "2012-08-12"
      },
      {
        Type: "language",
        Subtag: "zko",
        Description: [
          "Kott"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zkp",
        Description: [
          "S\xE3o Paulo Kaing\xE1ng"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zkr",
        Description: [
          "Zakhring"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zkt",
        Description: [
          "Kitan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zku",
        Description: [
          "Kaurna"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zkv",
        Description: [
          "Krevinian"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zkz",
        Description: [
          "Khazar"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zle",
        Description: [
          "East Slavic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "zlj",
        Description: [
          "Liujiang Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zlm",
        Description: [
          "Malay (individual language)"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "zln",
        Description: [
          "Lianshan Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zlq",
        Description: [
          "Liuqian Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zls",
        Description: [
          "South Slavic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "zlw",
        Description: [
          "West Slavic languages"
        ],
        Added: "2009-07-29",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "zma",
        Description: [
          "Manda (Australia)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmb",
        Description: [
          "Zimba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmc",
        Description: [
          "Margany"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmd",
        Description: [
          "Maridan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zme",
        Description: [
          "Mangerr"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmf",
        Description: [
          "Mfinu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmg",
        Description: [
          "Marti Ke"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmh",
        Description: [
          "Makolkol"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmi",
        Description: [
          "Negeri Sembilan Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "zmj",
        Description: [
          "Maridjabin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmk",
        Description: [
          "Mandandanyi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zml",
        Description: [
          "Matngala"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmm",
        Description: [
          "Marimanindji",
          "Marramaninyshi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmn",
        Description: [
          "Mbangwe"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmo",
        Description: [
          "Molo"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmp",
        Description: [
          "Mpuono"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmq",
        Description: [
          "Mituku"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmr",
        Description: [
          "Maranunggu"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zms",
        Description: [
          "Mbesa"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmt",
        Description: [
          "Maringarr"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmu",
        Description: [
          "Muruwari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmv",
        Description: [
          "Mbariman-Gudhinma"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmw",
        Description: [
          "Mbo (Democratic Republic of Congo)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmx",
        Description: [
          "Bomitaba"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmy",
        Description: [
          "Mariyedi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zmz",
        Description: [
          "Mbandja"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zna",
        Description: [
          "Zan Gula"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "znd",
        Description: [
          "Zande languages"
        ],
        Added: "2005-10-16",
        Scope: "collection"
      },
      {
        Type: "language",
        Subtag: "zne",
        Description: [
          "Zande (individual language)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zng",
        Description: [
          "Mang"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "znk",
        Description: [
          "Manangkari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zns",
        Description: [
          "Mangas"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zoc",
        Description: [
          "Copainal\xE1 Zoque"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zoh",
        Description: [
          "Chimalapa Zoque"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zom",
        Description: [
          "Zou"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zoo",
        Description: [
          "Asunci\xF3n Mixtepec Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zoq",
        Description: [
          "Tabasco Zoque"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zor",
        Description: [
          "Ray\xF3n Zoque"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zos",
        Description: [
          "Francisco Le\xF3n Zoque"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zpa",
        Description: [
          "Lachiguiri Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpb",
        Description: [
          "Yautepec Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpc",
        Description: [
          "Choapan Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpd",
        Description: [
          "Southeastern Ixtl\xE1n Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpe",
        Description: [
          "Petapa Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpf",
        Description: [
          "San Pedro Quiatoni Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpg",
        Description: [
          "Guevea De Humboldt Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zph",
        Description: [
          "Totomachapan Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpi",
        Description: [
          "Santa Mar\xEDa Quiegolani Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpj",
        Description: [
          "Quiavicuzas Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpk",
        Description: [
          "Tlacolulita Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpl",
        Description: [
          "Lachix\xEDo Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpm",
        Description: [
          "Mixtepec Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpn",
        Description: [
          "Santa In\xE9s Yatzechi Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpo",
        Description: [
          "Amatl\xE1n Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpp",
        Description: [
          "El Alto Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpq",
        Description: [
          "Zoogocho Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpr",
        Description: [
          "Santiago Xanica Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zps",
        Description: [
          "Coatl\xE1n Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpt",
        Description: [
          "San Vicente Coatl\xE1n Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpu",
        Description: [
          "Yal\xE1lag Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpv",
        Description: [
          "Chichicapan Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpw",
        Description: [
          "Zaniza Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpx",
        Description: [
          "San Baltazar Loxicha Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpy",
        Description: [
          "Mazaltepec Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zpz",
        Description: [
          "Texmelucan Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zqe",
        Description: [
          "Qiubei Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zra",
        Description: [
          "Kara (Korea)"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zrg",
        Description: [
          "Mirgan"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zrn",
        Description: [
          "Zerenkel"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zro",
        Description: [
          "Z\xE1paro"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zrp",
        Description: [
          "Zarphatic"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zrs",
        Description: [
          "Mairasi"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zsa",
        Description: [
          "Sarasira"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zsk",
        Description: [
          "Kaskean"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zsl",
        Description: [
          "Zambian Sign Language"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zsm",
        Description: [
          "Standard Malay"
        ],
        Added: "2009-07-29",
        Macrolanguage: "ms"
      },
      {
        Type: "language",
        Subtag: "zsr",
        Description: [
          "Southern Rincon Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zsu",
        Description: [
          "Sukurum"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zte",
        Description: [
          "Elotepec Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "ztg",
        Description: [
          "Xanagu\xEDa Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "ztl",
        Description: [
          "Lapagu\xEDa-Guivini Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "ztm",
        Description: [
          "San Agust\xEDn Mixtepec Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "ztn",
        Description: [
          "Santa Catarina Albarradas Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "ztp",
        Description: [
          "Loxicha Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "ztq",
        Description: [
          "Quioquitani-Quier\xED Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zts",
        Description: [
          "Tilquiapan Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "ztt",
        Description: [
          "Tejalapan Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "ztu",
        Description: [
          "G\xFCil\xE1 Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "ztx",
        Description: [
          "Zaachila Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zty",
        Description: [
          "Yatee Zapotec"
        ],
        Added: "2009-07-29",
        Macrolanguage: "zap"
      },
      {
        Type: "language",
        Subtag: "zua",
        Description: [
          "Zeem"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zuh",
        Description: [
          "Tokano"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zum",
        Description: [
          "Kumzari"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zun",
        Description: [
          "Zuni"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "language",
        Subtag: "zuy",
        Description: [
          "Zumaya"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zwa",
        Description: [
          "Zay"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zxx",
        Description: [
          "No linguistic content",
          "Not applicable"
        ],
        Added: "2006-03-08",
        Scope: "special"
      },
      {
        Type: "language",
        Subtag: "zyb",
        Description: [
          "Yongbei Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zyg",
        Description: [
          "Yang Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zyj",
        Description: [
          "Youjiang Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zyn",
        Description: [
          "Yongnan Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "language",
        Subtag: "zyp",
        Description: [
          "Zyphe Chin"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "language",
        Subtag: "zza",
        Description: [
          "Zaza",
          "Dimili",
          "Dimli (macrolanguage)",
          "Kirdki",
          "Kirmanjki (macrolanguage)",
          "Zazaki"
        ],
        Added: "2006-08-24",
        Scope: "macrolanguage"
      },
      {
        Type: "language",
        Subtag: "zzj",
        Description: [
          "Zuojiang Zhuang"
        ],
        Added: "2009-07-29",
        Macrolanguage: "za"
      },
      {
        Type: "extlang",
        Subtag: "aao",
        Description: [
          "Algerian Saharan Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "aao",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "abh",
        Description: [
          "Tajiki Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "abh",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "abv",
        Description: [
          "Baharna Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "abv",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "acm",
        Description: [
          "Mesopotamian Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "acm",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "acq",
        Description: [
          "Ta'izzi-Adeni Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "acq",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "acw",
        Description: [
          "Hijazi Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "acw",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "acx",
        Description: [
          "Omani Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "acx",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "acy",
        Description: [
          "Cypriot Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "acy",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "adf",
        Description: [
          "Dhofari Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "adf",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "ads",
        Description: [
          "Adamorobe Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ads",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "aeb",
        Description: [
          "Tunisian Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "aeb",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "aec",
        Description: [
          "Saidi Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "aec",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "aed",
        Description: [
          "Argentine Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "aed",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "aen",
        Description: [
          "Armenian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "aen",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "afb",
        Description: [
          "Gulf Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "afb",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "afg",
        Description: [
          "Afghan Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "afg",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "ajp",
        Description: [
          "South Levantine Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ajp",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "apc",
        Description: [
          "North Levantine Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "apc",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "apd",
        Description: [
          "Sudanese Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "apd",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "arb",
        Description: [
          "Standard Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "arb",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "arq",
        Description: [
          "Algerian Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "arq",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "ars",
        Description: [
          "Najdi Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ars",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "ary",
        Description: [
          "Moroccan Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ary",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "arz",
        Description: [
          "Egyptian Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "arz",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "ase",
        Description: [
          "American Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ase",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "asf",
        Description: [
          "Auslan",
          "Australian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "asf",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "asp",
        Description: [
          "Algerian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "asp",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "asq",
        Description: [
          "Austrian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "asq",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "asw",
        Description: [
          "Australian Aborigines Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "asw",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "auz",
        Description: [
          "Uzbeki Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "auz",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "avl",
        Description: [
          "Eastern Egyptian Bedawi Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "avl",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "ayh",
        Description: [
          "Hadrami Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ayh",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "ayl",
        Description: [
          "Libyan Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ayl",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "ayn",
        Description: [
          "Sanaani Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ayn",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "ayp",
        Description: [
          "North Mesopotamian Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ayp",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "bbz",
        Description: [
          "Babalia Creole Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "bbz",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "bfi",
        Description: [
          "British Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "bfi",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "bfk",
        Description: [
          "Ban Khor Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "bfk",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "bjn",
        Description: [
          "Banjar"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "bjn",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "bog",
        Description: [
          "Bamako Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "bog",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "bqn",
        Description: [
          "Bulgarian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "bqn",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "bqy",
        Description: [
          "Bengkala Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "bqy",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "btj",
        Description: [
          "Bacanese Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "btj",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "bve",
        Description: [
          "Berau Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "bve",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "bvl",
        Description: [
          "Bolivian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "bvl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "bvu",
        Description: [
          "Bukit Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "bvu",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "bzs",
        Description: [
          "Brazilian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "bzs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "cdo",
        Description: [
          "Min Dong Chinese"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "cdo",
        Prefix: [
          "zh"
        ],
        Macrolanguage: "zh"
      },
      {
        Type: "extlang",
        Subtag: "cds",
        Description: [
          "Chadian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "cds",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "cjy",
        Description: [
          "Jinyu Chinese"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "cjy",
        Prefix: [
          "zh"
        ],
        Macrolanguage: "zh"
      },
      {
        Type: "extlang",
        Subtag: "cmn",
        Description: [
          "Mandarin Chinese"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "cmn",
        Prefix: [
          "zh"
        ],
        Macrolanguage: "zh"
      },
      {
        Type: "extlang",
        Subtag: "coa",
        Description: [
          "Cocos Islands Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "coa",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "cpx",
        Description: [
          "Pu-Xian Chinese"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "cpx",
        Prefix: [
          "zh"
        ],
        Macrolanguage: "zh"
      },
      {
        Type: "extlang",
        Subtag: "csc",
        Description: [
          "Catalan Sign Language",
          "Lengua de se\xF1as catalana",
          "Llengua de Signes Catalana"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "csc",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "csd",
        Description: [
          "Chiangmai Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "csd",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "cse",
        Description: [
          "Czech Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "cse",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "csf",
        Description: [
          "Cuba Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "csf",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "csg",
        Description: [
          "Chilean Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "csg",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "csl",
        Description: [
          "Chinese Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "csl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "csn",
        Description: [
          "Colombian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "csn",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "csq",
        Description: [
          "Croatia Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "csq",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "csr",
        Description: [
          "Costa Rican Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "csr",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "czh",
        Description: [
          "Huizhou Chinese"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "czh",
        Prefix: [
          "zh"
        ],
        Macrolanguage: "zh"
      },
      {
        Type: "extlang",
        Subtag: "czo",
        Description: [
          "Min Zhong Chinese"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "czo",
        Prefix: [
          "zh"
        ],
        Macrolanguage: "zh"
      },
      {
        Type: "extlang",
        Subtag: "doq",
        Description: [
          "Dominican Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "doq",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "dse",
        Description: [
          "Dutch Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "dse",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "dsl",
        Description: [
          "Danish Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "dsl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "dup",
        Description: [
          "Duano"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "dup",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "ecs",
        Description: [
          "Ecuadorian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ecs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "esl",
        Description: [
          "Egypt Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "esl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "esn",
        Description: [
          "Salvadoran Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "esn",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "eso",
        Description: [
          "Estonian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "eso",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "eth",
        Description: [
          "Ethiopian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "eth",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "fcs",
        Description: [
          "Quebec Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "fcs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "fse",
        Description: [
          "Finnish Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "fse",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "fsl",
        Description: [
          "French Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "fsl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "fss",
        Description: [
          "Finland-Swedish Sign Language",
          "finlandssvenskt teckenspr\xE5k",
          "suomenruotsalainen viittomakieli"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "fss",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "gan",
        Description: [
          "Gan Chinese"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "gan",
        Prefix: [
          "zh"
        ],
        Macrolanguage: "zh"
      },
      {
        Type: "extlang",
        Subtag: "gds",
        Description: [
          "Ghandruk Sign Language"
        ],
        Added: "2012-08-12",
        "Preferred-Value": "gds",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "gom",
        Description: [
          "Goan Konkani"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "gom",
        Prefix: [
          "kok"
        ],
        Macrolanguage: "kok"
      },
      {
        Type: "extlang",
        Subtag: "gse",
        Description: [
          "Ghanaian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "gse",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "gsg",
        Description: [
          "German Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "gsg",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "gsm",
        Description: [
          "Guatemalan Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "gsm",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "gss",
        Description: [
          "Greek Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "gss",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "gus",
        Description: [
          "Guinean Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "gus",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "hab",
        Description: [
          "Hanoi Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "hab",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "haf",
        Description: [
          "Haiphong Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "haf",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "hak",
        Description: [
          "Hakka Chinese"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "hak",
        Prefix: [
          "zh"
        ],
        Macrolanguage: "zh"
      },
      {
        Type: "extlang",
        Subtag: "hds",
        Description: [
          "Honduras Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "hds",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "hji",
        Description: [
          "Haji"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "hji",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "hks",
        Description: [
          "Hong Kong Sign Language",
          "Heung Kong Sau Yue"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "hks",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "hos",
        Description: [
          "Ho Chi Minh City Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "hos",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "hps",
        Description: [
          "Hawai'i Sign Language (HSL)",
          "Hawai'i Pidgin Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "hps",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "hsh",
        Description: [
          "Hungarian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "hsh",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "hsl",
        Description: [
          "Hausa Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "hsl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "hsn",
        Description: [
          "Xiang Chinese"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "hsn",
        Prefix: [
          "zh"
        ],
        Macrolanguage: "zh"
      },
      {
        Type: "extlang",
        Subtag: "icl",
        Description: [
          "Icelandic Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "icl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "iks",
        Description: [
          "Inuit Sign Language"
        ],
        Added: "2015-02-12",
        "Preferred-Value": "iks",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "ils",
        Description: [
          "International Sign"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ils",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "inl",
        Description: [
          "Indonesian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "inl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "ins",
        Description: [
          "Indian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ins",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "ise",
        Description: [
          "Italian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ise",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "isg",
        Description: [
          "Irish Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "isg",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "isr",
        Description: [
          "Israeli Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "isr",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "jak",
        Description: [
          "Jakun"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "jak",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "jax",
        Description: [
          "Jambi Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "jax",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "jcs",
        Description: [
          "Jamaican Country Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "jcs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "jhs",
        Description: [
          "Jhankot Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "jhs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "jls",
        Description: [
          "Jamaican Sign Language"
        ],
        Added: "2010-03-11",
        "Preferred-Value": "jls",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "jos",
        Description: [
          "Jordanian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "jos",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "jsl",
        Description: [
          "Japanese Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "jsl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "jus",
        Description: [
          "Jumla Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "jus",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "kgi",
        Description: [
          "Selangor Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "kgi",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "knn",
        Description: [
          "Konkani (individual language)"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "knn",
        Prefix: [
          "kok"
        ],
        Macrolanguage: "kok"
      },
      {
        Type: "extlang",
        Subtag: "kvb",
        Description: [
          "Kubu"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "kvb",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "kvk",
        Description: [
          "Korean Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "kvk",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "kvr",
        Description: [
          "Kerinci"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "kvr",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "kxd",
        Description: [
          "Brunei"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "kxd",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "lbs",
        Description: [
          "Libyan Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "lbs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "lce",
        Description: [
          "Loncong",
          "Sekak"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "lce",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "lcf",
        Description: [
          "Lubu"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "lcf",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "liw",
        Description: [
          "Col"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "liw",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "lls",
        Description: [
          "Lithuanian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "lls",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "lsg",
        Description: [
          "Lyons Sign Language"
        ],
        Added: "2009-07-29",
        Deprecated: "2018-03-08",
        "Preferred-Value": "lsg",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "lsl",
        Description: [
          "Latvian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "lsl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "lsn",
        Description: [
          "Tibetan Sign Language"
        ],
        Added: "2019-04-16",
        "Preferred-Value": "lsn",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "lso",
        Description: [
          "Laos Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "lso",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "lsp",
        Description: [
          "Panamanian Sign Language",
          "Lengua de Se\xF1as Paname\xF1as"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "lsp",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "lst",
        Description: [
          "Trinidad and Tobago Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "lst",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "lsv",
        Description: [
          "Sivia Sign Language"
        ],
        Added: "2019-04-16",
        "Preferred-Value": "lsv",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "lsy",
        Description: [
          "Mauritian Sign Language"
        ],
        Added: "2010-03-11",
        "Preferred-Value": "lsy",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "ltg",
        Description: [
          "Latgalian"
        ],
        Added: "2010-03-11",
        "Preferred-Value": "ltg",
        Prefix: [
          "lv"
        ],
        Macrolanguage: "lv"
      },
      {
        Type: "extlang",
        Subtag: "lvs",
        Description: [
          "Standard Latvian"
        ],
        Added: "2010-03-11",
        "Preferred-Value": "lvs",
        Prefix: [
          "lv"
        ],
        Macrolanguage: "lv"
      },
      {
        Type: "extlang",
        Subtag: "lws",
        Description: [
          "Malawian Sign Language"
        ],
        Added: "2018-03-08",
        "Preferred-Value": "lws",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "lzh",
        Description: [
          "Literary Chinese"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "lzh",
        Prefix: [
          "zh"
        ],
        Macrolanguage: "zh"
      },
      {
        Type: "extlang",
        Subtag: "max",
        Description: [
          "North Moluccan Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "max",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "mdl",
        Description: [
          "Maltese Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "mdl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "meo",
        Description: [
          "Kedah Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "meo",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "mfa",
        Description: [
          "Pattani Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "mfa",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "mfb",
        Description: [
          "Bangka"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "mfb",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "mfs",
        Description: [
          "Mexican Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "mfs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "min",
        Description: [
          "Minangkabau"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "min",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "mnp",
        Description: [
          "Min Bei Chinese"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "mnp",
        Prefix: [
          "zh"
        ],
        Macrolanguage: "zh"
      },
      {
        Type: "extlang",
        Subtag: "mqg",
        Description: [
          "Kota Bangun Kutai Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "mqg",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "mre",
        Description: [
          "Martha's Vineyard Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "mre",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "msd",
        Description: [
          "Yucatec Maya Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "msd",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "msi",
        Description: [
          "Sabah Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "msi",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "msr",
        Description: [
          "Mongolian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "msr",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "mui",
        Description: [
          "Musi"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "mui",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "mzc",
        Description: [
          "Madagascar Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "mzc",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "mzg",
        Description: [
          "Monastic Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "mzg",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "mzy",
        Description: [
          "Mozambican Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "mzy",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "nan",
        Description: [
          "Min Nan Chinese"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "nan",
        Prefix: [
          "zh"
        ],
        Macrolanguage: "zh"
      },
      {
        Type: "extlang",
        Subtag: "nbs",
        Description: [
          "Namibian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "nbs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "ncs",
        Description: [
          "Nicaraguan Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ncs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "nsi",
        Description: [
          "Nigerian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "nsi",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "nsl",
        Description: [
          "Norwegian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "nsl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "nsp",
        Description: [
          "Nepalese Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "nsp",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "nsr",
        Description: [
          "Maritime Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "nsr",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "nzs",
        Description: [
          "New Zealand Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "nzs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "okl",
        Description: [
          "Old Kentish Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "okl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "orn",
        Description: [
          "Orang Kanaq"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "orn",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "ors",
        Description: [
          "Orang Seletar"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ors",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "pel",
        Description: [
          "Pekal"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "pel",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "pga",
        Description: [
          "Sudanese Creole Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "pga",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "pgz",
        Description: [
          "Papua New Guinean Sign Language"
        ],
        Added: "2016-05-30",
        "Preferred-Value": "pgz",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "pks",
        Description: [
          "Pakistan Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "pks",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "prl",
        Description: [
          "Peruvian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "prl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "prz",
        Description: [
          "Providencia Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "prz",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "psc",
        Description: [
          "Persian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "psc",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "psd",
        Description: [
          "Plains Indian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "psd",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "pse",
        Description: [
          "Central Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "pse",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "psg",
        Description: [
          "Penang Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "psg",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "psl",
        Description: [
          "Puerto Rican Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "psl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "pso",
        Description: [
          "Polish Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "pso",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "psp",
        Description: [
          "Philippine Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "psp",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "psr",
        Description: [
          "Portuguese Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "psr",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "pys",
        Description: [
          "Paraguayan Sign Language",
          "Lengua de Se\xF1as del Paraguay"
        ],
        Added: "2010-03-11",
        "Preferred-Value": "pys",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "rms",
        Description: [
          "Romanian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "rms",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "rsi",
        Description: [
          "Rennellese Sign Language"
        ],
        Added: "2009-07-29",
        Deprecated: "2017-02-23",
        "Preferred-Value": "rsi",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "rsl",
        Description: [
          "Russian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "rsl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "rsm",
        Description: [
          "Miriwoong Sign Language"
        ],
        Added: "2016-05-30",
        "Preferred-Value": "rsm",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "sdl",
        Description: [
          "Saudi Arabian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "sdl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "sfb",
        Description: [
          "Langue des signes de Belgique Francophone",
          "French Belgian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "sfb",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "sfs",
        Description: [
          "South African Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "sfs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "sgg",
        Description: [
          "Swiss-German Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "sgg",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "sgx",
        Description: [
          "Sierra Leone Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "sgx",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "shu",
        Description: [
          "Chadian Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "shu",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "slf",
        Description: [
          "Swiss-Italian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "slf",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "sls",
        Description: [
          "Singapore Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "sls",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "sqk",
        Description: [
          "Albanian Sign Language"
        ],
        Added: "2012-08-12",
        "Preferred-Value": "sqk",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "sqs",
        Description: [
          "Sri Lankan Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "sqs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "ssh",
        Description: [
          "Shihhi Arabic"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ssh",
        Prefix: [
          "ar"
        ],
        Macrolanguage: "ar"
      },
      {
        Type: "extlang",
        Subtag: "ssp",
        Description: [
          "Spanish Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ssp",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "ssr",
        Description: [
          "Swiss-French Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ssr",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "svk",
        Description: [
          "Slovakian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "svk",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "swc",
        Description: [
          "Congo Swahili"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "swc",
        Prefix: [
          "sw"
        ],
        Macrolanguage: "sw"
      },
      {
        Type: "extlang",
        Subtag: "swh",
        Description: [
          "Swahili (individual language)",
          "Kiswahili"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "swh",
        Prefix: [
          "sw"
        ],
        Macrolanguage: "sw"
      },
      {
        Type: "extlang",
        Subtag: "swl",
        Description: [
          "Swedish Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "swl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "syy",
        Description: [
          "Al-Sayyid Bedouin Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "syy",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "szs",
        Description: [
          "Solomon Islands Sign Language"
        ],
        Added: "2017-02-23",
        "Preferred-Value": "szs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "tmw",
        Description: [
          "Temuan"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "tmw",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "tse",
        Description: [
          "Tunisian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "tse",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "tsm",
        Description: [
          "Turkish Sign Language",
          "T\xFCrk \u0130\u015Faret Dili"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "tsm",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "tsq",
        Description: [
          "Thai Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "tsq",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "tss",
        Description: [
          "Taiwan Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "tss",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "tsy",
        Description: [
          "Tebul Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "tsy",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "tza",
        Description: [
          "Tanzanian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "tza",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "ugn",
        Description: [
          "Ugandan Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ugn",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "ugy",
        Description: [
          "Uruguayan Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ugy",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "ukl",
        Description: [
          "Ukrainian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ukl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "uks",
        Description: [
          "Urub\xFA-Kaapor Sign Language",
          "Kaapor Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "uks",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "urk",
        Description: [
          "Urak Lawoi'"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "urk",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "uzn",
        Description: [
          "Northern Uzbek"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "uzn",
        Prefix: [
          "uz"
        ],
        Macrolanguage: "uz"
      },
      {
        Type: "extlang",
        Subtag: "uzs",
        Description: [
          "Southern Uzbek"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "uzs",
        Prefix: [
          "uz"
        ],
        Macrolanguage: "uz"
      },
      {
        Type: "extlang",
        Subtag: "vgt",
        Description: [
          "Vlaamse Gebarentaal",
          "Flemish Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "vgt",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "vkk",
        Description: [
          "Kaur"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "vkk",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "vkt",
        Description: [
          "Tenggarong Kutai Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "vkt",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "vsi",
        Description: [
          "Moldova Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "vsi",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "vsl",
        Description: [
          "Venezuelan Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "vsl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "vsv",
        Description: [
          "Valencian Sign Language",
          "Llengua de signes valenciana"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "vsv",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "wbs",
        Description: [
          "West Bengal Sign Language"
        ],
        Added: "2017-02-23",
        "Preferred-Value": "wbs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "wuu",
        Description: [
          "Wu Chinese"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "wuu",
        Prefix: [
          "zh"
        ],
        Macrolanguage: "zh"
      },
      {
        Type: "extlang",
        Subtag: "xki",
        Description: [
          "Kenyan Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "xki",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "xml",
        Description: [
          "Malaysian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "xml",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "xmm",
        Description: [
          "Manado Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "xmm",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "xms",
        Description: [
          "Moroccan Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "xms",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "yds",
        Description: [
          "Yiddish Sign Language"
        ],
        Added: "2009-07-29",
        Deprecated: "2015-02-12",
        "Preferred-Value": "yds",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "ygs",
        Description: [
          "Yol\u014Bu Sign Language"
        ],
        Added: "2014-02-28",
        "Preferred-Value": "ygs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "yhs",
        Description: [
          "Yan-nha\u014Bu Sign Language"
        ],
        Added: "2015-04-17",
        "Preferred-Value": "yhs",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "ysl",
        Description: [
          "Yugoslavian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "ysl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "yue",
        Description: [
          "Yue Chinese",
          "Cantonese"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "yue",
        Prefix: [
          "zh"
        ],
        Macrolanguage: "zh"
      },
      {
        Type: "extlang",
        Subtag: "zib",
        Description: [
          "Zimbabwe Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "zib",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "zlm",
        Description: [
          "Malay (individual language)"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "zlm",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "zmi",
        Description: [
          "Negeri Sembilan Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "zmi",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "extlang",
        Subtag: "zsl",
        Description: [
          "Zambian Sign Language"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "zsl",
        Prefix: [
          "sgn"
        ]
      },
      {
        Type: "extlang",
        Subtag: "zsm",
        Description: [
          "Standard Malay"
        ],
        Added: "2009-07-29",
        "Preferred-Value": "zsm",
        Prefix: [
          "ms"
        ],
        Macrolanguage: "ms"
      },
      {
        Type: "script",
        Subtag: "Adlm",
        Description: [
          "Adlam"
        ],
        Added: "2014-12-11"
      },
      {
        Type: "script",
        Subtag: "Afak",
        Description: [
          "Afaka"
        ],
        Added: "2011-01-07"
      },
      {
        Type: "script",
        Subtag: "Aghb",
        Description: [
          "Caucasian Albanian"
        ],
        Added: "2012-11-01"
      },
      {
        Type: "script",
        Subtag: "Ahom",
        Description: [
          "Ahom",
          "Tai Ahom"
        ],
        Added: "2013-12-02"
      },
      {
        Type: "script",
        Subtag: "Arab",
        Description: [
          "Arabic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Aran",
        Description: [
          "Arabic (Nastaliq variant)"
        ],
        Added: "2014-12-11"
      },
      {
        Type: "script",
        Subtag: "Armi",
        Description: [
          "Imperial Aramaic"
        ],
        Added: "2007-12-05"
      },
      {
        Type: "script",
        Subtag: "Armn",
        Description: [
          "Armenian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Avst",
        Description: [
          "Avestan"
        ],
        Added: "2007-07-28"
      },
      {
        Type: "script",
        Subtag: "Bali",
        Description: [
          "Balinese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Bamu",
        Description: [
          "Bamum"
        ],
        Added: "2009-07-30"
      },
      {
        Type: "script",
        Subtag: "Bass",
        Description: [
          "Bassa Vah"
        ],
        Added: "2010-04-10"
      },
      {
        Type: "script",
        Subtag: "Batk",
        Description: [
          "Batak"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Beng",
        Description: [
          "Bengali",
          "Bangla"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Bhks",
        Description: [
          "Bhaiksuki"
        ],
        Added: "2015-07-24"
      },
      {
        Type: "script",
        Subtag: "Blis",
        Description: [
          "Blissymbols"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Bopo",
        Description: [
          "Bopomofo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Brah",
        Description: [
          "Brahmi"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Brai",
        Description: [
          "Braille"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Bugi",
        Description: [
          "Buginese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Buhd",
        Description: [
          "Buhid"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Cakm",
        Description: [
          "Chakma"
        ],
        Added: "2007-12-05"
      },
      {
        Type: "script",
        Subtag: "Cans",
        Description: [
          "Unified Canadian Aboriginal Syllabics"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Cari",
        Description: [
          "Carian"
        ],
        Added: "2006-07-21"
      },
      {
        Type: "script",
        Subtag: "Cham",
        Description: [
          "Cham"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Cher",
        Description: [
          "Cherokee"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Chrs",
        Description: [
          "Chorasmian"
        ],
        Added: "2019-09-11"
      },
      {
        Type: "script",
        Subtag: "Cirt",
        Description: [
          "Cirth"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Copt",
        Description: [
          "Coptic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Cpmn",
        Description: [
          "Cypro-Minoan"
        ],
        Added: "2017-08-13"
      },
      {
        Type: "script",
        Subtag: "Cprt",
        Description: [
          "Cypriot syllabary"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Cyrl",
        Description: [
          "Cyrillic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Cyrs",
        Description: [
          "Cyrillic (Old Church Slavonic variant)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Deva",
        Description: [
          "Devanagari",
          "Nagari"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Diak",
        Description: [
          "Dives Akuru"
        ],
        Added: "2019-09-11"
      },
      {
        Type: "script",
        Subtag: "Dogr",
        Description: [
          "Dogra"
        ],
        Added: "2017-01-13"
      },
      {
        Type: "script",
        Subtag: "Dsrt",
        Description: [
          "Deseret",
          "Mormon"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Dupl",
        Description: [
          "Duployan shorthand",
          "Duployan stenography"
        ],
        Added: "2010-08-16"
      },
      {
        Type: "script",
        Subtag: "Egyd",
        Description: [
          "Egyptian demotic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Egyh",
        Description: [
          "Egyptian hieratic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Egyp",
        Description: [
          "Egyptian hieroglyphs"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Elba",
        Description: [
          "Elbasan"
        ],
        Added: "2010-08-16"
      },
      {
        Type: "script",
        Subtag: "Elym",
        Description: [
          "Elymaic"
        ],
        Added: "2018-10-28"
      },
      {
        Type: "script",
        Subtag: "Ethi",
        Description: [
          "Ethiopic",
          "Ge\u02BBez",
          "Ge'ez"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Geok",
        Description: [
          "Khutsuri (Asomtavruli and Nuskhuri)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Geor",
        Description: [
          "Georgian (Mkhedruli and Mtavruli)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Glag",
        Description: [
          "Glagolitic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Gong",
        Description: [
          "Gunjala Gondi"
        ],
        Added: "2017-01-13"
      },
      {
        Type: "script",
        Subtag: "Gonm",
        Description: [
          "Masaram Gondi"
        ],
        Added: "2017-01-13"
      },
      {
        Type: "script",
        Subtag: "Goth",
        Description: [
          "Gothic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Gran",
        Description: [
          "Grantha"
        ],
        Added: "2009-12-09"
      },
      {
        Type: "script",
        Subtag: "Grek",
        Description: [
          "Greek"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Gujr",
        Description: [
          "Gujarati"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Guru",
        Description: [
          "Gurmukhi"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Hanb",
        Description: [
          "Han with Bopomofo (alias for Han + Bopomofo)"
        ],
        Added: "2016-02-08"
      },
      {
        Type: "script",
        Subtag: "Hang",
        Description: [
          "Hangul",
          "Hang\u016Dl",
          "Hangeul"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Hani",
        Description: [
          "Han",
          "Hanzi",
          "Kanji",
          "Hanja"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Hano",
        Description: [
          "Hanunoo",
          "Hanun\xF3o"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Hans",
        Description: [
          "Han (Simplified variant)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Hant",
        Description: [
          "Han (Traditional variant)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Hatr",
        Description: [
          "Hatran"
        ],
        Added: "2013-12-02"
      },
      {
        Type: "script",
        Subtag: "Hebr",
        Description: [
          "Hebrew"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Hira",
        Description: [
          "Hiragana"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Hluw",
        Description: [
          "Anatolian Hieroglyphs",
          "Luwian Hieroglyphs",
          "Hittite Hieroglyphs"
        ],
        Added: "2011-12-28"
      },
      {
        Type: "script",
        Subtag: "Hmng",
        Description: [
          "Pahawh Hmong"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Hmnp",
        Description: [
          "Nyiakeng Puachue Hmong"
        ],
        Added: "2017-08-13"
      },
      {
        Type: "script",
        Subtag: "Hrkt",
        Description: [
          "Japanese syllabaries (alias for Hiragana + Katakana)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Hung",
        Description: [
          "Old Hungarian",
          "Hungarian Runic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Inds",
        Description: [
          "Indus",
          "Harappan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Ital",
        Description: [
          "Old Italic (Etruscan, Oscan, etc.)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Jamo",
        Description: [
          "Jamo (alias for Jamo subset of Hangul)"
        ],
        Added: "2016-02-08"
      },
      {
        Type: "script",
        Subtag: "Java",
        Description: [
          "Javanese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Jpan",
        Description: [
          "Japanese (alias for Han + Hiragana + Katakana)"
        ],
        Added: "2006-07-21"
      },
      {
        Type: "script",
        Subtag: "Jurc",
        Description: [
          "Jurchen"
        ],
        Added: "2011-01-07"
      },
      {
        Type: "script",
        Subtag: "Kali",
        Description: [
          "Kayah Li"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Kana",
        Description: [
          "Katakana"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Khar",
        Description: [
          "Kharoshthi"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Khmr",
        Description: [
          "Khmer"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Khoj",
        Description: [
          "Khojki"
        ],
        Added: "2011-08-16"
      },
      {
        Type: "script",
        Subtag: "Kitl",
        Description: [
          "Khitan large script"
        ],
        Added: "2014-12-11"
      },
      {
        Type: "script",
        Subtag: "Kits",
        Description: [
          "Khitan small script"
        ],
        Added: "2014-12-11"
      },
      {
        Type: "script",
        Subtag: "Knda",
        Description: [
          "Kannada"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Kore",
        Description: [
          "Korean (alias for Hangul + Han)"
        ],
        Added: "2007-07-05"
      },
      {
        Type: "script",
        Subtag: "Kpel",
        Description: [
          "Kpelle"
        ],
        Added: "2010-04-10"
      },
      {
        Type: "script",
        Subtag: "Kthi",
        Description: [
          "Kaithi"
        ],
        Added: "2007-12-05"
      },
      {
        Type: "script",
        Subtag: "Lana",
        Description: [
          "Tai Tham",
          "Lanna"
        ],
        Added: "2006-07-21"
      },
      {
        Type: "script",
        Subtag: "Laoo",
        Description: [
          "Lao"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Latf",
        Description: [
          "Latin (Fraktur variant)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Latg",
        Description: [
          "Latin (Gaelic variant)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Latn",
        Description: [
          "Latin"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Leke",
        Description: [
          "Leke"
        ],
        Added: "2015-07-24"
      },
      {
        Type: "script",
        Subtag: "Lepc",
        Description: [
          "Lepcha",
          "R\xF3ng"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Limb",
        Description: [
          "Limbu"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Lina",
        Description: [
          "Linear A"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Linb",
        Description: [
          "Linear B"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Lisu",
        Description: [
          "Lisu",
          "Fraser"
        ],
        Added: "2009-03-13"
      },
      {
        Type: "script",
        Subtag: "Loma",
        Description: [
          "Loma"
        ],
        Added: "2010-04-10"
      },
      {
        Type: "script",
        Subtag: "Lyci",
        Description: [
          "Lycian"
        ],
        Added: "2006-07-21"
      },
      {
        Type: "script",
        Subtag: "Lydi",
        Description: [
          "Lydian"
        ],
        Added: "2006-07-21"
      },
      {
        Type: "script",
        Subtag: "Mahj",
        Description: [
          "Mahajani"
        ],
        Added: "2012-11-01"
      },
      {
        Type: "script",
        Subtag: "Maka",
        Description: [
          "Makasar"
        ],
        Added: "2017-01-13"
      },
      {
        Type: "script",
        Subtag: "Mand",
        Description: [
          "Mandaic",
          "Mandaean"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Mani",
        Description: [
          "Manichaean"
        ],
        Added: "2007-07-28"
      },
      {
        Type: "script",
        Subtag: "Marc",
        Description: [
          "Marchen"
        ],
        Added: "2014-12-11"
      },
      {
        Type: "script",
        Subtag: "Maya",
        Description: [
          "Mayan hieroglyphs"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Medf",
        Description: [
          "Medefaidrin",
          "Oberi Okaime",
          "Oberi \u0186kaim\u025B"
        ],
        Added: "2017-01-13"
      },
      {
        Type: "script",
        Subtag: "Mend",
        Description: [
          "Mende Kikakui"
        ],
        Added: "2010-04-10"
      },
      {
        Type: "script",
        Subtag: "Merc",
        Description: [
          "Meroitic Cursive"
        ],
        Added: "2009-12-09"
      },
      {
        Type: "script",
        Subtag: "Mero",
        Description: [
          "Meroitic Hieroglyphs"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Mlym",
        Description: [
          "Malayalam"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Modi",
        Description: [
          "Modi",
          "Mo\u1E0D\u012B"
        ],
        Added: "2013-12-02"
      },
      {
        Type: "script",
        Subtag: "Mong",
        Description: [
          "Mongolian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Moon",
        Description: [
          "Moon",
          "Moon code",
          "Moon script",
          "Moon type"
        ],
        Added: "2007-01-26"
      },
      {
        Type: "script",
        Subtag: "Mroo",
        Description: [
          "Mro",
          "Mru"
        ],
        Added: "2011-01-07"
      },
      {
        Type: "script",
        Subtag: "Mtei",
        Description: [
          "Meitei Mayek",
          "Meithei",
          "Meetei"
        ],
        Added: "2007-01-26"
      },
      {
        Type: "script",
        Subtag: "Mult",
        Description: [
          "Multani"
        ],
        Added: "2013-12-02"
      },
      {
        Type: "script",
        Subtag: "Mymr",
        Description: [
          "Myanmar",
          "Burmese"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Nand",
        Description: [
          "Nandinagari"
        ],
        Added: "2018-10-28"
      },
      {
        Type: "script",
        Subtag: "Narb",
        Description: [
          "Old North Arabian",
          "Ancient North Arabian"
        ],
        Added: "2010-04-10"
      },
      {
        Type: "script",
        Subtag: "Nbat",
        Description: [
          "Nabataean"
        ],
        Added: "2010-04-10"
      },
      {
        Type: "script",
        Subtag: "Newa",
        Description: [
          "Newa",
          "Newar",
          "Newari",
          "Nep\u0101la lipi"
        ],
        Added: "2016-01-04"
      },
      {
        Type: "script",
        Subtag: "Nkdb",
        Description: [
          "Naxi Dongba",
          "na\xB2\xB9\u0255i\xB3\xB3 to\xB3\xB3ba\xB2\xB9",
          "Nakhi Tomba"
        ],
        Added: "2017-08-13"
      },
      {
        Type: "script",
        Subtag: "Nkgb",
        Description: [
          "Naxi Geba",
          "na\xB2\xB9\u0255i\xB3\xB3 g\u028C\xB2\xB9ba\xB2\xB9",
          "'Na-'Khi \xB2Gg\u014F-\xB9baw",
          "Nakhi Geba"
        ],
        Added: "2009-03-13"
      },
      {
        Type: "script",
        Subtag: "Nkoo",
        Description: [
          "N\u2019Ko",
          "N'Ko"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Nshu",
        Description: [
          "N\xFCshu"
        ],
        Added: "2011-01-07"
      },
      {
        Type: "script",
        Subtag: "Ogam",
        Description: [
          "Ogham"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Olck",
        Description: [
          "Ol Chiki",
          "Ol Cemet'",
          "Ol",
          "Santali"
        ],
        Added: "2006-07-21"
      },
      {
        Type: "script",
        Subtag: "Orkh",
        Description: [
          "Old Turkic",
          "Orkhon Runic"
        ],
        Added: "2009-07-30"
      },
      {
        Type: "script",
        Subtag: "Orya",
        Description: [
          "Oriya",
          "Odia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Osge",
        Description: [
          "Osage"
        ],
        Added: "2014-12-11"
      },
      {
        Type: "script",
        Subtag: "Osma",
        Description: [
          "Osmanya"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Palm",
        Description: [
          "Palmyrene"
        ],
        Added: "2010-04-10"
      },
      {
        Type: "script",
        Subtag: "Pauc",
        Description: [
          "Pau Cin Hau"
        ],
        Added: "2013-12-02"
      },
      {
        Type: "script",
        Subtag: "Perm",
        Description: [
          "Old Permic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Phag",
        Description: [
          "Phags-pa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Phli",
        Description: [
          "Inscriptional Pahlavi"
        ],
        Added: "2007-12-05"
      },
      {
        Type: "script",
        Subtag: "Phlp",
        Description: [
          "Psalter Pahlavi"
        ],
        Added: "2007-12-05"
      },
      {
        Type: "script",
        Subtag: "Phlv",
        Description: [
          "Book Pahlavi"
        ],
        Added: "2007-07-28"
      },
      {
        Type: "script",
        Subtag: "Phnx",
        Description: [
          "Phoenician"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Piqd",
        Description: [
          "Klingon (KLI pIqaD)"
        ],
        Added: "2016-01-04"
      },
      {
        Type: "script",
        Subtag: "Plrd",
        Description: [
          "Miao",
          "Pollard"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Prti",
        Description: [
          "Inscriptional Parthian"
        ],
        Added: "2007-12-05"
      },
      {
        Type: "script",
        Subtag: "Qaaa..Qabx",
        Description: [
          "Private use"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Rjng",
        Description: [
          "Rejang",
          "Redjang",
          "Kaganga"
        ],
        Added: "2006-10-17"
      },
      {
        Type: "script",
        Subtag: "Rohg",
        Description: [
          "Hanifi Rohingya"
        ],
        Added: "2017-12-13"
      },
      {
        Type: "script",
        Subtag: "Roro",
        Description: [
          "Rongorongo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Runr",
        Description: [
          "Runic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Samr",
        Description: [
          "Samaritan"
        ],
        Added: "2007-07-28"
      },
      {
        Type: "script",
        Subtag: "Sara",
        Description: [
          "Sarati"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Sarb",
        Description: [
          "Old South Arabian"
        ],
        Added: "2009-07-30"
      },
      {
        Type: "script",
        Subtag: "Saur",
        Description: [
          "Saurashtra"
        ],
        Added: "2006-07-21"
      },
      {
        Type: "script",
        Subtag: "Sgnw",
        Description: [
          "SignWriting"
        ],
        Added: "2006-10-17"
      },
      {
        Type: "script",
        Subtag: "Shaw",
        Description: [
          "Shavian",
          "Shaw"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Shrd",
        Description: [
          "Sharada",
          "\u015A\u0101rad\u0101"
        ],
        Added: "2011-01-07"
      },
      {
        Type: "script",
        Subtag: "Shui",
        Description: [
          "Shuishu"
        ],
        Added: "2017-08-13"
      },
      {
        Type: "script",
        Subtag: "Sidd",
        Description: [
          "Siddham",
          "Siddha\u1E43",
          "Siddham\u0101t\u1E5Bk\u0101"
        ],
        Added: "2013-12-02"
      },
      {
        Type: "script",
        Subtag: "Sind",
        Description: [
          "Khudawadi",
          "Sindhi"
        ],
        Added: "2010-08-16"
      },
      {
        Type: "script",
        Subtag: "Sinh",
        Description: [
          "Sinhala"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Sogd",
        Description: [
          "Sogdian"
        ],
        Added: "2017-12-13"
      },
      {
        Type: "script",
        Subtag: "Sogo",
        Description: [
          "Old Sogdian"
        ],
        Added: "2017-12-13"
      },
      {
        Type: "script",
        Subtag: "Sora",
        Description: [
          "Sora Sompeng"
        ],
        Added: "2011-01-07"
      },
      {
        Type: "script",
        Subtag: "Soyo",
        Description: [
          "Soyombo"
        ],
        Added: "2017-01-13"
      },
      {
        Type: "script",
        Subtag: "Sund",
        Description: [
          "Sundanese"
        ],
        Added: "2006-07-21"
      },
      {
        Type: "script",
        Subtag: "Sylo",
        Description: [
          "Syloti Nagri"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Syrc",
        Description: [
          "Syriac"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Syre",
        Description: [
          "Syriac (Estrangelo variant)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Syrj",
        Description: [
          "Syriac (Western variant)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Syrn",
        Description: [
          "Syriac (Eastern variant)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Tagb",
        Description: [
          "Tagbanwa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Takr",
        Description: [
          "Takri",
          "\u1E6C\u0101kr\u012B",
          "\u1E6C\u0101\u1E45kr\u012B"
        ],
        Added: "2011-01-07"
      },
      {
        Type: "script",
        Subtag: "Tale",
        Description: [
          "Tai Le"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Talu",
        Description: [
          "New Tai Lue"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Taml",
        Description: [
          "Tamil"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Tang",
        Description: [
          "Tangut"
        ],
        Added: "2011-01-07"
      },
      {
        Type: "script",
        Subtag: "Tavt",
        Description: [
          "Tai Viet"
        ],
        Added: "2007-12-05"
      },
      {
        Type: "script",
        Subtag: "Telu",
        Description: [
          "Telugu"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Teng",
        Description: [
          "Tengwar"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Tfng",
        Description: [
          "Tifinagh",
          "Berber"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Tglg",
        Description: [
          "Tagalog",
          "Baybayin",
          "Alibata"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Thaa",
        Description: [
          "Thaana"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Thai",
        Description: [
          "Thai"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Tibt",
        Description: [
          "Tibetan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Tirh",
        Description: [
          "Tirhuta"
        ],
        Added: "2011-08-16"
      },
      {
        Type: "script",
        Subtag: "Ugar",
        Description: [
          "Ugaritic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Vaii",
        Description: [
          "Vai"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Visp",
        Description: [
          "Visible Speech"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Wara",
        Description: [
          "Warang Citi",
          "Varang Kshiti"
        ],
        Added: "2009-12-09"
      },
      {
        Type: "script",
        Subtag: "Wcho",
        Description: [
          "Wancho"
        ],
        Added: "2017-08-13"
      },
      {
        Type: "script",
        Subtag: "Wole",
        Description: [
          "Woleai"
        ],
        Added: "2011-01-07"
      },
      {
        Type: "script",
        Subtag: "Xpeo",
        Description: [
          "Old Persian"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Xsux",
        Description: [
          "Sumero-Akkadian cuneiform"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Yezi",
        Description: [
          "Yezidi"
        ],
        Added: "2019-09-11"
      },
      {
        Type: "script",
        Subtag: "Yiii",
        Description: [
          "Yi"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Zanb",
        Description: [
          "Zanabazar Square",
          "Zanabazarin D\xF6rb\xF6ljin Useg",
          "Xewtee D\xF6rb\xF6ljin Bicig",
          "Horizontal Square Script"
        ],
        Added: "2017-01-13"
      },
      {
        Type: "script",
        Subtag: "Zinh",
        Description: [
          "Code for inherited script"
        ],
        Added: "2009-04-03",
        Comments: [
          "Not intended for use as a language subtag"
        ]
      },
      {
        Type: "script",
        Subtag: "Zmth",
        Description: [
          "Mathematical notation"
        ],
        Added: "2007-12-05"
      },
      {
        Type: "script",
        Subtag: "Zsye",
        Description: [
          "Symbols (Emoji variant)"
        ],
        Added: "2016-01-04"
      },
      {
        Type: "script",
        Subtag: "Zsym",
        Description: [
          "Symbols"
        ],
        Added: "2007-12-05"
      },
      {
        Type: "script",
        Subtag: "Zxxx",
        Description: [
          "Code for unwritten documents"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Zyyy",
        Description: [
          "Code for undetermined script"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "script",
        Subtag: "Zzzz",
        Description: [
          "Code for uncoded script"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AA",
        Description: [
          "Private use"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AC",
        Description: [
          "Ascension Island"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "region",
        Subtag: "AD",
        Description: [
          "Andorra"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AE",
        Description: [
          "United Arab Emirates"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AF",
        Description: [
          "Afghanistan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AG",
        Description: [
          "Antigua and Barbuda"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AI",
        Description: [
          "Anguilla"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AL",
        Description: [
          "Albania"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AM",
        Description: [
          "Armenia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AN",
        Description: [
          "Netherlands Antilles"
        ],
        Added: "2005-10-16",
        Deprecated: "2011-01-07",
        Comments: [
          "see BQ, CW, and SX"
        ]
      },
      {
        Type: "region",
        Subtag: "AO",
        Description: [
          "Angola"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AQ",
        Description: [
          "Antarctica"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AR",
        Description: [
          "Argentina"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AS",
        Description: [
          "American Samoa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AT",
        Description: [
          "Austria"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AU",
        Description: [
          "Australia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AW",
        Description: [
          "Aruba"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AX",
        Description: [
          "\xC5land Islands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "AZ",
        Description: [
          "Azerbaijan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BA",
        Description: [
          "Bosnia and Herzegovina"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BB",
        Description: [
          "Barbados"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BD",
        Description: [
          "Bangladesh"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BE",
        Description: [
          "Belgium"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BF",
        Description: [
          "Burkina Faso"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BG",
        Description: [
          "Bulgaria"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BH",
        Description: [
          "Bahrain"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BI",
        Description: [
          "Burundi"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BJ",
        Description: [
          "Benin"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BL",
        Description: [
          "Saint Barth\xE9lemy"
        ],
        Added: "2007-11-02"
      },
      {
        Type: "region",
        Subtag: "BM",
        Description: [
          "Bermuda"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BN",
        Description: [
          "Brunei Darussalam"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BO",
        Description: [
          "Bolivia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BQ",
        Description: [
          "Bonaire, Sint Eustatius and Saba"
        ],
        Added: "2011-01-07"
      },
      {
        Type: "region",
        Subtag: "BR",
        Description: [
          "Brazil"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BS",
        Description: [
          "Bahamas"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BT",
        Description: [
          "Bhutan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BU",
        Description: [
          "Burma"
        ],
        Added: "2005-10-16",
        Deprecated: "1989-12-05",
        "Preferred-Value": "MM"
      },
      {
        Type: "region",
        Subtag: "BV",
        Description: [
          "Bouvet Island"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BW",
        Description: [
          "Botswana"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BY",
        Description: [
          "Belarus"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "BZ",
        Description: [
          "Belize"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CA",
        Description: [
          "Canada"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CC",
        Description: [
          "Cocos (Keeling) Islands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CD",
        Description: [
          "The Democratic Republic of the Congo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CF",
        Description: [
          "Central African Republic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CG",
        Description: [
          "Congo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CH",
        Description: [
          "Switzerland"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CI",
        Description: [
          "C\xF4te d'Ivoire"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CK",
        Description: [
          "Cook Islands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CL",
        Description: [
          "Chile"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CM",
        Description: [
          "Cameroon"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CN",
        Description: [
          "China"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CO",
        Description: [
          "Colombia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CP",
        Description: [
          "Clipperton Island"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "region",
        Subtag: "CR",
        Description: [
          "Costa Rica"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CS",
        Description: [
          "Serbia and Montenegro"
        ],
        Added: "2005-10-16",
        Deprecated: "2006-10-05",
        Comments: [
          "see RS for Serbia or ME for Montenegro"
        ]
      },
      {
        Type: "region",
        Subtag: "CU",
        Description: [
          "Cuba"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CV",
        Description: [
          "Cabo Verde",
          "Cape Verde"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CW",
        Description: [
          "Cura\xE7ao"
        ],
        Added: "2011-01-07"
      },
      {
        Type: "region",
        Subtag: "CX",
        Description: [
          "Christmas Island"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CY",
        Description: [
          "Cyprus"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "CZ",
        Description: [
          "Czechia",
          "Czech Republic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "DD",
        Description: [
          "German Democratic Republic"
        ],
        Added: "2005-10-16",
        Deprecated: "1990-10-30",
        "Preferred-Value": "DE"
      },
      {
        Type: "region",
        Subtag: "DE",
        Description: [
          "Germany"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "DG",
        Description: [
          "Diego Garcia"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "region",
        Subtag: "DJ",
        Description: [
          "Djibouti"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "DK",
        Description: [
          "Denmark"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "DM",
        Description: [
          "Dominica"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "DO",
        Description: [
          "Dominican Republic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "DZ",
        Description: [
          "Algeria"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "EA",
        Description: [
          "Ceuta, Melilla"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "region",
        Subtag: "EC",
        Description: [
          "Ecuador"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "EE",
        Description: [
          "Estonia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "EG",
        Description: [
          "Egypt"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "EH",
        Description: [
          "Western Sahara"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "ER",
        Description: [
          "Eritrea"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "ES",
        Description: [
          "Spain"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "ET",
        Description: [
          "Ethiopia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "EU",
        Description: [
          "European Union"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "region",
        Subtag: "EZ",
        Description: [
          "Eurozone"
        ],
        Added: "2016-07-14"
      },
      {
        Type: "region",
        Subtag: "FI",
        Description: [
          "Finland"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "FJ",
        Description: [
          "Fiji"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "FK",
        Description: [
          "Falkland Islands (Malvinas)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "FM",
        Description: [
          "Federated States of Micronesia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "FO",
        Description: [
          "Faroe Islands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "FR",
        Description: [
          "France"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "FX",
        Description: [
          "Metropolitan France"
        ],
        Added: "2005-10-16",
        Deprecated: "1997-07-14",
        "Preferred-Value": "FR"
      },
      {
        Type: "region",
        Subtag: "GA",
        Description: [
          "Gabon"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GB",
        Description: [
          "United Kingdom"
        ],
        Added: "2005-10-16",
        Comments: [
          "as of 2006-03-29 GB no longer includes the Channel Islands and Isle of Man; see GG, JE, IM"
        ]
      },
      {
        Type: "region",
        Subtag: "GD",
        Description: [
          "Grenada"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GE",
        Description: [
          "Georgia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GF",
        Description: [
          "French Guiana"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GG",
        Description: [
          "Guernsey"
        ],
        Added: "2006-03-29"
      },
      {
        Type: "region",
        Subtag: "GH",
        Description: [
          "Ghana"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GI",
        Description: [
          "Gibraltar"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GL",
        Description: [
          "Greenland"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GM",
        Description: [
          "Gambia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GN",
        Description: [
          "Guinea"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GP",
        Description: [
          "Guadeloupe"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GQ",
        Description: [
          "Equatorial Guinea"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GR",
        Description: [
          "Greece"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GS",
        Description: [
          "South Georgia and the South Sandwich Islands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GT",
        Description: [
          "Guatemala"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GU",
        Description: [
          "Guam"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GW",
        Description: [
          "Guinea-Bissau"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "GY",
        Description: [
          "Guyana"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "HK",
        Description: [
          "Hong Kong"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "HM",
        Description: [
          "Heard Island and McDonald Islands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "HN",
        Description: [
          "Honduras"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "HR",
        Description: [
          "Croatia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "HT",
        Description: [
          "Haiti"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "HU",
        Description: [
          "Hungary"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "IC",
        Description: [
          "Canary Islands"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "region",
        Subtag: "ID",
        Description: [
          "Indonesia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "IE",
        Description: [
          "Ireland"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "IL",
        Description: [
          "Israel"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "IM",
        Description: [
          "Isle of Man"
        ],
        Added: "2006-03-29"
      },
      {
        Type: "region",
        Subtag: "IN",
        Description: [
          "India"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "IO",
        Description: [
          "British Indian Ocean Territory"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "IQ",
        Description: [
          "Iraq"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "IR",
        Description: [
          "Islamic Republic of Iran"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "IS",
        Description: [
          "Iceland"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "IT",
        Description: [
          "Italy"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "JE",
        Description: [
          "Jersey"
        ],
        Added: "2006-03-29"
      },
      {
        Type: "region",
        Subtag: "JM",
        Description: [
          "Jamaica"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "JO",
        Description: [
          "Jordan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "JP",
        Description: [
          "Japan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "KE",
        Description: [
          "Kenya"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "KG",
        Description: [
          "Kyrgyzstan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "KH",
        Description: [
          "Cambodia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "KI",
        Description: [
          "Kiribati"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "KM",
        Description: [
          "Comoros"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "KN",
        Description: [
          "Saint Kitts and Nevis"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "KP",
        Description: [
          "Democratic People's Republic of Korea"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "KR",
        Description: [
          "Republic of Korea"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "KW",
        Description: [
          "Kuwait"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "KY",
        Description: [
          "Cayman Islands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "KZ",
        Description: [
          "Kazakhstan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "LA",
        Description: [
          "Lao People's Democratic Republic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "LB",
        Description: [
          "Lebanon"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "LC",
        Description: [
          "Saint Lucia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "LI",
        Description: [
          "Liechtenstein"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "LK",
        Description: [
          "Sri Lanka"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "LR",
        Description: [
          "Liberia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "LS",
        Description: [
          "Lesotho"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "LT",
        Description: [
          "Lithuania"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "LU",
        Description: [
          "Luxembourg"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "LV",
        Description: [
          "Latvia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "LY",
        Description: [
          "Libya"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MA",
        Description: [
          "Morocco"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MC",
        Description: [
          "Monaco"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MD",
        Description: [
          "Moldova"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "ME",
        Description: [
          "Montenegro"
        ],
        Added: "2006-10-05"
      },
      {
        Type: "region",
        Subtag: "MF",
        Description: [
          "Saint Martin (French part)"
        ],
        Added: "2007-11-02"
      },
      {
        Type: "region",
        Subtag: "MG",
        Description: [
          "Madagascar"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MH",
        Description: [
          "Marshall Islands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MK",
        Description: [
          "North Macedonia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "ML",
        Description: [
          "Mali"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MM",
        Description: [
          "Myanmar"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MN",
        Description: [
          "Mongolia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MO",
        Description: [
          "Macao"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MP",
        Description: [
          "Northern Mariana Islands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MQ",
        Description: [
          "Martinique"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MR",
        Description: [
          "Mauritania"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MS",
        Description: [
          "Montserrat"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MT",
        Description: [
          "Malta"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MU",
        Description: [
          "Mauritius"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MV",
        Description: [
          "Maldives"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MW",
        Description: [
          "Malawi"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MX",
        Description: [
          "Mexico"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MY",
        Description: [
          "Malaysia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "MZ",
        Description: [
          "Mozambique"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "NA",
        Description: [
          "Namibia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "NC",
        Description: [
          "New Caledonia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "NE",
        Description: [
          "Niger"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "NF",
        Description: [
          "Norfolk Island"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "NG",
        Description: [
          "Nigeria"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "NI",
        Description: [
          "Nicaragua"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "NL",
        Description: [
          "Netherlands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "NO",
        Description: [
          "Norway"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "NP",
        Description: [
          "Nepal"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "NR",
        Description: [
          "Nauru"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "NT",
        Description: [
          "Neutral Zone"
        ],
        Added: "2005-10-16",
        Deprecated: "1993-07-12"
      },
      {
        Type: "region",
        Subtag: "NU",
        Description: [
          "Niue"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "NZ",
        Description: [
          "New Zealand"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "OM",
        Description: [
          "Oman"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "PA",
        Description: [
          "Panama"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "PE",
        Description: [
          "Peru"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "PF",
        Description: [
          "French Polynesia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "PG",
        Description: [
          "Papua New Guinea"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "PH",
        Description: [
          "Philippines"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "PK",
        Description: [
          "Pakistan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "PL",
        Description: [
          "Poland"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "PM",
        Description: [
          "Saint Pierre and Miquelon"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "PN",
        Description: [
          "Pitcairn"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "PR",
        Description: [
          "Puerto Rico"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "PS",
        Description: [
          "State of Palestine"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "PT",
        Description: [
          "Portugal"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "PW",
        Description: [
          "Palau"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "PY",
        Description: [
          "Paraguay"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "QA",
        Description: [
          "Qatar"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "QM..QZ",
        Description: [
          "Private use"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "RE",
        Description: [
          "R\xE9union"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "RO",
        Description: [
          "Romania"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "RS",
        Description: [
          "Serbia"
        ],
        Added: "2006-10-05"
      },
      {
        Type: "region",
        Subtag: "RU",
        Description: [
          "Russian Federation"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "RW",
        Description: [
          "Rwanda"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SA",
        Description: [
          "Saudi Arabia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SB",
        Description: [
          "Solomon Islands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SC",
        Description: [
          "Seychelles"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SD",
        Description: [
          "Sudan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SE",
        Description: [
          "Sweden"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SG",
        Description: [
          "Singapore"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SH",
        Description: [
          "Saint Helena, Ascension and Tristan da Cunha"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SI",
        Description: [
          "Slovenia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SJ",
        Description: [
          "Svalbard and Jan Mayen"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SK",
        Description: [
          "Slovakia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SL",
        Description: [
          "Sierra Leone"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SM",
        Description: [
          "San Marino"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SN",
        Description: [
          "Senegal"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SO",
        Description: [
          "Somalia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SR",
        Description: [
          "Suriname"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SS",
        Description: [
          "South Sudan"
        ],
        Added: "2011-08-25"
      },
      {
        Type: "region",
        Subtag: "ST",
        Description: [
          "Sao Tome and Principe"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SU",
        Description: [
          "Union of Soviet Socialist Republics"
        ],
        Added: "2005-10-16",
        Deprecated: "1992-08-30"
      },
      {
        Type: "region",
        Subtag: "SV",
        Description: [
          "El Salvador"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SX",
        Description: [
          "Sint Maarten (Dutch part)"
        ],
        Added: "2011-01-07"
      },
      {
        Type: "region",
        Subtag: "SY",
        Description: [
          "Syrian Arab Republic"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "SZ",
        Description: [
          "Eswatini",
          "eSwatini",
          "Swaziland"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TA",
        Description: [
          "Tristan da Cunha"
        ],
        Added: "2009-07-29"
      },
      {
        Type: "region",
        Subtag: "TC",
        Description: [
          "Turks and Caicos Islands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TD",
        Description: [
          "Chad"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TF",
        Description: [
          "French Southern Territories"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TG",
        Description: [
          "Togo"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TH",
        Description: [
          "Thailand"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TJ",
        Description: [
          "Tajikistan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TK",
        Description: [
          "Tokelau"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TL",
        Description: [
          "Timor-Leste"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TM",
        Description: [
          "Turkmenistan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TN",
        Description: [
          "Tunisia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TO",
        Description: [
          "Tonga"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TP",
        Description: [
          "East Timor"
        ],
        Added: "2005-10-16",
        Deprecated: "2002-05-20",
        "Preferred-Value": "TL"
      },
      {
        Type: "region",
        Subtag: "TR",
        Description: [
          "Turkey"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TT",
        Description: [
          "Trinidad and Tobago"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TV",
        Description: [
          "Tuvalu"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TW",
        Description: [
          "Taiwan, Province of China"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "TZ",
        Description: [
          "United Republic of Tanzania"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "UA",
        Description: [
          "Ukraine"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "UG",
        Description: [
          "Uganda"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "UM",
        Description: [
          "United States Minor Outlying Islands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "UN",
        Description: [
          "United Nations"
        ],
        Added: "2016-07-14"
      },
      {
        Type: "region",
        Subtag: "US",
        Description: [
          "United States"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "UY",
        Description: [
          "Uruguay"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "UZ",
        Description: [
          "Uzbekistan"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "VA",
        Description: [
          "Holy See (Vatican City State)"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "VC",
        Description: [
          "Saint Vincent and the Grenadines"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "VE",
        Description: [
          "Venezuela"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "VG",
        Description: [
          "British Virgin Islands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "VI",
        Description: [
          "U.S. Virgin Islands"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "VN",
        Description: [
          "Viet Nam"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "VU",
        Description: [
          "Vanuatu"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "WF",
        Description: [
          "Wallis and Futuna"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "WS",
        Description: [
          "Samoa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "XA..XZ",
        Description: [
          "Private use"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "YD",
        Description: [
          "Democratic Yemen"
        ],
        Added: "2005-10-16",
        Deprecated: "1990-08-14",
        "Preferred-Value": "YE"
      },
      {
        Type: "region",
        Subtag: "YE",
        Description: [
          "Yemen"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "YT",
        Description: [
          "Mayotte"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "YU",
        Description: [
          "Yugoslavia"
        ],
        Added: "2005-10-16",
        Deprecated: "2003-07-23",
        Comments: [
          "see BA, HR, ME, MK, RS, or SI"
        ]
      },
      {
        Type: "region",
        Subtag: "ZA",
        Description: [
          "South Africa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "ZM",
        Description: [
          "Zambia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "ZR",
        Description: [
          "Zaire"
        ],
        Added: "2005-10-16",
        Deprecated: "1997-07-14",
        "Preferred-Value": "CD"
      },
      {
        Type: "region",
        Subtag: "ZW",
        Description: [
          "Zimbabwe"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "ZZ",
        Description: [
          "Private use"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "001",
        Description: [
          "World"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "002",
        Description: [
          "Africa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "003",
        Description: [
          "North America"
        ],
        Added: "2010-08-16",
        Comments: [
          "Includes Northern America (021), Caribbean (029), and Central America (013); see also 021"
        ]
      },
      {
        Type: "region",
        Subtag: "005",
        Description: [
          "South America"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "009",
        Description: [
          "Oceania"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "011",
        Description: [
          "Western Africa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "013",
        Description: [
          "Central America"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "014",
        Description: [
          "Eastern Africa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "015",
        Description: [
          "Northern Africa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "017",
        Description: [
          "Middle Africa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "018",
        Description: [
          "Southern Africa"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "019",
        Description: [
          "Americas"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "021",
        Description: [
          "Northern America"
        ],
        Added: "2005-10-16",
        Comments: [
          "Does not include Caribbean (029) or Central America (013); see also 003"
        ]
      },
      {
        Type: "region",
        Subtag: "029",
        Description: [
          "Caribbean"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "030",
        Description: [
          "Eastern Asia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "034",
        Description: [
          "Southern Asia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "035",
        Description: [
          "South-Eastern Asia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "039",
        Description: [
          "Southern Europe"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "053",
        Description: [
          "Australia and New Zealand"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "054",
        Description: [
          "Melanesia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "057",
        Description: [
          "Micronesia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "061",
        Description: [
          "Polynesia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "142",
        Description: [
          "Asia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "143",
        Description: [
          "Central Asia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "145",
        Description: [
          "Western Asia"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "150",
        Description: [
          "Europe"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "151",
        Description: [
          "Eastern Europe"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "154",
        Description: [
          "Northern Europe"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "155",
        Description: [
          "Western Europe"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "region",
        Subtag: "202",
        Description: [
          "Sub-Saharan Africa"
        ],
        Added: "2017-04-18"
      },
      {
        Type: "region",
        Subtag: "419",
        Description: [
          "Latin America and the Caribbean"
        ],
        Added: "2005-10-16"
      },
      {
        Type: "variant",
        Subtag: "1606nict",
        Description: [
          "Late Middle French (to 1606)"
        ],
        Added: "2007-03-20",
        Prefix: [
          "frm"
        ],
        Comments: [
          '16th century French as in Jean Nicot, "Thresor de la langue francoyse", 1606, but also including some French similar to that of Rabelais'
        ]
      },
      {
        Type: "variant",
        Subtag: "1694acad",
        Description: [
          "Early Modern French"
        ],
        Added: "2007-03-20",
        Prefix: [
          "fr"
        ],
        Comments: [
          `17th century French, as catalogued in the "Dictionnaire de l'acad\xE9mie fran\xE7oise", 4eme ed. 1694; frequently includes elements of Middle French, as this is a transitional period`
        ]
      },
      {
        Type: "variant",
        Subtag: "1901",
        Description: [
          "Traditional German orthography"
        ],
        Added: "2005-10-16",
        Prefix: [
          "de"
        ]
      },
      {
        Type: "variant",
        Subtag: "1959acad",
        Description: [
          '"Academic" ("governmental") variant of Belarusian as codified in 1959'
        ],
        Added: "2008-09-30",
        Prefix: [
          "be"
        ]
      },
      {
        Type: "variant",
        Subtag: "1994",
        Description: [
          "Standardized Resian orthography"
        ],
        Added: "2007-07-28",
        Prefix: [
          "sl-rozaj",
          "sl-rozaj-biske",
          "sl-rozaj-njiva",
          "sl-rozaj-osojs",
          "sl-rozaj-solba"
        ],
        Comments: [
          "For standardized Resian an orthography was published in 1994."
        ]
      },
      {
        Type: "variant",
        Subtag: "1996",
        Description: [
          "German orthography of 1996"
        ],
        Added: "2005-10-16",
        Prefix: [
          "de"
        ]
      },
      {
        Type: "variant",
        Subtag: "abl1943",
        Description: [
          "Orthographic formulation of 1943 - Official in Brazil (Formul\xE1rio Ortogr\xE1fico de 1943 - Oficial no Brasil)"
        ],
        Added: "2015-05-06",
        Prefix: [
          "pt-BR"
        ],
        Comments: [
          "Denotes conventions established by the Academia Brasileira de Letras in 1943 and generally used in Brazil until 2009"
        ]
      },
      {
        Type: "variant",
        Subtag: "alalc97",
        Description: [
          "ALA-LC Romanization, 1997 edition"
        ],
        Added: "2009-12-09",
        Comments: [
          'Romanizations recommended by the American Library Association and the Library of Congress, in "ALA-LC Romanization Tables: Transliteration Schemes for Non-Roman Scripts" (1997), ISBN 978-0-8444-0940-5.'
        ]
      },
      {
        Type: "variant",
        Subtag: "aluku",
        Description: [
          "Aluku dialect",
          "Boni dialect"
        ],
        Added: "2009-09-05",
        Prefix: [
          "djk"
        ],
        Comments: [
          'Aluku dialect of the "Busi Nenge Tongo" English-based Creole continuum in Eastern Suriname and Western French Guiana'
        ]
      },
      {
        Type: "variant",
        Subtag: "akuapem",
        Description: [
          "Akuapem Twi"
        ],
        Added: "2017-06-05",
        Prefix: [
          "tw"
        ]
      },
      {
        Type: "variant",
        Subtag: "ao1990",
        Description: [
          "Portuguese Language Orthographic Agreement of 1990 (Acordo Ortogr\xE1fico da L\xEDngua Portuguesa de 1990)"
        ],
        Added: "2015-05-06",
        Prefix: [
          "pt",
          "gl"
        ],
        Comments: [
          "Portuguese orthography conventions established in 1990 but not brought into effect until 2009"
        ]
      },
      {
        Type: "variant",
        Subtag: "aranes",
        Description: [
          "Aranese"
        ],
        Added: "2018-04-22",
        Prefix: [
          "oc"
        ],
        Comments: [
          "Occitan variant spoken in the Val d'Aran"
        ]
      },
      {
        Type: "variant",
        Subtag: "arevela",
        Description: [
          "Eastern Armenian"
        ],
        Added: "2006-09-18",
        Deprecated: "2018-03-24",
        Prefix: [
          "hy"
        ],
        Comments: [
          "Preferred tag is hy"
        ]
      },
      {
        Type: "variant",
        Subtag: "arevmda",
        Description: [
          "Western Armenian"
        ],
        Added: "2006-09-18",
        Deprecated: "2018-03-24",
        Prefix: [
          "hy"
        ],
        Comments: [
          "Preferred tag is hyw"
        ]
      },
      {
        Type: "variant",
        Subtag: "asante",
        Description: [
          "Asante Twi",
          "Ashanti Twi"
        ],
        Added: "2017-06-05",
        Prefix: [
          "tw"
        ]
      },
      {
        Type: "variant",
        Subtag: "auvern",
        Description: [
          "Auvergnat"
        ],
        Added: "2018-04-22",
        Prefix: [
          "oc"
        ],
        Comments: [
          "Occitan variant spoken in Auvergne"
        ]
      },
      {
        Type: "variant",
        Subtag: "baku1926",
        Description: [
          "Unified Turkic Latin Alphabet (Historical)"
        ],
        Added: "2007-04-18",
        Prefix: [
          "az",
          "ba",
          "crh",
          "kk",
          "krc",
          "ky",
          "sah",
          "tk",
          "tt",
          "uz"
        ],
        Comments: [
          "Denotes alphabet used in Turkic republics/regions of the former USSR in late 1920s, and throughout 1930s, which aspired to represent equivalent phonemes in a unified fashion. Also known as: New Turkic Alphabet; Birl\u04D9\u015Fdirilmi\u015F Jeni Tyrk \u04D8lifbas\u044C (Birlesdirilmis Jeni Tyrk Elifbasi); Ja\u014Balif (Janalif)."
        ]
      },
      {
        Type: "variant",
        Subtag: "balanka",
        Description: [
          "The Balanka dialect of Anii"
        ],
        Added: "2014-02-15",
        Prefix: [
          "blo"
        ],
        Comments: [
          "Balanka is one of 19 Anii dialects."
        ]
      },
      {
        Type: "variant",
        Subtag: "barla",
        Description: [
          "The Barlavento dialect group of Kabuverdianu"
        ],
        Prefix: [
          "kea"
        ],
        Comments: [
          "Barlavento is one of the two main dialect groups of Kabuverdianu."
        ],
        Added: "2013-12-10"
      },
      {
        Type: "variant",
        Subtag: "basiceng",
        Description: [
          "Basic English"
        ],
        Added: "2015-12-29",
        Prefix: [
          "en"
        ]
      },
      {
        Type: "variant",
        Subtag: "bauddha",
        Description: [
          "Buddhist Hybrid Sanskrit"
        ],
        Added: "2010-07-28",
        Prefix: [
          "sa"
        ]
      },
      {
        Type: "variant",
        Subtag: "biscayan",
        Description: [
          "Biscayan dialect of Basque"
        ],
        Added: "2010-04-13",
        Prefix: [
          "eu"
        ]
      },
      {
        Type: "variant",
        Subtag: "biske",
        Description: [
          "The San Giorgio dialect of Resian",
          "The Bila dialect of Resian"
        ],
        Added: "2007-07-05",
        Prefix: [
          "sl-rozaj"
        ],
        Comments: [
          "The dialect of San Giorgio/Bila is one of the four major local dialects of Resian"
        ]
      },
      {
        Type: "variant",
        Subtag: "bohoric",
        Description: [
          "Slovene in Bohori\u010D alphabet"
        ],
        Added: "2012-06-27",
        Prefix: [
          "sl"
        ],
        Comments: [
          "The subtag represents the alphabet codified by Adam Bohori\u010D in 1584 and used from the first printed Slovene book and up to the mid-19th century."
        ]
      },
      {
        Type: "variant",
        Subtag: "boont",
        Description: [
          "Boontling"
        ],
        Added: "2006-09-18",
        Prefix: [
          "en"
        ],
        Comments: [
          "Jargon embedded in American English"
        ]
      },
      {
        Type: "variant",
        Subtag: "bornholm",
        Description: [
          "Bornholmsk"
        ],
        Added: "2019-03-27",
        Prefix: [
          "da"
        ]
      },
      {
        Type: "variant",
        Subtag: "cisaup",
        Description: [
          "Cisalpine"
        ],
        Added: "2018-04-22",
        Prefix: [
          "oc"
        ],
        Comments: [
          "Occitan variant spoken in northwestern Italy"
        ]
      },
      {
        Type: "variant",
        Subtag: "colb1945",
        Description: [
          "Portuguese-Brazilian Orthographic Convention of 1945 (Conven\xE7\xE3o Ortogr\xE1fica Luso-Brasileira de 1945)"
        ],
        Added: "2015-05-06",
        Prefix: [
          "pt"
        ],
        Comments: [
          "Portuguese orthography conventions established in 1945, generally in effect until 2009. This reform was not ratified in Brazil."
        ]
      },
      {
        Type: "variant",
        Subtag: "cornu",
        Description: [
          "Cornu-English",
          "Cornish English",
          "Anglo-Cornish"
        ],
        Added: "2015-12-07",
        Prefix: [
          "en"
        ]
      },
      {
        Type: "variant",
        Subtag: "creiss",
        Description: [
          "Occitan variants of the Croissant area"
        ],
        Added: "2018-04-22",
        Prefix: [
          "oc"
        ]
      },
      {
        Type: "variant",
        Subtag: "dajnko",
        Description: [
          "Slovene in Dajnko alphabet"
        ],
        Added: "2012-06-27",
        Prefix: [
          "sl"
        ],
        Comments: [
          "The subtag represents the alphabet codified by Peter Dajnko and used from 1824 to 1839 mostly in Styria (in what is now Eastern Slovenia)."
        ]
      },
      {
        Type: "variant",
        Subtag: "ekavsk",
        Description: [
          "Serbian with Ekavian pronunciation"
        ],
        Prefix: [
          "sr",
          "sr-Latn",
          "sr-Cyrl"
        ],
        Added: "2013-12-02"
      },
      {
        Type: "variant",
        Subtag: "emodeng",
        Description: [
          "Early Modern English (1500-1700)"
        ],
        Added: "2012-02-05",
        Prefix: [
          "en"
        ]
      },
      {
        Type: "variant",
        Subtag: "fonipa",
        Description: [
          "International Phonetic Alphabet"
        ],
        Added: "2006-12-11"
      },
      {
        Type: "variant",
        Subtag: "fonkirsh",
        Description: [
          "Kirshenbaum Phonetic Alphabet"
        ],
        Added: "2018-04-22"
      },
      {
        Type: "variant",
        Subtag: "fonnapa",
        Description: [
          "North American Phonetic Alphabet",
          "Americanist Phonetic Notation"
        ],
        Added: "2016-06-24"
      },
      {
        Type: "variant",
        Subtag: "fonupa",
        Description: [
          "Uralic Phonetic Alphabet"
        ],
        Added: "2006-12-11"
      },
      {
        Type: "variant",
        Subtag: "fonxsamp",
        Description: [
          "X-SAMPA transcription"
        ],
        Added: "2010-10-23",
        Comments: [
          "Indicates that the content is transcribed according to X-SAMPA"
        ]
      },
      {
        Type: "variant",
        Subtag: "gascon",
        Description: [
          "Gascon"
        ],
        Added: "2018-04-22",
        Prefix: [
          "oc"
        ],
        Comments: [
          "Occitan variant spoken in Gascony"
        ]
      },
      {
        Type: "variant",
        Subtag: "grclass",
        Description: [
          "Classical Occitan orthography"
        ],
        Added: "2018-04-22",
        Prefix: [
          "oc"
        ],
        Comments: [
          "Classical written standard for Occitan developed in 1935 by Alib\xE8rt"
        ]
      },
      {
        Type: "variant",
        Subtag: "grital",
        Description: [
          "Italian-inspired Occitan orthography"
        ],
        Added: "2018-04-22",
        Prefix: [
          "oc"
        ]
      },
      {
        Type: "variant",
        Subtag: "grmistr",
        Description: [
          "Mistralian or Mistralian-inspired Occitan orthography"
        ],
        Added: "2018-04-22",
        Prefix: [
          "oc"
        ],
        Comments: [
          "Written standard developed by Romanilha in 1853 and used by Mistral and the F\xE9libres, including derived standards such as Escolo d\xF3u Po, Escolo Gaston Febus, and others"
        ]
      },
      {
        Type: "variant",
        Subtag: "hepburn",
        Description: [
          "Hepburn romanization"
        ],
        Added: "2009-10-01",
        Prefix: [
          "ja-Latn"
        ]
      },
      {
        Type: "variant",
        Subtag: "heploc",
        Description: [
          "Hepburn romanization, Library of Congress method"
        ],
        Added: "2009-10-01",
        Deprecated: "2010-02-07",
        "Preferred-Value": "alalc97",
        Prefix: [
          "ja-Latn-hepburn"
        ],
        Comments: [
          "Preferred tag is ja-Latn-alalc97"
        ]
      },
      {
        Type: "variant",
        Subtag: "hognorsk",
        Description: [
          "Norwegian in H\xF8gnorsk (High Norwegian) orthography"
        ],
        Added: "2010-01-02",
        Prefix: [
          "nn"
        ],
        Comments: [
          "Norwegian following Ivar Aasen's orthographical principles, including modern usage."
        ]
      },
      {
        Type: "variant",
        Subtag: "hsistemo",
        Description: [
          "Standard H-system orthographic fallback for spelling Esperanto"
        ],
        Added: "2017-03-14",
        Prefix: [
          "eo"
        ]
      },
      {
        Type: "variant",
        Subtag: "ijekavsk",
        Description: [
          "Serbian with Ijekavian pronunciation"
        ],
        Prefix: [
          "sr",
          "sr-Latn",
          "sr-Cyrl"
        ],
        Added: "2013-12-02"
      },
      {
        Type: "variant",
        Subtag: "itihasa",
        Description: [
          "Epic Sanskrit"
        ],
        Added: "2010-07-28",
        Prefix: [
          "sa"
        ]
      },
      {
        Type: "variant",
        Subtag: "ivanchov",
        Description: [
          "Bulgarian in 1899 orthography"
        ],
        Added: "2017-12-13",
        Prefix: [
          "bg"
        ],
        Comments: [
          "Bulgarian orthography introduced by Todor Ivanchov in 1899"
        ]
      },
      {
        Type: "variant",
        Subtag: "jauer",
        Description: [
          "Jauer dialect of Romansh"
        ],
        Added: "2010-06-29",
        Prefix: [
          "rm"
        ],
        Comments: [
          "The spoken dialect of the Val M\xFCstair, which has no written standard."
        ]
      },
      {
        Type: "variant",
        Subtag: "jyutping",
        Description: [
          "Jyutping Cantonese Romanization"
        ],
        Added: "2010-10-23",
        Prefix: [
          "yue"
        ],
        Comments: [
          "Jyutping romanization of Cantonese"
        ]
      },
      {
        Type: "variant",
        Subtag: "kkcor",
        Description: [
          "Common Cornish orthography of Revived Cornish"
        ],
        Added: "2008-10-14",
        Prefix: [
          "kw"
        ]
      },
      {
        Type: "variant",
        Subtag: "kociewie",
        Description: [
          "The Kociewie dialect of Polish"
        ],
        Added: "2014-11-27",
        Prefix: [
          "pl"
        ],
        Comments: [
          "The dialect of Kociewie is spoken in the region around Starogard Gda\u0144ski, Tczew and \u015Awiecie in northern Poland."
        ]
      },
      {
        Type: "variant",
        Subtag: "kscor",
        Description: [
          "Standard Cornish orthography of Revived Cornish",
          "Kernowek Standard"
        ],
        Added: "2012-06-27",
        Prefix: [
          "kw"
        ]
      },
      {
        Type: "variant",
        Subtag: "laukika",
        Description: [
          "Classical Sanskrit"
        ],
        Added: "2010-07-28",
        Prefix: [
          "sa"
        ]
      },
      {
        Type: "variant",
        Subtag: "lemosin",
        Description: [
          "Limousin"
        ],
        Added: "2018-04-22",
        Prefix: [
          "oc"
        ],
        Comments: [
          "Occitan variant spoken in Limousin"
        ]
      },
      {
        Type: "variant",
        Subtag: "lengadoc",
        Description: [
          "Languedocien"
        ],
        Added: "2018-04-22",
        Prefix: [
          "oc"
        ],
        Comments: [
          "Occitan variant spoken in Languedoc"
        ]
      },
      {
        Type: "variant",
        Subtag: "lipaw",
        Description: [
          "The Lipovaz dialect of Resian",
          "The Lipovec dialect of Resian"
        ],
        Added: "2007-08-11",
        Prefix: [
          "sl-rozaj"
        ],
        Comments: [
          "The dialect of Lipovaz/Lipovec is one of the minor local dialects of Resian"
        ]
      },
      {
        Type: "variant",
        Subtag: "luna1918",
        Description: [
          "Post-1917 Russian orthography"
        ],
        Added: "2010-10-10",
        Prefix: [
          "ru"
        ],
        Comments: [
          "Russian orthography as established by the 1917/1918 orthographic reforms"
        ]
      },
      {
        Type: "variant",
        Subtag: "metelko",
        Description: [
          "Slovene in Metelko alphabet"
        ],
        Added: "2012-06-27",
        Prefix: [
          "sl"
        ],
        Comments: [
          "The subtag represents the alphabet codified by Franc Serafin Metelko and used from 1825 to 1833."
        ]
      },
      {
        Type: "variant",
        Subtag: "monoton",
        Description: [
          "Monotonic Greek"
        ],
        Added: "2006-12-11",
        Prefix: [
          "el"
        ]
      },
      {
        Type: "variant",
        Subtag: "ndyuka",
        Description: [
          "Ndyuka dialect",
          "Aukan dialect"
        ],
        Added: "2009-09-05",
        Prefix: [
          "djk"
        ],
        Comments: [
          'Ndyuka dialect of the "Busi Nenge Tongo" English-based Creole continuum in Eastern Suriname and Western French Guiana'
        ]
      },
      {
        Type: "variant",
        Subtag: "nedis",
        Description: [
          "Natisone dialect",
          "Nadiza dialect"
        ],
        Added: "2005-10-16",
        Prefix: [
          "sl"
        ]
      },
      {
        Type: "variant",
        Subtag: "newfound",
        Description: [
          "Newfoundland English"
        ],
        Added: "2015-11-25",
        Prefix: [
          "en-CA"
        ]
      },
      {
        Type: "variant",
        Subtag: "nicard",
        Description: [
          "Ni\xE7ard"
        ],
        Added: "2018-04-22",
        Prefix: [
          "oc"
        ],
        Comments: [
          "Occitan variant spoken in Nice"
        ]
      },
      {
        Type: "variant",
        Subtag: "njiva",
        Description: [
          "The Gniva dialect of Resian",
          "The Njiva dialect of Resian"
        ],
        Added: "2007-07-05",
        Prefix: [
          "sl-rozaj"
        ],
        Comments: [
          "The dialect of Gniva/Njiva is one of the four major local dialects of Resian"
        ]
      },
      {
        Type: "variant",
        Subtag: "nulik",
        Description: [
          "Volap\xFCk nulik",
          "Volap\xFCk perevid\xF6l",
          "Volap\xFCk nul\xE4dik",
          "de Jong's Volap\xFCk",
          "New Volap\xFCk",
          "Revised Volap\xFCk",
          "Modern Volap\xFCk"
        ],
        Added: "2012-01-28",
        Prefix: [
          "vo"
        ]
      },
      {
        Type: "variant",
        Subtag: "osojs",
        Description: [
          "The Oseacco dialect of Resian",
          "The Osojane dialect of Resian"
        ],
        Added: "2007-07-05",
        Prefix: [
          "sl-rozaj"
        ],
        Comments: [
          "The dialect of Oseacco/Osojane is one of the four major local dialects of Resian"
        ]
      },
      {
        Type: "variant",
        Subtag: "oxendict",
        Description: [
          "Oxford English Dictionary spelling"
        ],
        Added: "2015-04-17",
        Prefix: [
          "en"
        ]
      },
      {
        Type: "variant",
        Subtag: "pahawh2",
        Description: [
          "Pahawh Hmong Second Stage Reduced orthography"
        ],
        Added: "2017-01-13",
        Prefix: [
          "mww",
          "hnj"
        ]
      },
      {
        Type: "variant",
        Subtag: "pahawh3",
        Description: [
          "Pahawh Hmong Third Stage Reduced orthography"
        ],
        Added: "2017-01-13",
        Prefix: [
          "mww",
          "hnj"
        ]
      },
      {
        Type: "variant",
        Subtag: "pahawh4",
        Description: [
          "Pahawh Hmong Final Version orthography"
        ],
        Added: "2017-01-13",
        Prefix: [
          "mww",
          "hnj"
        ]
      },
      {
        Type: "variant",
        Subtag: "pamaka",
        Description: [
          "Pamaka dialect"
        ],
        Added: "2009-09-05",
        Prefix: [
          "djk"
        ],
        Comments: [
          'Pamaka dialect of the "Busi Nenge Tongo" English-based Creole continuum in Eastern Suriname and Western French Guiana'
        ]
      },
      {
        Type: "variant",
        Subtag: "petr1708",
        Description: [
          "Petrine orthography"
        ],
        Added: "2010-10-10",
        Prefix: [
          "ru"
        ],
        Comments: [
          "Russian orthography from the Petrine orthographic reforms of 1708 to the 1917 orthographic reform"
        ]
      },
      {
        Type: "variant",
        Subtag: "pinyin",
        Description: [
          "Pinyin romanization"
        ],
        Added: "2008-10-14",
        Prefix: [
          "zh-Latn",
          "bo-Latn"
        ]
      },
      {
        Type: "variant",
        Subtag: "polyton",
        Description: [
          "Polytonic Greek"
        ],
        Added: "2006-12-11",
        Prefix: [
          "el"
        ]
      },
      {
        Type: "variant",
        Subtag: "provenc",
        Description: [
          "Proven\xE7al"
        ],
        Added: "2018-04-22",
        Prefix: [
          "oc"
        ],
        Comments: [
          "Occitan variant spoken in Provence"
        ]
      },
      {
        Type: "variant",
        Subtag: "puter",
        Description: [
          "Puter idiom of Romansh"
        ],
        Added: "2010-06-29",
        Prefix: [
          "rm"
        ],
        Comments: [
          'Puter is one of the five traditional written standards or "idioms" of the Romansh language.'
        ]
      },
      {
        Type: "variant",
        Subtag: "rigik",
        Description: [
          "Volap\xFCk rigik",
          "Schleyer's Volap\xFCk",
          "Original Volap\xFCk",
          "Classic Volap\xFCk"
        ],
        Added: "2012-01-28",
        Prefix: [
          "vo"
        ]
      },
      {
        Type: "variant",
        Subtag: "rozaj",
        Description: [
          "Resian",
          "Resianic",
          "Rezijan"
        ],
        Added: "2005-10-16",
        Prefix: [
          "sl"
        ]
      },
      {
        Type: "variant",
        Subtag: "rumgr",
        Description: [
          "Rumantsch Grischun"
        ],
        Added: "2010-06-29",
        Prefix: [
          "rm"
        ],
        Comments: [
          "Supraregional Romansh written standard"
        ]
      },
      {
        Type: "variant",
        Subtag: "scotland",
        Description: [
          "Scottish Standard English"
        ],
        Added: "2007-08-31",
        Prefix: [
          "en"
        ]
      },
      {
        Type: "variant",
        Subtag: "scouse",
        Description: [
          "Scouse"
        ],
        Added: "2006-09-18",
        Prefix: [
          "en"
        ],
        Comments: [
          "English Liverpudlian dialect known as 'Scouse'"
        ]
      },
      {
        Type: "variant",
        Subtag: "simple",
        Description: [
          "Simplified form"
        ],
        Added: "2015-12-29"
      },
      {
        Type: "variant",
        Subtag: "solba",
        Description: [
          "The Stolvizza dialect of Resian",
          "The Solbica dialect of Resian"
        ],
        Added: "2007-07-05",
        Prefix: [
          "sl-rozaj"
        ],
        Comments: [
          "The dialect of Stolvizza/Solbica is one of the four major local dialects of Resian"
        ]
      },
      {
        Type: "variant",
        Subtag: "sotav",
        Description: [
          "The Sotavento dialect group of Kabuverdianu"
        ],
        Prefix: [
          "kea"
        ],
        Comments: [
          "Sotavento is one of the two main dialect groups of Kabuverdianu."
        ],
        Added: "2013-12-10"
      },
      {
        Type: "variant",
        Subtag: "spanglis",
        Description: [
          "Spanglish"
        ],
        Added: "2017-02-23",
        Prefix: [
          "en",
          "es"
        ],
        Comments: [
          "A variety of contact dialects of English and Spanish"
        ]
      },
      {
        Type: "variant",
        Subtag: "surmiran",
        Description: [
          "Surmiran idiom of Romansh"
        ],
        Added: "2010-06-29",
        Prefix: [
          "rm"
        ],
        Comments: [
          'Surmiran is one of the five traditional written standards or "idioms" of the Romansh language.'
        ]
      },
      {
        Type: "variant",
        Subtag: "sursilv",
        Description: [
          "Sursilvan idiom of Romansh"
        ],
        Added: "2010-06-29",
        Prefix: [
          "rm"
        ],
        Comments: [
          'Sursilvan is one of the five traditional written standards or "idioms" of the Romansh language.'
        ]
      },
      {
        Type: "variant",
        Subtag: "sutsilv",
        Description: [
          "Sutsilvan idiom of Romansh"
        ],
        Added: "2010-06-29",
        Prefix: [
          "rm"
        ],
        Comments: [
          'Sutsilvan is one of the five traditional written standards or "idioms" of the Romansh language.'
        ]
      },
      {
        Type: "variant",
        Subtag: "tarask",
        Description: [
          "Belarusian in Taraskievica orthography"
        ],
        Added: "2007-04-27",
        Prefix: [
          "be"
        ],
        Comments: [
          `The subtag represents Branislau Taraskievic's Belarusian orthography as published in "Bielaruski klasycny pravapis" by Juras Buslakou, Vincuk Viacorka, Zmicier Sanko, and Zmicier Sauka (Vilnia- Miensk 2005).`
        ]
      },
      {
        Type: "variant",
        Subtag: "uccor",
        Description: [
          "Unified Cornish orthography of Revived Cornish"
        ],
        Added: "2008-10-14",
        Prefix: [
          "kw"
        ]
      },
      {
        Type: "variant",
        Subtag: "ucrcor",
        Description: [
          "Unified Cornish Revised orthography of Revived Cornish"
        ],
        Added: "2008-10-14",
        Prefix: [
          "kw"
        ]
      },
      {
        Type: "variant",
        Subtag: "ulster",
        Description: [
          "Ulster dialect of Scots"
        ],
        Added: "2010-04-10",
        Prefix: [
          "sco"
        ]
      },
      {
        Type: "variant",
        Subtag: "unifon",
        Description: [
          "Unifon phonetic alphabet"
        ],
        Added: "2013-10-02",
        Prefix: [
          "en",
          "hup",
          "kyh",
          "tol",
          "yur"
        ]
      },
      {
        Type: "variant",
        Subtag: "vaidika",
        Description: [
          "Vedic Sanskrit"
        ],
        Added: "2010-07-28",
        Prefix: [
          "sa"
        ],
        Comments: [
          "The most ancient dialect of Sanskrit used in verse and prose composed until about the 4th century B.C.E."
        ]
      },
      {
        Type: "variant",
        Subtag: "valencia",
        Description: [
          "Valencian"
        ],
        Added: "2007-03-06",
        Prefix: [
          "ca"
        ],
        Comments: [
          'Variety spoken in the "Comunidad Valenciana" region of Spain, where it is co-official with Spanish.'
        ]
      },
      {
        Type: "variant",
        Subtag: "vallader",
        Description: [
          "Vallader idiom of Romansh"
        ],
        Added: "2010-06-29",
        Prefix: [
          "rm"
        ],
        Comments: [
          'Vallader is one of the five traditional written standards or "idioms" of the Romansh language.'
        ]
      },
      {
        Type: "variant",
        Subtag: "vivaraup",
        Description: [
          "Vivaro-Alpine"
        ],
        Added: "2018-04-22",
        Prefix: [
          "oc"
        ],
        Comments: [
          "Occitan variant spoken in northeastern Occitania"
        ]
      },
      {
        Type: "variant",
        Subtag: "wadegile",
        Description: [
          "Wade-Giles romanization"
        ],
        Added: "2008-10-03",
        Prefix: [
          "zh-Latn"
        ]
      },
      {
        Type: "variant",
        Subtag: "xsistemo",
        Description: [
          "Standard X-system orthographic fallback for spelling Esperanto"
        ],
        Added: "2017-03-14",
        Prefix: [
          "eo"
        ]
      },
      {
        Type: "grandfathered",
        Tag: "art-lojban",
        Description: [
          "Lojban"
        ],
        Added: "2001-11-11",
        Deprecated: "2003-09-02",
        "Preferred-Value": "jbo"
      },
      {
        Type: "grandfathered",
        Tag: "cel-gaulish",
        Description: [
          "Gaulish"
        ],
        Added: "2001-05-25",
        Deprecated: "2015-03-29",
        Comments: [
          "see xcg, xga, xtg"
        ]
      },
      {
        Type: "grandfathered",
        Tag: "en-GB-oed",
        Description: [
          "English, Oxford English Dictionary spelling"
        ],
        Added: "2003-07-09",
        Deprecated: "2015-04-17",
        "Preferred-Value": "en-GB-oxendict"
      },
      {
        Type: "grandfathered",
        Tag: "i-ami",
        Description: [
          "Amis"
        ],
        Added: "1999-05-25",
        Deprecated: "2009-07-29",
        "Preferred-Value": "ami"
      },
      {
        Type: "grandfathered",
        Tag: "i-bnn",
        Description: [
          "Bunun"
        ],
        Added: "1999-05-25",
        Deprecated: "2009-07-29",
        "Preferred-Value": "bnn"
      },
      {
        Type: "grandfathered",
        Tag: "i-default",
        Description: [
          "Default Language"
        ],
        Added: "1998-03-10"
      },
      {
        Type: "grandfathered",
        Tag: "i-enochian",
        Description: [
          "Enochian"
        ],
        Added: "2002-07-03",
        Deprecated: "2015-03-29"
      },
      {
        Type: "grandfathered",
        Tag: "i-hak",
        Description: [
          "Hakka"
        ],
        Added: "1999-01-31",
        Deprecated: "2000-01-10",
        "Preferred-Value": "hak"
      },
      {
        Type: "grandfathered",
        Tag: "i-klingon",
        Description: [
          "Klingon"
        ],
        Added: "1999-05-26",
        Deprecated: "2004-02-24",
        "Preferred-Value": "tlh"
      },
      {
        Type: "grandfathered",
        Tag: "i-lux",
        Description: [
          "Luxembourgish"
        ],
        Added: "1997-09-19",
        Deprecated: "1998-09-09",
        "Preferred-Value": "lb"
      },
      {
        Type: "grandfathered",
        Tag: "i-mingo",
        Description: [
          "Mingo"
        ],
        Added: "1997-09-19"
      },
      {
        Type: "grandfathered",
        Tag: "i-navajo",
        Description: [
          "Navajo"
        ],
        Added: "1997-09-19",
        Deprecated: "2000-02-18",
        "Preferred-Value": "nv"
      },
      {
        Type: "grandfathered",
        Tag: "i-pwn",
        Description: [
          "Paiwan"
        ],
        Added: "1999-05-25",
        Deprecated: "2009-07-29",
        "Preferred-Value": "pwn"
      },
      {
        Type: "grandfathered",
        Tag: "i-tao",
        Description: [
          "Tao"
        ],
        Added: "1999-05-25",
        Deprecated: "2009-07-29",
        "Preferred-Value": "tao"
      },
      {
        Type: "grandfathered",
        Tag: "i-tay",
        Description: [
          "Tayal"
        ],
        Added: "1999-05-25",
        Deprecated: "2009-07-29",
        "Preferred-Value": "tay"
      },
      {
        Type: "grandfathered",
        Tag: "i-tsu",
        Description: [
          "Tsou"
        ],
        Added: "1999-05-25",
        Deprecated: "2009-07-29",
        "Preferred-Value": "tsu"
      },
      {
        Type: "grandfathered",
        Tag: "no-bok",
        Description: [
          "Norwegian Bokmal"
        ],
        Added: "1995-08-23",
        Deprecated: "2000-02-18",
        "Preferred-Value": "nb"
      },
      {
        Type: "grandfathered",
        Tag: "no-nyn",
        Description: [
          "Norwegian Nynorsk"
        ],
        Added: "1995-08-23",
        Deprecated: "2000-02-18",
        "Preferred-Value": "nn"
      },
      {
        Type: "grandfathered",
        Tag: "sgn-BE-FR",
        Description: [
          "Belgian-French Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "sfb"
      },
      {
        Type: "grandfathered",
        Tag: "sgn-BE-NL",
        Description: [
          "Belgian-Flemish Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "vgt"
      },
      {
        Type: "grandfathered",
        Tag: "sgn-CH-DE",
        Description: [
          "Swiss German Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "sgg"
      },
      {
        Type: "grandfathered",
        Tag: "zh-guoyu",
        Description: [
          "Mandarin or Standard Chinese"
        ],
        Added: "1999-12-18",
        Deprecated: "2005-07-15",
        "Preferred-Value": "cmn"
      },
      {
        Type: "grandfathered",
        Tag: "zh-hakka",
        Description: [
          "Hakka"
        ],
        Added: "1999-12-18",
        Deprecated: "2009-07-29",
        "Preferred-Value": "hak"
      },
      {
        Type: "grandfathered",
        Tag: "zh-min",
        Description: [
          "Min, Fuzhou, Hokkien, Amoy, or Taiwanese"
        ],
        Added: "1999-12-18",
        Deprecated: "2009-07-29",
        Comments: [
          "see cdo, cpx, czo, mnp, nan"
        ]
      },
      {
        Type: "grandfathered",
        Tag: "zh-min-nan",
        Description: [
          "Minnan, Hokkien, Amoy, Taiwanese, Southern Min, Southern Fujian, Hoklo, Southern Fukien, Ho-lo"
        ],
        Added: "2001-03-26",
        Deprecated: "2009-07-29",
        "Preferred-Value": "nan"
      },
      {
        Type: "grandfathered",
        Tag: "zh-xiang",
        Description: [
          "Xiang or Hunanese"
        ],
        Added: "1999-12-18",
        Deprecated: "2009-07-29",
        "Preferred-Value": "hsn"
      },
      {
        Type: "redundant",
        Tag: "az-Arab",
        Description: [
          "Azerbaijani in Arabic script"
        ],
        Added: "2003-05-30"
      },
      {
        Type: "redundant",
        Tag: "az-Cyrl",
        Description: [
          "Azerbaijani in Cyrillic script"
        ],
        Added: "2003-05-30"
      },
      {
        Type: "redundant",
        Tag: "az-Latn",
        Description: [
          "Azerbaijani in Latin script"
        ],
        Added: "2003-05-30"
      },
      {
        Type: "redundant",
        Tag: "be-Latn",
        Description: [
          "Belarusian in Latin script"
        ],
        Added: "2005-01-06"
      },
      {
        Type: "redundant",
        Tag: "bs-Cyrl",
        Description: [
          "Bosnian in Cyrillic script"
        ],
        Added: "2005-02-17"
      },
      {
        Type: "redundant",
        Tag: "bs-Latn",
        Description: [
          "Bosnian in Latin script"
        ],
        Added: "2005-02-17"
      },
      {
        Type: "redundant",
        Tag: "de-1901",
        Description: [
          "German, traditional orthography"
        ],
        Added: "2001-07-17"
      },
      {
        Type: "redundant",
        Tag: "de-1996",
        Description: [
          "German, orthography of 1996"
        ],
        Added: "2001-07-17"
      },
      {
        Type: "redundant",
        Tag: "de-AT-1901",
        Description: [
          "German, Austrian variant, traditional orthography"
        ],
        Added: "2001-07-17"
      },
      {
        Type: "redundant",
        Tag: "de-AT-1996",
        Description: [
          "German, Austrian variant, orthography of 1996"
        ],
        Added: "2001-07-17"
      },
      {
        Type: "redundant",
        Tag: "de-CH-1901",
        Description: [
          "German, Swiss variant, traditional orthography"
        ],
        Added: "2001-07-17"
      },
      {
        Type: "redundant",
        Tag: "de-CH-1996",
        Description: [
          "German, Swiss variant, orthography of 1996"
        ],
        Added: "2001-07-17"
      },
      {
        Type: "redundant",
        Tag: "de-DE-1901",
        Description: [
          "German, German variant, traditional orthography"
        ],
        Added: "2001-07-17"
      },
      {
        Type: "redundant",
        Tag: "de-DE-1996",
        Description: [
          "German, German variant, orthography of 1996"
        ],
        Added: "2001-07-17"
      },
      {
        Type: "redundant",
        Tag: "en-boont",
        Description: [
          "Boontling"
        ],
        Added: "2003-02-14"
      },
      {
        Type: "redundant",
        Tag: "en-scouse",
        Description: [
          "Scouse"
        ],
        Added: "2000-05-25"
      },
      {
        Type: "redundant",
        Tag: "es-419",
        Description: [
          "Latin American Spanish"
        ],
        Added: "2005-07-15"
      },
      {
        Type: "redundant",
        Tag: "iu-Cans",
        Description: [
          "Inuktitut in Canadian Aboriginal Syllabic script"
        ],
        Added: "2005-02-17"
      },
      {
        Type: "redundant",
        Tag: "iu-Latn",
        Description: [
          "Inuktitut in Latin script"
        ],
        Added: "2005-02-17"
      },
      {
        Type: "redundant",
        Tag: "mn-Cyrl",
        Description: [
          "Mongolian in Cyrillic script"
        ],
        Added: "2005-02-17"
      },
      {
        Type: "redundant",
        Tag: "mn-Mong",
        Description: [
          "Mongolian in Mongolian script"
        ],
        Added: "2005-02-17"
      },
      {
        Type: "redundant",
        Tag: "sgn-BR",
        Description: [
          "Brazilian Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "bzs"
      },
      {
        Type: "redundant",
        Tag: "sgn-CO",
        Description: [
          "Colombian Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "csn"
      },
      {
        Type: "redundant",
        Tag: "sgn-DE",
        Description: [
          "German Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "gsg"
      },
      {
        Type: "redundant",
        Tag: "sgn-DK",
        Description: [
          "Danish Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "dsl"
      },
      {
        Type: "redundant",
        Tag: "sgn-ES",
        Description: [
          "Spanish Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "ssp"
      },
      {
        Type: "redundant",
        Tag: "sgn-FR",
        Description: [
          "French Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "fsl"
      },
      {
        Type: "redundant",
        Tag: "sgn-GB",
        Description: [
          "British Sign Language"
        ],
        Added: "2001-03-02",
        Deprecated: "2009-07-29",
        "Preferred-Value": "bfi"
      },
      {
        Type: "redundant",
        Tag: "sgn-GR",
        Description: [
          "Greek Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "gss"
      },
      {
        Type: "redundant",
        Tag: "sgn-IE",
        Description: [
          "Irish Sign Language"
        ],
        Added: "2001-03-02",
        Deprecated: "2009-07-29",
        "Preferred-Value": "isg"
      },
      {
        Type: "redundant",
        Tag: "sgn-IT",
        Description: [
          "Italian Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "ise"
      },
      {
        Type: "redundant",
        Tag: "sgn-JP",
        Description: [
          "Japanese Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "jsl"
      },
      {
        Type: "redundant",
        Tag: "sgn-MX",
        Description: [
          "Mexican Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "mfs"
      },
      {
        Type: "redundant",
        Tag: "sgn-NI",
        Description: [
          "Nicaraguan Sign Language"
        ],
        Added: "2001-03-02",
        Deprecated: "2009-07-29",
        "Preferred-Value": "ncs"
      },
      {
        Type: "redundant",
        Tag: "sgn-NL",
        Description: [
          "Dutch Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "dse"
      },
      {
        Type: "redundant",
        Tag: "sgn-NO",
        Description: [
          "Norwegian Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "nsl"
      },
      {
        Type: "redundant",
        Tag: "sgn-PT",
        Description: [
          "Portuguese Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "psr"
      },
      {
        Type: "redundant",
        Tag: "sgn-SE",
        Description: [
          "Swedish Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "swl"
      },
      {
        Type: "redundant",
        Tag: "sgn-US",
        Description: [
          "American Sign Language"
        ],
        Added: "2001-03-02",
        Deprecated: "2009-07-29",
        "Preferred-Value": "ase"
      },
      {
        Type: "redundant",
        Tag: "sgn-ZA",
        Description: [
          "South African Sign Language"
        ],
        Added: "2001-11-11",
        Deprecated: "2009-07-29",
        "Preferred-Value": "sfs"
      },
      {
        Type: "redundant",
        Tag: "sl-nedis",
        Description: [
          "Natisone dialect, Nadiza dialect"
        ],
        Added: "2004-06-01"
      },
      {
        Type: "redundant",
        Tag: "sl-rozaj",
        Description: [
          "Resian, Resianic, Rezijan"
        ],
        Added: "2003-10-09"
      },
      {
        Type: "redundant",
        Tag: "sr-Cyrl",
        Description: [
          "Serbian in Cyrillic script"
        ],
        Added: "2003-05-30"
      },
      {
        Type: "redundant",
        Tag: "sr-Latn",
        Description: [
          "Serbian in Latin script"
        ],
        Added: "2003-05-30"
      },
      {
        Type: "redundant",
        Tag: "tg-Arab",
        Description: [
          "Tajik in Arabic script"
        ],
        Added: "2005-02-17"
      },
      {
        Type: "redundant",
        Tag: "tg-Cyrl",
        Description: [
          "Tajik in Cyrillic script"
        ],
        Added: "2005-02-17"
      },
      {
        Type: "redundant",
        Tag: "uz-Cyrl",
        Description: [
          "Uzbek in Cyrillic script"
        ],
        Added: "2003-05-30"
      },
      {
        Type: "redundant",
        Tag: "uz-Latn",
        Description: [
          "Uzbek in Latin script"
        ],
        Added: "2003-05-30"
      },
      {
        Type: "redundant",
        Tag: "yi-Latn",
        Description: [
          "Yiddish, in Latin script"
        ],
        Added: "2003-01-07"
      },
      {
        Type: "redundant",
        Tag: "zh-cmn",
        Description: [
          "Mandarin Chinese"
        ],
        Added: "2005-07-15",
        Deprecated: "2009-07-29",
        "Preferred-Value": "cmn"
      },
      {
        Type: "redundant",
        Tag: "zh-cmn-Hans",
        Description: [
          "Mandarin Chinese (Simplified)"
        ],
        Added: "2005-07-15",
        Deprecated: "2009-07-29",
        "Preferred-Value": "cmn-Hans"
      },
      {
        Type: "redundant",
        Tag: "zh-cmn-Hant",
        Description: [
          "Mandarin Chinese (Traditional)"
        ],
        Added: "2005-07-15",
        Deprecated: "2009-07-29",
        "Preferred-Value": "cmn-Hant"
      },
      {
        Type: "redundant",
        Tag: "zh-gan",
        Description: [
          "Kan or Gan"
        ],
        Added: "1999-12-18",
        Deprecated: "2009-07-29",
        "Preferred-Value": "gan"
      },
      {
        Type: "redundant",
        Tag: "zh-Hans",
        Description: [
          "simplified Chinese"
        ],
        Added: "2003-05-30"
      },
      {
        Type: "redundant",
        Tag: "zh-Hans-CN",
        Description: [
          "PRC Mainland Chinese in simplified script"
        ],
        Added: "2005-04-13"
      },
      {
        Type: "redundant",
        Tag: "zh-Hans-HK",
        Description: [
          "Hong Kong Chinese in simplified script"
        ],
        Added: "2005-04-11"
      },
      {
        Type: "redundant",
        Tag: "zh-Hans-MO",
        Description: [
          "Macao Chinese in simplified script"
        ],
        Added: "2005-04-11"
      },
      {
        Type: "redundant",
        Tag: "zh-Hans-SG",
        Description: [
          "Singapore Chinese in simplified script"
        ],
        Added: "2005-04-11"
      },
      {
        Type: "redundant",
        Tag: "zh-Hans-TW",
        Description: [
          "Taiwan Chinese in simplified script"
        ],
        Added: "2005-04-11"
      },
      {
        Type: "redundant",
        Tag: "zh-Hant",
        Description: [
          "traditional Chinese"
        ],
        Added: "2003-05-30"
      },
      {
        Type: "redundant",
        Tag: "zh-Hant-CN",
        Description: [
          "PRC Mainland Chinese in traditional script"
        ],
        Added: "2005-04-13"
      },
      {
        Type: "redundant",
        Tag: "zh-Hant-HK",
        Description: [
          "Hong Kong Chinese in traditional script"
        ],
        Added: "2005-04-11"
      },
      {
        Type: "redundant",
        Tag: "zh-Hant-MO",
        Description: [
          "Macao Chinese in traditional script"
        ],
        Added: "2005-04-11"
      },
      {
        Type: "redundant",
        Tag: "zh-Hant-SG",
        Description: [
          "Singapore Chinese in traditional script"
        ],
        Added: "2005-04-11"
      },
      {
        Type: "redundant",
        Tag: "zh-Hant-TW",
        Description: [
          "Taiwan Chinese in traditional script"
        ],
        Added: "2005-04-11"
      },
      {
        Type: "redundant",
        Tag: "zh-wuu",
        Description: [
          "Shanghaiese or Wu"
        ],
        Added: "1999-12-18",
        Deprecated: "2009-07-29",
        "Preferred-Value": "wuu"
      },
      {
        Type: "redundant",
        Tag: "zh-yue",
        Description: [
          "Cantonese"
        ],
        Added: "1999-12-18",
        Deprecated: "2009-07-29",
        "Preferred-Value": "yue"
      }
    ];
  }
});

// node_modules/language-tags/lib/Subtag.js
var require_Subtag = __commonJS({
  "node_modules/language-tags/lib/Subtag.js"(exports, module2) {
    "use strict";
    var index = require_json();
    var registry = require_registry();
    module2.exports = Subtag;
    Subtag.ERR_NONEXISTENT = 1;
    Subtag.ERR_TAG = 2;
    function Subtag(subtag, type) {
      var types, i, record, error;
      subtag = subtag.toLowerCase();
      type = type.toLowerCase();
      error = function(code, message) {
        var err;
        err = new Error(message);
        err.code = code;
        err.subtag = subtag;
        throw err;
      };
      types = index[subtag];
      if (!types) {
        error(Subtag.ERR_NONEXISTENT, "Non-existent subtag '" + subtag + "'.");
      }
      i = types[type];
      if (!i && 0 !== i) {
        error(Subtag.ERR_NONEXISTENT, "Non-existent subtag '" + subtag + "' of type '" + type + "'.");
      }
      record = registry[i];
      if (!record.Subtag) {
        error(Subtag.ERR_TAG, "'" + subtag + "' is a '" + type + "' tag.");
      }
      this.data = {};
      this.data.subtag = subtag;
      this.data.record = record;
      this.data.type = type;
    }
    Subtag.prototype.type = function() {
      return this.data.type;
    };
    Subtag.prototype.descriptions = function() {
      return this.data.record.Description;
    };
    Subtag.prototype.preferred = function() {
      var type, preferred = this.data.record["Preferred-Value"];
      if (preferred) {
        type = this.data.type;
        if (type === "extlang") {
          type = "language";
        }
        return new Subtag(preferred, type);
      }
      return null;
    };
    Subtag.prototype.script = function() {
      var script = this.data.record["Suppress-Script"];
      if (script) {
        return new Subtag(script, "script");
      }
      return null;
    };
    Subtag.prototype.scope = function() {
      return this.data.record.Scope || null;
    };
    Subtag.prototype.deprecated = function() {
      return this.data.record.Deprecated || null;
    };
    Subtag.prototype.added = function() {
      return this.data.record.Added;
    };
    Subtag.prototype.comments = function() {
      return this.data.record.Comments || [];
    };
    Subtag.prototype.format = function() {
      var subtag = this.data.subtag;
      switch (this.data.type) {
        case "region":
          return subtag.toUpperCase();
        case "script":
          return subtag[0].toUpperCase() + subtag.substr(1);
      }
      return subtag;
    };
    Subtag.prototype.toString = function() {
      return this.format();
    };
  }
});

// node_modules/language-tags/lib/Tag.js
var require_Tag = __commonJS({
  "node_modules/language-tags/lib/Tag.js"(exports, module2) {
    "use strict";
    var index = require_json();
    var registry = require_registry();
    var Subtag = require_Subtag();
    module2.exports = Tag;
    Tag.ERR_DEPRECATED = 1;
    Tag.ERR_NO_LANGUAGE = 2;
    Tag.ERR_UNKNOWN = 3;
    Tag.ERR_TOO_LONG = 4;
    Tag.ERR_EXTRA_REGION = 5;
    Tag.ERR_EXTRA_EXTLANG = 6;
    Tag.ERR_EXTRA_SCRIPT = 7;
    Tag.ERR_DUPLICATE_VARIANT = 8;
    Tag.ERR_WRONG_ORDER = 9;
    Tag.ERR_SUPPRESS_SCRIPT = 10;
    Tag.ERR_SUBTAG_DEPRECATED = 11;
    Tag.ERR_EXTRA_LANGUAGE = 12;
    function Tag(tag) {
      var types;
      tag = tag.trim().toLowerCase();
      this.data = {};
      this.data.tag = tag;
      types = index[tag];
      if (types && (types.grandfathered || types.redundant)) {
        this.data.record = registry[types.grandfathered || types.redundant];
      }
    }
    Tag.prototype.preferred = function() {
      var preferred = this.data.record["Preferred-Value"];
      if (preferred) {
        return new Tag(preferred);
      }
      return null;
    };
    Tag.prototype.subtags = function() {
      var codes, data = this.data, subtags = [];
      if (data.record && this.type() === "grandfathered") {
        return subtags;
      }
      codes = data.tag.split("-");
      if (!codes.length) {
        return subtags;
      }
      codes.some(function(code, i) {
        var types;
        if (code.length < 2) {
          return true;
        }
        types = index[code];
        if (!types) {
          return;
        }
        if (0 === i && void 0 !== types.language) {
          subtags.push(new Subtag(code, "language"));
          return;
        }
        switch (code.length) {
          case 2:
            if (types.region) {
              subtags.push(new Subtag(code, "region"));
            } else if (types.language) {
              subtags.push(new Subtag(code, "language"));
            }
            break;
          case 3:
            if (types.region) {
              subtags.push(new Subtag(code, "region"));
            } else if (types.extlang) {
              subtags.push(new Subtag(code, "extlang"));
            } else if (types.language) {
              subtags.push(new Subtag(code, "language"));
            }
            break;
          case 4:
            if (types.variant) {
              subtags.push(new Subtag(code, "variant"));
            } else if (types.script) {
              subtags.push(new Subtag(code, "script"));
            }
            break;
          default:
            if (types.variant) {
              subtags.push(new Subtag(code, "variant"));
            }
            break;
        }
      });
      return subtags;
    };
    Tag.prototype.language = function() {
      return this.find("language");
    };
    Tag.prototype.region = function() {
      return this.find("region");
    };
    Tag.prototype.script = function() {
      return this.find("script");
    };
    Tag.prototype.find = function(type) {
      var i, l, subtag, subtags = this.subtags();
      for (i = 0, l = subtags.length; i < l; i++) {
        subtag = subtags[i];
        if (subtag.type() === type) {
          return subtag;
        }
      }
    };
    Tag.prototype.valid = function() {
      return this.errors().length < 1;
    };
    Tag.prototype.errors = function() {
      var error, subtags, data = this.data, errors = [];
      error = function(code, subtag) {
        var err, message;
        switch (code) {
          case Tag.ERR_DEPRECATED:
            message = "The tag '" + data.tag + "' is deprecated.";
            if (data.record["Preferred-Value"]) {
              message += " Use '" + data.record["Preferred-Value"] + "' instead.";
            }
            break;
          case Tag.ERR_SUBTAG_DEPRECATED:
            message = "The subtag '" + subtag + "' is deprecated.";
            break;
          case Tag.ERR_NO_LANGUAGE:
            if (!data.tag) {
              message = "Empty tag.";
            } else {
              message = "Missing language tag in '" + data.tag + "'.";
            }
            break;
          case Tag.ERR_UNKNOWN:
            message = "Unknown code '" + subtag + "'";
            break;
          case Tag.ERR_TOO_LONG:
            message = "The private-use subtag '" + subtag + "' is too long.";
            break;
          case Tag.ERR_EXTRA_LANGUAGE:
          case Tag.ERR_EXTRA_EXTLANG:
          case Tag.ERR_EXTRA_REGION:
          case Tag.ERR_EXTRA_SCRIPT:
            message = "Extra " + subtag.type() + " subtag '" + subtag + "' found.";
            break;
          case Tag.ERR_DUPLICATE_VARIANT:
            message = "Duplicate variant subtag '" + subtag + "' found.";
            break;
          case Tag.ERR_WRONG_ORDER:
            message = "The subtag '" + subtag[0] + "' should not appear before '" + subtag[1] + "'.";
            break;
          case Tag.ERR_SUPPRESS_SCRIPT:
            message = "The script subtag '" + subtag + "' is the same as the language suppress-script.";
            break;
        }
        err = new Error(message);
        err.code = code;
        err.tag = data.tag;
        err.subtag = subtag;
        errors.push(err);
      };
      if (data.record) {
        if (data.record.Deprecated) {
          error(Tag.ERR_DEPRECATED);
        }
        return errors;
      }
      data.tag.split("-").some(function(code, i, codes) {
        var types;
        if (code.length < 2) {
          codes.slice(i).forEach(function(code2) {
            if (code2.length > 8) {
              error(Tag.ERR_TOO_LONG, code2);
            }
          });
          return true;
        }
        types = index[code];
        if (!types) {
          error(Tag.ERR_UNKNOWN, code);
        }
        return false;
      });
      subtags = this.subtags();
      if (!subtags.length || "language" !== subtags[0].type()) {
        error(Tag.ERR_NO_LANGUAGE);
        return errors;
      }
      subtags.forEach(function(subtag, i) {
        var type = subtag.type(), language, script, found = this;
        if (subtag.deprecated()) {
          error(Tag.ERR_SUBTAG_DEPRECATED, subtag);
        }
        if (found[type]) {
          found[type].push(subtag);
        }
        switch (type) {
          case "language":
            if (found.language.length > 1) {
              error(Tag.ERR_EXTRA_LANGUAGE, subtag);
            }
            break;
          case "region":
            if (found.region.length > 1) {
              error(Tag.ERR_EXTRA_REGION, subtag);
            }
            break;
          case "extlang":
            if (found.extlang.length > 1) {
              error(Tag.ERR_EXTRA_EXTLANG, subtag);
            }
            break;
          case "script":
            if (found.script.length > 1) {
              error(Tag.ERR_EXTRA_SCRIPT, subtag);
            } else {
              language = subtags[0];
              if ("language" === language.type()) {
                script = language.script();
                if (script && script.format() === subtag.format()) {
                  error(Tag.ERR_SUPPRESS_SCRIPT, subtag);
                }
              }
            }
            break;
          case "variant":
            if (found.variant.length > 1 && found.variant.some(function(variant) {
              return variant.format() === subtag.format();
            })) {
              error(Tag.ERR_DUPLICATE_VARIANT, subtag);
            }
        }
      }, {
        language: [],
        extlang: [],
        variant: [],
        script: [],
        region: []
      });
      subtags.forEach(function(subtag, i, subtags2) {
        var priority = this, next = subtags2[i + 1];
        if (next && priority[subtag.type()] > priority[next.type()]) {
          error(Tag.ERR_WRONG_ORDER, [subtag, next]);
        }
      }, {
        language: 4,
        extlang: 5,
        script: 6,
        region: 7,
        variant: 8
      });
      return errors;
    };
    Tag.prototype.type = function() {
      var record = this.data.record;
      if (record) {
        return record.Type;
      }
      return "tag";
    };
    Tag.prototype.added = function() {
      var record = this.data.record;
      return record && record.Added;
    };
    Tag.prototype.deprecated = function() {
      var record = this.data.record;
      return record && record.Deprecated;
    };
    Tag.prototype.descriptions = function() {
      var record = this.data.record;
      if (record && record.Description) {
        return record.Description;
      }
      return [];
    };
    Tag.prototype.format = function() {
      var tag = this.data.tag;
      return tag.split("-").reduce(function(p, c, i, a) {
        if (i === 0) {
          return c;
        }
        if (a[i - 1].length === 1) {
          return p + "-" + c;
        }
        switch (c.length) {
          case 2:
            return p + "-" + c.toUpperCase();
          case 4:
            return p + "-" + c[0].toUpperCase() + c.substr(1);
        }
        return p + "-" + c;
      });
    };
  }
});

// node_modules/language-subtag-registry/data/json/macrolanguage.json
var require_macrolanguage = __commonJS({
  "node_modules/language-subtag-registry/data/json/macrolanguage.json"(exports, module2) {
    module2.exports = {
      ak: 4,
      ar: 7,
      ay: 10,
      az: 11,
      cr: 26,
      et: 40,
      fa: 42,
      ff: 43,
      gn: 52,
      ik: 69,
      iu: 74,
      kg: 81,
      kr: 89,
      ku: 91,
      kv: 92,
      lv: 103,
      mg: 104,
      mn: 109,
      ms: 112,
      ne: 118,
      no: 122,
      oj: 127,
      om: 128,
      or: 129,
      ps: 134,
      qu: 136,
      sc: 143,
      sh: 147,
      sq: 154,
      sw: 160,
      uz: 178,
      yi: 185,
      za: 187,
      zh: 188,
      bal: 719,
      bik: 917,
      bnc: 1036,
      bua: 1205,
      chm: 1456,
      del: 1754,
      den: 1756,
      din: 1808,
      doi: 1885,
      gba: 2228,
      gon: 2422,
      grb: 2443,
      hai: 2553,
      hmn: 2631,
      jrb: 3015,
      kln: 3329,
      kok: 3402,
      kpe: 3419,
      lah: 3703,
      luy: 4012,
      man: 4047,
      mwr: 4597,
      raj: 5773,
      rom: 5878,
      syr: 6425,
      tmh: 6698,
      zap: 7983,
      zza: 8150
    };
  }
});

// node_modules/language-subtag-registry/data/json/meta.json
var require_meta = __commonJS({
  "node_modules/language-subtag-registry/data/json/meta.json"(exports, module2) {
    module2.exports = {
      "File-Date": "2019-09-16"
    };
  }
});

// node_modules/language-tags/lib/index.js
var require_lib = __commonJS({
  "node_modules/language-tags/lib/index.js"(exports, module2) {
    "use strict";
    var Tag = require_Tag();
    var Subtag = require_Subtag();
    var index = require_json();
    var registry = require_registry();
    var tags3 = function(tag) {
      return new Tag(tag);
    };
    module2.exports = tags3;
    tags3.check = function(tag) {
      return new Tag(tag).valid();
    };
    tags3.types = function(subtag) {
      var types = index[subtag];
      if (!types) {
        return [];
      }
      return Object.keys(types).filter(function(type) {
        return type !== "grandfathered" && type !== "redundant";
      });
    };
    tags3.subtags = function(subtags) {
      var result = [];
      if (!Array.isArray(subtags)) {
        subtags = [subtags];
      }
      subtags.forEach(function(subtag) {
        tags3.types(subtag).forEach(function(type) {
          result.push(new Subtag(subtag, type));
        });
      });
      return result;
    };
    tags3.filter = function(subtags) {
      return subtags.filter(function(subtag) {
        return !tags3.types(subtag).length;
      });
    };
    tags3.search = function(query, all) {
      var test;
      if ("function" === typeof query.test) {
        test = function(description) {
          return query.test(description);
        };
      } else if (query.toLowerCase() === query) {
        test = function(description) {
          return -1 !== description.toLowerCase().indexOf(query);
        };
      } else {
        test = function(description) {
          return -1 !== description.indexOf(query);
        };
      }
      return registry.filter(function(record) {
        if (!record.Subtag && !all) {
          return false;
        }
        return record.Description.some(test);
      }).sort(function(a, b) {
        return Math.min.apply(Math, a.Description.filter(test).map(function(description) {
          return description.length;
        })) - Math.min.apply(Math, b.Description.filter(test).map(function(description) {
          return description.length;
        }));
      }).map(function(record) {
        if (record.Subtag) {
          return new Subtag(record.Subtag, record.Type);
        }
        return new Tag(record.Tag);
      });
    };
    tags3.languages = function(macrolanguage) {
      var i, l, record, results = [];
      macrolanguage = macrolanguage.toLowerCase();
      if (!require_macrolanguage()[macrolanguage]) {
        throw new Error("'" + macrolanguage + "' is not a macrolanguage.");
      }
      for (i = 0, l = registry.length; i < l; i++) {
        record = registry[i];
        if (record.Macrolanguage === macrolanguage) {
          results.push(new Subtag(record.Subtag, record.Type));
        }
      }
      return results;
    };
    tags3.language = function(subtag) {
      return tags3.type(subtag, "language");
    };
    tags3.region = function(subtag) {
      return tags3.type(subtag, "region");
    };
    tags3.type = function(subtag, type) {
      var types = index[subtag.toLowerCase()];
      if (types && types[type]) {
        return new Subtag(subtag, type);
      }
      return null;
    };
    tags3.date = function() {
      return require_meta()["File-Date"];
    };
  }
});

// node_modules/uniqid/index.js
var require_uniqid = __commonJS({
  "node_modules/uniqid/index.js"(exports, module2) {
    var pid = typeof process !== "undefined" && process.pid ? process.pid.toString(36) : "";
    var address = "";
    if (typeof __webpack_require__ !== "function") {
      mac = "", networkInterfaces = require("os").networkInterfaces();
      loop:
        for (let interface_key in networkInterfaces) {
          const networkInterface = networkInterfaces[interface_key];
          const length = networkInterface.length;
          for (i = 0; i < length; i++) {
            if (networkInterface[i] !== void 0 && networkInterface[i].mac && networkInterface[i].mac != "00:00:00:00:00:00") {
              mac = networkInterface[i].mac;
              break loop;
            }
          }
        }
      address = mac ? parseInt(mac.replace(/\:|\D+/gi, "")).toString(36) : "";
    }
    var mac;
    var networkInterfaces;
    var i;
    module2.exports = module2.exports.default = function(prefix, suffix) {
      return (prefix ? prefix : "") + address + pid + now().toString(36) + (suffix ? suffix : "");
    };
    module2.exports.process = function(prefix, suffix) {
      return (prefix ? prefix : "") + pid + now().toString(36) + (suffix ? suffix : "");
    };
    module2.exports.time = function(prefix, suffix) {
      return (prefix ? prefix : "") + now().toString(36) + (suffix ? suffix : "");
    };
    function now() {
      var time = Date.now();
      var last = now.last || time;
      return now.last = time > last ? time : last + 1;
    }
  }
});

// node_modules/ajv/dist/compile/rules.js
var require_rules = __commonJS({
  "node_modules/ajv/dist/compile/rules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRules = exports.isJSONType = void 0;
    var _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
    var jsonTypes = new Set(_jsonTypes);
    function isJSONType(x) {
      return typeof x == "string" && jsonTypes.has(x);
    }
    exports.isJSONType = isJSONType;
    function getRules() {
      const groups = {
        number: { type: "number", rules: [] },
        string: { type: "string", rules: [] },
        array: { type: "array", rules: [] },
        object: { type: "object", rules: [] }
      };
      return {
        types: { ...groups, integer: true, boolean: true, null: true },
        rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
        post: { rules: [] },
        all: {},
        keywords: {}
      };
    }
    exports.getRules = getRules;
  }
});

// node_modules/ajv/dist/compile/validate/applicability.js
var require_applicability = __commonJS({
  "node_modules/ajv/dist/compile/validate/applicability.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;
    function schemaHasRulesForType({ schema, self: self2 }, type) {
      const group = self2.RULES.types[type];
      return group && group !== true && shouldUseGroup(schema, group);
    }
    exports.schemaHasRulesForType = schemaHasRulesForType;
    function shouldUseGroup(schema, group) {
      return group.rules.some((rule) => shouldUseRule(schema, rule));
    }
    exports.shouldUseGroup = shouldUseGroup;
    function shouldUseRule(schema, rule) {
      var _a;
      return schema[rule.keyword] !== void 0 || ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== void 0));
    }
    exports.shouldUseRule = shouldUseRule;
  }
});

// node_modules/ajv/dist/compile/codegen/code.js
var require_code = __commonJS({
  "node_modules/ajv/dist/compile/codegen/code.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
    var _CodeOrName = class {
    };
    exports._CodeOrName = _CodeOrName;
    exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
    var Name = class extends _CodeOrName {
      constructor(s) {
        super();
        if (!exports.IDENTIFIER.test(s))
          throw new Error("CodeGen: name must be a valid identifier");
        this.str = s;
      }
      toString() {
        return this.str;
      }
      emptyStr() {
        return false;
      }
      get names() {
        return { [this.str]: 1 };
      }
    };
    exports.Name = Name;
    var _Code = class extends _CodeOrName {
      constructor(code) {
        super();
        this._items = typeof code === "string" ? [code] : code;
      }
      toString() {
        return this.str;
      }
      emptyStr() {
        if (this._items.length > 1)
          return false;
        const item = this._items[0];
        return item === "" || item === '""';
      }
      get str() {
        var _a;
        return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce((s, c) => `${s}${c}`, "");
      }
      get names() {
        var _a;
        return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce((names, c) => {
          if (c instanceof Name)
            names[c.str] = (names[c.str] || 0) + 1;
          return names;
        }, {});
      }
    };
    exports._Code = _Code;
    exports.nil = new _Code("");
    function _10(strs, ...args) {
      const code = [strs[0]];
      let i = 0;
      while (i < args.length) {
        addCodeArg(code, args[i]);
        code.push(strs[++i]);
      }
      return new _Code(code);
    }
    exports._ = _10;
    var plus = new _Code("+");
    function str(strs, ...args) {
      const expr = [safeStringify(strs[0])];
      let i = 0;
      while (i < args.length) {
        expr.push(plus);
        addCodeArg(expr, args[i]);
        expr.push(plus, safeStringify(strs[++i]));
      }
      optimize(expr);
      return new _Code(expr);
    }
    exports.str = str;
    function addCodeArg(code, arg) {
      if (arg instanceof _Code)
        code.push(...arg._items);
      else if (arg instanceof Name)
        code.push(arg);
      else
        code.push(interpolate(arg));
    }
    exports.addCodeArg = addCodeArg;
    function optimize(expr) {
      let i = 1;
      while (i < expr.length - 1) {
        if (expr[i] === plus) {
          const res = mergeExprItems(expr[i - 1], expr[i + 1]);
          if (res !== void 0) {
            expr.splice(i - 1, 3, res);
            continue;
          }
          expr[i++] = "+";
        }
        i++;
      }
    }
    function mergeExprItems(a, b) {
      if (b === '""')
        return a;
      if (a === '""')
        return b;
      if (typeof a == "string") {
        if (b instanceof Name || a[a.length - 1] !== '"')
          return;
        if (typeof b != "string")
          return `${a.slice(0, -1)}${b}"`;
        if (b[0] === '"')
          return a.slice(0, -1) + b.slice(1);
        return;
      }
      if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
        return `"${a}${b.slice(1)}`;
      return;
    }
    function strConcat(c1, c2) {
      return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`;
    }
    exports.strConcat = strConcat;
    function interpolate(x) {
      return typeof x == "number" || typeof x == "boolean" || x === null ? x : safeStringify(Array.isArray(x) ? x.join(",") : x);
    }
    function stringify(x) {
      return new _Code(safeStringify(x));
    }
    exports.stringify = stringify;
    function safeStringify(x) {
      return JSON.stringify(x).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
    }
    exports.safeStringify = safeStringify;
    function getProperty(key) {
      return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _10`[${key}]`;
    }
    exports.getProperty = getProperty;
  }
});

// node_modules/ajv/dist/compile/codegen/scope.js
var require_scope = __commonJS({
  "node_modules/ajv/dist/compile/codegen/scope.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
    var code_1 = require_code();
    var ValueError = class extends Error {
      constructor(name) {
        super(`CodeGen: "code" for ${name} not defined`);
        this.value = name.value;
      }
    };
    var UsedValueState;
    (function(UsedValueState2) {
      UsedValueState2[UsedValueState2["Started"] = 0] = "Started";
      UsedValueState2[UsedValueState2["Completed"] = 1] = "Completed";
    })(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));
    exports.varKinds = {
      const: new code_1.Name("const"),
      let: new code_1.Name("let"),
      var: new code_1.Name("var")
    };
    var Scope = class {
      constructor({ prefixes, parent } = {}) {
        this._names = {};
        this._prefixes = prefixes;
        this._parent = parent;
      }
      toName(nameOrPrefix) {
        return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
      }
      name(prefix) {
        return new code_1.Name(this._newName(prefix));
      }
      _newName(prefix) {
        const ng = this._names[prefix] || this._nameGroup(prefix);
        return `${prefix}${ng.index++}`;
      }
      _nameGroup(prefix) {
        var _a, _b;
        if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || this._prefixes && !this._prefixes.has(prefix)) {
          throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
        }
        return this._names[prefix] = { prefix, index: 0 };
      }
    };
    exports.Scope = Scope;
    var ValueScopeName = class extends code_1.Name {
      constructor(prefix, nameStr) {
        super(nameStr);
        this.prefix = prefix;
      }
      setValue(value, { property, itemIndex }) {
        this.value = value;
        this.scopePath = code_1._`.${new code_1.Name(property)}[${itemIndex}]`;
      }
    };
    exports.ValueScopeName = ValueScopeName;
    var line = code_1._`\n`;
    var ValueScope = class extends Scope {
      constructor(opts) {
        super(opts);
        this._values = {};
        this._scope = opts.scope;
        this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
      }
      get() {
        return this._scope;
      }
      name(prefix) {
        return new ValueScopeName(prefix, this._newName(prefix));
      }
      value(nameOrPrefix, value) {
        var _a;
        if (value.ref === void 0)
          throw new Error("CodeGen: ref must be passed in value");
        const name = this.toName(nameOrPrefix);
        const { prefix } = name;
        const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
        let vs = this._values[prefix];
        if (vs) {
          const _name = vs.get(valueKey);
          if (_name)
            return _name;
        } else {
          vs = this._values[prefix] = /* @__PURE__ */ new Map();
        }
        vs.set(valueKey, name);
        const s = this._scope[prefix] || (this._scope[prefix] = []);
        const itemIndex = s.length;
        s[itemIndex] = value.ref;
        name.setValue(value, { property: prefix, itemIndex });
        return name;
      }
      getValue(prefix, keyOrRef) {
        const vs = this._values[prefix];
        if (!vs)
          return;
        return vs.get(keyOrRef);
      }
      scopeRefs(scopeName, values = this._values) {
        return this._reduceValues(values, (name) => {
          if (name.scopePath === void 0)
            throw new Error(`CodeGen: name "${name}" has no value`);
          return code_1._`${scopeName}${name.scopePath}`;
        });
      }
      scopeCode(values = this._values, usedValues, getCode) {
        return this._reduceValues(values, (name) => {
          if (name.value === void 0)
            throw new Error(`CodeGen: name "${name}" has no value`);
          return name.value.code;
        }, usedValues, getCode);
      }
      _reduceValues(values, valueCode, usedValues = {}, getCode) {
        let code = code_1.nil;
        for (const prefix in values) {
          const vs = values[prefix];
          if (!vs)
            continue;
          const nameSet = usedValues[prefix] = usedValues[prefix] || /* @__PURE__ */ new Map();
          vs.forEach((name) => {
            if (nameSet.has(name))
              return;
            nameSet.set(name, UsedValueState.Started);
            let c = valueCode(name);
            if (c) {
              const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
              code = code_1._`${code}${def} ${name} = ${c};${this.opts._n}`;
            } else if (c = getCode === null || getCode === void 0 ? void 0 : getCode(name)) {
              code = code_1._`${code}${c}${this.opts._n}`;
            } else {
              throw new ValueError(name);
            }
            nameSet.set(name, UsedValueState.Completed);
          });
        }
        return code;
      }
    };
    exports.ValueScope = ValueScope;
  }
});

// node_modules/ajv/dist/compile/codegen/index.js
var require_codegen = __commonJS({
  "node_modules/ajv/dist/compile/codegen/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
    var code_1 = require_code();
    var scope_1 = require_scope();
    var code_2 = require_code();
    Object.defineProperty(exports, "_", { enumerable: true, get: function() {
      return code_2._;
    } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function() {
      return code_2.str;
    } });
    Object.defineProperty(exports, "strConcat", { enumerable: true, get: function() {
      return code_2.strConcat;
    } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
      return code_2.nil;
    } });
    Object.defineProperty(exports, "getProperty", { enumerable: true, get: function() {
      return code_2.getProperty;
    } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
      return code_2.stringify;
    } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
      return code_2.Name;
    } });
    var scope_2 = require_scope();
    Object.defineProperty(exports, "Scope", { enumerable: true, get: function() {
      return scope_2.Scope;
    } });
    Object.defineProperty(exports, "ValueScope", { enumerable: true, get: function() {
      return scope_2.ValueScope;
    } });
    Object.defineProperty(exports, "ValueScopeName", { enumerable: true, get: function() {
      return scope_2.ValueScopeName;
    } });
    Object.defineProperty(exports, "varKinds", { enumerable: true, get: function() {
      return scope_2.varKinds;
    } });
    exports.operators = {
      GT: new code_1._Code(">"),
      GTE: new code_1._Code(">="),
      LT: new code_1._Code("<"),
      LTE: new code_1._Code("<="),
      EQ: new code_1._Code("==="),
      NEQ: new code_1._Code("!=="),
      NOT: new code_1._Code("!"),
      OR: new code_1._Code("||"),
      AND: new code_1._Code("&&")
    };
    var Node2 = class {
      optimizeNodes() {
        return this;
      }
      optimizeNames(_names, _constants) {
        return this;
      }
    };
    var Def = class extends Node2 {
      constructor(varKind, name, rhs) {
        super();
        this.varKind = varKind;
        this.name = name;
        this.rhs = rhs;
      }
      render({ es5, _n }) {
        const varKind = es5 ? scope_1.varKinds.var : this.varKind;
        const rhs = this.rhs === void 0 ? "" : ` = ${this.rhs}`;
        return `${varKind} ${this.name}${rhs};` + _n;
      }
      optimizeNames(names, constants) {
        if (!names[this.name.str])
          return;
        if (this.rhs)
          this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
      }
      get names() {
        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
      }
    };
    var Assign = class extends Node2 {
      constructor(lhs, rhs, sideEffects) {
        super();
        this.lhs = lhs;
        this.rhs = rhs;
        this.sideEffects = sideEffects;
      }
      render({ _n }) {
        return `${this.lhs} = ${this.rhs};` + _n;
      }
      optimizeNames(names, constants) {
        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
          return;
        this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
      }
      get names() {
        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
        return addExprNames(names, this.rhs);
      }
    };
    var Label = class extends Node2 {
      constructor(label) {
        super();
        this.label = label;
        this.names = {};
      }
      render({ _n }) {
        return `${this.label}:` + _n;
      }
    };
    var Break = class extends Node2 {
      constructor(label) {
        super();
        this.label = label;
        this.names = {};
      }
      render({ _n }) {
        const label = this.label ? ` ${this.label}` : "";
        return `break${label};` + _n;
      }
    };
    var Throw = class extends Node2 {
      constructor(error) {
        super();
        this.error = error;
      }
      render({ _n }) {
        return `throw ${this.error};` + _n;
      }
      get names() {
        return this.error.names;
      }
    };
    var AnyCode = class extends Node2 {
      constructor(code) {
        super();
        this.code = code;
      }
      render({ _n }) {
        return `${this.code};` + _n;
      }
      optimizeNodes() {
        return `${this.code}` ? this : void 0;
      }
      optimizeNames(names, constants) {
        this.code = optimizeExpr(this.code, names, constants);
        return this;
      }
      get names() {
        return this.code instanceof code_1._CodeOrName ? this.code.names : {};
      }
    };
    var ParentNode = class extends Node2 {
      constructor(nodes = []) {
        super();
        this.nodes = nodes;
      }
      render(opts) {
        return this.nodes.reduce((code, n) => code + n.render(opts), "");
      }
      optimizeNodes() {
        const { nodes } = this;
        let i = nodes.length;
        while (i--) {
          const n = nodes[i].optimizeNodes();
          if (Array.isArray(n))
            nodes.splice(i, 1, ...n);
          else if (n)
            nodes[i] = n;
          else
            nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : void 0;
      }
      optimizeNames(names, constants) {
        const { nodes } = this;
        let i = nodes.length;
        while (i--) {
          const n = nodes[i];
          if (n.optimizeNames(names, constants))
            continue;
          subtractNames(names, n.names);
          nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : void 0;
      }
      get names() {
        return this.nodes.reduce((names, n) => addNames(names, n.names), {});
      }
    };
    var BlockNode = class extends ParentNode {
      render(opts) {
        return "{" + opts._n + super.render(opts) + "}" + opts._n;
      }
    };
    var Root = class extends ParentNode {
    };
    var Else = class extends BlockNode {
    };
    Else.kind = "else";
    var If = class extends BlockNode {
      constructor(condition, nodes) {
        super(nodes);
        this.condition = condition;
      }
      render(opts) {
        let code = `if(${this.condition})` + super.render(opts);
        if (this.else)
          code += "else " + this.else.render(opts);
        return code;
      }
      optimizeNodes() {
        super.optimizeNodes();
        const cond = this.condition;
        if (cond === true)
          return this.nodes;
        let e = this.else;
        if (e) {
          const ns = e.optimizeNodes();
          e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
        }
        if (e) {
          if (cond === false)
            return e instanceof If ? e : e.nodes;
          if (this.nodes.length)
            return this;
          return new If(not(cond), e instanceof If ? [e] : e.nodes);
        }
        if (cond === false || !this.nodes.length)
          return void 0;
        return this;
      }
      optimizeNames(names, constants) {
        var _a;
        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
        if (!(super.optimizeNames(names, constants) || this.else))
          return;
        this.condition = optimizeExpr(this.condition, names, constants);
        return this;
      }
      get names() {
        const names = super.names;
        addExprNames(names, this.condition);
        if (this.else)
          addNames(names, this.else.names);
        return names;
      }
    };
    If.kind = "if";
    var For = class extends BlockNode {
    };
    For.kind = "for";
    var ForLoop = class extends For {
      constructor(iteration) {
        super();
        this.iteration = iteration;
      }
      render(opts) {
        return `for(${this.iteration})` + super.render(opts);
      }
      optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants))
          return;
        this.iteration = optimizeExpr(this.iteration, names, constants);
        return this;
      }
      get names() {
        return addNames(super.names, this.iteration.names);
      }
    };
    var ForRange = class extends For {
      constructor(varKind, name, from, to) {
        super();
        this.varKind = varKind;
        this.name = name;
        this.from = from;
        this.to = to;
      }
      render(opts) {
        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
        const { name, from, to } = this;
        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
      }
      get names() {
        const names = addExprNames(super.names, this.from);
        return addExprNames(names, this.to);
      }
    };
    var ForIter = class extends For {
      constructor(loop, varKind, name, iterable) {
        super();
        this.loop = loop;
        this.varKind = varKind;
        this.name = name;
        this.iterable = iterable;
      }
      render(opts) {
        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
      }
      optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants))
          return;
        this.iterable = optimizeExpr(this.iterable, names, constants);
        return this;
      }
      get names() {
        return addNames(super.names, this.iterable.names);
      }
    };
    var Func = class extends BlockNode {
      constructor(name, args, async) {
        super();
        this.name = name;
        this.args = args;
        this.async = async;
      }
      render(opts) {
        const _async = this.async ? "async " : "";
        return `${_async}function ${this.name}(${this.args})` + super.render(opts);
      }
    };
    Func.kind = "func";
    var Return = class extends ParentNode {
      render(opts) {
        return "return " + super.render(opts);
      }
    };
    Return.kind = "return";
    var Try = class extends BlockNode {
      render(opts) {
        let code = "try" + super.render(opts);
        if (this.catch)
          code += this.catch.render(opts);
        if (this.finally)
          code += this.finally.render(opts);
        return code;
      }
      optimizeNodes() {
        var _a, _b;
        super.optimizeNodes();
        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
        return this;
      }
      optimizeNames(names, constants) {
        var _a, _b;
        super.optimizeNames(names, constants);
        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
        return this;
      }
      get names() {
        const names = super.names;
        if (this.catch)
          addNames(names, this.catch.names);
        if (this.finally)
          addNames(names, this.finally.names);
        return names;
      }
    };
    var Catch = class extends BlockNode {
      constructor(error) {
        super();
        this.error = error;
      }
      render(opts) {
        return `catch(${this.error})` + super.render(opts);
      }
    };
    Catch.kind = "catch";
    var Finally = class extends BlockNode {
      render(opts) {
        return "finally" + super.render(opts);
      }
    };
    Finally.kind = "finally";
    var CodeGen = class {
      constructor(extScope, opts = {}) {
        this._values = {};
        this._blockStarts = [];
        this._constants = {};
        this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
        this._extScope = extScope;
        this._scope = new scope_1.Scope({ parent: extScope });
        this._nodes = [new Root()];
      }
      toString() {
        return this._root.render(this.opts);
      }
      // returns unique name in the internal scope
      name(prefix) {
        return this._scope.name(prefix);
      }
      // reserves unique name in the external scope
      scopeName(prefix) {
        return this._extScope.name(prefix);
      }
      // reserves unique name in the external scope and assigns value to it
      scopeValue(prefixOrName, value) {
        const name = this._extScope.value(prefixOrName, value);
        const vs = this._values[name.prefix] || (this._values[name.prefix] = /* @__PURE__ */ new Set());
        vs.add(name);
        return name;
      }
      getScopeValue(prefix, keyOrRef) {
        return this._extScope.getValue(prefix, keyOrRef);
      }
      // return code that assigns values in the external scope to the names that are used internally
      // (same names that were returned by gen.scopeName or gen.scopeValue)
      scopeRefs(scopeName) {
        return this._extScope.scopeRefs(scopeName, this._values);
      }
      scopeCode() {
        return this._extScope.scopeCode(this._values);
      }
      _def(varKind, nameOrPrefix, rhs, constant) {
        const name = this._scope.toName(nameOrPrefix);
        if (rhs !== void 0 && constant)
          this._constants[name.str] = rhs;
        this._leafNode(new Def(varKind, name, rhs));
        return name;
      }
      // `const` declaration (`var` in es5 mode)
      const(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
      }
      // `let` declaration with optional assignment (`var` in es5 mode)
      let(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
      }
      // `var` declaration with optional assignment
      var(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
      }
      // assignment code
      assign(lhs, rhs, sideEffects) {
        return this._leafNode(new Assign(lhs, rhs, sideEffects));
      }
      // appends passed SafeExpr to code or executes Block
      code(c) {
        if (typeof c == "function")
          c();
        else if (c !== code_1.nil)
          this._leafNode(new AnyCode(c));
        return this;
      }
      // returns code for object literal for the passed argument list of key-value pairs
      object(...keyValues) {
        const code = ["{"];
        for (const [key, value] of keyValues) {
          if (code.length > 1)
            code.push(",");
          code.push(key);
          if (key !== value || this.opts.es5) {
            code.push(":");
            code_1.addCodeArg(code, value);
          }
        }
        code.push("}");
        return new code_1._Code(code);
      }
      // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
      if(condition, thenBody, elseBody) {
        this._blockNode(new If(condition));
        if (thenBody && elseBody) {
          this.code(thenBody).else().code(elseBody).endIf();
        } else if (thenBody) {
          this.code(thenBody).endIf();
        } else if (elseBody) {
          throw new Error('CodeGen: "else" body without "then" body');
        }
        return this;
      }
      // `else if` clause - invalid without `if` or after `else` clauses
      elseIf(condition) {
        return this._elseNode(new If(condition));
      }
      // `else` clause - only valid after `if` or `else if` clauses
      else() {
        return this._elseNode(new Else());
      }
      // end `if` statement (needed if gen.if was used only with condition)
      endIf() {
        return this._endBlockNode(If, Else);
      }
      _for(node, forBody) {
        this._blockNode(node);
        if (forBody)
          this.code(forBody).endFor();
        return this;
      }
      // a generic `for` clause (or statement if `forBody` is passed)
      for(iteration, forBody) {
        return this._for(new ForLoop(iteration), forBody);
      }
      // `for` statement for a range of values
      forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
        const name = this._scope.toName(nameOrPrefix);
        return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
      }
      // `for-of` statement (in es5 mode replace with a normal for loop)
      forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
        const name = this._scope.toName(nameOrPrefix);
        if (this.opts.es5) {
          const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
          return this.forRange("_i", 0, code_1._`${arr}.length`, (i) => {
            this.var(name, code_1._`${arr}[${i}]`);
            forBody(name);
          });
        }
        return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
      }
      // `for-in` statement.
      // With option `ownProperties` replaced with a `for-of` loop for object keys
      forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
        if (this.opts.ownProperties) {
          return this.forOf(nameOrPrefix, code_1._`Object.keys(${obj})`, forBody);
        }
        const name = this._scope.toName(nameOrPrefix);
        return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
      }
      // end `for` loop
      endFor() {
        return this._endBlockNode(For);
      }
      // `label` statement
      label(label) {
        return this._leafNode(new Label(label));
      }
      // `break` statement
      break(label) {
        return this._leafNode(new Break(label));
      }
      // `return` statement
      return(value) {
        const node = new Return();
        this._blockNode(node);
        this.code(value);
        if (node.nodes.length !== 1)
          throw new Error('CodeGen: "return" should have one node');
        return this._endBlockNode(Return);
      }
      // `try` statement
      try(tryBody, catchCode, finallyCode) {
        if (!catchCode && !finallyCode)
          throw new Error('CodeGen: "try" without "catch" and "finally"');
        const node = new Try();
        this._blockNode(node);
        this.code(tryBody);
        if (catchCode) {
          const error = this.name("e");
          this._currNode = node.catch = new Catch(error);
          catchCode(error);
        }
        if (finallyCode) {
          this._currNode = node.finally = new Finally();
          this.code(finallyCode);
        }
        return this._endBlockNode(Catch, Finally);
      }
      // `throw` statement
      throw(error) {
        return this._leafNode(new Throw(error));
      }
      // start self-balancing block
      block(body, nodeCount) {
        this._blockStarts.push(this._nodes.length);
        if (body)
          this.code(body).endBlock(nodeCount);
        return this;
      }
      // end the current self-balancing block
      endBlock(nodeCount) {
        const len = this._blockStarts.pop();
        if (len === void 0)
          throw new Error("CodeGen: not in self-balancing block");
        const toClose = this._nodes.length - len;
        if (toClose < 0 || nodeCount !== void 0 && toClose !== nodeCount) {
          throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
        }
        this._nodes.length = len;
        return this;
      }
      // `function` heading (or definition if funcBody is passed)
      func(name, args = code_1.nil, async, funcBody) {
        this._blockNode(new Func(name, args, async));
        if (funcBody)
          this.code(funcBody).endFunc();
        return this;
      }
      // end function definition
      endFunc() {
        return this._endBlockNode(Func);
      }
      optimize(n = 1) {
        while (n-- > 0) {
          this._root.optimizeNodes();
          this._root.optimizeNames(this._root.names, this._constants);
        }
      }
      _leafNode(node) {
        this._currNode.nodes.push(node);
        return this;
      }
      _blockNode(node) {
        this._currNode.nodes.push(node);
        this._nodes.push(node);
      }
      _endBlockNode(N1, N2) {
        const n = this._currNode;
        if (n instanceof N1 || N2 && n instanceof N2) {
          this._nodes.pop();
          return this;
        }
        throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
      }
      _elseNode(node) {
        const n = this._currNode;
        if (!(n instanceof If)) {
          throw new Error('CodeGen: "else" without "if"');
        }
        this._currNode = n.else = node;
        return this;
      }
      get _root() {
        return this._nodes[0];
      }
      get _currNode() {
        const ns = this._nodes;
        return ns[ns.length - 1];
      }
      set _currNode(node) {
        const ns = this._nodes;
        ns[ns.length - 1] = node;
      }
    };
    exports.CodeGen = CodeGen;
    function addNames(names, from) {
      for (const n in from)
        names[n] = (names[n] || 0) + (from[n] || 0);
      return names;
    }
    function addExprNames(names, from) {
      return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
    }
    function optimizeExpr(expr, names, constants) {
      if (expr instanceof code_1.Name)
        return replaceName(expr);
      if (!canOptimize(expr))
        return expr;
      return new code_1._Code(expr._items.reduce((items, c) => {
        if (c instanceof code_1.Name)
          c = replaceName(c);
        if (c instanceof code_1._Code)
          items.push(...c._items);
        else
          items.push(c);
        return items;
      }, []));
      function replaceName(n) {
        const c = constants[n.str];
        if (c === void 0 || names[n.str] !== 1)
          return n;
        delete names[n.str];
        return c;
      }
      function canOptimize(e) {
        return e instanceof code_1._Code && e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== void 0);
      }
    }
    function subtractNames(names, from) {
      for (const n in from)
        names[n] = (names[n] || 0) - (from[n] || 0);
    }
    function not(x) {
      return typeof x == "boolean" || typeof x == "number" || x === null ? !x : code_1._`!${par(x)}`;
    }
    exports.not = not;
    var andCode = mappend(exports.operators.AND);
    function and(...args) {
      return args.reduce(andCode);
    }
    exports.and = and;
    var orCode = mappend(exports.operators.OR);
    function or(...args) {
      return args.reduce(orCode);
    }
    exports.or = or;
    function mappend(op) {
      return (x, y) => x === code_1.nil ? y : y === code_1.nil ? x : code_1._`${par(x)} ${op} ${par(y)}`;
    }
    function par(x) {
      return x instanceof code_1.Name ? x : code_1._`(${x})`;
    }
  }
});

// node_modules/ajv/dist/compile/names.js
var require_names = __commonJS({
  "node_modules/ajv/dist/compile/names.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var names = {
      // validation function arguments
      data: new codegen_1.Name("data"),
      // args passed from referencing schema
      valCxt: new codegen_1.Name("valCxt"),
      dataPath: new codegen_1.Name("dataPath"),
      parentData: new codegen_1.Name("parentData"),
      parentDataProperty: new codegen_1.Name("parentDataProperty"),
      rootData: new codegen_1.Name("rootData"),
      dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
      // function scoped variables
      vErrors: new codegen_1.Name("vErrors"),
      errors: new codegen_1.Name("errors"),
      this: new codegen_1.Name("this"),
      // "globals"
      self: new codegen_1.Name("self"),
      scope: new codegen_1.Name("scope")
    };
    exports.default = names;
  }
});

// node_modules/ajv/dist/compile/errors.js
var require_errors = __commonJS({
  "node_modules/ajv/dist/compile/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    exports.keywordError = {
      message: ({ keyword }) => codegen_1.str`should pass "${keyword}" keyword validation`
    };
    exports.keyword$DataError = {
      message: ({ keyword, schemaType }) => schemaType ? codegen_1.str`"${keyword}" keyword must be ${schemaType} ($data)` : codegen_1.str`"${keyword}" keyword is invalid ($data)`
    };
    function reportError(cxt, error = exports.keywordError, overrideAllErrors) {
      const { it } = cxt;
      const { gen, compositeRule, allErrors } = it;
      const errObj = errorObjectCode(cxt, error);
      if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {
        addError(gen, errObj);
      } else {
        returnErrors(it, codegen_1._`[${errObj}]`);
      }
    }
    exports.reportError = reportError;
    function reportExtraError(cxt, error = exports.keywordError) {
      const { it } = cxt;
      const { gen, compositeRule, allErrors } = it;
      const errObj = errorObjectCode(cxt, error);
      addError(gen, errObj);
      if (!(compositeRule || allErrors)) {
        returnErrors(it, names_1.default.vErrors);
      }
    }
    exports.reportExtraError = reportExtraError;
    function resetErrorsCount(gen, errsCount) {
      gen.assign(names_1.default.errors, errsCount);
      gen.if(codegen_1._`${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign(codegen_1._`${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
    }
    exports.resetErrorsCount = resetErrorsCount;
    function extendErrors({ gen, keyword, schemaValue, data, errsCount, it }) {
      if (errsCount === void 0)
        throw new Error("ajv implementation error");
      const err = gen.name("err");
      gen.forRange("i", errsCount, names_1.default.errors, (i) => {
        gen.const(err, codegen_1._`${names_1.default.vErrors}[${i}]`);
        gen.if(codegen_1._`${err}.dataPath === undefined`, () => gen.assign(codegen_1._`${err}.dataPath`, codegen_1.strConcat(names_1.default.dataPath, it.errorPath)));
        gen.assign(codegen_1._`${err}.schemaPath`, codegen_1.str`${it.errSchemaPath}/${keyword}`);
        if (it.opts.verbose) {
          gen.assign(codegen_1._`${err}.schema`, schemaValue);
          gen.assign(codegen_1._`${err}.data`, data);
        }
      });
    }
    exports.extendErrors = extendErrors;
    function addError(gen, errObj) {
      const err = gen.const("err", errObj);
      gen.if(codegen_1._`${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, codegen_1._`[${err}]`), codegen_1._`${names_1.default.vErrors}.push(${err})`);
      gen.code(codegen_1._`${names_1.default.errors}++`);
    }
    function returnErrors(it, errs) {
      const { gen, validateName, schemaEnv } = it;
      if (schemaEnv.$async) {
        gen.throw(codegen_1._`new ${it.ValidationError}(${errs})`);
      } else {
        gen.assign(codegen_1._`${validateName}.errors`, errs);
        gen.return(false);
      }
    }
    var E = {
      keyword: new codegen_1.Name("keyword"),
      schemaPath: new codegen_1.Name("schemaPath"),
      params: new codegen_1.Name("params"),
      propertyName: new codegen_1.Name("propertyName"),
      message: new codegen_1.Name("message"),
      schema: new codegen_1.Name("schema"),
      parentSchema: new codegen_1.Name("parentSchema"),
      // JTD error properties
      instancePath: new codegen_1.Name("instancePath")
    };
    function errorObjectCode(cxt, error) {
      const { createErrors, opts } = cxt.it;
      if (createErrors === false)
        return codegen_1._`{}`;
      return (opts.jtd && !opts.ajvErrors ? jtdErrorObject : ajvErrorObject)(cxt, error);
    }
    function jtdErrorObject(cxt, { message }) {
      const { gen, keyword, it } = cxt;
      const { errorPath, errSchemaPath, opts } = it;
      const keyValues = [
        [E.instancePath, codegen_1.strConcat(names_1.default.dataPath, errorPath)],
        [E.schemaPath, codegen_1.str`${errSchemaPath}/${keyword}`]
      ];
      if (opts.messages) {
        keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
      }
      return gen.object(...keyValues);
    }
    function ajvErrorObject(cxt, error) {
      const { gen, keyword, data, schemaValue, it } = cxt;
      const { topSchemaRef, schemaPath, errorPath, errSchemaPath, propertyName, opts } = it;
      const { params, message } = error;
      const keyValues = [
        [E.keyword, keyword],
        [names_1.default.dataPath, codegen_1.strConcat(names_1.default.dataPath, errorPath)],
        [E.schemaPath, codegen_1.str`${errSchemaPath}/${keyword}`],
        [E.params, typeof params == "function" ? params(cxt) : params || codegen_1._`{}`]
      ];
      if (propertyName)
        keyValues.push([E.propertyName, propertyName]);
      if (opts.messages) {
        keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
      }
      if (opts.verbose) {
        keyValues.push([E.schema, schemaValue], [E.parentSchema, codegen_1._`${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
      }
      return gen.object(...keyValues);
    }
  }
});

// node_modules/ajv/dist/compile/validate/boolSchema.js
var require_boolSchema = __commonJS({
  "node_modules/ajv/dist/compile/validate/boolSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;
    var errors_1 = require_errors();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var boolError = {
      message: "boolean schema is false"
    };
    function topBoolOrEmptySchema(it) {
      const { gen, schema, validateName } = it;
      if (schema === false) {
        falseSchemaError(it, false);
      } else if (typeof schema == "object" && schema.$async === true) {
        gen.return(names_1.default.data);
      } else {
        gen.assign(codegen_1._`${validateName}.errors`, null);
        gen.return(true);
      }
    }
    exports.topBoolOrEmptySchema = topBoolOrEmptySchema;
    function boolOrEmptySchema(it, valid) {
      const { gen, schema } = it;
      if (schema === false) {
        gen.var(valid, false);
        falseSchemaError(it);
      } else {
        gen.var(valid, true);
      }
    }
    exports.boolOrEmptySchema = boolOrEmptySchema;
    function falseSchemaError(it, overrideAllErrors) {
      const { gen, data } = it;
      const cxt = {
        gen,
        keyword: "false schema",
        data,
        schema: false,
        schemaCode: false,
        schemaValue: false,
        params: {},
        it
      };
      errors_1.reportError(cxt, boolError, overrideAllErrors);
    }
  }
});

// node_modules/ajv/dist/compile/validate/defaults.js
var require_defaults = __commonJS({
  "node_modules/ajv/dist/compile/validate/defaults.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assignDefaults = void 0;
    var codegen_1 = require_codegen();
    var _1 = require_validate();
    function assignDefaults(it, ty) {
      const { properties, items } = it.schema;
      if (ty === "object" && properties) {
        for (const key in properties) {
          assignDefault(it, key, properties[key].default);
        }
      } else if (ty === "array" && Array.isArray(items)) {
        items.forEach((sch, i) => assignDefault(it, i, sch.default));
      }
    }
    exports.assignDefaults = assignDefaults;
    function assignDefault(it, prop, defaultValue) {
      const { gen, compositeRule, data, opts } = it;
      if (defaultValue === void 0)
        return;
      const childData = codegen_1._`${data}${codegen_1.getProperty(prop)}`;
      if (compositeRule) {
        _1.checkStrictMode(it, `default is ignored for: ${childData}`);
        return;
      }
      let condition = codegen_1._`${childData} === undefined`;
      if (opts.useDefaults === "empty") {
        condition = codegen_1._`${condition} || ${childData} === null || ${childData} === ""`;
      }
      gen.if(condition, codegen_1._`${childData} = ${codegen_1.stringify(defaultValue)}`);
    }
  }
});

// node_modules/ajv/dist/compile/subschema.js
var require_subschema = __commonJS({
  "node_modules/ajv/dist/compile/subschema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.applySubschema = exports.Type = void 0;
    var validate_1 = require_validate();
    var util_1 = require_util();
    var codegen_1 = require_codegen();
    var Type;
    (function(Type2) {
      Type2[Type2["Num"] = 0] = "Num";
      Type2[Type2["Str"] = 1] = "Str";
    })(Type = exports.Type || (exports.Type = {}));
    function applySubschema(it, appl, valid) {
      const subschema = getSubschema(it, appl);
      extendSubschemaData(subschema, it, appl);
      extendSubschemaMode(subschema, appl);
      const nextContext = { ...it, ...subschema, items: void 0, props: void 0 };
      validate_1.subschemaCode(nextContext, valid);
      return nextContext;
    }
    exports.applySubschema = applySubschema;
    function getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
      if (keyword !== void 0 && schema !== void 0) {
        throw new Error('both "keyword" and "schema" passed, only one allowed');
      }
      if (keyword !== void 0) {
        const sch = it.schema[keyword];
        return schemaProp === void 0 ? {
          schema: sch,
          schemaPath: codegen_1._`${it.schemaPath}${codegen_1.getProperty(keyword)}`,
          errSchemaPath: `${it.errSchemaPath}/${keyword}`
        } : {
          schema: sch[schemaProp],
          schemaPath: codegen_1._`${it.schemaPath}${codegen_1.getProperty(keyword)}${codegen_1.getProperty(schemaProp)}`,
          errSchemaPath: `${it.errSchemaPath}/${keyword}/${util_1.escapeFragment(schemaProp)}`
        };
      }
      if (schema !== void 0) {
        if (schemaPath === void 0 || errSchemaPath === void 0 || topSchemaRef === void 0) {
          throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
        }
        return {
          schema,
          schemaPath,
          topSchemaRef,
          errSchemaPath
        };
      }
      throw new Error('either "keyword" or "schema" must be passed');
    }
    function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
      if (data !== void 0 && dataProp !== void 0) {
        throw new Error('both "data" and "dataProp" passed, only one allowed');
      }
      const { gen } = it;
      if (dataProp !== void 0) {
        const { errorPath, dataPathArr, opts } = it;
        const nextData = gen.let("data", codegen_1._`${it.data}${codegen_1.getProperty(dataProp)}`, true);
        dataContextProps(nextData);
        subschema.errorPath = codegen_1.str`${errorPath}${getErrorPath(dataProp, dpType, opts.jsPropertySyntax)}`;
        subschema.parentDataProperty = codegen_1._`${dataProp}`;
        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
      }
      if (data !== void 0) {
        const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true);
        dataContextProps(nextData);
        if (propertyName !== void 0)
          subschema.propertyName = propertyName;
      }
      if (dataTypes)
        subschema.dataTypes = dataTypes;
      function dataContextProps(_nextData) {
        subschema.data = _nextData;
        subschema.dataLevel = it.dataLevel + 1;
        subschema.dataTypes = [];
        subschema.parentData = it.data;
        subschema.dataNames = [...it.dataNames, _nextData];
      }
    }
    function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
      if (compositeRule !== void 0)
        subschema.compositeRule = compositeRule;
      if (createErrors !== void 0)
        subschema.createErrors = createErrors;
      if (allErrors !== void 0)
        subschema.allErrors = allErrors;
      subschema.jtdDiscriminator = jtdDiscriminator;
      subschema.jtdMetadata = jtdMetadata;
    }
    function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
      if (dataProp instanceof codegen_1.Name) {
        const isNumber = dataPropType === Type.Num;
        return jsPropertySyntax ? isNumber ? codegen_1._`"[" + ${dataProp} + "]"` : codegen_1._`"['" + ${dataProp} + "']"` : isNumber ? codegen_1._`"/" + ${dataProp}` : codegen_1._`"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`;
      }
      return jsPropertySyntax ? codegen_1.getProperty(dataProp).toString() : "/" + util_1.escapeJsonPointer(dataProp);
    }
  }
});

// node_modules/ajv/dist/vocabularies/code.js
var require_code2 = __commonJS({
  "node_modules/ajv/dist/vocabularies/code.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var subschema_1 = require_subschema();
    var names_1 = require_names();
    function checkReportMissingProp(cxt, prop) {
      const { gen, data, it } = cxt;
      gen.if(noPropertyInData(data, prop, it.opts.ownProperties), () => {
        cxt.setParams({ missingProperty: codegen_1._`${prop}` }, true);
        cxt.error();
      });
    }
    exports.checkReportMissingProp = checkReportMissingProp;
    function checkMissingProp({ data, it: { opts } }, properties, missing) {
      return codegen_1.or(...properties.map((prop) => codegen_1._`${noPropertyInData(data, prop, opts.ownProperties)} && (${missing} = ${prop})`));
    }
    exports.checkMissingProp = checkMissingProp;
    function reportMissingProp(cxt, missing) {
      cxt.setParams({ missingProperty: missing }, true);
      cxt.error();
    }
    exports.reportMissingProp = reportMissingProp;
    function isOwnProperty(data, property) {
      return codegen_1._`Object.prototype.hasOwnProperty.call(${data}, ${property})`;
    }
    function propertyInData(data, property, ownProperties) {
      const cond = codegen_1._`${data}${codegen_1.getProperty(property)} !== undefined`;
      return ownProperties ? codegen_1._`${cond} && ${isOwnProperty(data, property)}` : cond;
    }
    exports.propertyInData = propertyInData;
    function noPropertyInData(data, property, ownProperties) {
      const cond = codegen_1._`${data}${codegen_1.getProperty(property)} === undefined`;
      return ownProperties ? codegen_1._`${cond} || !${isOwnProperty(data, property)}` : cond;
    }
    exports.noPropertyInData = noPropertyInData;
    function allSchemaProperties(schemaMap) {
      return schemaMap ? Object.keys(schemaMap).filter((p) => p !== "__proto__") : [];
    }
    exports.allSchemaProperties = allSchemaProperties;
    function schemaProperties(it, schemaMap) {
      return allSchemaProperties(schemaMap).filter((p) => !util_1.alwaysValidSchema(it, schemaMap[p]));
    }
    exports.schemaProperties = schemaProperties;
    function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
      const dataAndSchema = passSchema ? codegen_1._`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
      const valCxt = [
        [names_1.default.dataPath, codegen_1.strConcat(names_1.default.dataPath, errorPath)],
        [names_1.default.parentData, it.parentData],
        [names_1.default.parentDataProperty, it.parentDataProperty],
        [names_1.default.rootData, names_1.default.rootData]
      ];
      if (it.opts.dynamicRef)
        valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
      const args = codegen_1._`${dataAndSchema}, ${gen.object(...valCxt)}`;
      return context !== codegen_1.nil ? codegen_1._`${func}.call(${context}, ${args})` : codegen_1._`${func}(${args})`;
    }
    exports.callValidateCode = callValidateCode;
    function usePattern(gen, pattern) {
      return gen.scopeValue("pattern", {
        key: pattern,
        ref: new RegExp(pattern, "u"),
        code: codegen_1._`new RegExp(${pattern}, "u")`
      });
    }
    exports.usePattern = usePattern;
    function validateArray(cxt) {
      const { gen, data, keyword, it } = cxt;
      const valid = gen.name("valid");
      if (it.allErrors) {
        const validArr = gen.let("valid", true);
        validateItems(() => gen.assign(validArr, false));
        return validArr;
      }
      gen.var(valid, true);
      validateItems(() => gen.break());
      return valid;
      function validateItems(notValid) {
        const len = gen.const("len", codegen_1._`${data}.length`);
        gen.forRange("i", 0, len, (i) => {
          cxt.subschema({
            keyword,
            dataProp: i,
            dataPropType: subschema_1.Type.Num
          }, valid);
          gen.if(codegen_1.not(valid), notValid);
        });
      }
    }
    exports.validateArray = validateArray;
    function validateUnion(cxt) {
      const { gen, schema, keyword, it } = cxt;
      if (!Array.isArray(schema))
        throw new Error("ajv implementation error");
      const alwaysValid = schema.some((sch) => util_1.alwaysValidSchema(it, sch));
      if (alwaysValid && !it.opts.unevaluated)
        return;
      const valid = gen.let("valid", false);
      const schValid = gen.name("_valid");
      gen.block(() => schema.forEach((_sch, i) => {
        const schCxt = cxt.subschema({
          keyword,
          schemaProp: i,
          compositeRule: true
        }, schValid);
        gen.assign(valid, codegen_1._`${valid} || ${schValid}`);
        const merged = cxt.mergeValidEvaluated(schCxt, schValid);
        if (!merged)
          gen.if(codegen_1.not(valid));
      }));
      cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
    }
    exports.validateUnion = validateUnion;
  }
});

// node_modules/ajv/dist/compile/validate/keyword.js
var require_keyword = __commonJS({
  "node_modules/ajv/dist/compile/validate/keyword.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keywordCode = void 0;
    var context_1 = require_context();
    var errors_1 = require_errors();
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    function keywordCode(it, keyword, def, ruleType) {
      const cxt = new context_1.default(it, def, keyword);
      if ("code" in def) {
        def.code(cxt, ruleType);
      } else if (cxt.$data && def.validate) {
        funcKeywordCode(cxt, def);
      } else if ("macro" in def) {
        macroKeywordCode(cxt, def);
      } else if (def.compile || def.validate) {
        funcKeywordCode(cxt, def);
      }
    }
    exports.keywordCode = keywordCode;
    function macroKeywordCode(cxt, def) {
      const { gen, keyword, schema, parentSchema, it } = cxt;
      const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
      const schemaRef = useKeyword(gen, keyword, macroSchema);
      if (it.opts.validateSchema !== false)
        it.self.validateSchema(macroSchema, true);
      const valid = gen.name("valid");
      cxt.subschema({
        schema: macroSchema,
        schemaPath: codegen_1.nil,
        errSchemaPath: `${it.errSchemaPath}/${keyword}`,
        topSchemaRef: schemaRef,
        compositeRule: true
      }, valid);
      cxt.pass(valid, () => cxt.error(true));
    }
    function funcKeywordCode(cxt, def) {
      var _a;
      const { gen, keyword, schema, parentSchema, $data, it } = cxt;
      checkAsync(it, def);
      const validate2 = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
      const validateRef = useKeyword(gen, keyword, validate2);
      const valid = gen.let("valid");
      cxt.block$data(valid, validateKeyword);
      cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
      function validateKeyword() {
        if (def.errors === false) {
          assignValid();
          if (def.modifying)
            modifyData(cxt);
          reportErrs(() => cxt.error());
        } else {
          const ruleErrs = def.async ? validateAsync() : validateSync();
          if (def.modifying)
            modifyData(cxt);
          reportErrs(() => addErrs(cxt, ruleErrs));
        }
      }
      function validateAsync() {
        const ruleErrs = gen.let("ruleErrs", null);
        gen.try(() => assignValid(codegen_1._`await `), (e) => gen.assign(valid, false).if(codegen_1._`${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, codegen_1._`${e}.errors`), () => gen.throw(e)));
        return ruleErrs;
      }
      function validateSync() {
        const validateErrs = codegen_1._`${validateRef}.errors`;
        gen.assign(validateErrs, null);
        assignValid(codegen_1.nil);
        return validateErrs;
      }
      function assignValid(_await = def.async ? codegen_1._`await ` : codegen_1.nil) {
        const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
        const passSchema = !("compile" in def && !$data || def.schema === false);
        gen.assign(valid, codegen_1._`${_await}${code_1.callValidateCode(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
      }
      function reportErrs(errors) {
        var _a2;
        gen.if(codegen_1.not((_a2 = def.valid) !== null && _a2 !== void 0 ? _a2 : valid), errors);
      }
    }
    function modifyData(cxt) {
      const { gen, data, it } = cxt;
      gen.if(it.parentData, () => gen.assign(data, codegen_1._`${it.parentData}[${it.parentDataProperty}]`));
    }
    function addErrs(cxt, errs) {
      const { gen } = cxt;
      gen.if(codegen_1._`Array.isArray(${errs})`, () => {
        gen.assign(names_1.default.vErrors, codegen_1._`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`).assign(names_1.default.errors, codegen_1._`${names_1.default.vErrors}.length`);
        errors_1.extendErrors(cxt);
      }, () => cxt.error());
    }
    function checkAsync({ schemaEnv }, def) {
      if (def.async && !schemaEnv.$async)
        throw new Error("async keyword in sync schema");
    }
    function useKeyword(gen, keyword, result) {
      if (result === void 0)
        throw new Error(`keyword "${keyword}" failed to compile`);
      return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: codegen_1.stringify(result) });
    }
  }
});

// node_modules/ajv/dist/compile/validate/iterate.js
var require_iterate = __commonJS({
  "node_modules/ajv/dist/compile/validate/iterate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.schemaKeywords = void 0;
    var applicability_1 = require_applicability();
    var dataType_1 = require_dataType();
    var defaults_1 = require_defaults();
    var keyword_1 = require_keyword();
    var util_1 = require_util();
    var _1 = require_validate();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    function schemaKeywords(it, types, typeErrors, errsCount) {
      const { gen, schema, data, allErrors, opts, self: self2 } = it;
      const { RULES } = self2;
      if (schema.$ref && (opts.ignoreKeywordsWithRef || !util_1.schemaHasRulesButRef(schema, RULES))) {
        gen.block(() => keyword_1.keywordCode(it, "$ref", RULES.all.$ref.definition));
        return;
      }
      if (!opts.jtd)
        checkStrictTypes(it, types);
      gen.block(() => {
        for (const group of RULES.rules)
          groupKeywords(group);
        groupKeywords(RULES.post);
      });
      function groupKeywords(group) {
        if (!applicability_1.shouldUseGroup(schema, group))
          return;
        if (group.type) {
          gen.if(dataType_1.checkDataType(group.type, data, opts.strict));
          iterateKeywords(it, group);
          if (types.length === 1 && types[0] === group.type && typeErrors) {
            gen.else();
            dataType_1.reportTypeError(it);
          }
          gen.endIf();
        } else {
          iterateKeywords(it, group);
        }
        if (!allErrors)
          gen.if(codegen_1._`${names_1.default.errors} === ${errsCount || 0}`);
      }
    }
    exports.schemaKeywords = schemaKeywords;
    function iterateKeywords(it, group) {
      const { gen, schema, opts: { useDefaults } } = it;
      if (useDefaults)
        defaults_1.assignDefaults(it, group.type);
      gen.block(() => {
        for (const rule of group.rules) {
          if (applicability_1.shouldUseRule(schema, rule)) {
            keyword_1.keywordCode(it, rule.keyword, rule.definition, group.type);
          }
        }
      });
    }
    function checkStrictTypes(it, types) {
      if (it.schemaEnv.meta || !it.opts.strictTypes)
        return;
      checkContextTypes(it, types);
      if (!it.opts.allowUnionTypes)
        checkMultipleTypes(it, types);
      checkKeywordTypes(it, it.dataTypes);
    }
    function checkContextTypes(it, types) {
      if (!types.length)
        return;
      if (!it.dataTypes.length) {
        it.dataTypes = types;
        return;
      }
      types.forEach((t) => {
        if (!includesType(it.dataTypes, t)) {
          strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
        }
      });
      it.dataTypes = it.dataTypes.filter((t) => includesType(types, t));
    }
    function checkMultipleTypes(it, ts) {
      if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
        strictTypesError(it, "use allowUnionTypes to allow union type keyword");
      }
    }
    function checkKeywordTypes(it, ts) {
      const rules = it.self.RULES.all;
      for (const keyword in rules) {
        const rule = rules[keyword];
        if (typeof rule == "object" && applicability_1.shouldUseRule(it.schema, rule)) {
          const { type } = rule.definition;
          if (type.length && !type.some((t) => hasApplicableType(ts, t))) {
            strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
          }
        }
      }
    }
    function hasApplicableType(schTs, kwdT) {
      return schTs.includes(kwdT) || kwdT === "number" && schTs.includes("integer");
    }
    function includesType(ts, t) {
      return ts.includes(t) || t === "integer" && ts.includes("number");
    }
    function strictTypesError(it, msg) {
      const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
      msg += ` at "${schemaPath}" (strictTypes)`;
      _1.checkStrictMode(it, msg, it.opts.strictTypes);
    }
  }
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "node_modules/fast-deep-equal/index.js"(exports, module2) {
    "use strict";
    module2.exports = function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf)
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString)
          return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        for (i = length; i-- !== 0; ) {
          var key = keys[i];
          if (!equal(a[key], b[key]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    };
  }
});

// node_modules/json-schema-traverse/index.js
var require_json_schema_traverse = __commonJS({
  "node_modules/json-schema-traverse/index.js"(exports, module2) {
    "use strict";
    var traverse = module2.exports = function(schema, opts, cb) {
      if (typeof opts == "function") {
        cb = opts;
        opts = {};
      }
      cb = opts.cb || cb;
      var pre = typeof cb == "function" ? cb : cb.pre || function() {
      };
      var post = cb.post || function() {
      };
      _traverse(opts, pre, post, schema, "", schema);
    };
    traverse.keywords = {
      additionalItems: true,
      items: true,
      contains: true,
      additionalProperties: true,
      propertyNames: true,
      not: true,
      if: true,
      then: true,
      else: true
    };
    traverse.arrayKeywords = {
      items: true,
      allOf: true,
      anyOf: true,
      oneOf: true
    };
    traverse.propsKeywords = {
      $defs: true,
      definitions: true,
      properties: true,
      patternProperties: true,
      dependencies: true
    };
    traverse.skipKeywords = {
      default: true,
      enum: true,
      const: true,
      required: true,
      maximum: true,
      minimum: true,
      exclusiveMaximum: true,
      exclusiveMinimum: true,
      multipleOf: true,
      maxLength: true,
      minLength: true,
      pattern: true,
      format: true,
      maxItems: true,
      minItems: true,
      uniqueItems: true,
      maxProperties: true,
      minProperties: true
    };
    function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
      if (schema && typeof schema == "object" && !Array.isArray(schema)) {
        pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        for (var key in schema) {
          var sch = schema[key];
          if (Array.isArray(sch)) {
            if (key in traverse.arrayKeywords) {
              for (var i = 0; i < sch.length; i++)
                _traverse(opts, pre, post, sch[i], jsonPtr + "/" + key + "/" + i, rootSchema, jsonPtr, key, schema, i);
            }
          } else if (key in traverse.propsKeywords) {
            if (sch && typeof sch == "object") {
              for (var prop in sch)
                _traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
            }
          } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
            _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema);
          }
        }
        post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
      }
    }
    function escapeJsonPtr(str) {
      return str.replace(/~/g, "~0").replace(/\//g, "~1");
    }
  }
});

// node_modules/uri-js/dist/es5/uri.all.js
var require_uri_all = __commonJS({
  "node_modules/uri-js/dist/es5/uri.all.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.URI = global2.URI || {});
    })(exports, function(exports2) {
      "use strict";
      function merge() {
        for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
          sets[_key] = arguments[_key];
        }
        if (sets.length > 1) {
          sets[0] = sets[0].slice(0, -1);
          var xl = sets.length - 1;
          for (var x = 1; x < xl; ++x) {
            sets[x] = sets[x].slice(1, -1);
          }
          sets[xl] = sets[xl].slice(1);
          return sets.join("");
        } else {
          return sets[0];
        }
      }
      function subexp(str) {
        return "(?:" + str + ")";
      }
      function typeOf(o) {
        return o === void 0 ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
      }
      function toUpperCase(str) {
        return str.toUpperCase();
      }
      function toArray(obj) {
        return obj !== void 0 && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
      }
      function assign(target, source) {
        var obj = target;
        if (source) {
          for (var key in source) {
            obj[key] = source[key];
          }
        }
        return obj;
      }
      function buildExps(isIRI2) {
        var ALPHA$$ = "[A-Za-z]", CR$ = "[\\x0D]", DIGIT$$ = "[0-9]", DQUOTE$$ = "[\\x22]", HEXDIG$$2 = merge(DIGIT$$, "[A-Fa-f]"), LF$$ = "[\\x0A]", SP$$ = "[\\x20]", PCT_ENCODED$2 = subexp(subexp("%[EFef]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%" + HEXDIG$$2 + HEXDIG$$2)), GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]", SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]", RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$), UCSCHAR$$ = isIRI2 ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]", IPRIVATE$$ = isIRI2 ? "[\\uE000-\\uF8FF]" : "[]", UNRESERVED$$2 = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$), SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"), USERINFO$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]")) + "*"), DEC_OCTET$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("[1-9]" + DIGIT$$) + "|" + DIGIT$$), DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$), IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$), H16$ = subexp(HEXDIG$$2 + "{1,4}"), LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$), IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$), IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$), IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$), IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$), IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$), IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$), IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$), IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$), IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"), IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")), ZONEID$ = subexp(subexp(UNRESERVED$$2 + "|" + PCT_ENCODED$2) + "+"), IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$), IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp("\\%25|\\%(?!" + HEXDIG$$2 + "{2})") + ZONEID$), IPVFUTURE$ = subexp("[vV]" + HEXDIG$$2 + "+\\." + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]") + "+"), IP_LITERAL$ = subexp("\\[" + subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"), REG_NAME$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$)) + "*"), HOST$ = subexp(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")|" + REG_NAME$), PORT$ = subexp(DIGIT$$ + "*"), AUTHORITY$ = subexp(subexp(USERINFO$ + "@") + "?" + HOST$ + subexp("\\:" + PORT$) + "?"), PCHAR$ = subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@]")), SEGMENT$ = subexp(PCHAR$ + "*"), SEGMENT_NZ$ = subexp(PCHAR$ + "+"), SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\@]")) + "+"), PATH_ABEMPTY$ = subexp(subexp("\\/" + SEGMENT$) + "*"), PATH_ABSOLUTE$ = subexp("\\/" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"), PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$), PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$), PATH_EMPTY$ = "(?!" + PCHAR$ + ")", PATH$ = subexp(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*"), FRAGMENT$ = subexp(subexp(PCHAR$ + "|[\\/\\?]") + "*"), HIER_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"), RELATIVE_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$), RELATIVE$ = subexp(RELATIVE_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"), URI_REFERENCE$ = subexp(URI$ + "|" + RELATIVE$), ABSOLUTE_URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?"), GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", RELATIVE_REF$ = "^(){0}" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?$", SAMEDOC_REF$ = "^" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", AUTHORITY_REF$ = "^" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?$";
        return {
          NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
          NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
          NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
          ESCAPE: new RegExp(merge("[^]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
          UNRESERVED: new RegExp(UNRESERVED$$2, "g"),
          OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$2, RESERVED$$), "g"),
          PCT_ENCODED: new RegExp(PCT_ENCODED$2, "g"),
          IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
          IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$2 + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$")
          //RFC 6874, with relaxed parsing rules
        };
      }
      var URI_PROTOCOL = buildExps(false);
      var IRI_PROTOCOL = buildExps(true);
      var slicedToArray = function() {
        function sliceIterator(arr, i) {
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = void 0;
          try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i && _arr.length === i)
                break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"])
                _i["return"]();
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
        return function(arr, i) {
          if (Array.isArray(arr)) {
            return arr;
          } else if (Symbol.iterator in Object(arr)) {
            return sliceIterator(arr, i);
          } else {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }
        };
      }();
      var toConsumableArray = function(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
            arr2[i] = arr[i];
          return arr2;
        } else {
          return Array.from(arr);
        }
      };
      var maxInt = 2147483647;
      var base = 36;
      var tMin = 1;
      var tMax = 26;
      var skew = 38;
      var damp = 700;
      var initialBias = 72;
      var initialN = 128;
      var delimiter = "-";
      var regexPunycode = /^xn--/;
      var regexNonASCII = /[^\0-\x7E]/;
      var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
      var errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      };
      var baseMinusTMin = base - tMin;
      var floor = Math.floor;
      var stringFromCharCode = String.fromCharCode;
      function error$1(type) {
        throw new RangeError(errors[type]);
      }
      function map(array, fn) {
        var result = [];
        var length = array.length;
        while (length--) {
          result[length] = fn(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
          result = parts[0] + "@";
          string = parts[1];
        }
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
      }
      function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        while (counter < length) {
          var value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            var extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      var ucs2encode = function ucs2encode2(array) {
        return String.fromCodePoint.apply(String, toConsumableArray(array));
      };
      var basicToDigit = function basicToDigit2(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base;
      };
      var digitToBasic = function digitToBasic2(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      };
      var adapt = function adapt2(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (
          ;
          /* no initialization */
          delta > baseMinusTMin * tMax >> 1;
          k += base
        ) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      };
      var decode = function decode2(input) {
        var output = [];
        var inputLength = input.length;
        var i = 0;
        var n = initialN;
        var bias = initialBias;
        var basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (var j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error$1("not-basic");
          }
          output.push(input.charCodeAt(j));
        }
        for (var index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          var oldi = i;
          for (
            var w = 1, k = base;
            ;
            /* no condition */
            k += base
          ) {
            if (index >= inputLength) {
              error$1("invalid-input");
            }
            var digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base || digit > floor((maxInt - i) / w)) {
              error$1("overflow");
            }
            i += digit * w;
            var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) {
              break;
            }
            var baseMinusT = base - t;
            if (w > floor(maxInt / baseMinusT)) {
              error$1("overflow");
            }
            w *= baseMinusT;
          }
          var out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error$1("overflow");
          }
          n += floor(i / out);
          i %= out;
          output.splice(i++, 0, n);
        }
        return String.fromCodePoint.apply(String, output);
      };
      var encode = function encode2(input) {
        var output = [];
        input = ucs2decode(input);
        var inputLength = input.length;
        var n = initialN;
        var delta = 0;
        var bias = initialBias;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _currentValue2 = _step.value;
            if (_currentValue2 < 128) {
              output.push(stringFromCharCode(_currentValue2));
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
        var basicLength = output.length;
        var handledCPCount = basicLength;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          var m = maxInt;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = void 0;
          try {
            for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var currentValue = _step2.value;
              if (currentValue >= n && currentValue < m) {
                m = currentValue;
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
          var handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error$1("overflow");
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = void 0;
          try {
            for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _currentValue = _step3.value;
              if (_currentValue < n && ++delta > maxInt) {
                error$1("overflow");
              }
              if (_currentValue == n) {
                var q = delta;
                for (
                  var k = base;
                  ;
                  /* no condition */
                  k += base
                ) {
                  var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                  if (q < t) {
                    break;
                  }
                  var qMinusT = q - t;
                  var baseMinusT = base - t;
                  output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                  q = floor(qMinusT / baseMinusT);
                }
                output.push(stringFromCharCode(digitToBasic(q, 0)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
          ++delta;
          ++n;
        }
        return output.join("");
      };
      var toUnicode = function toUnicode2(input) {
        return mapDomain(input, function(string) {
          return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
      };
      var toASCII = function toASCII2(input) {
        return mapDomain(input, function(string) {
          return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
      };
      var punycode = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        "version": "2.1.0",
        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      var SCHEMES = {};
      function pctEncChar(chr) {
        var c = chr.charCodeAt(0);
        var e = void 0;
        if (c < 16)
          e = "%0" + c.toString(16).toUpperCase();
        else if (c < 128)
          e = "%" + c.toString(16).toUpperCase();
        else if (c < 2048)
          e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
        else
          e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
        return e;
      }
      function pctDecChars(str) {
        var newStr = "";
        var i = 0;
        var il = str.length;
        while (i < il) {
          var c = parseInt(str.substr(i + 1, 2), 16);
          if (c < 128) {
            newStr += String.fromCharCode(c);
            i += 3;
          } else if (c >= 194 && c < 224) {
            if (il - i >= 6) {
              var c2 = parseInt(str.substr(i + 4, 2), 16);
              newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
            } else {
              newStr += str.substr(i, 6);
            }
            i += 6;
          } else if (c >= 224) {
            if (il - i >= 9) {
              var _c = parseInt(str.substr(i + 4, 2), 16);
              var c3 = parseInt(str.substr(i + 7, 2), 16);
              newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
            } else {
              newStr += str.substr(i, 9);
            }
            i += 9;
          } else {
            newStr += str.substr(i, 3);
            i += 3;
          }
        }
        return newStr;
      }
      function _normalizeComponentEncoding(components, protocol) {
        function decodeUnreserved2(str) {
          var decStr = pctDecChars(str);
          return !decStr.match(protocol.UNRESERVED) ? str : decStr;
        }
        if (components.scheme)
          components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_SCHEME, "");
        if (components.userinfo !== void 0)
          components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.host !== void 0)
          components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.path !== void 0)
          components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.query !== void 0)
          components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.fragment !== void 0)
          components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        return components;
      }
      function _stripLeadingZeros(str) {
        return str.replace(/^0*(.*)/, "$1") || "0";
      }
      function _normalizeIPv4(host, protocol) {
        var matches = host.match(protocol.IPV4ADDRESS) || [];
        var _matches = slicedToArray(matches, 2), address = _matches[1];
        if (address) {
          return address.split(".").map(_stripLeadingZeros).join(".");
        } else {
          return host;
        }
      }
      function _normalizeIPv6(host, protocol) {
        var matches = host.match(protocol.IPV6ADDRESS) || [];
        var _matches2 = slicedToArray(matches, 3), address = _matches2[1], zone = _matches2[2];
        if (address) {
          var _address$toLowerCase$ = address.toLowerCase().split("::").reverse(), _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2), last = _address$toLowerCase$2[0], first = _address$toLowerCase$2[1];
          var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
          var lastFields = last.split(":").map(_stripLeadingZeros);
          var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
          var fieldCount = isLastFieldIPv4Address ? 7 : 8;
          var lastFieldsStart = lastFields.length - fieldCount;
          var fields = Array(fieldCount);
          for (var x = 0; x < fieldCount; ++x) {
            fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || "";
          }
          if (isLastFieldIPv4Address) {
            fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
          }
          var allZeroFields = fields.reduce(function(acc, field, index) {
            if (!field || field === "0") {
              var lastLongest = acc[acc.length - 1];
              if (lastLongest && lastLongest.index + lastLongest.length === index) {
                lastLongest.length++;
              } else {
                acc.push({ index, length: 1 });
              }
            }
            return acc;
          }, []);
          var longestZeroFields = allZeroFields.sort(function(a, b) {
            return b.length - a.length;
          })[0];
          var newHost = void 0;
          if (longestZeroFields && longestZeroFields.length > 1) {
            var newFirst = fields.slice(0, longestZeroFields.index);
            var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
            newHost = newFirst.join(":") + "::" + newLast.join(":");
          } else {
            newHost = fields.join(":");
          }
          if (zone) {
            newHost += "%" + zone;
          }
          return newHost;
        } else {
          return host;
        }
      }
      var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
      var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === void 0;
      function parse2(uriString) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var components = {};
        var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
        if (options.reference === "suffix")
          uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
        var matches = uriString.match(URI_PARSE);
        if (matches) {
          if (NO_MATCH_IS_UNDEFINED) {
            components.scheme = matches[1];
            components.userinfo = matches[3];
            components.host = matches[4];
            components.port = parseInt(matches[5], 10);
            components.path = matches[6] || "";
            components.query = matches[7];
            components.fragment = matches[8];
            if (isNaN(components.port)) {
              components.port = matches[5];
            }
          } else {
            components.scheme = matches[1] || void 0;
            components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : void 0;
            components.host = uriString.indexOf("//") !== -1 ? matches[4] : void 0;
            components.port = parseInt(matches[5], 10);
            components.path = matches[6] || "";
            components.query = uriString.indexOf("?") !== -1 ? matches[7] : void 0;
            components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : void 0;
            if (isNaN(components.port)) {
              components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : void 0;
            }
          }
          if (components.host) {
            components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
          }
          if (components.scheme === void 0 && components.userinfo === void 0 && components.host === void 0 && components.port === void 0 && !components.path && components.query === void 0) {
            components.reference = "same-document";
          } else if (components.scheme === void 0) {
            components.reference = "relative";
          } else if (components.fragment === void 0) {
            components.reference = "absolute";
          } else {
            components.reference = "uri";
          }
          if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
            components.error = components.error || "URI is not a " + options.reference + " reference.";
          }
          var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
          if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
            if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
              try {
                components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
              } catch (e) {
                components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
              }
            }
            _normalizeComponentEncoding(components, URI_PROTOCOL);
          } else {
            _normalizeComponentEncoding(components, protocol);
          }
          if (schemeHandler && schemeHandler.parse) {
            schemeHandler.parse(components, options);
          }
        } else {
          components.error = components.error || "URI can not be parsed.";
        }
        return components;
      }
      function _recomposeAuthority(components, options) {
        var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
        var uriTokens = [];
        if (components.userinfo !== void 0) {
          uriTokens.push(components.userinfo);
          uriTokens.push("@");
        }
        if (components.host !== void 0) {
          uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function(_10, $1, $2) {
            return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
          }));
        }
        if (typeof components.port === "number" || typeof components.port === "string") {
          uriTokens.push(":");
          uriTokens.push(String(components.port));
        }
        return uriTokens.length ? uriTokens.join("") : void 0;
      }
      var RDS1 = /^\.\.?\//;
      var RDS2 = /^\/\.(\/|$)/;
      var RDS3 = /^\/\.\.(\/|$)/;
      var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
      function removeDotSegments(input) {
        var output = [];
        while (input.length) {
          if (input.match(RDS1)) {
            input = input.replace(RDS1, "");
          } else if (input.match(RDS2)) {
            input = input.replace(RDS2, "/");
          } else if (input.match(RDS3)) {
            input = input.replace(RDS3, "/");
            output.pop();
          } else if (input === "." || input === "..") {
            input = "";
          } else {
            var im = input.match(RDS5);
            if (im) {
              var s = im[0];
              input = input.slice(s.length);
              output.push(s);
            } else {
              throw new Error("Unexpected dot segment condition");
            }
          }
        }
        return output.join("");
      }
      function serialize(components) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
        var uriTokens = [];
        var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
        if (schemeHandler && schemeHandler.serialize)
          schemeHandler.serialize(components, options);
        if (components.host) {
          if (protocol.IPV6ADDRESS.test(components.host)) {
          } else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
            try {
              components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
            } catch (e) {
              components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
            }
          }
        }
        _normalizeComponentEncoding(components, protocol);
        if (options.reference !== "suffix" && components.scheme) {
          uriTokens.push(components.scheme);
          uriTokens.push(":");
        }
        var authority = _recomposeAuthority(components, options);
        if (authority !== void 0) {
          if (options.reference !== "suffix") {
            uriTokens.push("//");
          }
          uriTokens.push(authority);
          if (components.path && components.path.charAt(0) !== "/") {
            uriTokens.push("/");
          }
        }
        if (components.path !== void 0) {
          var s = components.path;
          if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
            s = removeDotSegments(s);
          }
          if (authority === void 0) {
            s = s.replace(/^\/\//, "/%2F");
          }
          uriTokens.push(s);
        }
        if (components.query !== void 0) {
          uriTokens.push("?");
          uriTokens.push(components.query);
        }
        if (components.fragment !== void 0) {
          uriTokens.push("#");
          uriTokens.push(components.fragment);
        }
        return uriTokens.join("");
      }
      function resolveComponents(base2, relative) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var skipNormalization = arguments[3];
        var target = {};
        if (!skipNormalization) {
          base2 = parse2(serialize(base2, options), options);
          relative = parse2(serialize(relative, options), options);
        }
        options = options || {};
        if (!options.tolerant && relative.scheme) {
          target.scheme = relative.scheme;
          target.userinfo = relative.userinfo;
          target.host = relative.host;
          target.port = relative.port;
          target.path = removeDotSegments(relative.path || "");
          target.query = relative.query;
        } else {
          if (relative.userinfo !== void 0 || relative.host !== void 0 || relative.port !== void 0) {
            target.userinfo = relative.userinfo;
            target.host = relative.host;
            target.port = relative.port;
            target.path = removeDotSegments(relative.path || "");
            target.query = relative.query;
          } else {
            if (!relative.path) {
              target.path = base2.path;
              if (relative.query !== void 0) {
                target.query = relative.query;
              } else {
                target.query = base2.query;
              }
            } else {
              if (relative.path.charAt(0) === "/") {
                target.path = removeDotSegments(relative.path);
              } else {
                if ((base2.userinfo !== void 0 || base2.host !== void 0 || base2.port !== void 0) && !base2.path) {
                  target.path = "/" + relative.path;
                } else if (!base2.path) {
                  target.path = relative.path;
                } else {
                  target.path = base2.path.slice(0, base2.path.lastIndexOf("/") + 1) + relative.path;
                }
                target.path = removeDotSegments(target.path);
              }
              target.query = relative.query;
            }
            target.userinfo = base2.userinfo;
            target.host = base2.host;
            target.port = base2.port;
          }
          target.scheme = base2.scheme;
        }
        target.fragment = relative.fragment;
        return target;
      }
      function resolve(baseURI, relativeURI, options) {
        var schemelessOptions = assign({ scheme: "null" }, options);
        return serialize(resolveComponents(parse2(baseURI, schemelessOptions), parse2(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
      }
      function normalize(uri, options) {
        if (typeof uri === "string") {
          uri = serialize(parse2(uri, options), options);
        } else if (typeOf(uri) === "object") {
          uri = parse2(serialize(uri, options), options);
        }
        return uri;
      }
      function equal(uriA, uriB, options) {
        if (typeof uriA === "string") {
          uriA = serialize(parse2(uriA, options), options);
        } else if (typeOf(uriA) === "object") {
          uriA = serialize(uriA, options);
        }
        if (typeof uriB === "string") {
          uriB = serialize(parse2(uriB, options), options);
        } else if (typeOf(uriB) === "object") {
          uriB = serialize(uriB, options);
        }
        return uriA === uriB;
      }
      function escapeComponent(str, options) {
        return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
      }
      function unescapeComponent(str, options) {
        return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
      }
      var handler = {
        scheme: "http",
        domainHost: true,
        parse: function parse3(components, options) {
          if (!components.host) {
            components.error = components.error || "HTTP URIs must have a host.";
          }
          return components;
        },
        serialize: function serialize2(components, options) {
          var secure = String(components.scheme).toLowerCase() === "https";
          if (components.port === (secure ? 443 : 80) || components.port === "") {
            components.port = void 0;
          }
          if (!components.path) {
            components.path = "/";
          }
          return components;
        }
      };
      var handler$1 = {
        scheme: "https",
        domainHost: handler.domainHost,
        parse: handler.parse,
        serialize: handler.serialize
      };
      function isSecure(wsComponents) {
        return typeof wsComponents.secure === "boolean" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
      }
      var handler$2 = {
        scheme: "ws",
        domainHost: true,
        parse: function parse3(components, options) {
          var wsComponents = components;
          wsComponents.secure = isSecure(wsComponents);
          wsComponents.resourceName = (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "");
          wsComponents.path = void 0;
          wsComponents.query = void 0;
          return wsComponents;
        },
        serialize: function serialize2(wsComponents, options) {
          if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
            wsComponents.port = void 0;
          }
          if (typeof wsComponents.secure === "boolean") {
            wsComponents.scheme = wsComponents.secure ? "wss" : "ws";
            wsComponents.secure = void 0;
          }
          if (wsComponents.resourceName) {
            var _wsComponents$resourc = wsComponents.resourceName.split("?"), _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2), path = _wsComponents$resourc2[0], query = _wsComponents$resourc2[1];
            wsComponents.path = path && path !== "/" ? path : void 0;
            wsComponents.query = query;
            wsComponents.resourceName = void 0;
          }
          wsComponents.fragment = void 0;
          return wsComponents;
        }
      };
      var handler$3 = {
        scheme: "wss",
        domainHost: handler$2.domainHost,
        parse: handler$2.parse,
        serialize: handler$2.serialize
      };
      var O = {};
      var isIRI = true;
      var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + (isIRI ? "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" : "") + "]";
      var HEXDIG$$ = "[0-9A-Fa-f]";
      var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$));
      var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
      var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
      var VCHAR$$ = merge(QTEXT$$, '[\\"\\\\]');
      var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
      var UNRESERVED = new RegExp(UNRESERVED$$, "g");
      var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
      var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
      var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
      var NOT_HFVALUE = NOT_HFNAME;
      function decodeUnreserved(str) {
        var decStr = pctDecChars(str);
        return !decStr.match(UNRESERVED) ? str : decStr;
      }
      var handler$4 = {
        scheme: "mailto",
        parse: function parse$$1(components, options) {
          var mailtoComponents = components;
          var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
          mailtoComponents.path = void 0;
          if (mailtoComponents.query) {
            var unknownHeaders = false;
            var headers = {};
            var hfields = mailtoComponents.query.split("&");
            for (var x = 0, xl = hfields.length; x < xl; ++x) {
              var hfield = hfields[x].split("=");
              switch (hfield[0]) {
                case "to":
                  var toAddrs = hfield[1].split(",");
                  for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                    to.push(toAddrs[_x]);
                  }
                  break;
                case "subject":
                  mailtoComponents.subject = unescapeComponent(hfield[1], options);
                  break;
                case "body":
                  mailtoComponents.body = unescapeComponent(hfield[1], options);
                  break;
                default:
                  unknownHeaders = true;
                  headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                  break;
              }
            }
            if (unknownHeaders)
              mailtoComponents.headers = headers;
          }
          mailtoComponents.query = void 0;
          for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
            var addr = to[_x2].split("@");
            addr[0] = unescapeComponent(addr[0]);
            if (!options.unicodeSupport) {
              try {
                addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
              } catch (e) {
                mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
              }
            } else {
              addr[1] = unescapeComponent(addr[1], options).toLowerCase();
            }
            to[_x2] = addr.join("@");
          }
          return mailtoComponents;
        },
        serialize: function serialize$$1(mailtoComponents, options) {
          var components = mailtoComponents;
          var to = toArray(mailtoComponents.to);
          if (to) {
            for (var x = 0, xl = to.length; x < xl; ++x) {
              var toAddr = String(to[x]);
              var atIdx = toAddr.lastIndexOf("@");
              var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
              var domain = toAddr.slice(atIdx + 1);
              try {
                domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
              } catch (e) {
                components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
              }
              to[x] = localPart + "@" + domain;
            }
            components.path = to.join(",");
          }
          var headers = mailtoComponents.headers = mailtoComponents.headers || {};
          if (mailtoComponents.subject)
            headers["subject"] = mailtoComponents.subject;
          if (mailtoComponents.body)
            headers["body"] = mailtoComponents.body;
          var fields = [];
          for (var name in headers) {
            if (headers[name] !== O[name]) {
              fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
            }
          }
          if (fields.length) {
            components.query = fields.join("&");
          }
          return components;
        }
      };
      var URN_PARSE = /^([^\:]+)\:(.*)/;
      var handler$5 = {
        scheme: "urn",
        parse: function parse$$1(components, options) {
          var matches = components.path && components.path.match(URN_PARSE);
          var urnComponents = components;
          if (matches) {
            var scheme = options.scheme || urnComponents.scheme || "urn";
            var nid = matches[1].toLowerCase();
            var nss = matches[2];
            var urnScheme = scheme + ":" + (options.nid || nid);
            var schemeHandler = SCHEMES[urnScheme];
            urnComponents.nid = nid;
            urnComponents.nss = nss;
            urnComponents.path = void 0;
            if (schemeHandler) {
              urnComponents = schemeHandler.parse(urnComponents, options);
            }
          } else {
            urnComponents.error = urnComponents.error || "URN can not be parsed.";
          }
          return urnComponents;
        },
        serialize: function serialize$$1(urnComponents, options) {
          var scheme = options.scheme || urnComponents.scheme || "urn";
          var nid = urnComponents.nid;
          var urnScheme = scheme + ":" + (options.nid || nid);
          var schemeHandler = SCHEMES[urnScheme];
          if (schemeHandler) {
            urnComponents = schemeHandler.serialize(urnComponents, options);
          }
          var uriComponents = urnComponents;
          var nss = urnComponents.nss;
          uriComponents.path = (nid || options.nid) + ":" + nss;
          return uriComponents;
        }
      };
      var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
      var handler$6 = {
        scheme: "urn:uuid",
        parse: function parse3(urnComponents, options) {
          var uuidComponents = urnComponents;
          uuidComponents.uuid = uuidComponents.nss;
          uuidComponents.nss = void 0;
          if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
            uuidComponents.error = uuidComponents.error || "UUID is not valid.";
          }
          return uuidComponents;
        },
        serialize: function serialize2(uuidComponents, options) {
          var urnComponents = uuidComponents;
          urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
          return urnComponents;
        }
      };
      SCHEMES[handler.scheme] = handler;
      SCHEMES[handler$1.scheme] = handler$1;
      SCHEMES[handler$2.scheme] = handler$2;
      SCHEMES[handler$3.scheme] = handler$3;
      SCHEMES[handler$4.scheme] = handler$4;
      SCHEMES[handler$5.scheme] = handler$5;
      SCHEMES[handler$6.scheme] = handler$6;
      exports2.SCHEMES = SCHEMES;
      exports2.pctEncChar = pctEncChar;
      exports2.pctDecChars = pctDecChars;
      exports2.parse = parse2;
      exports2.removeDotSegments = removeDotSegments;
      exports2.serialize = serialize;
      exports2.resolveComponents = resolveComponents;
      exports2.resolve = resolve;
      exports2.normalize = normalize;
      exports2.equal = equal;
      exports2.escapeComponent = escapeComponent;
      exports2.unescapeComponent = unescapeComponent;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/ajv/dist/compile/resolve.js
var require_resolve = __commonJS({
  "node_modules/ajv/dist/compile/resolve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = void 0;
    var util_1 = require_util();
    var equal = require_fast_deep_equal();
    var traverse = require_json_schema_traverse();
    var URI = require_uri_all();
    var SIMPLE_INLINED = /* @__PURE__ */ new Set([
      "type",
      "format",
      "pattern",
      "maxLength",
      "minLength",
      "maxProperties",
      "minProperties",
      "maxItems",
      "minItems",
      "maximum",
      "minimum",
      "uniqueItems",
      "multipleOf",
      "required",
      "enum",
      "const"
    ]);
    function inlineRef(schema, limit = true) {
      if (typeof schema == "boolean")
        return true;
      if (limit === true)
        return !hasRef(schema);
      if (!limit)
        return false;
      return countKeys(schema) <= limit;
    }
    exports.inlineRef = inlineRef;
    var REF_KEYWORDS = /* @__PURE__ */ new Set([
      "$ref",
      "$recursiveRef",
      "$recursiveAnchor",
      "$dynamicRef",
      "$dynamicAnchor"
    ]);
    function hasRef(schema) {
      for (const key in schema) {
        if (REF_KEYWORDS.has(key))
          return true;
        const sch = schema[key];
        if (Array.isArray(sch) && sch.some(hasRef))
          return true;
        if (typeof sch == "object" && hasRef(sch))
          return true;
      }
      return false;
    }
    function countKeys(schema) {
      let count = 0;
      for (const key in schema) {
        if (key === "$ref")
          return Infinity;
        count++;
        if (SIMPLE_INLINED.has(key))
          continue;
        if (typeof schema[key] == "object") {
          util_1.eachItem(schema[key], (sch) => count += countKeys(sch));
        }
        if (count === Infinity)
          return Infinity;
      }
      return count;
    }
    function getFullPath(id = "", normalize) {
      if (normalize !== false)
        id = normalizeId(id);
      const p = URI.parse(id);
      return _getFullPath(p);
    }
    exports.getFullPath = getFullPath;
    function _getFullPath(p) {
      return URI.serialize(p).split("#")[0] + "#";
    }
    exports._getFullPath = _getFullPath;
    var TRAILING_SLASH_HASH = /#\/?$/;
    function normalizeId(id) {
      return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
    }
    exports.normalizeId = normalizeId;
    function resolveUrl(baseId, id) {
      id = normalizeId(id);
      return URI.resolve(baseId, id);
    }
    exports.resolveUrl = resolveUrl;
    var ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
    function getSchemaRefs(schema) {
      if (typeof schema == "boolean")
        return {};
      const schemaId = normalizeId(schema.$id);
      const baseIds = { "": schemaId };
      const pathPrefix = getFullPath(schemaId, false);
      const localRefs = {};
      const schemaRefs = /* @__PURE__ */ new Set();
      traverse(schema, { allKeys: true }, (sch, jsonPtr, _10, parentJsonPtr) => {
        if (parentJsonPtr === void 0)
          return;
        const fullPath = pathPrefix + jsonPtr;
        let baseId = baseIds[parentJsonPtr];
        if (typeof sch.$id == "string")
          baseId = addRef.call(this, sch.$id);
        addAnchor.call(this, sch.$anchor);
        addAnchor.call(this, sch.$dynamicAnchor);
        baseIds[jsonPtr] = baseId;
        function addRef(ref) {
          ref = normalizeId(baseId ? URI.resolve(baseId, ref) : ref);
          if (schemaRefs.has(ref))
            throw ambiguos(ref);
          schemaRefs.add(ref);
          let schOrRef = this.refs[ref];
          if (typeof schOrRef == "string")
            schOrRef = this.refs[schOrRef];
          if (typeof schOrRef == "object") {
            checkAmbiguosRef(sch, schOrRef.schema, ref);
          } else if (ref !== normalizeId(fullPath)) {
            if (ref[0] === "#") {
              checkAmbiguosRef(sch, localRefs[ref], ref);
              localRefs[ref] = sch;
            } else {
              this.refs[ref] = fullPath;
            }
          }
          return ref;
        }
        function addAnchor(anchor) {
          if (typeof anchor == "string") {
            if (!ANCHOR.test(anchor))
              throw new Error(`invalid anchor "${anchor}"`);
            addRef.call(this, `#${anchor}`);
          }
        }
      });
      return localRefs;
      function checkAmbiguosRef(sch1, sch2, ref) {
        if (sch2 !== void 0 && !equal(sch1, sch2))
          throw ambiguos(ref);
      }
      function ambiguos(ref) {
        return new Error(`reference "${ref}" resolves to more than one schema`);
      }
    }
    exports.getSchemaRefs = getSchemaRefs;
  }
});

// node_modules/ajv/dist/compile/validate/index.js
var require_validate = __commonJS({
  "node_modules/ajv/dist/compile/validate/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkStrictMode = exports.schemaCxtHasRules = exports.subschemaCode = exports.validateFunctionCode = void 0;
    var boolSchema_1 = require_boolSchema();
    var dataType_1 = require_dataType();
    var iterate_1 = require_iterate();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var resolve_1 = require_resolve();
    var util_1 = require_util();
    function validateFunctionCode(it) {
      if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
          topSchemaObjCode(it);
          return;
        }
      }
      validateFunction(it, () => boolSchema_1.topBoolOrEmptySchema(it));
    }
    exports.validateFunctionCode = validateFunctionCode;
    function validateFunction({ gen, validateName, schema, schemaEnv, opts }, body) {
      if (opts.code.es5) {
        gen.func(validateName, codegen_1._`${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
          gen.code(codegen_1._`"use strict"; ${funcSourceUrl(schema, opts)}`);
          destructureValCxtES5(gen, opts);
          gen.code(body);
        });
      } else {
        gen.func(validateName, codegen_1._`${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));
      }
    }
    function destructureValCxt(opts) {
      return codegen_1._`{${names_1.default.dataPath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? codegen_1._`, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
    }
    function destructureValCxtES5(gen, opts) {
      gen.if(names_1.default.valCxt, () => {
        gen.var(names_1.default.dataPath, codegen_1._`${names_1.default.valCxt}.${names_1.default.dataPath}`);
        gen.var(names_1.default.parentData, codegen_1._`${names_1.default.valCxt}.${names_1.default.parentData}`);
        gen.var(names_1.default.parentDataProperty, codegen_1._`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
        gen.var(names_1.default.rootData, codegen_1._`${names_1.default.valCxt}.${names_1.default.rootData}`);
        if (opts.dynamicRef)
          gen.var(names_1.default.dynamicAnchors, codegen_1._`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
      }, () => {
        gen.var(names_1.default.dataPath, codegen_1._`""`);
        gen.var(names_1.default.parentData, codegen_1._`undefined`);
        gen.var(names_1.default.parentDataProperty, codegen_1._`undefined`);
        gen.var(names_1.default.rootData, names_1.default.data);
        if (opts.dynamicRef)
          gen.var(names_1.default.dynamicAnchors, codegen_1._`{}`);
      });
    }
    function topSchemaObjCode(it) {
      const { schema, opts, gen } = it;
      validateFunction(it, () => {
        if (opts.$comment && schema.$comment)
          commentKeyword(it);
        checkNoDefault(it);
        gen.let(names_1.default.vErrors, null);
        gen.let(names_1.default.errors, 0);
        if (opts.unevaluated)
          resetEvaluated(it);
        typeAndKeywords(it);
        returnResults(it);
      });
      return;
    }
    function resetEvaluated(it) {
      const { gen, validateName } = it;
      it.evaluated = gen.const("evaluated", codegen_1._`${validateName}.evaluated`);
      gen.if(codegen_1._`${it.evaluated}.dynamicProps`, () => gen.assign(codegen_1._`${it.evaluated}.props`, codegen_1._`undefined`));
      gen.if(codegen_1._`${it.evaluated}.dynamicItems`, () => gen.assign(codegen_1._`${it.evaluated}.items`, codegen_1._`undefined`));
    }
    function funcSourceUrl(schema, opts) {
      return typeof schema == "object" && schema.$id && (opts.code.source || opts.code.process) ? codegen_1._`/*# sourceURL=${schema.$id} */` : codegen_1.nil;
    }
    function subschemaCode(it, valid) {
      if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
          subSchemaObjCode(it, valid);
          return;
        }
      }
      boolSchema_1.boolOrEmptySchema(it, valid);
    }
    exports.subschemaCode = subschemaCode;
    function schemaCxtHasRules({ schema, self: self2 }) {
      if (typeof schema == "boolean")
        return !schema;
      for (const key in schema)
        if (self2.RULES.all[key])
          return true;
      return false;
    }
    exports.schemaCxtHasRules = schemaCxtHasRules;
    function isSchemaObj(it) {
      return typeof it.schema != "boolean";
    }
    function subSchemaObjCode(it, valid) {
      const { schema, gen, opts } = it;
      if (opts.$comment && schema.$comment)
        commentKeyword(it);
      updateContext(it);
      checkAsync(it);
      const errsCount = gen.const("_errs", names_1.default.errors);
      typeAndKeywords(it, errsCount);
      gen.var(valid, codegen_1._`${errsCount} === ${names_1.default.errors}`);
    }
    function checkKeywords(it) {
      util_1.checkUnknownRules(it);
      checkRefsAndKeywords(it);
    }
    function typeAndKeywords(it, errsCount) {
      if (it.opts.jtd)
        return iterate_1.schemaKeywords(it, [], false, errsCount);
      const types = dataType_1.getSchemaTypes(it.schema);
      const checkedTypes = dataType_1.coerceAndCheckDataType(it, types);
      iterate_1.schemaKeywords(it, types, !checkedTypes, errsCount);
    }
    function checkRefsAndKeywords(it) {
      const { schema, errSchemaPath, opts, self: self2 } = it;
      if (schema.$ref && opts.ignoreKeywordsWithRef && util_1.schemaHasRulesButRef(schema, self2.RULES)) {
        self2.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
      }
    }
    function checkNoDefault(it) {
      const { schema, opts } = it;
      if (schema.default !== void 0 && opts.useDefaults && opts.strict) {
        checkStrictMode(it, "default is ignored in the schema root");
      }
    }
    function updateContext(it) {
      if (it.schema.$id)
        it.baseId = resolve_1.resolveUrl(it.baseId, it.schema.$id);
    }
    function checkAsync(it) {
      if (it.schema.$async && !it.schemaEnv.$async)
        throw new Error("async schema in sync schema");
    }
    function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
      const msg = schema.$comment;
      if (opts.$comment === true) {
        gen.code(codegen_1._`${names_1.default.self}.logger.log(${msg})`);
      } else if (typeof opts.$comment == "function") {
        const schemaPath = codegen_1.str`${errSchemaPath}/$comment`;
        const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
        gen.code(codegen_1._`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
      }
    }
    function returnResults(it) {
      const { gen, schemaEnv, validateName, ValidationError, opts } = it;
      if (schemaEnv.$async) {
        gen.if(codegen_1._`${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw(codegen_1._`new ${ValidationError}(${names_1.default.vErrors})`));
      } else {
        gen.assign(codegen_1._`${validateName}.errors`, names_1.default.vErrors);
        if (opts.unevaluated)
          assignEvaluated(it);
        gen.return(codegen_1._`${names_1.default.errors} === 0`);
      }
    }
    function assignEvaluated({ gen, evaluated, props, items }) {
      if (props instanceof codegen_1.Name)
        gen.assign(codegen_1._`${evaluated}.props`, props);
      if (items instanceof codegen_1.Name)
        gen.assign(codegen_1._`${evaluated}.items`, items);
    }
    function checkStrictMode(it, msg, mode = it.opts.strict) {
      if (!mode)
        return;
      msg = `strict mode: ${msg}`;
      if (mode === true)
        throw new Error(msg);
      it.self.logger.warn(msg);
    }
    exports.checkStrictMode = checkStrictMode;
  }
});

// node_modules/ajv/dist/compile/util.js
var require_util = __commonJS({
  "node_modules/ajv/dist/compile/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
    var codegen_1 = require_codegen();
    var validate_1 = require_validate();
    function toHash(arr) {
      const hash = {};
      for (const item of arr)
        hash[item] = true;
      return hash;
    }
    exports.toHash = toHash;
    function alwaysValidSchema(it, schema) {
      if (typeof schema == "boolean")
        return schema;
      if (Object.keys(schema).length === 0)
        return true;
      checkUnknownRules(it, schema);
      return !schemaHasRules(schema, it.self.RULES.all);
    }
    exports.alwaysValidSchema = alwaysValidSchema;
    function checkUnknownRules(it, schema = it.schema) {
      const { opts, self: self2 } = it;
      if (!opts.strict)
        return;
      if (typeof schema === "boolean")
        return;
      const rules = self2.RULES.keywords;
      for (const key in schema) {
        if (!rules[key])
          validate_1.checkStrictMode(it, `unknown keyword: "${key}"`);
      }
    }
    exports.checkUnknownRules = checkUnknownRules;
    function schemaHasRules(schema, rules) {
      if (typeof schema == "boolean")
        return !schema;
      for (const key in schema)
        if (rules[key])
          return true;
      return false;
    }
    exports.schemaHasRules = schemaHasRules;
    function schemaHasRulesButRef(schema, RULES) {
      if (typeof schema == "boolean")
        return !schema;
      for (const key in schema)
        if (key !== "$ref" && RULES.all[key])
          return true;
      return false;
    }
    exports.schemaHasRulesButRef = schemaHasRulesButRef;
    function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
      if (!$data) {
        if (typeof schema == "number" || typeof schema == "boolean")
          return schema;
        if (typeof schema == "string")
          return codegen_1._`${schema}`;
      }
      return codegen_1._`${topSchemaRef}${schemaPath}${codegen_1.getProperty(keyword)}`;
    }
    exports.schemaRefOrVal = schemaRefOrVal;
    function unescapeFragment(str) {
      return unescapeJsonPointer(decodeURIComponent(str));
    }
    exports.unescapeFragment = unescapeFragment;
    function escapeFragment(str) {
      return encodeURIComponent(escapeJsonPointer(str));
    }
    exports.escapeFragment = escapeFragment;
    function escapeJsonPointer(str) {
      if (typeof str == "number")
        return `${str}`;
      return str.replace(/~/g, "~0").replace(/\//g, "~1");
    }
    exports.escapeJsonPointer = escapeJsonPointer;
    function unescapeJsonPointer(str) {
      return str.replace(/~1/g, "/").replace(/~0/g, "~");
    }
    exports.unescapeJsonPointer = unescapeJsonPointer;
    function eachItem(xs, f) {
      if (Array.isArray(xs)) {
        for (const x of xs)
          f(x);
      } else {
        f(xs);
      }
    }
    exports.eachItem = eachItem;
    function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName }) {
      return (gen, from, to, toName) => {
        const res = to === void 0 ? from : to instanceof codegen_1.Name ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to) : from instanceof codegen_1.Name ? (mergeToName(gen, to, from), from) : mergeValues(from, to);
        return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
      };
    }
    exports.mergeEvaluated = {
      props: makeMergeEvaluated({
        mergeNames: (gen, from, to) => gen.if(codegen_1._`${to} !== true && ${from} !== undefined`, () => {
          gen.if(codegen_1._`${from} === true`, () => gen.assign(to, true), () => gen.code(codegen_1._`Object.assign(${to}, ${from})`));
        }),
        mergeToName: (gen, from, to) => gen.if(codegen_1._`${to} !== true`, () => {
          if (from === true) {
            gen.assign(to, true);
          } else {
            gen.assign(to, codegen_1._`${to} || {}`);
            setEvaluated(gen, to, from);
          }
        }),
        mergeValues: (from, to) => from === true ? true : { ...from, ...to },
        resultToName: evaluatedPropsToName
      }),
      items: makeMergeEvaluated({
        mergeNames: (gen, from, to) => gen.if(codegen_1._`${to} !== true && ${from} !== undefined`, () => gen.assign(to, codegen_1._`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
        mergeToName: (gen, from, to) => gen.if(codegen_1._`${to} !== true`, () => gen.assign(to, from === true ? true : codegen_1._`${to} > ${from} ? ${to} : ${from}`)),
        mergeValues: (from, to) => from === true ? true : Math.max(from, to),
        resultToName: (gen, items) => gen.var("items", items)
      })
    };
    function evaluatedPropsToName(gen, ps) {
      if (ps === true)
        return gen.var("props", true);
      const props = gen.var("props", codegen_1._`{}`);
      if (ps !== void 0)
        setEvaluated(gen, props, ps);
      return props;
    }
    exports.evaluatedPropsToName = evaluatedPropsToName;
    function setEvaluated(gen, props, ps) {
      Object.keys(ps).forEach((p) => gen.assign(codegen_1._`${props}${codegen_1.getProperty(p)}`, true));
    }
    exports.setEvaluated = setEvaluated;
  }
});

// node_modules/ajv/dist/compile/validate/dataType.js
var require_dataType = __commonJS({
  "node_modules/ajv/dist/compile/validate/dataType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
    var rules_1 = require_rules();
    var applicability_1 = require_applicability();
    var errors_1 = require_errors();
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var DataType;
    (function(DataType2) {
      DataType2[DataType2["Correct"] = 0] = "Correct";
      DataType2[DataType2["Wrong"] = 1] = "Wrong";
    })(DataType = exports.DataType || (exports.DataType = {}));
    function getSchemaTypes(schema) {
      const types = getJSONTypes(schema.type);
      const hasNull = types.includes("null");
      if (hasNull) {
        if (schema.nullable === false)
          throw new Error("type: null contradicts nullable: false");
      } else {
        if (!types.length && schema.nullable !== void 0) {
          throw new Error('"nullable" cannot be used without "type"');
        }
        if (schema.nullable === true)
          types.push("null");
      }
      return types;
    }
    exports.getSchemaTypes = getSchemaTypes;
    function getJSONTypes(ts) {
      const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
      if (types.every(rules_1.isJSONType))
        return types;
      throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
    }
    exports.getJSONTypes = getJSONTypes;
    function coerceAndCheckDataType(it, types) {
      const { gen, data, opts } = it;
      const coerceTo = coerceToTypes(types, opts.coerceTypes);
      const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && applicability_1.schemaHasRulesForType(it, types[0]));
      if (checkTypes) {
        const wrongType = checkDataTypes(types, data, opts.strict, DataType.Wrong);
        gen.if(wrongType, () => {
          if (coerceTo.length)
            coerceData(it, types, coerceTo);
          else
            reportTypeError(it);
        });
      }
      return checkTypes;
    }
    exports.coerceAndCheckDataType = coerceAndCheckDataType;
    var COERCIBLE = /* @__PURE__ */ new Set(["string", "number", "integer", "boolean", "null"]);
    function coerceToTypes(types, coerceTypes) {
      return coerceTypes ? types.filter((t) => COERCIBLE.has(t) || coerceTypes === "array" && t === "array") : [];
    }
    function coerceData(it, types, coerceTo) {
      const { gen, data, opts } = it;
      const dataType = gen.let("dataType", codegen_1._`typeof ${data}`);
      const coerced = gen.let("coerced", codegen_1._`undefined`);
      if (opts.coerceTypes === "array") {
        gen.if(codegen_1._`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen.assign(data, codegen_1._`${data}[0]`).assign(dataType, codegen_1._`typeof ${data}`).if(checkDataTypes(types, data, opts.strict), () => gen.assign(coerced, data)));
      }
      gen.if(codegen_1._`${coerced} !== undefined`);
      for (const t of coerceTo) {
        if (COERCIBLE.has(t) || t === "array" && opts.coerceTypes === "array") {
          coerceSpecificType(t);
        }
      }
      gen.else();
      reportTypeError(it);
      gen.endIf();
      gen.if(codegen_1._`${coerced} !== undefined`, () => {
        gen.assign(data, coerced);
        assignParentData(it, coerced);
      });
      function coerceSpecificType(t) {
        switch (t) {
          case "string":
            gen.elseIf(codegen_1._`${dataType} == "number" || ${dataType} == "boolean"`).assign(coerced, codegen_1._`"" + ${data}`).elseIf(codegen_1._`${data} === null`).assign(coerced, codegen_1._`""`);
            return;
          case "number":
            gen.elseIf(codegen_1._`${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`).assign(coerced, codegen_1._`+${data}`);
            return;
          case "integer":
            gen.elseIf(codegen_1._`${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, codegen_1._`+${data}`);
            return;
          case "boolean":
            gen.elseIf(codegen_1._`${data} === "false" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf(codegen_1._`${data} === "true" || ${data} === 1`).assign(coerced, true);
            return;
          case "null":
            gen.elseIf(codegen_1._`${data} === "" || ${data} === 0 || ${data} === false`);
            gen.assign(coerced, null);
            return;
          case "array":
            gen.elseIf(codegen_1._`${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`).assign(coerced, codegen_1._`[${data}]`);
        }
      }
    }
    function assignParentData({ gen, parentData, parentDataProperty }, expr) {
      gen.if(codegen_1._`${parentData} !== undefined`, () => gen.assign(codegen_1._`${parentData}[${parentDataProperty}]`, expr));
    }
    function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
      const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
      let cond;
      switch (dataType) {
        case "null":
          return codegen_1._`${data} ${EQ} null`;
        case "array":
          cond = codegen_1._`Array.isArray(${data})`;
          break;
        case "object":
          cond = codegen_1._`${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
          break;
        case "integer":
          cond = numCond(codegen_1._`!(${data} % 1) && !isNaN(${data})`);
          break;
        case "number":
          cond = numCond();
          break;
        default:
          return codegen_1._`typeof ${data} ${EQ} ${dataType}`;
      }
      return correct === DataType.Correct ? cond : codegen_1.not(cond);
      function numCond(_cond = codegen_1.nil) {
        return codegen_1.and(codegen_1._`typeof ${data} == "number"`, _cond, strictNums ? codegen_1._`isFinite(${data})` : codegen_1.nil);
      }
    }
    exports.checkDataType = checkDataType;
    function checkDataTypes(dataTypes, data, strictNums, correct) {
      if (dataTypes.length === 1) {
        return checkDataType(dataTypes[0], data, strictNums, correct);
      }
      let cond;
      const types = util_1.toHash(dataTypes);
      if (types.array && types.object) {
        const notObj = codegen_1._`typeof ${data} != "object"`;
        cond = types.null ? notObj : codegen_1._`!${data} || ${notObj}`;
        delete types.null;
        delete types.array;
        delete types.object;
      } else {
        cond = codegen_1.nil;
      }
      if (types.number)
        delete types.integer;
      for (const t in types)
        cond = codegen_1.and(cond, checkDataType(t, data, strictNums, correct));
      return cond;
    }
    exports.checkDataTypes = checkDataTypes;
    var typeError = {
      message: ({ schema }) => codegen_1.str`should be ${schema}`,
      params: ({ schema, schemaValue }) => typeof schema == "string" ? codegen_1._`{type: ${schema}}` : codegen_1._`{type: ${schemaValue}}`
    };
    function reportTypeError(it) {
      const cxt = getTypeErrorContext(it);
      errors_1.reportError(cxt, typeError);
    }
    exports.reportTypeError = reportTypeError;
    function getTypeErrorContext(it) {
      const { gen, data, schema } = it;
      const schemaCode = util_1.schemaRefOrVal(it, schema, "type");
      return {
        gen,
        keyword: "type",
        data,
        schema: schema.type,
        schemaCode,
        schemaValue: schemaCode,
        parentSchema: schema,
        params: {},
        it
      };
    }
  }
});

// node_modules/ajv/dist/compile/context.js
var require_context = __commonJS({
  "node_modules/ajv/dist/compile/context.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getData = void 0;
    var dataType_1 = require_dataType();
    var util_1 = require_util();
    var errors_1 = require_errors();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var subschema_1 = require_subschema();
    var KeywordCxt = class {
      constructor(it, def, keyword) {
        validateKeywordUsage(it, def, keyword);
        this.gen = it.gen;
        this.allErrors = it.allErrors;
        this.keyword = keyword;
        this.data = it.data;
        this.schema = it.schema[keyword];
        this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
        this.schemaValue = util_1.schemaRefOrVal(it, this.schema, keyword, this.$data);
        this.schemaType = def.schemaType;
        this.parentSchema = it.schema;
        this.params = {};
        this.it = it;
        this.def = def;
        if (this.$data) {
          this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
        } else {
          this.schemaCode = this.schemaValue;
          if (!validSchemaType(this.schema, def.schemaType, def.allowUndefined)) {
            throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
          }
        }
        if ("code" in def ? def.trackErrors : def.errors !== false) {
          this.errsCount = it.gen.const("_errs", names_1.default.errors);
        }
      }
      result(condition, successAction, failAction) {
        this.gen.if(codegen_1.not(condition));
        if (failAction)
          failAction();
        else
          this.error();
        if (successAction) {
          this.gen.else();
          successAction();
          if (this.allErrors)
            this.gen.endIf();
        } else {
          if (this.allErrors)
            this.gen.endIf();
          else
            this.gen.else();
        }
      }
      pass(condition, failAction) {
        this.result(condition, void 0, failAction);
      }
      fail(condition) {
        if (condition === void 0) {
          this.error();
          if (!this.allErrors)
            this.gen.if(false);
          return;
        }
        this.gen.if(condition);
        this.error();
        if (this.allErrors)
          this.gen.endIf();
        else
          this.gen.else();
      }
      fail$data(condition) {
        if (!this.$data)
          return this.fail(condition);
        const { schemaCode } = this;
        this.fail(codegen_1._`${schemaCode} !== undefined && (${codegen_1.or(this.invalid$data(), condition)})`);
      }
      error(append) {
        ;
        (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error);
      }
      $dataError() {
        errors_1.reportError(this, this.def.$dataError || errors_1.keyword$DataError);
      }
      reset() {
        if (this.errsCount === void 0)
          throw new Error('add "trackErrors" to keyword definition');
        errors_1.resetErrorsCount(this.gen, this.errsCount);
      }
      ok(cond) {
        if (!this.allErrors)
          this.gen.if(cond);
      }
      setParams(obj, assign) {
        if (assign)
          Object.assign(this.params, obj);
        else
          this.params = obj;
      }
      block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
        this.gen.block(() => {
          this.check$data(valid, $dataValid);
          codeBlock();
        });
      }
      check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
        if (!this.$data)
          return;
        const { gen, schemaCode, schemaType, def } = this;
        gen.if(codegen_1.or(codegen_1._`${schemaCode} === undefined`, $dataValid));
        if (valid !== codegen_1.nil)
          gen.assign(valid, true);
        if (schemaType.length || def.validateSchema) {
          gen.elseIf(this.invalid$data());
          this.$dataError();
          if (valid !== codegen_1.nil)
            gen.assign(valid, false);
        }
        gen.else();
      }
      invalid$data() {
        const { gen, schemaCode, schemaType, def, it } = this;
        return codegen_1.or(wrong$DataType(), invalid$DataSchema());
        function wrong$DataType() {
          if (schemaType.length) {
            if (!(schemaCode instanceof codegen_1.Name))
              throw new Error("ajv implementation error");
            const st = Array.isArray(schemaType) ? schemaType : [schemaType];
            return codegen_1._`${dataType_1.checkDataTypes(st, schemaCode, it.opts.strict, dataType_1.DataType.Wrong)}`;
          }
          return codegen_1.nil;
        }
        function invalid$DataSchema() {
          if (def.validateSchema) {
            const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema });
            return codegen_1._`!${validateSchemaRef}(${schemaCode})`;
          }
          return codegen_1.nil;
        }
      }
      subschema(appl, valid) {
        return subschema_1.applySubschema(this.it, appl, valid);
      }
      mergeEvaluated(schemaCxt, toName) {
        const { it, gen } = this;
        if (!it.opts.unevaluated)
          return;
        if (it.props !== true && schemaCxt.props !== void 0) {
          it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
        }
        if (it.items !== true && schemaCxt.items !== void 0) {
          it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
        }
      }
      mergeValidEvaluated(schemaCxt, valid) {
        const { it, gen } = this;
        if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
          gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
          return true;
        }
      }
    };
    exports.default = KeywordCxt;
    function validSchemaType(schema, schemaType, allowUndefined = false) {
      return !schemaType.length || schemaType.some((st) => st === "array" ? Array.isArray(schema) : st === "object" ? schema && typeof schema == "object" && !Array.isArray(schema) : typeof schema == st || allowUndefined && typeof schema == "undefined");
    }
    function validateKeywordUsage({ schema, opts, self: self2 }, def, keyword) {
      if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
        throw new Error("ajv implementation error");
      }
      const deps = def.dependencies;
      if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
        throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
      }
      if (def.validateSchema) {
        const valid = def.validateSchema(schema[keyword]);
        if (!valid) {
          const msg = "keyword value is invalid: " + self2.errorsText(def.validateSchema.errors);
          if (opts.validateSchema === "log")
            self2.logger.error(msg);
          else
            throw new Error(msg);
        }
      }
    }
    var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
    var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
    function getData($data, { dataLevel, dataNames, dataPathArr }) {
      let jsonPointer;
      let data;
      if ($data === "")
        return names_1.default.rootData;
      if ($data[0] === "/") {
        if (!JSON_POINTER.test($data))
          throw new Error(`Invalid JSON-pointer: ${$data}`);
        jsonPointer = $data;
        data = names_1.default.rootData;
      } else {
        const matches = RELATIVE_JSON_POINTER.exec($data);
        if (!matches)
          throw new Error(`Invalid JSON-pointer: ${$data}`);
        const up = +matches[1];
        jsonPointer = matches[2];
        if (jsonPointer === "#") {
          if (up >= dataLevel)
            throw new Error(errorMsg("property/index", up));
          return dataPathArr[dataLevel - up];
        }
        if (up > dataLevel)
          throw new Error(errorMsg("data", up));
        data = dataNames[dataLevel - up];
        if (!jsonPointer)
          return data;
      }
      let expr = data;
      const segments = jsonPointer.split("/");
      for (const segment of segments) {
        if (segment) {
          data = codegen_1._`${data}${codegen_1.getProperty(util_1.unescapeJsonPointer(segment))}`;
          expr = codegen_1._`${expr} && ${data}`;
        }
      }
      return expr;
      function errorMsg(pointerType, up) {
        return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
      }
    }
    exports.getData = getData;
  }
});

// node_modules/ajv/dist/compile/error_classes.js
var require_error_classes = __commonJS({
  "node_modules/ajv/dist/compile/error_classes.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MissingRefError = exports.ValidationError = void 0;
    var resolve_1 = require_resolve();
    var ValidationError = class extends Error {
      constructor(errors) {
        super("validation failed");
        this.errors = errors;
        this.ajv = this.validation = true;
      }
    };
    exports.ValidationError = ValidationError;
    var MissingRefError = class extends Error {
      constructor(baseId, ref, msg) {
        super(msg || `can't resolve reference ${ref} from id ${baseId}`);
        this.missingRef = resolve_1.resolveUrl(baseId, ref);
        this.missingSchema = resolve_1.normalizeId(resolve_1.getFullPath(this.missingRef));
      }
    };
    exports.MissingRefError = MissingRefError;
    module2.exports = {
      ValidationError,
      MissingRefError
    };
  }
});

// node_modules/ajv/dist/compile/index.js
var require_compile = __commonJS({
  "node_modules/ajv/dist/compile/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSchema = exports.resolveRef = exports.compileSchema = exports.SchemaEnv = void 0;
    var codegen_1 = require_codegen();
    var error_classes_1 = require_error_classes();
    var names_1 = require_names();
    var resolve_1 = require_resolve();
    var util_1 = require_util();
    var validate_1 = require_validate();
    var URI = require_uri_all();
    var SchemaEnv = class {
      constructor(env) {
        var _a;
        this.refs = {};
        this.dynamicAnchors = {};
        let schema;
        if (typeof env.schema == "object")
          schema = env.schema;
        this.schema = env.schema;
        this.root = env.root || this;
        this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : resolve_1.normalizeId(schema === null || schema === void 0 ? void 0 : schema.$id);
        this.localRefs = env.localRefs;
        this.meta = env.meta;
        this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
        this.refs = {};
      }
    };
    exports.SchemaEnv = SchemaEnv;
    function compileSchema(sch) {
      const _sch = getCompilingSchema.call(this, sch);
      if (_sch)
        return _sch;
      const rootId = resolve_1.getFullPath(sch.root.baseId);
      const { es5, lines } = this.opts.code;
      const { ownProperties } = this.opts;
      const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
      let _ValidationError;
      if (sch.$async) {
        _ValidationError = gen.scopeValue("Error", {
          ref: error_classes_1.ValidationError,
          code: codegen_1._`require("ajv/dist/compile/error_classes").ValidationError`
        });
      }
      const validateName = gen.scopeName("validate");
      sch.validateName = validateName;
      const schemaCxt = {
        gen,
        allErrors: this.opts.allErrors,
        data: names_1.default.data,
        parentData: names_1.default.parentData,
        parentDataProperty: names_1.default.parentDataProperty,
        dataNames: [names_1.default.data],
        dataPathArr: [codegen_1.nil],
        dataLevel: 0,
        dataTypes: [],
        topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true ? { ref: sch.schema, code: codegen_1.stringify(sch.schema) } : { ref: sch.schema }),
        validateName,
        ValidationError: _ValidationError,
        schema: sch.schema,
        schemaEnv: sch,
        rootId,
        baseId: sch.baseId || rootId,
        schemaPath: codegen_1.nil,
        errSchemaPath: this.opts.jtd ? "" : "#",
        errorPath: codegen_1._`""`,
        opts: this.opts,
        self: this
      };
      let sourceCode;
      try {
        this._compilations.add(sch);
        validate_1.validateFunctionCode(schemaCxt);
        gen.optimize(this.opts.code.optimize);
        const validateCode = gen.toString();
        sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;
        if (this.opts.code.process)
          sourceCode = this.opts.code.process(sourceCode, sch);
        const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
        const validate2 = makeValidate(this, this.scope.get());
        this.scope.value(validateName, { ref: validate2 });
        validate2.errors = null;
        validate2.schema = sch.schema;
        validate2.schemaEnv = sch;
        if (sch.$async)
          validate2.$async = true;
        if (this.opts.code.source === true) {
          validate2.source = { validateName, validateCode, scopeValues: gen._values };
        }
        if (this.opts.unevaluated) {
          const { props, items } = schemaCxt;
          validate2.evaluated = {
            props: props instanceof codegen_1.Name ? void 0 : props,
            items: items instanceof codegen_1.Name ? void 0 : items,
            dynamicProps: props instanceof codegen_1.Name,
            dynamicItems: items instanceof codegen_1.Name
          };
          if (validate2.source)
            validate2.source.evaluated = codegen_1.stringify(validate2.evaluated);
        }
        sch.validate = validate2;
        return sch;
      } catch (e) {
        delete sch.validate;
        delete sch.validateName;
        if (sourceCode)
          this.logger.error("Error compiling schema, function code:", sourceCode);
        throw e;
      } finally {
        this._compilations.delete(sch);
      }
    }
    exports.compileSchema = compileSchema;
    function resolveRef(root, baseId, ref) {
      var _a;
      ref = resolve_1.resolveUrl(baseId, ref);
      const schOrFunc = root.refs[ref];
      if (schOrFunc)
        return schOrFunc;
      let _sch = resolve.call(this, root, ref);
      if (_sch === void 0) {
        const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref];
        if (schema)
          _sch = new SchemaEnv({ schema, root, baseId });
      }
      if (_sch === void 0)
        return;
      return root.refs[ref] = inlineOrCompile.call(this, _sch);
    }
    exports.resolveRef = resolveRef;
    function inlineOrCompile(sch) {
      if (resolve_1.inlineRef(sch.schema, this.opts.inlineRefs))
        return sch.schema;
      return sch.validate ? sch : compileSchema.call(this, sch);
    }
    function getCompilingSchema(schEnv) {
      for (const sch of this._compilations) {
        if (sameSchemaEnv(sch, schEnv))
          return sch;
      }
    }
    function sameSchemaEnv(s1, s2) {
      return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
    }
    function resolve(root, ref) {
      let sch;
      while (typeof (sch = this.refs[ref]) == "string")
        ref = sch;
      return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
    }
    function resolveSchema(root, ref) {
      const p = URI.parse(ref);
      const refPath = resolve_1._getFullPath(p);
      let baseId = resolve_1.getFullPath(root.baseId);
      if (Object.keys(root.schema).length > 0 && refPath === baseId) {
        return getJsonPointer.call(this, p, root);
      }
      const id = resolve_1.normalizeId(refPath);
      const schOrRef = this.refs[id] || this.schemas[id];
      if (typeof schOrRef == "string") {
        const sch = resolveSchema.call(this, root, schOrRef);
        if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
          return;
        return getJsonPointer.call(this, p, sch);
      }
      if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
        return;
      if (!schOrRef.validate)
        compileSchema.call(this, schOrRef);
      if (id === resolve_1.normalizeId(ref)) {
        const { schema } = schOrRef;
        if (schema.$id)
          baseId = resolve_1.resolveUrl(baseId, schema.$id);
        return new SchemaEnv({ schema, root, baseId });
      }
      return getJsonPointer.call(this, p, schOrRef);
    }
    exports.resolveSchema = resolveSchema;
    var PREVENT_SCOPE_CHANGE = /* @__PURE__ */ new Set([
      "properties",
      "patternProperties",
      "enum",
      "dependencies",
      "definitions"
    ]);
    function getJsonPointer(parsedRef, { baseId, schema, root }) {
      var _a;
      if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/")
        return;
      for (const part of parsedRef.fragment.slice(1).split("/")) {
        if (typeof schema == "boolean")
          return;
        schema = schema[util_1.unescapeFragment(part)];
        if (schema === void 0)
          return;
        if (!PREVENT_SCOPE_CHANGE.has(part) && typeof schema == "object" && schema.$id) {
          baseId = resolve_1.resolveUrl(baseId, schema.$id);
        }
      }
      let env;
      if (typeof schema != "boolean" && schema.$ref && !util_1.schemaHasRulesButRef(schema, this.RULES)) {
        const $ref = resolve_1.resolveUrl(baseId, schema.$ref);
        env = resolveSchema.call(this, root, $ref);
      }
      env = env || new SchemaEnv({ schema, root, baseId });
      if (env.schema !== env.root.schema)
        return env;
      return void 0;
    }
  }
});

// node_modules/ajv/dist/refs/data.json
var require_data = __commonJS({
  "node_modules/ajv/dist/refs/data.json"(exports, module2) {
    module2.exports = {
      $id: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
      description: "Meta-schema for $data reference (JSON AnySchema extension proposal)",
      type: "object",
      required: ["$data"],
      properties: {
        $data: {
          type: "string",
          anyOf: [{ format: "relative-json-pointer" }, { format: "json-pointer" }]
        }
      },
      additionalProperties: false
    };
  }
});

// node_modules/ajv/dist/core.js
var require_core = __commonJS({
  "node_modules/ajv/dist/core.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    var context_1 = require_context();
    exports.KeywordCxt = context_1.default;
    var codegen_1 = require_codegen();
    Object.defineProperty(exports, "_", { enumerable: true, get: function() {
      return codegen_1._;
    } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function() {
      return codegen_1.str;
    } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
      return codegen_1.stringify;
    } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
      return codegen_1.nil;
    } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
      return codegen_1.Name;
    } });
    Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function() {
      return codegen_1.CodeGen;
    } });
    var error_classes_1 = require_error_classes();
    var rules_1 = require_rules();
    var compile_1 = require_compile();
    var codegen_2 = require_codegen();
    var resolve_1 = require_resolve();
    var dataType_1 = require_dataType();
    var util_1 = require_util();
    var $dataRefSchema = require_data();
    var META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
    var EXT_SCOPE_NAMES = /* @__PURE__ */ new Set([
      "validate",
      "wrapper",
      "root",
      "schema",
      "keyword",
      "pattern",
      "formats",
      "validate$data",
      "func",
      "obj",
      "Error"
    ]);
    var removedOptions = {
      errorDataPath: "",
      format: "`validateFormats: false` can be used instead.",
      nullable: '"nullable" keyword is supported by default.',
      jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
      extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
      missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
      processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
      sourceCode: "Use option `code: {source: true}`",
      schemaId: "JSON Schema draft-04 is not supported in Ajv v7.",
      strictDefaults: "It is default now, see option `strict`.",
      strictKeywords: "It is default now, see option `strict`.",
      strictNumbers: "It is default now, see option `strict`.",
      uniqueItems: '"uniqueItems" keyword is always validated.',
      unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
      cache: "Map is used as cache, schema object as key.",
      serialize: "Map is used as cache, schema object as key."
    };
    var deprecatedOptions = {
      ignoreKeywordsWithRef: "",
      jsPropertySyntax: "",
      unicode: '"minLength"/"maxLength" account for unicode characters by default.'
    };
    function requiredOptions(o) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
      const strict = (_a = o.strict) !== null && _a !== void 0 ? _a : true;
      const strictLog = strict ? "log" : false;
      const _optz = (_b = o.code) === null || _b === void 0 ? void 0 : _b.optimize;
      const optimize = _optz === true || _optz === void 0 ? 1 : _optz || 0;
      return {
        strict,
        strictTypes: (_c = o.strictTypes) !== null && _c !== void 0 ? _c : strictLog,
        strictTuples: (_d = o.strictTuples) !== null && _d !== void 0 ? _d : strictLog,
        code: o.code ? { ...o.code, optimize } : { optimize },
        loopRequired: (_e = o.loopRequired) !== null && _e !== void 0 ? _e : Infinity,
        loopEnum: (_f = o.loopEnum) !== null && _f !== void 0 ? _f : Infinity,
        meta: (_g = o.meta) !== null && _g !== void 0 ? _g : true,
        messages: (_h = o.messages) !== null && _h !== void 0 ? _h : true,
        inlineRefs: (_j = o.inlineRefs) !== null && _j !== void 0 ? _j : true,
        addUsedSchema: (_k = o.addUsedSchema) !== null && _k !== void 0 ? _k : true,
        validateSchema: (_l = o.validateSchema) !== null && _l !== void 0 ? _l : true,
        validateFormats: (_m = o.validateFormats) !== null && _m !== void 0 ? _m : true
      };
    }
    var Ajv2 = class {
      constructor(opts = {}) {
        this.schemas = {};
        this.refs = {};
        this.formats = {};
        this._compilations = /* @__PURE__ */ new Set();
        this._loading = {};
        this._cache = /* @__PURE__ */ new Map();
        opts = this.opts = { ...opts, ...requiredOptions(opts) };
        const { es5, lines } = this.opts.code;
        this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
        this.logger = getLogger(opts.logger);
        const formatOpt = opts.validateFormats;
        opts.validateFormats = false;
        this.RULES = rules_1.getRules();
        checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
        checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
        this._metaOpts = getMetaSchemaOptions.call(this);
        if (opts.formats)
          addInitialFormats.call(this);
        this._addVocabularies();
        this._addDefaultMetaSchema();
        if (opts.keywords)
          addInitialKeywords.call(this, opts.keywords);
        if (typeof opts.meta == "object")
          this.addMetaSchema(opts.meta);
        addInitialSchemas.call(this);
        opts.validateFormats = formatOpt;
      }
      _addVocabularies() {
        this.addKeyword("$async");
      }
      _addDefaultMetaSchema() {
        const { $data, meta } = this.opts;
        if (meta && $data)
          this.addMetaSchema($dataRefSchema, $dataRefSchema.$id, false);
      }
      defaultMeta() {
        const { meta } = this.opts;
        return this.opts.defaultMeta = typeof meta == "object" ? meta.$id || meta : void 0;
      }
      validate(schemaKeyRef, data) {
        let v;
        if (typeof schemaKeyRef == "string") {
          v = this.getSchema(schemaKeyRef);
          if (!v)
            throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
        } else {
          v = this.compile(schemaKeyRef);
        }
        const valid = v(data);
        if (!("$async" in v))
          this.errors = v.errors;
        return valid;
      }
      compile(schema, _meta) {
        const sch = this._addSchema(schema, _meta);
        return sch.validate || this._compileSchemaEnv(sch);
      }
      compileAsync(schema, meta) {
        if (typeof this.opts.loadSchema != "function") {
          throw new Error("options.loadSchema should be a function");
        }
        const { loadSchema } = this.opts;
        return runCompileAsync.call(this, schema, meta);
        async function runCompileAsync(_schema, _meta) {
          await loadMetaSchema.call(this, _schema.$schema);
          const sch = this._addSchema(_schema, _meta);
          return sch.validate || _compileAsync.call(this, sch);
        }
        async function loadMetaSchema($ref) {
          if ($ref && !this.getSchema($ref)) {
            await runCompileAsync.call(this, { $ref }, true);
          }
        }
        async function _compileAsync(sch) {
          try {
            return this._compileSchemaEnv(sch);
          } catch (e) {
            if (!(e instanceof error_classes_1.MissingRefError))
              throw e;
            checkLoaded.call(this, e);
            await loadMissingSchema.call(this, e.missingSchema);
            return _compileAsync.call(this, sch);
          }
        }
        function checkLoaded({ missingSchema: ref, missingRef }) {
          if (this.refs[ref]) {
            throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
          }
        }
        async function loadMissingSchema(ref) {
          const _schema = await _loadSchema.call(this, ref);
          if (!this.refs[ref])
            await loadMetaSchema.call(this, _schema.$schema);
          if (!this.refs[ref])
            this.addSchema(_schema, ref, meta);
        }
        async function _loadSchema(ref) {
          const p = this._loading[ref];
          if (p)
            return p;
          try {
            return await (this._loading[ref] = loadSchema(ref));
          } finally {
            delete this._loading[ref];
          }
        }
      }
      // Adds schema to the instance
      addSchema(schema, key, _meta, _validateSchema = this.opts.validateSchema) {
        if (Array.isArray(schema)) {
          for (const sch of schema)
            this.addSchema(sch, void 0, _meta, _validateSchema);
          return this;
        }
        let id;
        if (typeof schema === "object") {
          id = schema.$id;
          if (id !== void 0 && typeof id != "string")
            throw new Error("schema id must be string");
        }
        key = resolve_1.normalizeId(key || id);
        this._checkUnique(key);
        this.schemas[key] = this._addSchema(schema, _meta, _validateSchema, true);
        return this;
      }
      // Add schema that will be used to validate other schemas
      // options in META_IGNORE_OPTIONS are alway set to false
      addMetaSchema(schema, key, _validateSchema = this.opts.validateSchema) {
        this.addSchema(schema, key, true, _validateSchema);
        return this;
      }
      //  Validate schema against its meta-schema
      validateSchema(schema, throwOrLogError) {
        if (typeof schema == "boolean")
          return true;
        let $schema;
        $schema = schema.$schema;
        if ($schema !== void 0 && typeof $schema != "string") {
          throw new Error("$schema must be a string");
        }
        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
        if (!$schema) {
          this.logger.warn("meta-schema not available");
          this.errors = null;
          return true;
        }
        const valid = this.validate($schema, schema);
        if (!valid && throwOrLogError) {
          const message = "schema is invalid: " + this.errorsText();
          if (this.opts.validateSchema === "log")
            this.logger.error(message);
          else
            throw new Error(message);
        }
        return valid;
      }
      // Get compiled schema by `key` or `ref`.
      // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
      getSchema(keyRef) {
        let sch;
        while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
          keyRef = sch;
        if (sch === void 0) {
          const root = new compile_1.SchemaEnv({ schema: {} });
          sch = compile_1.resolveSchema.call(this, root, keyRef);
          if (!sch)
            return;
          this.refs[keyRef] = sch;
        }
        return sch.validate || this._compileSchemaEnv(sch);
      }
      // Remove cached schema(s).
      // If no parameter is passed all schemas but meta-schemas are removed.
      // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
      // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
      removeSchema(schemaKeyRef) {
        if (schemaKeyRef instanceof RegExp) {
          this._removeAllSchemas(this.schemas, schemaKeyRef);
          this._removeAllSchemas(this.refs, schemaKeyRef);
          return this;
        }
        switch (typeof schemaKeyRef) {
          case "undefined":
            this._removeAllSchemas(this.schemas);
            this._removeAllSchemas(this.refs);
            this._cache.clear();
            return this;
          case "string": {
            const sch = getSchEnv.call(this, schemaKeyRef);
            if (typeof sch == "object")
              this._cache.delete(sch.schema);
            delete this.schemas[schemaKeyRef];
            delete this.refs[schemaKeyRef];
            return this;
          }
          case "object": {
            const cacheKey = schemaKeyRef;
            this._cache.delete(cacheKey);
            let id = schemaKeyRef.$id;
            if (id) {
              id = resolve_1.normalizeId(id);
              delete this.schemas[id];
              delete this.refs[id];
            }
            return this;
          }
          default:
            throw new Error("ajv.removeSchema: invalid parameter");
        }
      }
      // add "vocabulary" - a collection of keywords
      addVocabulary(definitions) {
        for (const def of definitions)
          this.addKeyword(def);
        return this;
      }
      addKeyword(kwdOrDef, def) {
        let keyword;
        if (typeof kwdOrDef == "string") {
          keyword = kwdOrDef;
          if (typeof def == "object") {
            this.logger.warn("these parameters are deprecated, see docs for addKeyword");
            def.keyword = keyword;
          }
        } else if (typeof kwdOrDef == "object" && def === void 0) {
          def = kwdOrDef;
          keyword = def.keyword;
          if (Array.isArray(keyword) && !keyword.length) {
            throw new Error("addKeywords: keyword must be string or non-empty array");
          }
        } else {
          throw new Error("invalid addKeywords parameters");
        }
        checkKeyword.call(this, keyword, def);
        if (!def) {
          util_1.eachItem(keyword, (kwd) => addRule.call(this, kwd));
          return this;
        }
        keywordMetaschema.call(this, def);
        const definition = {
          ...def,
          type: dataType_1.getJSONTypes(def.type),
          schemaType: dataType_1.getJSONTypes(def.schemaType)
        };
        util_1.eachItem(keyword, definition.type.length === 0 ? (k) => addRule.call(this, k, definition) : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));
        return this;
      }
      getKeyword(keyword) {
        const rule = this.RULES.all[keyword];
        return typeof rule == "object" ? rule.definition : !!rule;
      }
      // Remove keyword
      removeKeyword(keyword) {
        const { RULES } = this;
        delete RULES.keywords[keyword];
        delete RULES.all[keyword];
        for (const group of RULES.rules) {
          const i = group.rules.findIndex((rule) => rule.keyword === keyword);
          if (i >= 0)
            group.rules.splice(i, 1);
        }
        return this;
      }
      // Add format
      addFormat(name, format) {
        if (typeof format == "string")
          format = new RegExp(format);
        this.formats[name] = format;
        return this;
      }
      errorsText(errors = this.errors, { separator = ", ", dataVar = "data" } = {}) {
        if (!errors || errors.length === 0)
          return "No errors";
        return errors.map((e) => `${dataVar}${e.dataPath} ${e.message}`).reduce((text, msg) => text + separator + msg);
      }
      $dataMetaSchema(metaSchema, keywordsJsonPointers) {
        const rules = this.RULES.all;
        metaSchema = JSON.parse(JSON.stringify(metaSchema));
        for (const jsonPointer of keywordsJsonPointers) {
          const segments = jsonPointer.split("/").slice(1);
          let keywords = metaSchema;
          for (const seg of segments)
            keywords = keywords[seg];
          for (const key in rules) {
            const rule = rules[key];
            if (typeof rule != "object")
              continue;
            const { $data } = rule.definition;
            const schema = keywords[key];
            if ($data && schema)
              keywords[key] = schemaOrData(schema);
          }
        }
        return metaSchema;
      }
      _removeAllSchemas(schemas2, regex) {
        for (const keyRef in schemas2) {
          const sch = schemas2[keyRef];
          if (!regex || regex.test(keyRef)) {
            if (typeof sch == "string") {
              delete schemas2[keyRef];
            } else if (sch && !sch.meta) {
              this._cache.delete(sch.schema);
              delete schemas2[keyRef];
            }
          }
        }
      }
      _addSchema(schema, meta, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
        if (typeof schema != "object") {
          if (this.opts.jtd)
            throw new Error("schema must be object");
          else if (typeof schema != "boolean")
            throw new Error("schema must be object or boolean");
        }
        let sch = this._cache.get(schema);
        if (sch !== void 0)
          return sch;
        const localRefs = resolve_1.getSchemaRefs.call(this, schema);
        sch = new compile_1.SchemaEnv({ schema, meta, localRefs });
        this._cache.set(sch.schema, sch);
        const id = sch.baseId;
        if (addSchema && !id.startsWith("#")) {
          if (id)
            this._checkUnique(id);
          this.refs[id] = sch;
        }
        if (validateSchema)
          this.validateSchema(schema, true);
        return sch;
      }
      _checkUnique(id) {
        if (this.schemas[id] || this.refs[id]) {
          throw new Error(`schema with key or id "${id}" already exists`);
        }
      }
      _compileSchemaEnv(sch) {
        if (sch.meta)
          this._compileMetaSchema(sch);
        else
          compile_1.compileSchema.call(this, sch);
        if (!sch.validate)
          throw new Error("ajv implementation error");
        return sch.validate;
      }
      _compileMetaSchema(sch) {
        const currentOpts = this.opts;
        this.opts = this._metaOpts;
        try {
          compile_1.compileSchema.call(this, sch);
        } finally {
          this.opts = currentOpts;
        }
      }
    };
    exports.default = Ajv2;
    Ajv2.ValidationError = error_classes_1.ValidationError;
    Ajv2.MissingRefError = error_classes_1.MissingRefError;
    function checkOptions(checkOpts, options, msg, log = "error") {
      for (const key in checkOpts) {
        const opt = key;
        if (opt in options)
          this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
      }
    }
    function getSchEnv(keyRef) {
      keyRef = resolve_1.normalizeId(keyRef);
      return this.schemas[keyRef] || this.refs[keyRef];
    }
    function addInitialSchemas() {
      const optsSchemas = this.opts.schemas;
      if (!optsSchemas)
        return;
      if (Array.isArray(optsSchemas))
        this.addSchema(optsSchemas);
      else
        for (const key in optsSchemas)
          this.addSchema(optsSchemas[key], key);
    }
    function addInitialFormats() {
      for (const name in this.opts.formats) {
        const format = this.opts.formats[name];
        if (format)
          this.addFormat(name, format);
      }
    }
    function addInitialKeywords(defs) {
      if (Array.isArray(defs)) {
        this.addVocabulary(defs);
        return;
      }
      this.logger.warn("keywords option as map is deprecated, pass array");
      for (const keyword in defs) {
        const def = defs[keyword];
        if (!def.keyword)
          def.keyword = keyword;
        this.addKeyword(def);
      }
    }
    function getMetaSchemaOptions() {
      const metaOpts = { ...this.opts };
      for (const opt of META_IGNORE_OPTIONS)
        delete metaOpts[opt];
      return metaOpts;
    }
    var noLogs = { log() {
    }, warn() {
    }, error() {
    } };
    function getLogger(logger) {
      if (logger === false)
        return noLogs;
      if (logger === void 0)
        return console;
      if (logger.log && logger.warn && logger.error)
        return logger;
      throw new Error("logger must implement log, warn and error methods");
    }
    var KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
    function checkKeyword(keyword, def) {
      const { RULES } = this;
      util_1.eachItem(keyword, (kwd) => {
        if (RULES.keywords[kwd])
          throw new Error(`Keyword ${kwd} is already defined`);
        if (!KEYWORD_NAME.test(kwd))
          throw new Error(`Keyword ${kwd} has invalid name`);
      });
      if (!def)
        return;
      if (def.$data && !("code" in def || "validate" in def)) {
        throw new Error('$data keyword must have "code" or "validate" function');
      }
    }
    function addRule(keyword, definition, dataType) {
      var _a;
      const post = definition === null || definition === void 0 ? void 0 : definition.post;
      if (dataType && post)
        throw new Error('keyword with "post" flag cannot have "type"');
      const { RULES } = this;
      let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);
      if (!ruleGroup) {
        ruleGroup = { type: dataType, rules: [] };
        RULES.rules.push(ruleGroup);
      }
      RULES.keywords[keyword] = true;
      if (!definition)
        return;
      const rule = {
        keyword,
        definition: {
          ...definition,
          type: dataType_1.getJSONTypes(definition.type),
          schemaType: dataType_1.getJSONTypes(definition.schemaType)
        }
      };
      if (definition.before)
        addBeforeRule.call(this, ruleGroup, rule, definition.before);
      else
        ruleGroup.rules.push(rule);
      RULES.all[keyword] = rule;
      (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));
    }
    function addBeforeRule(ruleGroup, rule, before) {
      const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
      if (i >= 0) {
        ruleGroup.rules.splice(i, 0, rule);
      } else {
        ruleGroup.rules.push(rule);
        this.logger.warn(`rule ${before} is not defined`);
      }
    }
    function keywordMetaschema(def) {
      let { metaSchema } = def;
      if (metaSchema === void 0)
        return;
      if (def.$data && this.opts.$data)
        metaSchema = schemaOrData(metaSchema);
      def.validateSchema = this.compile(metaSchema, true);
    }
    var $dataRef = {
      $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
    };
    function schemaOrData(schema) {
      return { anyOf: [schema, $dataRef] };
    }
  }
});

// node_modules/ajv/dist/vocabularies/core/id.js
var require_id = __commonJS({
  "node_modules/ajv/dist/vocabularies/core/id.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var def = {
      keyword: "id",
      code() {
        throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/core/ref.js
var require_ref = __commonJS({
  "node_modules/ajv/dist/vocabularies/core/ref.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.callRef = exports.getValidate = void 0;
    var error_classes_1 = require_error_classes();
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var compile_1 = require_compile();
    var util_1 = require_util();
    var def = {
      keyword: "$ref",
      schemaType: "string",
      code(cxt) {
        const { gen, schema, it } = cxt;
        const { baseId, schemaEnv: env, validateName, opts, self: self2 } = it;
        if (schema === "#" || schema === "#/")
          return callRootRef();
        const schOrEnv = compile_1.resolveRef.call(self2, env.root, baseId, schema);
        if (schOrEnv === void 0)
          throw new error_classes_1.MissingRefError(baseId, schema);
        if (schOrEnv instanceof compile_1.SchemaEnv)
          return callValidate(schOrEnv);
        return inlineRefSchema(schOrEnv);
        function callRootRef() {
          if (env === env.root)
            return callRef(cxt, validateName, env, env.$async);
          const rootName = gen.scopeValue("root", { ref: env.root });
          return callRef(cxt, codegen_1._`${rootName}.validate`, env.root, env.root.$async);
        }
        function callValidate(sch) {
          const v = getValidate(cxt, sch);
          callRef(cxt, v, sch, sch.$async);
        }
        function inlineRefSchema(sch) {
          const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: codegen_1.stringify(sch) } : { ref: sch });
          const valid = gen.name("valid");
          const schCxt = cxt.subschema({
            schema: sch,
            dataTypes: [],
            schemaPath: codegen_1.nil,
            topSchemaRef: schName,
            errSchemaPath: schema
          }, valid);
          cxt.mergeEvaluated(schCxt);
          cxt.ok(valid);
        }
      }
    };
    function getValidate(cxt, sch) {
      const { gen } = cxt;
      return sch.validate ? gen.scopeValue("validate", { ref: sch.validate }) : codegen_1._`${gen.scopeValue("wrapper", { ref: sch })}.validate`;
    }
    exports.getValidate = getValidate;
    function callRef(cxt, v, sch, $async) {
      const { gen, it } = cxt;
      const { allErrors, schemaEnv: env, opts } = it;
      const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
      if ($async)
        callAsyncRef();
      else
        callSyncRef();
      function callAsyncRef() {
        if (!env.$async)
          throw new Error("async schema referenced by sync schema");
        const valid = gen.let("valid");
        gen.try(() => {
          gen.code(codegen_1._`await ${code_1.callValidateCode(cxt, v, passCxt)}`);
          addEvaluatedFrom(v);
          if (!allErrors)
            gen.assign(valid, true);
        }, (e) => {
          gen.if(codegen_1._`!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
          addErrorsFrom(e);
          if (!allErrors)
            gen.assign(valid, false);
        });
        cxt.ok(valid);
      }
      function callSyncRef() {
        cxt.result(code_1.callValidateCode(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
      }
      function addErrorsFrom(source) {
        const errs = codegen_1._`${source}.errors`;
        gen.assign(names_1.default.vErrors, codegen_1._`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`);
        gen.assign(names_1.default.errors, codegen_1._`${names_1.default.vErrors}.length`);
      }
      function addEvaluatedFrom(source) {
        var _a;
        if (!it.opts.unevaluated)
          return;
        const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
        if (it.props !== true) {
          if (schEvaluated && !schEvaluated.dynamicProps) {
            if (schEvaluated.props !== void 0) {
              it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
            }
          } else {
            const props = gen.var("props", codegen_1._`${source}.evaluated.props`);
            it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
          }
        }
        if (it.items !== true) {
          if (schEvaluated && !schEvaluated.dynamicItems) {
            if (schEvaluated.items !== void 0) {
              it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
            }
          } else {
            const items = gen.var("items", codegen_1._`${source}.evaluated.items`);
            it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
          }
        }
      }
    }
    exports.callRef = callRef;
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/core/index.js
var require_core2 = __commonJS({
  "node_modules/ajv/dist/vocabularies/core/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var id_1 = require_id();
    var ref_1 = require_ref();
    var core = [
      "$schema",
      "$id",
      "$defs",
      "$vocabulary",
      { keyword: "$comment" },
      "definitions",
      id_1.default,
      ref_1.default
    ];
    exports.default = core;
  }
});

// node_modules/ajv/dist/vocabularies/validation/limitNumber.js
var require_limitNumber = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/limitNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var ops = codegen_1.operators;
    var KWDs = {
      maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
      minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
      exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
      exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE }
    };
    var error = {
      message: ({ keyword, schemaCode }) => codegen_1.str`should be ${KWDs[keyword].okStr} ${schemaCode}`,
      params: ({ keyword, schemaCode }) => codegen_1._`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
    };
    var def = {
      keyword: Object.keys(KWDs),
      type: "number",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        cxt.fail$data(codegen_1._`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/multipleOf.js
var require_multipleOf = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/multipleOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message: ({ schemaCode }) => codegen_1.str`should be multiple of ${schemaCode}`,
      params: ({ schemaCode }) => codegen_1._`{multipleOf: ${schemaCode}}`
    };
    var def = {
      keyword: "multipleOf",
      type: "number",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { gen, data, schemaCode, it } = cxt;
        const prec = it.opts.multipleOfPrecision;
        const res = gen.let("res");
        const invalid = prec ? codegen_1._`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : codegen_1._`${res} !== parseInt(${res})`;
        cxt.fail$data(codegen_1._`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/compile/ucs2length.js
var require_ucs2length = __commonJS({
  "node_modules/ajv/dist/compile/ucs2length.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function ucs2length(str) {
      const len = str.length;
      let length = 0;
      let pos = 0;
      let value;
      while (pos < len) {
        length++;
        value = str.charCodeAt(pos++);
        if (value >= 55296 && value <= 56319 && pos < len) {
          value = str.charCodeAt(pos);
          if ((value & 64512) === 56320)
            pos++;
        }
      }
      return length;
    }
    exports.default = ucs2length;
  }
});

// node_modules/ajv/dist/vocabularies/validation/limitLength.js
var require_limitLength = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/limitLength.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var ucs2length_1 = require_ucs2length();
    var error = {
      message({ keyword, schemaCode }) {
        const comp = keyword === "maxLength" ? "more" : "fewer";
        return codegen_1.str`should NOT have ${comp} than ${schemaCode} characters`;
      },
      params: ({ schemaCode }) => codegen_1._`{limit: ${schemaCode}}`
    };
    var def = {
      keyword: ["maxLength", "minLength"],
      type: "string",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode, it } = cxt;
        const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
        let len;
        if (it.opts.unicode === false) {
          len = codegen_1._`${data}.length`;
        } else {
          const u2l = cxt.gen.scopeValue("func", {
            ref: ucs2length_1.default,
            code: codegen_1._`require("ajv/dist/compile/ucs2length").default`
          });
          len = codegen_1._`${u2l}(${data})`;
        }
        cxt.fail$data(codegen_1._`${len} ${op} ${schemaCode}`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/pattern.js
var require_pattern = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/pattern.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var error = {
      message: ({ schemaCode }) => codegen_1.str`should match pattern "${schemaCode}"`,
      params: ({ schemaCode }) => codegen_1._`{pattern: ${schemaCode}}`
    };
    var def = {
      keyword: "pattern",
      type: "string",
      schemaType: "string",
      $data: true,
      error,
      code(cxt) {
        const { gen, data, $data, schema, schemaCode } = cxt;
        const regExp = $data ? codegen_1._`(new RegExp(${schemaCode}, "u"))` : code_1.usePattern(gen, schema);
        cxt.fail$data(codegen_1._`!${regExp}.test(${data})`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/limitProperties.js
var require_limitProperties = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/limitProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message({ keyword, schemaCode }) {
        const comp = keyword === "maxProperties" ? "more" : "fewer";
        return codegen_1.str`should NOT have ${comp} than ${schemaCode} items`;
      },
      params: ({ schemaCode }) => codegen_1._`{limit: ${schemaCode}}`
    };
    var def = {
      keyword: ["maxProperties", "minProperties"],
      type: "object",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
        cxt.fail$data(codegen_1._`Object.keys(${data}).length ${op} ${schemaCode}`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/required.js
var require_required = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/required.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var error = {
      message: ({ params: { missingProperty } }) => codegen_1.str`should have required property '${missingProperty}'`,
      params: ({ params: { missingProperty } }) => codegen_1._`{missingProperty: ${missingProperty}}`
    };
    var def = {
      keyword: "required",
      type: "object",
      schemaType: "array",
      $data: true,
      error,
      code(cxt) {
        const { gen, schema, schemaCode, data, $data, it } = cxt;
        const { opts } = it;
        if (!$data && schema.length === 0)
          return;
        const useLoop = schema.length >= opts.loopRequired;
        if (it.allErrors)
          allErrorsMode();
        else
          exitOnErrorMode();
        function allErrorsMode() {
          if (useLoop || $data) {
            cxt.block$data(codegen_1.nil, loopAllRequired);
          } else {
            for (const prop of schema) {
              code_1.checkReportMissingProp(cxt, prop);
            }
          }
        }
        function exitOnErrorMode() {
          const missing = gen.let("missing");
          if (useLoop || $data) {
            const valid = gen.let("valid", true);
            cxt.block$data(valid, () => loopUntilMissing(missing, valid));
            cxt.ok(valid);
          } else {
            gen.if(code_1.checkMissingProp(cxt, schema, missing));
            code_1.reportMissingProp(cxt, missing);
            gen.else();
          }
        }
        function loopAllRequired() {
          gen.forOf("prop", schemaCode, (prop) => {
            cxt.setParams({ missingProperty: prop });
            gen.if(code_1.noPropertyInData(data, prop, opts.ownProperties), () => cxt.error());
          });
        }
        function loopUntilMissing(missing, valid) {
          cxt.setParams({ missingProperty: missing });
          gen.forOf(missing, schemaCode, () => {
            gen.assign(valid, code_1.propertyInData(data, missing, opts.ownProperties));
            gen.if(codegen_1.not(valid), () => {
              cxt.error();
              gen.break();
            });
          }, codegen_1.nil);
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/limitItems.js
var require_limitItems = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/limitItems.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message({ keyword, schemaCode }) {
        const comp = keyword === "maxItems" ? "more" : "fewer";
        return codegen_1.str`should NOT have ${comp} than ${schemaCode} items`;
      },
      params: ({ schemaCode }) => codegen_1._`{limit: ${schemaCode}}`
    };
    var def = {
      keyword: ["maxItems", "minItems"],
      type: "array",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
        cxt.fail$data(codegen_1._`${data}.length ${op} ${schemaCode}`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/uniqueItems.js
var require_uniqueItems = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/uniqueItems.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var dataType_1 = require_dataType();
    var codegen_1 = require_codegen();
    var equal = require_fast_deep_equal();
    var error = {
      message: ({ params: { i, j } }) => codegen_1.str`should NOT have duplicate items (items ## ${j} and ${i} are identical)`,
      params: ({ params: { i, j } }) => codegen_1._`{i: ${i}, j: ${j}}`
    };
    var def = {
      keyword: "uniqueItems",
      type: "array",
      schemaType: "boolean",
      $data: true,
      error,
      code(cxt) {
        const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
        if (!$data && !schema)
          return;
        const valid = gen.let("valid");
        const itemTypes = parentSchema.items ? dataType_1.getSchemaTypes(parentSchema.items) : [];
        cxt.block$data(valid, validateUniqueItems, codegen_1._`${schemaCode} === false`);
        cxt.ok(valid);
        function validateUniqueItems() {
          const i = gen.let("i", codegen_1._`${data}.length`);
          const j = gen.let("j");
          cxt.setParams({ i, j });
          gen.assign(valid, true);
          gen.if(codegen_1._`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
        }
        function canOptimize() {
          return itemTypes.length > 0 && !itemTypes.some((t) => t === "object" || t === "array");
        }
        function loopN(i, j) {
          const item = gen.name("item");
          const wrongType = dataType_1.checkDataTypes(itemTypes, item, it.opts.strict, dataType_1.DataType.Wrong);
          const indices = gen.const("indices", codegen_1._`{}`);
          gen.for(codegen_1._`;${i}--;`, () => {
            gen.let(item, codegen_1._`${data}[${i}]`);
            gen.if(wrongType, codegen_1._`continue`);
            if (itemTypes.length > 1)
              gen.if(codegen_1._`typeof ${item} == "string"`, codegen_1._`${item} += "_"`);
            gen.if(codegen_1._`typeof ${indices}[${item}] == "number"`, () => {
              gen.assign(j, codegen_1._`${indices}[${item}]`);
              cxt.error();
              gen.assign(valid, false).break();
            }).code(codegen_1._`${indices}[${item}] = ${i}`);
          });
        }
        function loopN2(i, j) {
          const eql = cxt.gen.scopeValue("func", {
            ref: equal,
            code: codegen_1._`require("ajv/dist/compile/equal")`
          });
          const outer = gen.name("outer");
          gen.label(outer).for(codegen_1._`;${i}--;`, () => gen.for(codegen_1._`${j} = ${i}; ${j}--;`, () => gen.if(codegen_1._`${eql}(${data}[${i}], ${data}[${j}])`, () => {
            cxt.error();
            gen.assign(valid, false).break(outer);
          })));
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/const.js
var require_const = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/const.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var equal = require_fast_deep_equal();
    var error = {
      message: "should be equal to constant",
      params: ({ schemaCode }) => codegen_1._`{allowedValue: ${schemaCode}}`
    };
    var def = {
      keyword: "const",
      $data: true,
      error,
      code(cxt) {
        const eql = cxt.gen.scopeValue("func", {
          ref: equal,
          code: codegen_1._`require("ajv/dist/compile/equal")`
        });
        cxt.fail$data(codegen_1._`!${eql}(${cxt.data}, ${cxt.schemaCode})`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/enum.js
var require_enum = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/enum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var equal = require_fast_deep_equal();
    var error = {
      message: "should be equal to one of the allowed values",
      params: ({ schemaCode }) => codegen_1._`{allowedValues: ${schemaCode}}`
    };
    var def = {
      keyword: "enum",
      schemaType: "array",
      $data: true,
      error,
      code(cxt) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        if (!$data && schema.length === 0)
          throw new Error("enum must have non-empty array");
        const useLoop = schema.length >= it.opts.loopEnum;
        const eql = cxt.gen.scopeValue("func", {
          ref: equal,
          code: codegen_1._`require("ajv/dist/compile/equal")`
        });
        let valid;
        if (useLoop || $data) {
          valid = gen.let("valid");
          cxt.block$data(valid, loopEnum);
        } else {
          if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
          const vSchema = gen.const("vSchema", schemaCode);
          valid = codegen_1.or(...schema.map((_x, i) => equalCode(vSchema, i)));
        }
        cxt.pass(valid);
        function loopEnum() {
          gen.assign(valid, false);
          gen.forOf("v", schemaCode, (v) => gen.if(codegen_1._`${eql}(${data}, ${v})`, () => gen.assign(valid, true).break()));
        }
        function equalCode(vSchema, i) {
          const sch = schema[i];
          return sch && typeof sch === "object" ? codegen_1._`${eql}(${data}, ${vSchema}[${i}])` : codegen_1._`${data} === ${sch}`;
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/validation/index.js
var require_validation = __commonJS({
  "node_modules/ajv/dist/vocabularies/validation/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var limitNumber_1 = require_limitNumber();
    var multipleOf_1 = require_multipleOf();
    var limitLength_1 = require_limitLength();
    var pattern_1 = require_pattern();
    var limitProperties_1 = require_limitProperties();
    var required_1 = require_required();
    var limitItems_1 = require_limitItems();
    var uniqueItems_1 = require_uniqueItems();
    var const_1 = require_const();
    var enum_1 = require_enum();
    var validation = [
      // number
      limitNumber_1.default,
      multipleOf_1.default,
      // string
      limitLength_1.default,
      pattern_1.default,
      // object
      limitProperties_1.default,
      required_1.default,
      // array
      limitItems_1.default,
      uniqueItems_1.default,
      // any
      { keyword: "type", schemaType: ["string", "array"] },
      { keyword: "nullable", schemaType: "boolean" },
      const_1.default,
      enum_1.default
    ];
    exports.default = validation;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/additionalItems.js
var require_additionalItems = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/additionalItems.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var subschema_1 = require_subschema();
    var util_1 = require_util();
    var validate_1 = require_validate();
    var error = {
      message: ({ params: { len } }) => codegen_1.str`should NOT have more than ${len} items`,
      params: ({ params: { len } }) => codegen_1._`{limit: ${len}}`
    };
    var def = {
      keyword: "additionalItems",
      type: "array",
      schemaType: ["boolean", "object"],
      before: "uniqueItems",
      error,
      code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        const { items } = parentSchema;
        if (!Array.isArray(items)) {
          validate_1.checkStrictMode(it, '"additionalItems" is ignored when "items" is not an array of schemas');
          return;
        }
        it.items = true;
        const len = gen.const("len", codegen_1._`${data}.length`);
        if (schema === false) {
          cxt.setParams({ len: items.length });
          cxt.pass(codegen_1._`${len} <= ${items.length}`);
        } else if (typeof schema == "object" && !util_1.alwaysValidSchema(it, schema)) {
          const valid = gen.var("valid", codegen_1._`${len} <= ${items.length}`);
          gen.if(codegen_1.not(valid), () => validateItems(valid));
          cxt.ok(valid);
        }
        function validateItems(valid) {
          gen.forRange("i", items.length, len, (i) => {
            cxt.subschema({ keyword: "additionalItems", dataProp: i, dataPropType: subschema_1.Type.Num }, valid);
            if (!it.allErrors)
              gen.if(codegen_1.not(valid), () => gen.break());
          });
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/items.js
var require_items = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/items.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var validate_1 = require_validate();
    var code_1 = require_code2();
    var def = {
      keyword: "items",
      type: "array",
      schemaType: ["object", "array", "boolean"],
      before: "uniqueItems",
      code(cxt) {
        const { gen, schema, it } = cxt;
        if (Array.isArray(schema)) {
          if (it.opts.unevaluated && schema.length && it.items !== true) {
            it.items = util_1.mergeEvaluated.items(gen, schema.length, it.items);
          }
          validateTuple(schema);
        } else {
          it.items = true;
          if (util_1.alwaysValidSchema(it, schema))
            return;
          cxt.ok(code_1.validateArray(cxt));
        }
        function validateTuple(schArr) {
          const { parentSchema, data } = cxt;
          if (it.opts.strictTuples && !fullTupleSchema(schArr.length, parentSchema)) {
            const msg = `"items" is ${schArr.length}-tuple, but minItems or maxItems/additionalItems are not specified or different`;
            validate_1.checkStrictMode(it, msg, it.opts.strictTuples);
          }
          const valid = gen.name("valid");
          const len = gen.const("len", codegen_1._`${data}.length`);
          schArr.forEach((sch, i) => {
            if (util_1.alwaysValidSchema(it, sch))
              return;
            gen.if(codegen_1._`${len} > ${i}`, () => cxt.subschema({
              keyword: "items",
              schemaProp: i,
              dataProp: i
            }, valid));
            cxt.ok(valid);
          });
        }
      }
    };
    function fullTupleSchema(len, sch) {
      return len === sch.minItems && (len === sch.maxItems || sch.additionalItems === false);
    }
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/contains.js
var require_contains = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/contains.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var subschema_1 = require_subschema();
    var util_1 = require_util();
    var validate_1 = require_validate();
    var error = {
      message: ({ params: { min, max } }) => max === void 0 ? codegen_1.str`should contain at least ${min} valid item(s)` : codegen_1.str`should contain at least ${min} and no more than ${max} valid item(s)`,
      params: ({ params: { min, max } }) => max === void 0 ? codegen_1._`{minContains: ${min}}` : codegen_1._`{minContains: ${min}, maxContains: ${max}}`
    };
    var def = {
      keyword: "contains",
      type: "array",
      schemaType: ["object", "boolean"],
      before: "uniqueItems",
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        let min;
        let max;
        const { minContains, maxContains } = parentSchema;
        if (it.opts.next) {
          min = minContains === void 0 ? 1 : minContains;
          max = maxContains;
        } else {
          min = 1;
        }
        const len = gen.const("len", codegen_1._`${data}.length`);
        cxt.setParams({ min, max });
        if (max === void 0 && min === 0) {
          validate_1.checkStrictMode(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
          return;
        }
        if (max !== void 0 && min > max) {
          validate_1.checkStrictMode(it, `"minContains" > "maxContains" is always invalid`);
          cxt.fail();
          return;
        }
        if (util_1.alwaysValidSchema(it, schema)) {
          let cond = codegen_1._`${len} >= ${min}`;
          if (max !== void 0)
            cond = codegen_1._`${cond} && ${len} <= ${max}`;
          cxt.pass(cond);
          return;
        }
        it.items = true;
        const valid = gen.name("valid");
        if (max === void 0 && min === 1) {
          validateItems(valid, () => gen.if(valid, () => gen.break()));
        } else {
          gen.let(valid, false);
          const schValid = gen.name("_valid");
          const count = gen.let("count", 0);
          validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
        }
        cxt.result(valid, () => cxt.reset());
        function validateItems(_valid, block) {
          gen.forRange("i", 0, len, (i) => {
            cxt.subschema({
              keyword: "contains",
              dataProp: i,
              dataPropType: subschema_1.Type.Num,
              compositeRule: true
            }, _valid);
            block();
          });
        }
        function checkLimits(count) {
          gen.code(codegen_1._`${count}++`);
          if (max === void 0) {
            gen.if(codegen_1._`${count} >= ${min}`, () => gen.assign(valid, true).break());
          } else {
            gen.if(codegen_1._`${count} > ${max}`, () => gen.assign(valid, false).break());
            if (min === 1)
              gen.assign(valid, true);
            else
              gen.if(codegen_1._`${count} >= ${min}`, () => gen.assign(valid, true));
          }
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/dependencies.js
var require_dependencies = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/dependencies.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var code_1 = require_code2();
    exports.error = {
      message: ({ params: { property, depsCount, deps } }) => {
        const property_ies = depsCount === 1 ? "property" : "properties";
        return codegen_1.str`should have ${property_ies} ${deps} when property ${property} is present`;
      },
      params: ({ params: { property, depsCount, deps, missingProperty } }) => codegen_1._`{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`
    };
    var def = {
      keyword: "dependencies",
      type: "object",
      schemaType: "object",
      error: exports.error,
      code(cxt) {
        const [propDeps, schDeps] = splitDependencies(cxt);
        validatePropertyDeps(cxt, propDeps);
        validateSchemaDeps(cxt, schDeps);
      }
    };
    function splitDependencies({ schema }) {
      const propertyDeps = {};
      const schemaDeps = {};
      for (const key in schema) {
        if (key === "__proto__")
          continue;
        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
        deps[key] = schema[key];
      }
      return [propertyDeps, schemaDeps];
    }
    function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
      const { gen, data, it } = cxt;
      if (Object.keys(propertyDeps).length === 0)
        return;
      const missing = gen.let("missing");
      for (const prop in propertyDeps) {
        const deps = propertyDeps[prop];
        if (deps.length === 0)
          continue;
        const hasProperty = code_1.propertyInData(data, prop, it.opts.ownProperties);
        cxt.setParams({
          property: prop,
          depsCount: deps.length,
          deps: deps.join(", ")
        });
        if (it.allErrors) {
          gen.if(hasProperty, () => {
            for (const depProp of deps) {
              code_1.checkReportMissingProp(cxt, depProp);
            }
          });
        } else {
          gen.if(codegen_1._`${hasProperty} && (${code_1.checkMissingProp(cxt, deps, missing)})`);
          code_1.reportMissingProp(cxt, missing);
          gen.else();
        }
      }
    }
    exports.validatePropertyDeps = validatePropertyDeps;
    function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
      const { gen, data, keyword, it } = cxt;
      const valid = gen.name("valid");
      for (const prop in schemaDeps) {
        if (util_1.alwaysValidSchema(it, schemaDeps[prop]))
          continue;
        gen.if(
          code_1.propertyInData(data, prop, it.opts.ownProperties),
          () => {
            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
            cxt.mergeValidEvaluated(schCxt, valid);
          },
          () => gen.var(valid, true)
          // TODO var
        );
        cxt.ok(valid);
      }
    }
    exports.validateSchemaDeps = validateSchemaDeps;
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/propertyNames.js
var require_propertyNames = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/propertyNames.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var error = {
      message: ({ params }) => codegen_1.str`property name '${params.propertyName}' is invalid`,
      params: ({ params }) => codegen_1._`{propertyName: ${params.propertyName}}`
    };
    var def = {
      keyword: "propertyNames",
      type: "object",
      schemaType: ["object", "boolean"],
      error,
      code(cxt) {
        const { gen, schema, data, it } = cxt;
        if (util_1.alwaysValidSchema(it, schema))
          return;
        const valid = gen.name("valid");
        gen.forIn("key", data, (key) => {
          cxt.setParams({ propertyName: key });
          cxt.subschema({
            keyword: "propertyNames",
            data: key,
            dataTypes: ["string"],
            propertyName: key,
            compositeRule: true
          }, valid);
          gen.if(codegen_1.not(valid), () => {
            cxt.error(true);
            if (!it.allErrors)
              gen.break();
          });
        });
        cxt.ok(valid);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js
var require_additionalProperties = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var subschema_1 = require_subschema();
    var util_1 = require_util();
    var error = {
      message: "should NOT have additional properties",
      params: ({ params }) => codegen_1._`{additionalProperty: ${params.additionalProperty}}`
    };
    var def = {
      keyword: "additionalProperties",
      type: ["object"],
      schemaType: ["boolean", "object"],
      allowUndefined: true,
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, schema, parentSchema, data, errsCount, it } = cxt;
        if (!errsCount)
          throw new Error("ajv implementation error");
        const { allErrors, opts } = it;
        it.props = true;
        if (opts.removeAdditional !== "all" && util_1.alwaysValidSchema(it, schema))
          return;
        const props = code_1.allSchemaProperties(parentSchema.properties);
        const patProps = code_1.allSchemaProperties(parentSchema.patternProperties);
        checkAdditionalProperties();
        cxt.ok(codegen_1._`${errsCount} === ${names_1.default.errors}`);
        function checkAdditionalProperties() {
          gen.forIn("key", data, (key) => {
            if (!props.length && !patProps.length)
              additionalPropertyCode(key);
            else
              gen.if(isAdditional(key), () => additionalPropertyCode(key));
          });
        }
        function isAdditional(key) {
          let definedProp;
          if (props.length > 8) {
            const hasProp = gen.scopeValue("func", {
              // eslint-disable-next-line @typescript-eslint/unbound-method
              ref: Object.prototype.hasOwnProperty,
              code: codegen_1._`Object.prototype.hasOwnProperty`
            });
            const propsSchema = util_1.schemaRefOrVal(it, parentSchema.properties, "properties");
            definedProp = codegen_1._`${hasProp}.call(${propsSchema}, ${key})`;
          } else if (props.length) {
            definedProp = codegen_1.or(...props.map((p) => codegen_1._`${key} === ${p}`));
          } else {
            definedProp = codegen_1.nil;
          }
          if (patProps.length) {
            definedProp = codegen_1.or(definedProp, ...patProps.map((p) => codegen_1._`${code_1.usePattern(gen, p)}.test(${key})`));
          }
          return codegen_1.not(definedProp);
        }
        function deleteAdditional(key) {
          gen.code(codegen_1._`delete ${data}[${key}]`);
        }
        function additionalPropertyCode(key) {
          if (opts.removeAdditional === "all" || opts.removeAdditional && schema === false) {
            deleteAdditional(key);
            return;
          }
          if (schema === false) {
            cxt.setParams({ additionalProperty: key });
            cxt.error();
            if (!allErrors)
              gen.break();
            return;
          }
          if (typeof schema == "object" && !util_1.alwaysValidSchema(it, schema)) {
            const valid = gen.name("valid");
            if (opts.removeAdditional === "failing") {
              applyAdditionalSchema(key, valid, false);
              gen.if(codegen_1.not(valid), () => {
                cxt.reset();
                deleteAdditional(key);
              });
            } else {
              applyAdditionalSchema(key, valid);
              if (!allErrors)
                gen.if(codegen_1.not(valid), () => gen.break());
            }
          }
        }
        function applyAdditionalSchema(key, valid, errors) {
          const subschema = {
            keyword: "additionalProperties",
            dataProp: key,
            dataPropType: subschema_1.Type.Str
          };
          if (errors === false) {
            Object.assign(subschema, {
              compositeRule: true,
              createErrors: false,
              allErrors: false
            });
          }
          cxt.subschema(subschema, valid);
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/properties.js
var require_properties = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/properties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var context_1 = require_context();
    var code_1 = require_code2();
    var util_1 = require_util();
    var additionalProperties_1 = require_additionalProperties();
    var def = {
      keyword: "properties",
      type: "object",
      schemaType: "object",
      code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === void 0) {
          additionalProperties_1.default.code(new context_1.default(it, additionalProperties_1.default, "additionalProperties"));
        }
        const allProps = code_1.allSchemaProperties(schema);
        if (it.opts.unevaluated && allProps.length && it.props !== true) {
          it.props = util_1.mergeEvaluated.props(gen, util_1.toHash(allProps), it.props);
        }
        const properties = allProps.filter((p) => !util_1.alwaysValidSchema(it, schema[p]));
        if (properties.length === 0)
          return;
        const valid = gen.name("valid");
        for (const prop of properties) {
          if (hasDefault(prop)) {
            applyPropertySchema(prop);
          } else {
            gen.if(code_1.propertyInData(data, prop, it.opts.ownProperties));
            applyPropertySchema(prop);
            if (!it.allErrors)
              gen.else().var(valid, true);
            gen.endIf();
          }
          cxt.ok(valid);
        }
        function hasDefault(prop) {
          return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== void 0;
        }
        function applyPropertySchema(prop) {
          cxt.subschema({
            keyword: "properties",
            schemaProp: prop,
            dataProp: prop
          }, valid);
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/patternProperties.js
var require_patternProperties = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/patternProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var subschema_1 = require_subschema();
    var validate_1 = require_validate();
    var util_1 = require_util();
    var def = {
      keyword: "patternProperties",
      type: "object",
      schemaType: "object",
      code(cxt) {
        const { gen, schema, data, parentSchema, it } = cxt;
        const { opts } = it;
        const patterns = code_1.schemaProperties(it, schema);
        if (patterns.length === 0)
          return;
        const checkProperties = opts.strict && !opts.allowMatchingProperties && parentSchema.properties;
        const valid = gen.name("valid");
        if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
          it.props = util_1.evaluatedPropsToName(gen, it.props);
        }
        const { props } = it;
        validatePatternProperties();
        function validatePatternProperties() {
          for (const pat of patterns) {
            if (checkProperties)
              checkMatchingProperties(pat);
            if (it.allErrors) {
              validateProperties(pat);
            } else {
              gen.var(valid, true);
              validateProperties(pat);
              gen.if(valid);
            }
          }
        }
        function checkMatchingProperties(pat) {
          for (const prop in checkProperties) {
            if (new RegExp(pat).test(prop)) {
              validate_1.checkStrictMode(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
            }
          }
        }
        function validateProperties(pat) {
          gen.forIn("key", data, (key) => {
            gen.if(codegen_1._`${code_1.usePattern(gen, pat)}.test(${key})`, () => {
              cxt.subschema({
                keyword: "patternProperties",
                schemaProp: pat,
                dataProp: key,
                dataPropType: subschema_1.Type.Str
              }, valid);
              if (it.opts.unevaluated && props !== true) {
                gen.assign(codegen_1._`${props}[${key}]`, true);
              } else if (!it.allErrors) {
                gen.if(codegen_1.not(valid), () => gen.break());
              }
            });
          });
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/not.js
var require_not = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/not.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util_1 = require_util();
    var def = {
      keyword: "not",
      schemaType: ["object", "boolean"],
      trackErrors: true,
      code(cxt) {
        const { gen, schema, it } = cxt;
        if (util_1.alwaysValidSchema(it, schema)) {
          cxt.fail();
          return;
        }
        const valid = gen.name("valid");
        cxt.subschema({
          keyword: "not",
          compositeRule: true,
          createErrors: false,
          allErrors: false
        }, valid);
        cxt.result(valid, () => cxt.error(), () => cxt.reset());
      },
      error: {
        message: "should NOT be valid"
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/anyOf.js
var require_anyOf = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/anyOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var def = {
      keyword: "anyOf",
      schemaType: "array",
      trackErrors: true,
      code: code_1.validateUnion,
      error: {
        message: "should match some schema in anyOf"
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/oneOf.js
var require_oneOf = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/oneOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var error = {
      message: "should match exactly one schema in oneOf",
      params: ({ params }) => codegen_1._`{passingSchemas: ${params.passing}}`
    };
    var def = {
      keyword: "oneOf",
      schemaType: "array",
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, schema, it } = cxt;
        if (!Array.isArray(schema))
          throw new Error("ajv implementation error");
        const schArr = schema;
        const valid = gen.let("valid", false);
        const passing = gen.let("passing", null);
        const schValid = gen.name("_valid");
        cxt.setParams({ passing });
        gen.block(validateOneOf);
        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
        function validateOneOf() {
          schArr.forEach((sch, i) => {
            let schCxt;
            if (util_1.alwaysValidSchema(it, sch)) {
              gen.var(schValid, true);
            } else {
              schCxt = cxt.subschema({
                keyword: "oneOf",
                schemaProp: i,
                compositeRule: true
              }, schValid);
            }
            if (i > 0) {
              gen.if(codegen_1._`${schValid} && ${valid}`).assign(valid, false).assign(passing, codegen_1._`[${passing}, ${i}]`).else();
            }
            gen.if(schValid, () => {
              gen.assign(valid, true);
              gen.assign(passing, i);
              if (schCxt)
                cxt.mergeEvaluated(schCxt, codegen_1.Name);
            });
          });
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/allOf.js
var require_allOf = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/allOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util_1 = require_util();
    var def = {
      keyword: "allOf",
      schemaType: "array",
      code(cxt) {
        const { gen, schema, it } = cxt;
        if (!Array.isArray(schema))
          throw new Error("ajv implementation error");
        const valid = gen.name("valid");
        schema.forEach((sch, i) => {
          if (util_1.alwaysValidSchema(it, sch))
            return;
          const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i }, valid);
          cxt.ok(valid);
          cxt.mergeEvaluated(schCxt);
        });
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/if.js
var require_if = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/if.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var validate_1 = require_validate();
    var error = {
      message: ({ params }) => codegen_1.str`should match "${params.ifClause}" schema`,
      params: ({ params }) => codegen_1._`{failingKeyword: ${params.ifClause}}`
    };
    var def = {
      keyword: "if",
      schemaType: ["object", "boolean"],
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, parentSchema, it } = cxt;
        if (parentSchema.then === void 0 && parentSchema.else === void 0) {
          validate_1.checkStrictMode(it, '"if" without "then" and "else" is ignored');
        }
        const hasThen = hasSchema(it, "then");
        const hasElse = hasSchema(it, "else");
        if (!hasThen && !hasElse)
          return;
        const valid = gen.let("valid", true);
        const schValid = gen.name("_valid");
        validateIf();
        cxt.reset();
        if (hasThen && hasElse) {
          const ifClause = gen.let("ifClause");
          cxt.setParams({ ifClause });
          gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
        } else if (hasThen) {
          gen.if(schValid, validateClause("then"));
        } else {
          gen.if(codegen_1.not(schValid), validateClause("else"));
        }
        cxt.pass(valid, () => cxt.error(true));
        function validateIf() {
          const schCxt = cxt.subschema({
            keyword: "if",
            compositeRule: true,
            createErrors: false,
            allErrors: false
          }, schValid);
          cxt.mergeEvaluated(schCxt);
        }
        function validateClause(keyword, ifClause) {
          return () => {
            const schCxt = cxt.subschema({ keyword }, schValid);
            gen.assign(valid, schValid);
            cxt.mergeValidEvaluated(schCxt, valid);
            if (ifClause)
              gen.assign(ifClause, codegen_1._`${keyword}`);
            else
              cxt.setParams({ ifClause: keyword });
          };
        }
      }
    };
    function hasSchema(it, keyword) {
      const schema = it.schema[keyword];
      return schema !== void 0 && !util_1.alwaysValidSchema(it, schema);
    }
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/thenElse.js
var require_thenElse = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/thenElse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var validate_1 = require_validate();
    var def = {
      keyword: ["then", "else"],
      schemaType: ["object", "boolean"],
      code({ keyword, parentSchema, it }) {
        if (parentSchema.if === void 0)
          validate_1.checkStrictMode(it, `"${keyword}" without "if" is ignored`);
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/applicator/index.js
var require_applicator = __commonJS({
  "node_modules/ajv/dist/vocabularies/applicator/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var additionalItems_1 = require_additionalItems();
    var items_1 = require_items();
    var contains_1 = require_contains();
    var dependencies_1 = require_dependencies();
    var propertyNames_1 = require_propertyNames();
    var additionalProperties_1 = require_additionalProperties();
    var properties_1 = require_properties();
    var patternProperties_1 = require_patternProperties();
    var not_1 = require_not();
    var anyOf_1 = require_anyOf();
    var oneOf_1 = require_oneOf();
    var allOf_1 = require_allOf();
    var if_1 = require_if();
    var thenElse_1 = require_thenElse();
    var applicator = [
      // any
      not_1.default,
      anyOf_1.default,
      oneOf_1.default,
      allOf_1.default,
      if_1.default,
      thenElse_1.default,
      // array
      additionalItems_1.default,
      items_1.default,
      contains_1.default,
      // object
      propertyNames_1.default,
      additionalProperties_1.default,
      dependencies_1.default,
      properties_1.default,
      patternProperties_1.default
    ];
    exports.default = applicator;
  }
});

// node_modules/ajv/dist/vocabularies/format/format.js
var require_format = __commonJS({
  "node_modules/ajv/dist/vocabularies/format/format.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message: ({ schemaCode }) => codegen_1.str`should match format "${schemaCode}"`,
      params: ({ schemaCode }) => codegen_1._`{format: ${schemaCode}}`
    };
    var def = {
      keyword: "format",
      type: ["number", "string"],
      schemaType: "string",
      $data: true,
      error,
      code(cxt, ruleType) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        const { opts, errSchemaPath, schemaEnv, self: self2 } = it;
        if (!opts.validateFormats)
          return;
        if ($data)
          validate$DataFormat();
        else
          validateFormat();
        function validate$DataFormat() {
          const fmts = gen.scopeValue("formats", {
            ref: self2.formats,
            code: opts.code.formats
          });
          const fDef = gen.const("fDef", codegen_1._`${fmts}[${schemaCode}]`);
          const fType = gen.let("fType");
          const format = gen.let("format");
          gen.if(codegen_1._`typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, codegen_1._`${fDef}.type || "string"`).assign(format, codegen_1._`${fDef}.validate`), () => gen.assign(fType, codegen_1._`"string"`).assign(format, fDef));
          cxt.fail$data(codegen_1.or(unknownFmt(), invalidFmt()));
          function unknownFmt() {
            if (opts.strict === false)
              return codegen_1.nil;
            return codegen_1._`${schemaCode} && !${format}`;
          }
          function invalidFmt() {
            const callFormat = schemaEnv.$async ? codegen_1._`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))` : codegen_1._`${format}(${data})`;
            const validData = codegen_1._`(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
            return codegen_1._`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
          }
        }
        function validateFormat() {
          const formatDef = self2.formats[schema];
          if (!formatDef) {
            unknownFormat();
            return;
          }
          if (formatDef === true)
            return;
          const [fmtType, format, fmtRef] = getFormat(formatDef);
          if (fmtType === ruleType)
            cxt.pass(validCondition());
          function unknownFormat() {
            if (opts.strict === false) {
              self2.logger.warn(unknownMsg());
              return;
            }
            throw new Error(unknownMsg());
            function unknownMsg() {
              return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
            }
          }
          function getFormat(fmtDef) {
            const fmt = gen.scopeValue("formats", {
              key: schema,
              ref: fmtDef,
              code: opts.code.formats ? codegen_1._`${opts.code.formats}${codegen_1.getProperty(schema)}` : void 0
            });
            if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
              return [fmtDef.type || "string", fmtDef.validate, codegen_1._`${fmt}.validate`];
            }
            return ["string", fmtDef, fmt];
          }
          function validCondition() {
            if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
              if (!schemaEnv.$async)
                throw new Error("async format in sync schema");
              return codegen_1._`await ${fmtRef}(${data})`;
            }
            return typeof format == "function" ? codegen_1._`${fmtRef}(${data})` : codegen_1._`${fmtRef}.test(${data})`;
          }
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/ajv/dist/vocabularies/format/index.js
var require_format2 = __commonJS({
  "node_modules/ajv/dist/vocabularies/format/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var format_1 = require_format();
    var format = [format_1.default];
    exports.default = format;
  }
});

// node_modules/ajv/dist/vocabularies/metadata.js
var require_metadata = __commonJS({
  "node_modules/ajv/dist/vocabularies/metadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.contentVocabulary = exports.metadataVocabulary = void 0;
    exports.metadataVocabulary = [
      "title",
      "description",
      "default",
      "deprecated",
      "readOnly",
      "writeOnly",
      "examples"
    ];
    exports.contentVocabulary = [
      "contentMediaType",
      "contentEncoding",
      "contentSchema"
    ];
  }
});

// node_modules/ajv/dist/vocabularies/draft7.js
var require_draft7 = __commonJS({
  "node_modules/ajv/dist/vocabularies/draft7.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = require_core2();
    var validation_1 = require_validation();
    var applicator_1 = require_applicator();
    var format_1 = require_format2();
    var metadata_1 = require_metadata();
    var draft7Vocabularies = [
      core_1.default,
      validation_1.default,
      applicator_1.default,
      format_1.default,
      metadata_1.metadataVocabulary,
      metadata_1.contentVocabulary
    ];
    exports.default = draft7Vocabularies;
  }
});

// node_modules/ajv/dist/refs/json-schema-draft-07.json
var require_json_schema_draft_07 = __commonJS({
  "node_modules/ajv/dist/refs/json-schema-draft-07.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "http://json-schema.org/draft-07/schema#",
      title: "Core schema meta-schema",
      definitions: {
        schemaArray: {
          type: "array",
          minItems: 1,
          items: { $ref: "#" }
        },
        nonNegativeInteger: {
          type: "integer",
          minimum: 0
        },
        nonNegativeIntegerDefault0: {
          allOf: [{ $ref: "#/definitions/nonNegativeInteger" }, { default: 0 }]
        },
        simpleTypes: {
          enum: ["array", "boolean", "integer", "null", "number", "object", "string"]
        },
        stringArray: {
          type: "array",
          items: { type: "string" },
          uniqueItems: true,
          default: []
        }
      },
      type: ["object", "boolean"],
      properties: {
        $id: {
          type: "string",
          format: "uri-reference"
        },
        $schema: {
          type: "string",
          format: "uri"
        },
        $ref: {
          type: "string",
          format: "uri-reference"
        },
        $comment: {
          type: "string"
        },
        title: {
          type: "string"
        },
        description: {
          type: "string"
        },
        default: true,
        readOnly: {
          type: "boolean",
          default: false
        },
        examples: {
          type: "array",
          items: true
        },
        multipleOf: {
          type: "number",
          exclusiveMinimum: 0
        },
        maximum: {
          type: "number"
        },
        exclusiveMaximum: {
          type: "number"
        },
        minimum: {
          type: "number"
        },
        exclusiveMinimum: {
          type: "number"
        },
        maxLength: { $ref: "#/definitions/nonNegativeInteger" },
        minLength: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
        pattern: {
          type: "string",
          format: "regex"
        },
        additionalItems: { $ref: "#" },
        items: {
          anyOf: [{ $ref: "#" }, { $ref: "#/definitions/schemaArray" }],
          default: true
        },
        maxItems: { $ref: "#/definitions/nonNegativeInteger" },
        minItems: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
        uniqueItems: {
          type: "boolean",
          default: false
        },
        contains: { $ref: "#" },
        maxProperties: { $ref: "#/definitions/nonNegativeInteger" },
        minProperties: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
        required: { $ref: "#/definitions/stringArray" },
        additionalProperties: { $ref: "#" },
        definitions: {
          type: "object",
          additionalProperties: { $ref: "#" },
          default: {}
        },
        properties: {
          type: "object",
          additionalProperties: { $ref: "#" },
          default: {}
        },
        patternProperties: {
          type: "object",
          additionalProperties: { $ref: "#" },
          propertyNames: { format: "regex" },
          default: {}
        },
        dependencies: {
          type: "object",
          additionalProperties: {
            anyOf: [{ $ref: "#" }, { $ref: "#/definitions/stringArray" }]
          }
        },
        propertyNames: { $ref: "#" },
        const: true,
        enum: {
          type: "array",
          items: true,
          minItems: 1,
          uniqueItems: true
        },
        type: {
          anyOf: [
            { $ref: "#/definitions/simpleTypes" },
            {
              type: "array",
              items: { $ref: "#/definitions/simpleTypes" },
              minItems: 1,
              uniqueItems: true
            }
          ]
        },
        format: { type: "string" },
        contentMediaType: { type: "string" },
        contentEncoding: { type: "string" },
        if: { $ref: "#" },
        then: { $ref: "#" },
        else: { $ref: "#" },
        allOf: { $ref: "#/definitions/schemaArray" },
        anyOf: { $ref: "#/definitions/schemaArray" },
        oneOf: { $ref: "#/definitions/schemaArray" },
        not: { $ref: "#" }
      },
      default: true
    };
  }
});

// node_modules/ajv/dist/ajv.js
var require_ajv = __commonJS({
  "node_modules/ajv/dist/ajv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    var context_1 = require_context();
    exports.KeywordCxt = context_1.default;
    var codegen_1 = require_codegen();
    Object.defineProperty(exports, "_", { enumerable: true, get: function() {
      return codegen_1._;
    } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function() {
      return codegen_1.str;
    } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
      return codegen_1.stringify;
    } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
      return codegen_1.nil;
    } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
      return codegen_1.Name;
    } });
    Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function() {
      return codegen_1.CodeGen;
    } });
    var core_1 = require_core();
    var draft7_1 = require_draft7();
    var draft7MetaSchema = require_json_schema_draft_07();
    var META_SUPPORT_DATA = ["/properties"];
    var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
    var Ajv2 = class extends core_1.default {
      _addVocabularies() {
        super._addVocabularies();
        draft7_1.default.forEach((v) => this.addVocabulary(v));
      }
      _addDefaultMetaSchema() {
        super._addDefaultMetaSchema();
        if (!this.opts.meta)
          return;
        const metaSchema = this.opts.$data ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA) : draft7MetaSchema;
        this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
        this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
      }
      defaultMeta() {
        return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0);
      }
    };
    exports.default = Ajv2;
  }
});

// resources/schemas/project.schema.json
var require_project_schema = __commonJS({
  "resources/schemas/project.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/Project",
      title: "Project",
      description: "A project of an ontology in OntoUML 2, which may contain both model and diagrammatic data.",
      type: "object",
      properties: {
        type: {
          const: "Project"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        model: {
          oneOf: [
            {
              type: "null"
            },
            {
              $ref: "https://ontouml.org/ontouml-schema/2021-02-26/Package"
            }
          ]
        },
        diagrams: {
          oneOf: [
            {
              type: "null"
            },
            {
              type: "array"
            }
          ]
        }
      },
      additionalProperties: true,
      required: ["type", "id"]
    };
  }
});

// resources/schemas/package.schema.json
var require_package_schema = __commonJS({
  "resources/schemas/package.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/Package",
      description: 'An object representing a package element. Mandatory fields: constant "type": "Package", "id", "name", "elements", "propertyAssignments". Additional fields NOT allowed.',
      type: "object",
      properties: {
        type: {
          const: "Package"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        propertyAssignments: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#propertyAssignments"
        },
        contents: {
          oneOf: [
            {
              type: "null"
            },
            {
              type: "array",
              items: {
                oneOf: [
                  {
                    $ref: "https://ontouml.org/ontouml-schema/2021-02-26/Package"
                  },
                  {
                    $ref: "https://ontouml.org/ontouml-schema/2021-02-26/Class"
                  },
                  {
                    $ref: "https://ontouml.org/ontouml-schema/2021-02-26/Relation"
                  },
                  {
                    $ref: "https://ontouml.org/ontouml-schema/2021-02-26/GeneralizationSet"
                  },
                  {
                    $ref: "https://ontouml.org/ontouml-schema/2021-02-26/Generalization"
                  }
                ]
              }
            }
          ]
        }
      },
      additionalProperties: true,
      required: ["type", "id"]
    };
  }
});

// resources/schemas/class.schema.json
var require_class_schema = __commonJS({
  "resources/schemas/class.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/Class",
      description: 'An object representing a class element. Mandatory fields: constant "type": "Class", "id", "name", "stereotype", "properties", "propertyAssignments", "isAbstract", "isDerived", "isExtensional", "isPowertype", "order", "natures". Additional fields NOT allowed.',
      type: "object",
      properties: {
        type: {
          const: "Class"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        propertyAssignments: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#propertyAssignments"
        },
        stereotype: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#stereotype"
        },
        isAbstract: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#isAbstract"
        },
        isDerived: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#isDerived"
        },
        properties: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#properties"
        },
        literals: {
          oneOf: [
            {
              type: "array",
              items: {
                $ref: "https://ontouml.org/ontouml-schema/2021-02-26/Literal"
              }
            },
            {
              type: "null"
            }
          ]
        },
        restrictedTo: {
          description: "A nullable array of unique enumerated strings that represents the allowed (possible) ontological natures of the class's instances.",
          oneOf: [
            {
              type: "null"
            },
            {
              type: "array",
              uniqueItems: true,
              items: {
                type: "string"
              }
            }
          ]
        },
        isExtensional: {
          description: "A boolean field that captures if a class decorated as \xABcollective\xBB is extensionally defined (i.e., it's parts cannot change).",
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableBoolean"
        },
        isPowertype: {
          description: "A boolean field that captures if a class decorated as \xABtype\xBB represents a powertype.",
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableBoolean"
        },
        order: {
          description: 'A string field that captures the type-order of a class decorated as \xABtype\xBB. This field supports the representation of second-order types or greater, thus its minimum value is "2". This field must be set to "*" for orderless types.',
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableString"
        }
      },
      additionalProperties: true,
      required: ["type", "id"]
    };
  }
});

// resources/schemas/relation.schema.json
var require_relation_schema = __commonJS({
  "resources/schemas/relation.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/Relation",
      description: 'An object representing an relation element. Mandatory fields: constant "type": "Class", "id", "name", "stereotype", "properties", "propertyAssignments". The "properties" array must have at least two items and is not nullable. The order of these items represents their position on a equivalent predicate, e.g., in the ternary relation "buys-product-from(buyer,product,seller)", the order of items representing these entities must follow the order "buyer" (in properties[0]), "product" (in properties[1]), and "seller" (in properties[2]). Relation elements are also used to represent derivation relations, in which case they must contain the stereotype "derivation" and have only 2 properties, the first being a Relation element and the second a Class element. Additional fields NOT allowed. Ordered properties.',
      type: "object",
      properties: {
        type: {
          const: "Relation"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        propertyAssignments: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#propertyAssignments"
        },
        stereotype: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#stereotype"
        },
        isAbstract: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#isAbstract"
        },
        isDerived: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#isDerived"
        },
        properties: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#properties"
        }
      },
      additionalProperties: true,
      required: ["type", "id"]
    };
  }
});

// resources/schemas/generalization.schema.json
var require_generalization_schema = __commonJS({
  "resources/schemas/generalization.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/Generalization",
      description: 'An object representing a generalization element. Mandatory fields: constant "type": "Generalization", "id", "name", "general", "specific", "propertyAssignments". Additional fields NOT allowed.',
      type: "object",
      properties: {
        type: {
          const: "Generalization"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        propertyAssignments: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#propertyAssignments"
        },
        general: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
        },
        specific: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
        }
      },
      additionalProperties: true,
      required: ["type", "id", "general", "specific"]
    };
  }
});

// resources/schemas/generalization_set.schema.json
var require_generalization_set_schema = __commonJS({
  "resources/schemas/generalization_set.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/GeneralizationSet",
      description: 'An object representing a generalization set element. Mandatory fields: constant "type": "GeneralizationSet", "id", "name", "isDisjoint", "isComplete", "categorizer", "generalizations", "propertyAssignments". Additional fields NOT allowed.',
      type: "object",
      properties: {
        type: {
          const: "GeneralizationSet"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        propertyAssignments: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#propertyAssignments"
        },
        isDisjoint: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableBoolean"
        },
        isComplete: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableBoolean"
        },
        categorizer: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
        },
        generalizations: {
          oneOf: [
            {
              type: "array",
              items: {
                $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
              }
            },
            {
              type: "null"
            }
          ]
        }
      },
      additionalProperties: true,
      required: ["type", "id"]
    };
  }
});

// resources/schemas/property.schema.json
var require_property_schema = __commonJS({
  "resources/schemas/property.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/Property",
      description: 'An object representing a property element. This represents properties exhibited by instances of classes, relations and derivation relations, where in the first case properties are analougous to attrbutes while in the second and third cases properties are analogous to association ends. Mandatory fields: constant "type": "Property", "id", "name" "cardinality", "stereotype", "propertyAssignments", "subsettedProperties", "redefinedProperties", "aggregationKind", "isDerived", "isOrdered", "isReadOnly". Additional fields NOT allowed.',
      type: "object",
      properties: {
        type: {
          const: "Property"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        propertyAssignments: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#propertyAssignments"
        },
        stereotype: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#stereotype"
        },
        aggregationKind: {
          oneOf: [
            {
              type: "string",
              enum: ["NONE", "SHARED", "COMPOSITE"]
            },
            {
              type: "null"
            }
          ]
        },
        cardinality: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableString"
        },
        isDerived: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableBoolean"
        },
        isOrdered: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableBoolean"
        },
        isReadOnly: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableBoolean"
        },
        propertyType: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
        },
        redefinedProperties: {
          oneOf: [
            {
              type: "array",
              uniqueItems: true,
              items: {
                $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
              }
            },
            {
              type: "null"
            }
          ]
        },
        subsettedProperties: {
          oneOf: [
            {
              type: "array",
              uniqueItems: true,
              items: {
                $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
              }
            },
            {
              type: "null"
            }
          ]
        }
      },
      additionalProperties: true,
      required: ["type", "id"]
    };
  }
});

// resources/schemas/literal.schema.json
var require_literal_schema = __commonJS({
  "resources/schemas/literal.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/Literal",
      description: "An array containing the values defined for an enumeration. Should only be used if the class is stereotyped as <<enumeration>>, otherwise, the value of this field should be null.",
      type: "object",
      properties: {
        type: {
          const: "Literal"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        propertyAssignments: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#propertyAssignments"
        }
      },
      additionalProperties: true,
      required: ["type", "id"]
    };
  }
});

// resources/schemas/diagram.schema.json
var require_diagram_schema = __commonJS({
  "resources/schemas/diagram.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/Diagram",
      description: "An array containing the values defined for an enumeration. Should only be used if the class is stereotyped as <<enumeration>>, otherwise, the value of this field should be null.",
      type: "object",
      properties: {
        type: {
          const: "Diagram"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        contents: {
          oneOf: [
            {
              type: "null"
            },
            {
              type: "array",
              items: {
                oneOf: [
                  {
                    $ref: "https://ontouml.org/ontouml-schema/2021-02-26/ClassView"
                  },
                  {
                    $ref: "https://ontouml.org/ontouml-schema/2021-02-26/RelationView"
                  },
                  {
                    $ref: "https://ontouml.org/ontouml-schema/2021-02-26/GeneralizationView"
                  },
                  {
                    $ref: "https://ontouml.org/ontouml-schema/2021-02-26/GeneralizationSetView"
                  },
                  {
                    $ref: "https://ontouml.org/ontouml-schema/2021-02-26/PackageView"
                  }
                ]
              }
            }
          ]
        },
        owner: {
          oneOf: [
            {
              $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
            }
          ]
        }
      },
      additionalProperties: true,
      required: ["type", "id"]
    };
  }
});

// resources/schemas/class_view.schema.json
var require_class_view_schema = __commonJS({
  "resources/schemas/class_view.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/ClassView",
      type: "object",
      properties: {
        type: {
          const: "ClassView"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        modelElement: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
        },
        shape: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/RectangleShape"
        }
      },
      additionalProperties: true,
      required: ["type", "id", "modelElement"]
    };
  }
});

// resources/schemas/relation_view.schema.json
var require_relation_view_schema = __commonJS({
  "resources/schemas/relation_view.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/RelationView",
      type: "object",
      properties: {
        type: {
          const: "RelationView"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        modelElement: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
        },
        source: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
        },
        target: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
        },
        shape: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/PathShape"
        }
      },
      additionalProperties: true,
      required: ["type", "id", "modelElement", "source", "target"]
    };
  }
});

// resources/schemas/generalization_view.schema.json
var require_generalization_view_schema = __commonJS({
  "resources/schemas/generalization_view.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/GeneralizationView",
      type: "object",
      properties: {
        type: {
          const: "GeneralizationView"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        modelElement: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
        },
        source: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
        },
        target: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
        },
        shape: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/PathShape"
        }
      },
      additionalProperties: true,
      required: ["type", "id", "modelElement", "source", "target"]
    };
  }
});

// resources/schemas/generalization_set_view.schema.json
var require_generalization_set_view_schema = __commonJS({
  "resources/schemas/generalization_set_view.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/GeneralizationSetView",
      type: "object",
      properties: {
        type: {
          const: "GeneralizationSetView"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        modelElement: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
        },
        shape: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/TextShape"
        }
      },
      additionalProperties: true,
      required: ["type", "id", "modelElement"]
    };
  }
});

// resources/schemas/package_view.schema.json
var require_package_view_schema = __commonJS({
  "resources/schemas/package_view.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/PackageView",
      type: "object",
      properties: {
        type: {
          const: "PackageView"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        modelElement: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#reference"
        },
        shape: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/RectangleShape"
        }
      },
      additionalProperties: true,
      required: ["type", "id", "modelElement"]
    };
  }
});

// resources/schemas/rectangle_shape.schema.json
var require_rectangle_shape_schema = __commonJS({
  "resources/schemas/rectangle_shape.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/RectangleShape",
      type: "object",
      properties: {
        type: {
          const: "Rectangle"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        x: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableNatural"
        },
        y: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableNatural"
        },
        width: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableNatural"
        },
        height: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableNatural"
        }
      },
      additionalProperties: true,
      required: ["type", "id"]
    };
  }
});

// resources/schemas/text_shape.schema.json
var require_text_shape_schema = __commonJS({
  "resources/schemas/text_shape.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/TextShape",
      type: "object",
      properties: {
        type: {
          const: "Text"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        x: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableNatural"
        },
        y: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableNatural"
        },
        width: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableNatural"
        },
        height: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableNatural"
        },
        value: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableString"
        }
      },
      additionalProperties: true,
      required: ["type", "id"]
    };
  }
});

// resources/schemas/path_shape.schema.json
var require_path_shape_schema = __commonJS({
  "resources/schemas/path_shape.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/PathShape",
      type: "object",
      properties: {
        type: {
          const: "Path"
        },
        id: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#id"
        },
        name: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        description: {
          $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#text"
        },
        points: {
          oneOf: [
            {
              type: "null"
            },
            {
              type: "array",
              items: {
                type: "object",
                properties: {
                  x: {
                    $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableNatural"
                  },
                  y: {
                    $ref: "https://ontouml.org/ontouml-schema/2021-02-26/definitions#nullableNatural"
                  }
                },
                additionalProperties: true,
                required: ["x", "y"]
              }
            }
          ]
        }
      },
      additionalProperties: true,
      required: ["type", "id"]
    };
  }
});

// resources/schemas/definitions.schema.json
var require_definitions_schema = __commonJS({
  "resources/schemas/definitions.schema.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "https://ontouml.org/ontouml-schema/2021-02-26/definitions",
      definitions: {
        id: {
          $id: "#id",
          description: "A non-empty and non-nullable string that uniquely identifies an object of a given type. Thus, two objects of the same type (e.g. two classes, two relations, two properties) may not have the same id, even if they have different containers.",
          type: "string",
          minLength: 1
        },
        isAbstract: {
          $id: "#isAbstract",
          description: "A boolean meta-property that identifies whether or not the class or relation can have direct instances. If set to true, the class or relation is deemed abstract and it cannot have direct instances, i.e., for it must be specialized before being instantiated. If set to false, the class is deemed concrete and it can have direct instances.",
          $ref: "#/definitions/nullableBoolean"
        },
        isDerived: {
          $id: "#isDerived",
          description: 'A boolean meta-property that identifies whether or not the extension of the class (or relation) can be "computed" by means of a derivation rule. If set to true, they can, if set to false, they cannot. For instance, the Child can be modelled as a derived class, if it is considered that a child is a person whose age is less or equal to 10.',
          $ref: "#/definitions/nullableBoolean"
        },
        natural: {
          $id: "#natural",
          type: "integer",
          minimum: 0
        },
        nullableBoolean: {
          $id: "#nullableBoolean",
          description: "A auxiliary definition for nullable boolean fields.",
          oneOf: [
            {
              type: "boolean"
            },
            {
              type: "null"
            }
          ]
        },
        nullableNatural: {
          $id: "#nullableNatural",
          description: "A auxiliary definition for nullable natural number fields.",
          oneOf: [
            {
              $ref: "#/definitions/natural"
            },
            {
              type: "null"
            }
          ]
        },
        nullableString: {
          $id: "#nullableString",
          description: "A auxiliary definition for nullable string fields.",
          oneOf: [
            {
              type: "string"
            },
            {
              type: "null"
            }
          ]
        },
        ontoumlType: {
          $id: "ontoumlType",
          type: "string",
          enum: [
            "Project",
            "Package",
            "Class",
            "Relation",
            "Generalization",
            "GeneralizationSet",
            "Property",
            "Enumeration",
            "Literal",
            "Diagram",
            "ClassView",
            "RelationView",
            "GeneralizationView",
            "GeneralizationSetView",
            "PackageView",
            "Rectangle",
            "Text",
            "Path"
          ]
        },
        properties: {
          $id: "#properties",
          description: "A non-empty array of Property elements representing properties exhibited by instances of the container model element. Nullable. If the container object of his field is a class, the properties in this array are the attributes of the class. Alternatively, if the container is a relation, the properties in this array are the association ends of the relation.",
          oneOf: [
            {
              type: "array",
              items: {
                $ref: "https://ontouml.org/ontouml-schema/2021-02-26/Property"
              }
            },
            {
              type: "null"
            }
          ]
        },
        propertyAssignments: {
          $id: "#propertyAssignments",
          description: "An object that contains assignments to properties instantiated by the container object. Each field in this object corresponds to an assigment, whose possible values are restricted to null, boolean, number, string, reference, or an array containing any of the former. Assignments are analogous to UML's notion of tagged values. Nullable.",
          oneOf: [
            {
              type: "null"
            },
            {
              type: "object",
              additionalProperties: {
                anyOf: [
                  {
                    type: "null"
                  },
                  {
                    type: "boolean"
                  },
                  {
                    type: "number"
                  },
                  {
                    type: "string"
                  },
                  {
                    $ref: "#/definitions/reference"
                  },
                  {
                    type: "array",
                    uniqueItems: true,
                    items: {
                      anyOf: [
                        {
                          type: "boolean"
                        },
                        {
                          type: "number"
                        },
                        {
                          type: "string"
                        },
                        {
                          $ref: "#/definitions/reference"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        },
        reference: {
          $id: "#reference",
          description: 'An object representing a singular reference to a model element. Mandatory fields: "type", "id".',
          oneOf: [
            {
              type: "null"
            },
            {
              type: "object",
              properties: {
                type: {
                  $ref: "#/definitions/ontoumlType"
                },
                id: {
                  $ref: "#/definitions/id"
                }
              },
              required: ["type", "id"],
              additionalProperties: false
            }
          ]
        },
        stereotype: {
          $id: "#stereotype",
          description: "A nullable string containing the stereotype applied to its container object. If no stereotype is applied to the object, the value of this field must be null.",
          allOf: [
            {
              $ref: "#/definitions/nullableString"
            }
          ]
        },
        text: {
          $id: "#text",
          description: "A nullable field that may contain either a text string or a non-empty object where each key must indicate a language code conforming to the BCP 47 recommendations.",
          oneOf: [
            {
              $ref: "#/definitions/nullableString"
            },
            {
              type: "object",
              additionalProperties: {
                $ref: "#/definitions/nullableString"
              }
            }
          ]
        }
      }
    };
  }
});

// node_modules/n3/lib/IRIs.js
var require_IRIs = __commonJS({
  "node_modules/n3/lib/IRIs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var RDF = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
    var XSD = "http://www.w3.org/2001/XMLSchema#";
    var SWAP = "http://www.w3.org/2000/10/swap/";
    var _default = {
      xsd: {
        decimal: `${XSD}decimal`,
        boolean: `${XSD}boolean`,
        double: `${XSD}double`,
        integer: `${XSD}integer`,
        string: `${XSD}string`
      },
      rdf: {
        type: `${RDF}type`,
        nil: `${RDF}nil`,
        first: `${RDF}first`,
        rest: `${RDF}rest`,
        langString: `${RDF}langString`
      },
      owl: {
        sameAs: "http://www.w3.org/2002/07/owl#sameAs"
      },
      r: {
        forSome: `${SWAP}reify#forSome`,
        forAll: `${SWAP}reify#forAll`
      },
      log: {
        implies: `${SWAP}log#implies`
      }
    };
    exports.default = _default;
  }
});

// node_modules/queue-microtask/index.js
var require_queue_microtask = __commonJS({
  "node_modules/queue-microtask/index.js"(exports, module2) {
    var promise;
    module2.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(globalThis) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
      throw err;
    }, 0));
  }
});

// node_modules/n3/lib/N3Lexer.js
var require_N3Lexer = __commonJS({
  "node_modules/n3/lib/N3Lexer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _IRIs = _interopRequireDefault(require_IRIs());
    var _queueMicrotask = _interopRequireDefault(require_queue_microtask());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var {
      xsd
    } = _IRIs.default;
    var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\([^])/g;
    var escapeReplacements = {
      "\\": "\\",
      "'": "'",
      '"': '"',
      "n": "\n",
      "r": "\r",
      "t": "	",
      "f": "\f",
      "b": "\b",
      "_": "_",
      "~": "~",
      ".": ".",
      "-": "-",
      "!": "!",
      "$": "$",
      "&": "&",
      "(": "(",
      ")": ")",
      "*": "*",
      "+": "+",
      ",": ",",
      ";": ";",
      "=": "=",
      "/": "/",
      "?": "?",
      "#": "#",
      "@": "@",
      "%": "%"
    };
    var illegalIriChars = /[\x00-\x20<>\\"\{\}\|\^\`]/;
    var lineModeRegExps = {
      _iri: true,
      _unescapedIri: true,
      _simpleQuotedString: true,
      _langcode: true,
      _blank: true,
      _newline: true,
      _comment: true,
      _whitespace: true,
      _endOfFile: true
    };
    var invalidRegExp = /$0^/;
    var N3Lexer = class {
      constructor(options) {
        this._iri = /^<((?:[^ <>{}\\]|\\[uU])+)>[ \t]*/;
        this._unescapedIri = /^<([^\x00-\x20<>\\"\{\}\|\^\`]*)>[ \t]*/;
        this._simpleQuotedString = /^"([^"\\\r\n]*)"(?=[^"])/;
        this._simpleApostropheString = /^'([^'\\\r\n]*)'(?=[^'])/;
        this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\-])/i;
        this._prefix = /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:(?=[#\s<])/;
        this._prefixed = /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:((?:(?:[0-:A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])(?:(?:[\.\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])*(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~]))?)?)(?:[ \t]+|(?=\.?[,;!\^\s#()\[\]\{\}"'<>]))/;
        this._variable = /^\?(?:(?:[A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?=[.,;!\^\s#()\[\]\{\}"'<>])/;
        this._blank = /^_:((?:[0-9A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?:[ \t]+|(?=\.?[,;:\s#()\[\]\{\}"'<>]))/;
        this._number = /^[\-+]?(?:(\d+\.\d*|\.?\d+)[eE][\-+]?|\d*(\.)?)\d+(?=\.?[,;:\s#()\[\]\{\}"'<>])/;
        this._boolean = /^(?:true|false)(?=[.,;\s#()\[\]\{\}"'<>])/;
        this._keyword = /^@[a-z]+(?=[\s#<:])/i;
        this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\s#<])/i;
        this._shortPredicates = /^a(?=[\s#()\[\]\{\}"'<>])/;
        this._newline = /^[ \t]*(?:#[^\n\r]*)?(?:\r\n|\n|\r)[ \t]*/;
        this._comment = /#([^\n\r]*)/;
        this._whitespace = /^[ \t]+/;
        this._endOfFile = /^(?:#[^\n\r]*)?$/;
        options = options || {};
        if (this._lineMode = !!options.lineMode) {
          this._n3Mode = false;
          for (const key in this) {
            if (!(key in lineModeRegExps) && this[key] instanceof RegExp)
              this[key] = invalidRegExp;
          }
        } else {
          this._n3Mode = options.n3 !== false;
        }
        this._comments = !!options.comments;
        this._literalClosingPos = 0;
      }
      // ## Private methods
      // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback
      _tokenizeToEnd(callback, inputFinished) {
        let input = this._input;
        const outputComments = this._comments;
        while (true) {
          let whiteSpaceMatch, comment;
          while (whiteSpaceMatch = this._newline.exec(input)) {
            if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0])))
              callback(null, {
                line: this._line,
                type: "comment",
                value: comment[1],
                prefix: ""
              });
            input = input.substr(whiteSpaceMatch[0].length, input.length);
            this._line++;
          }
          if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))
            input = input.substr(whiteSpaceMatch[0].length, input.length);
          if (this._endOfFile.test(input)) {
            if (inputFinished) {
              if (outputComments && (comment = this._comment.exec(input)))
                callback(null, {
                  line: this._line,
                  type: "comment",
                  value: comment[1],
                  prefix: ""
                });
              callback(input = null, {
                line: this._line,
                type: "eof",
                value: "",
                prefix: ""
              });
            }
            return this._input = input;
          }
          const line = this._line, firstChar = input[0];
          let type = "", value = "", prefix = "", match = null, matchLength = 0, inconclusive = false;
          switch (firstChar) {
            case "^":
              if (input.length < 3)
                break;
              else if (input[1] === "^") {
                this._previousMarker = "^^";
                input = input.substr(2);
                if (input[0] !== "<") {
                  inconclusive = true;
                  break;
                }
              } else {
                if (this._n3Mode) {
                  matchLength = 1;
                  type = "^";
                }
                break;
              }
            case "<":
              if (match = this._unescapedIri.exec(input))
                type = "IRI", value = match[1];
              else if (match = this._iri.exec(input)) {
                value = this._unescape(match[1]);
                if (value === null || illegalIriChars.test(value))
                  return reportSyntaxError(this);
                type = "IRI";
              } else if (input.length > 1 && input[1] === "<")
                type = "<<", matchLength = 2;
              else if (this._n3Mode && input.length > 1 && input[1] === "=")
                type = "inverse", matchLength = 2, value = ">";
              break;
            case ">":
              if (input.length > 1 && input[1] === ">")
                type = ">>", matchLength = 2;
              break;
            case "_":
              if ((match = this._blank.exec(input)) || inputFinished && (match = this._blank.exec(`${input} `)))
                type = "blank", prefix = "_", value = match[1];
              break;
            case '"':
              if (match = this._simpleQuotedString.exec(input))
                value = match[1];
              else {
                ({
                  value,
                  matchLength
                } = this._parseLiteral(input));
                if (value === null)
                  return reportSyntaxError(this);
              }
              if (match !== null || matchLength !== 0) {
                type = "literal";
                this._literalClosingPos = 0;
              }
              break;
            case "'":
              if (!this._lineMode) {
                if (match = this._simpleApostropheString.exec(input))
                  value = match[1];
                else {
                  ({
                    value,
                    matchLength
                  } = this._parseLiteral(input));
                  if (value === null)
                    return reportSyntaxError(this);
                }
                if (match !== null || matchLength !== 0) {
                  type = "literal";
                  this._literalClosingPos = 0;
                }
              }
              break;
            case "?":
              if (this._n3Mode && (match = this._variable.exec(input)))
                type = "var", value = match[0];
              break;
            case "@":
              if (this._previousMarker === "literal" && (match = this._langcode.exec(input)))
                type = "langcode", value = match[1];
              else if (match = this._keyword.exec(input))
                type = match[0];
              break;
            case ".":
              if (input.length === 1 ? inputFinished : input[1] < "0" || input[1] > "9") {
                type = ".";
                matchLength = 1;
                break;
              }
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
            case "+":
            case "-":
              if (match = this._number.exec(input) || inputFinished && (match = this._number.exec(`${input} `))) {
                type = "literal", value = match[0];
                prefix = typeof match[1] === "string" ? xsd.double : typeof match[2] === "string" ? xsd.decimal : xsd.integer;
              }
              break;
            case "B":
            case "b":
            case "p":
            case "P":
            case "G":
            case "g":
              if (match = this._sparqlKeyword.exec(input))
                type = match[0].toUpperCase();
              else
                inconclusive = true;
              break;
            case "f":
            case "t":
              if (match = this._boolean.exec(input))
                type = "literal", value = match[0], prefix = xsd.boolean;
              else
                inconclusive = true;
              break;
            case "a":
              if (match = this._shortPredicates.exec(input))
                type = "abbreviation", value = "a";
              else
                inconclusive = true;
              break;
            case "=":
              if (this._n3Mode && input.length > 1) {
                type = "abbreviation";
                if (input[1] !== ">")
                  matchLength = 1, value = "=";
                else
                  matchLength = 2, value = ">";
              }
              break;
            case "!":
              if (!this._n3Mode)
                break;
            case ",":
            case ";":
            case "[":
            case "]":
            case "(":
            case ")":
            case "{":
            case "}":
              if (!this._lineMode) {
                matchLength = 1;
                type = firstChar;
              }
              break;
            default:
              inconclusive = true;
          }
          if (inconclusive) {
            if ((this._previousMarker === "@prefix" || this._previousMarker === "PREFIX") && (match = this._prefix.exec(input)))
              type = "prefix", value = match[1] || "";
            else if ((match = this._prefixed.exec(input)) || inputFinished && (match = this._prefixed.exec(`${input} `)))
              type = "prefixed", prefix = match[1] || "", value = this._unescape(match[2]);
          }
          if (this._previousMarker === "^^") {
            switch (type) {
              case "prefixed":
                type = "type";
                break;
              case "IRI":
                type = "typeIRI";
                break;
              default:
                type = "";
            }
          }
          if (!type) {
            if (inputFinished || !/^'''|^"""/.test(input) && /\n|\r/.test(input))
              return reportSyntaxError(this);
            else
              return this._input = input;
          }
          const token = {
            line,
            type,
            value,
            prefix
          };
          callback(null, token);
          this.previousToken = token;
          this._previousMarker = type;
          input = input.substr(matchLength || match[0].length, input.length);
        }
        function reportSyntaxError(self2) {
          callback(self2._syntaxError(/^\S*/.exec(input)[0]));
        }
      }
      // ### `_unescape` replaces N3 escape codes by their corresponding characters
      _unescape(item) {
        let invalid = false;
        const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {
          if (typeof unicode4 === "string")
            return String.fromCharCode(Number.parseInt(unicode4, 16));
          if (typeof unicode8 === "string") {
            let charCode = Number.parseInt(unicode8, 16);
            return charCode <= 65535 ? String.fromCharCode(Number.parseInt(unicode8, 16)) : String.fromCharCode(55296 + ((charCode -= 65536) >> 10), 56320 + (charCode & 1023));
          }
          if (escapedChar in escapeReplacements)
            return escapeReplacements[escapedChar];
          invalid = true;
          return "";
        });
        return invalid ? null : replaced;
      }
      // ### `_parseLiteral` parses a literal into an unescaped value
      _parseLiteral(input) {
        if (input.length >= 3) {
          const opening = input.match(/^(?:"""|"|'''|'|)/)[0];
          const openingLength = opening.length;
          let closingPos = Math.max(this._literalClosingPos, openingLength);
          while ((closingPos = input.indexOf(opening, closingPos)) > 0) {
            let backslashCount = 0;
            while (input[closingPos - backslashCount - 1] === "\\")
              backslashCount++;
            if (backslashCount % 2 === 0) {
              const raw = input.substring(openingLength, closingPos);
              const lines = raw.split(/\r\n|\r|\n/).length - 1;
              const matchLength = closingPos + openingLength;
              if (openingLength === 1 && lines !== 0 || openingLength === 3 && this._lineMode)
                break;
              this._line += lines;
              return {
                value: this._unescape(raw),
                matchLength
              };
            }
            closingPos++;
          }
          this._literalClosingPos = input.length - openingLength + 1;
        }
        return {
          value: "",
          matchLength: 0
        };
      }
      // ### `_syntaxError` creates a syntax error for the given issue
      _syntaxError(issue) {
        this._input = null;
        const err = new Error(`Unexpected "${issue}" on line ${this._line}.`);
        err.context = {
          token: void 0,
          line: this._line,
          previousToken: this.previousToken
        };
        return err;
      }
      // ## Public methods
      // ### `tokenize` starts the transformation of an N3 document into an array of tokens.
      // The input can be a string or a stream.
      tokenize(input, callback) {
        this._line = 1;
        if (typeof input === "string") {
          this._input = input;
          if (typeof callback === "function")
            (0, _queueMicrotask.default)(() => this._tokenizeToEnd(callback, true));
          else {
            const tokens = [];
            let error;
            this._tokenizeToEnd((e, t) => e ? error = e : tokens.push(t), true);
            if (error)
              throw error;
            return tokens;
          }
        } else {
          this._input = "";
          this._pendingBuffer = null;
          if (typeof input.setEncoding === "function")
            input.setEncoding("utf8");
          input.on("data", (data) => {
            if (this._input !== null && data.length !== 0) {
              if (this._pendingBuffer) {
                data = Buffer.concat([this._pendingBuffer, data]);
                this._pendingBuffer = null;
              }
              if (data[data.length - 1] & 128) {
                this._pendingBuffer = data;
              } else {
                this._input += data;
                this._tokenizeToEnd(callback, false);
              }
            }
          });
          input.on("end", () => {
            if (this._input !== null)
              this._tokenizeToEnd(callback, true);
          });
          input.on("error", callback);
        }
      }
    };
    exports.default = N3Lexer;
  }
});

// node_modules/n3/lib/N3Util.js
var require_N3Util = __commonJS({
  "node_modules/n3/lib/N3Util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isNamedNode = isNamedNode;
    exports.isBlankNode = isBlankNode;
    exports.isLiteral = isLiteral;
    exports.isVariable = isVariable;
    exports.isDefaultGraph = isDefaultGraph;
    exports.inDefaultGraph = inDefaultGraph;
    exports.prefix = prefix;
    exports.prefixes = prefixes;
    var _N3DataFactory = _interopRequireDefault(require_N3DataFactory());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isNamedNode(term) {
      return !!term && term.termType === "NamedNode";
    }
    function isBlankNode(term) {
      return !!term && term.termType === "BlankNode";
    }
    function isLiteral(term) {
      return !!term && term.termType === "Literal";
    }
    function isVariable(term) {
      return !!term && term.termType === "Variable";
    }
    function isDefaultGraph(term) {
      return !!term && term.termType === "DefaultGraph";
    }
    function inDefaultGraph(quad2) {
      return isDefaultGraph(quad2.graph);
    }
    function prefix(iri, factory) {
      return prefixes({
        "": iri
      }, factory)("");
    }
    function prefixes(defaultPrefixes, factory) {
      const prefixes2 = /* @__PURE__ */ Object.create(null);
      for (const prefix2 in defaultPrefixes)
        processPrefix(prefix2, defaultPrefixes[prefix2]);
      factory = factory || _N3DataFactory.default;
      function processPrefix(prefix2, iri) {
        if (typeof iri === "string") {
          const cache = /* @__PURE__ */ Object.create(null);
          prefixes2[prefix2] = (local) => {
            return cache[local] || (cache[local] = factory.namedNode(iri + local));
          };
        } else if (!(prefix2 in prefixes2)) {
          throw new Error(`Unknown prefix: ${prefix2}`);
        }
        return prefixes2[prefix2];
      }
      return processPrefix;
    }
  }
});

// node_modules/n3/lib/N3DataFactory.js
var require_N3DataFactory = __commonJS({
  "node_modules/n3/lib/N3DataFactory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.termFromId = termFromId;
    exports.termToId = termToId;
    exports.escapeQuotes = escapeQuotes;
    exports.unescapeQuotes = unescapeQuotes;
    exports.Triple = exports.Quad = exports.DefaultGraph = exports.Variable = exports.BlankNode = exports.Literal = exports.NamedNode = exports.Term = exports.default = void 0;
    var _IRIs = _interopRequireDefault(require_IRIs());
    var _N3Util = require_N3Util();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var {
      rdf,
      xsd
    } = _IRIs.default;
    var DEFAULTGRAPH;
    var _blankNodeCounter = 0;
    var escapedLiteral = /^"(.*".*)(?="[^"]*$)/;
    var quadId = /^<<("(?:""|[^"])*"[^ ]*|[^ ]+) ("(?:""|[^"])*"[^ ]*|[^ ]+) ("(?:""|[^"])*"[^ ]*|[^ ]+) ?("(?:""|[^"])*"[^ ]*|[^ ]+)?>>$/;
    var DataFactory = {
      namedNode: namedNode5,
      blankNode,
      variable,
      literal: literal4,
      defaultGraph,
      quad: quad2,
      triple: quad2
    };
    var _default = DataFactory;
    exports.default = _default;
    var Term = class {
      constructor(id) {
        this.id = id;
      }
      // ### The value of this term
      get value() {
        return this.id;
      }
      // ### Returns whether this object represents the same term as the other
      equals(other) {
        if (other instanceof Term)
          return this.id === other.id;
        return !!other && this.termType === other.termType && this.value === other.value;
      }
      // ### Returns a plain object representation of this term
      toJSON() {
        return {
          termType: this.termType,
          value: this.value
        };
      }
    };
    exports.Term = Term;
    var NamedNode = class extends Term {
      // ### The term type of this term
      get termType() {
        return "NamedNode";
      }
    };
    exports.NamedNode = NamedNode;
    var Literal3 = class extends Term {
      // ### The term type of this term
      get termType() {
        return "Literal";
      }
      // ### The text value of this literal
      get value() {
        return this.id.substring(1, this.id.lastIndexOf('"'));
      }
      // ### The language of this literal
      get language() {
        const id = this.id;
        let atPos = id.lastIndexOf('"') + 1;
        return atPos < id.length && id[atPos++] === "@" ? id.substr(atPos).toLowerCase() : "";
      }
      // ### The datatype IRI of this literal
      get datatype() {
        return new NamedNode(this.datatypeString);
      }
      // ### The datatype string of this literal
      get datatypeString() {
        const id = this.id, dtPos = id.lastIndexOf('"') + 1;
        const char = dtPos < id.length ? id[dtPos] : "";
        return char === "^" ? id.substr(dtPos + 2) : (
          // If "@" follows, return rdf:langString; xsd:string otherwise
          char !== "@" ? xsd.string : rdf.langString
        );
      }
      // ### Returns whether this object represents the same term as the other
      equals(other) {
        if (other instanceof Literal3)
          return this.id === other.id;
        return !!other && !!other.datatype && this.termType === other.termType && this.value === other.value && this.language === other.language && this.datatype.value === other.datatype.value;
      }
      toJSON() {
        return {
          termType: this.termType,
          value: this.value,
          language: this.language,
          datatype: {
            termType: "NamedNode",
            value: this.datatypeString
          }
        };
      }
    };
    exports.Literal = Literal3;
    var BlankNode = class extends Term {
      constructor(name) {
        super(`_:${name}`);
      }
      // ### The term type of this term
      get termType() {
        return "BlankNode";
      }
      // ### The name of this blank node
      get value() {
        return this.id.substr(2);
      }
    };
    exports.BlankNode = BlankNode;
    var Variable = class extends Term {
      constructor(name) {
        super(`?${name}`);
      }
      // ### The term type of this term
      get termType() {
        return "Variable";
      }
      // ### The name of this variable
      get value() {
        return this.id.substr(1);
      }
    };
    exports.Variable = Variable;
    var DefaultGraph = class extends Term {
      constructor() {
        super("");
        return DEFAULTGRAPH || this;
      }
      // ### The term type of this term
      get termType() {
        return "DefaultGraph";
      }
      // ### Returns whether this object represents the same term as the other
      equals(other) {
        return this === other || !!other && this.termType === other.termType;
      }
    };
    exports.DefaultGraph = DefaultGraph;
    DEFAULTGRAPH = new DefaultGraph();
    function termFromId(id, factory) {
      factory = factory || DataFactory;
      if (!id)
        return factory.defaultGraph();
      switch (id[0]) {
        case "?":
          return factory.variable(id.substr(1));
        case "_":
          return factory.blankNode(id.substr(2));
        case '"':
          if (factory === DataFactory)
            return new Literal3(id);
          if (id[id.length - 1] === '"')
            return factory.literal(id.substr(1, id.length - 2));
          const endPos = id.lastIndexOf('"', id.length - 1);
          return factory.literal(id.substr(1, endPos - 1), id[endPos + 1] === "@" ? id.substr(endPos + 2) : factory.namedNode(id.substr(endPos + 3)));
        case "<":
          const components = quadId.exec(id);
          return factory.quad(termFromId(unescapeQuotes(components[1]), factory), termFromId(unescapeQuotes(components[2]), factory), termFromId(unescapeQuotes(components[3]), factory), components[4] && termFromId(unescapeQuotes(components[4]), factory));
        default:
          return factory.namedNode(id);
      }
    }
    function termToId(term) {
      if (typeof term === "string")
        return term;
      if (term instanceof Term && term.termType !== "Quad")
        return term.id;
      if (!term)
        return DEFAULTGRAPH.id;
      switch (term.termType) {
        case "NamedNode":
          return term.value;
        case "BlankNode":
          return `_:${term.value}`;
        case "Variable":
          return `?${term.value}`;
        case "DefaultGraph":
          return "";
        case "Literal":
          return `"${term.value}"${term.language ? `@${term.language}` : term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : ""}`;
        case "Quad":
          return `<<${escapeQuotes(termToId(term.subject))} ${escapeQuotes(termToId(term.predicate))} ${escapeQuotes(termToId(term.object))}${(0, _N3Util.isDefaultGraph)(term.graph) ? "" : ` ${termToId(term.graph)}`}>>`;
        default:
          throw new Error(`Unexpected termType: ${term.termType}`);
      }
    }
    var Quad = class extends Term {
      constructor(subject, predicate, object, graph) {
        super("");
        this.subject = subject;
        this.predicate = predicate;
        this.object = object;
        this.graph = graph || DEFAULTGRAPH;
      }
      // ### The term type of this term
      get termType() {
        return "Quad";
      }
      // ### Returns a plain object representation of this quad
      toJSON() {
        return {
          termType: this.termType,
          subject: this.subject.toJSON(),
          predicate: this.predicate.toJSON(),
          object: this.object.toJSON(),
          graph: this.graph.toJSON()
        };
      }
      // ### Returns whether this object represents the same quad as the other
      equals(other) {
        return !!other && this.subject.equals(other.subject) && this.predicate.equals(other.predicate) && this.object.equals(other.object) && this.graph.equals(other.graph);
      }
    };
    exports.Triple = exports.Quad = Quad;
    function escapeQuotes(id) {
      return id.replace(escapedLiteral, (_10, quoted) => `"${quoted.replace(/"/g, '""')}`);
    }
    function unescapeQuotes(id) {
      return id.replace(escapedLiteral, (_10, quoted) => `"${quoted.replace(/""/g, '"')}`);
    }
    function namedNode5(iri) {
      return new NamedNode(iri);
    }
    function blankNode(name) {
      return new BlankNode(name || `n3-${_blankNodeCounter++}`);
    }
    function literal4(value, languageOrDataType) {
      if (typeof languageOrDataType === "string")
        return new Literal3(`"${value}"@${languageOrDataType.toLowerCase()}`);
      let datatype = languageOrDataType ? languageOrDataType.value : "";
      if (datatype === "") {
        if (typeof value === "boolean")
          datatype = xsd.boolean;
        else if (typeof value === "number") {
          if (Number.isFinite(value))
            datatype = Number.isInteger(value) ? xsd.integer : xsd.double;
          else {
            datatype = xsd.double;
            if (!Number.isNaN(value))
              value = value > 0 ? "INF" : "-INF";
          }
        }
      }
      return datatype === "" || datatype === xsd.string ? new Literal3(`"${value}"`) : new Literal3(`"${value}"^^${datatype}`);
    }
    function variable(name) {
      return new Variable(name);
    }
    function defaultGraph() {
      return DEFAULTGRAPH;
    }
    function quad2(subject, predicate, object, graph) {
      return new Quad(subject, predicate, object, graph);
    }
  }
});

// node_modules/n3/lib/N3Parser.js
var require_N3Parser = __commonJS({
  "node_modules/n3/lib/N3Parser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _N3Lexer = _interopRequireDefault(require_N3Lexer());
    var _N3DataFactory = _interopRequireDefault(require_N3DataFactory());
    var _IRIs = _interopRequireDefault(require_IRIs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var blankNodePrefix = 0;
    var N3Parser = class {
      constructor(options) {
        this._contextStack = [];
        this._graph = null;
        options = options || {};
        this._setBase(options.baseIRI);
        options.factory && initDataFactory(this, options.factory);
        const format = typeof options.format === "string" ? options.format.match(/\w*$/)[0].toLowerCase() : "", isTurtle = /turtle/.test(format), isTriG = /trig/.test(format), isNTriples = /triple/.test(format), isNQuads = /quad/.test(format), isN3 = this._n3Mode = /n3/.test(format), isLineMode = isNTriples || isNQuads;
        if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))
          this._readPredicateOrNamedGraph = this._readPredicate;
        this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);
        this._supportsRDFStar = format === "" || /star|\*$/.test(format);
        if (isLineMode)
          this._resolveRelativeIRI = (iri) => {
            return null;
          };
        this._blankNodePrefix = typeof options.blankNodePrefix !== "string" ? "" : options.blankNodePrefix.replace(/^(?!_:)/, "_:");
        this._lexer = options.lexer || new _N3Lexer.default({
          lineMode: isLineMode,
          n3: isN3
        });
        this._explicitQuantifiers = !!options.explicitQuantifiers;
      }
      // ## Static class methods
      // ### `_resetBlankNodePrefix` restarts blank node prefix identification
      static _resetBlankNodePrefix() {
        blankNodePrefix = 0;
      }
      // ## Private methods
      // ### `_setBase` sets the base IRI to resolve relative IRIs
      _setBase(baseIRI) {
        if (!baseIRI) {
          this._base = "";
          this._basePath = "";
        } else {
          const fragmentPos = baseIRI.indexOf("#");
          if (fragmentPos >= 0)
            baseIRI = baseIRI.substr(0, fragmentPos);
          this._base = baseIRI;
          this._basePath = baseIRI.indexOf("/") < 0 ? baseIRI : baseIRI.replace(/[^\/?]*(?:\?.*)?$/, "");
          baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i);
          this._baseRoot = baseIRI[0];
          this._baseScheme = baseIRI[1];
        }
      }
      // ### `_saveContext` stores the current parsing context
      // when entering a new scope (list, blank node, formula)
      _saveContext(type, graph, subject, predicate, object) {
        const n3Mode = this._n3Mode;
        this._contextStack.push({
          subject,
          predicate,
          object,
          graph,
          type,
          inverse: n3Mode ? this._inversePredicate : false,
          blankPrefix: n3Mode ? this._prefixes._ : "",
          quantified: n3Mode ? this._quantified : null
        });
        if (n3Mode) {
          this._inversePredicate = false;
          this._prefixes._ = this._graph ? `${this._graph.id.substr(2)}.` : ".";
          this._quantified = Object.create(this._quantified);
        }
      }
      // ### `_restoreContext` restores the parent context
      // when leaving a scope (list, blank node, formula)
      _restoreContext() {
        const context = this._contextStack.pop(), n3Mode = this._n3Mode;
        this._subject = context.subject;
        this._predicate = context.predicate;
        this._object = context.object;
        this._graph = context.graph;
        if (n3Mode) {
          this._inversePredicate = context.inverse;
          this._prefixes._ = context.blankPrefix;
          this._quantified = context.quantified;
        }
      }
      // ### `_readInTopContext` reads a token when in the top context
      _readInTopContext(token) {
        switch (token.type) {
          case "eof":
            if (this._graph !== null)
              return this._error("Unclosed graph", token);
            delete this._prefixes._;
            return this._callback(null, null, this._prefixes);
          case "PREFIX":
            this._sparqlStyle = true;
          case "@prefix":
            return this._readPrefix;
          case "BASE":
            this._sparqlStyle = true;
          case "@base":
            return this._readBaseIRI;
          case "{":
            if (this._supportsNamedGraphs) {
              this._graph = "";
              this._subject = null;
              return this._readSubject;
            }
          case "GRAPH":
            if (this._supportsNamedGraphs)
              return this._readNamedGraphLabel;
          default:
            return this._readSubject(token);
        }
      }
      // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable
      _readEntity(token, quantifier) {
        let value;
        switch (token.type) {
          case "IRI":
          case "typeIRI":
            const iri = this._resolveIRI(token.value);
            if (iri === null)
              return this._error("Invalid IRI", token);
            value = this._namedNode(iri);
            break;
          case "type":
          case "prefixed":
            const prefix = this._prefixes[token.prefix];
            if (prefix === void 0)
              return this._error(`Undefined prefix "${token.prefix}:"`, token);
            value = this._namedNode(prefix + token.value);
            break;
          case "blank":
            value = this._blankNode(this._prefixes[token.prefix] + token.value);
            break;
          case "var":
            value = this._variable(token.value.substr(1));
            break;
          default:
            return this._error(`Expected entity but got ${token.type}`, token);
        }
        if (!quantifier && this._n3Mode && value.id in this._quantified)
          value = this._quantified[value.id];
        return value;
      }
      // ### `_readSubject` reads a quad's subject
      _readSubject(token) {
        this._predicate = null;
        switch (token.type) {
          case "[":
            this._saveContext("blank", this._graph, this._subject = this._blankNode(), null, null);
            return this._readBlankNodeHead;
          case "(":
            this._saveContext("list", this._graph, this.RDF_NIL, null, null);
            this._subject = null;
            return this._readListItem;
          case "{":
            if (!this._n3Mode)
              return this._error("Unexpected graph", token);
            this._saveContext("formula", this._graph, this._graph = this._blankNode(), null, null);
            return this._readSubject;
          case "}":
            return this._readPunctuation(token);
          case "@forSome":
            if (!this._n3Mode)
              return this._error('Unexpected "@forSome"', token);
            this._subject = null;
            this._predicate = this.N3_FORSOME;
            this._quantifier = this._blankNode;
            return this._readQuantifierList;
          case "@forAll":
            if (!this._n3Mode)
              return this._error('Unexpected "@forAll"', token);
            this._subject = null;
            this._predicate = this.N3_FORALL;
            this._quantifier = this._variable;
            return this._readQuantifierList;
          case "literal":
            if (!this._n3Mode)
              return this._error("Unexpected literal", token);
            if (token.prefix.length === 0) {
              this._literalValue = token.value;
              return this._completeSubjectLiteral;
            } else
              this._subject = this._literal(token.value, this._namedNode(token.prefix));
            break;
          case "<<":
            if (!this._supportsRDFStar)
              return this._error("Unexpected RDF* syntax", token);
            this._saveContext("<<", this._graph, null, null, null);
            this._graph = null;
            return this._readSubject;
          default:
            if ((this._subject = this._readEntity(token)) === void 0)
              return;
            if (this._n3Mode)
              return this._getPathReader(this._readPredicateOrNamedGraph);
        }
        return this._readPredicateOrNamedGraph;
      }
      // ### `_readPredicate` reads a quad's predicate
      _readPredicate(token) {
        const type = token.type;
        switch (type) {
          case "inverse":
            this._inversePredicate = true;
          case "abbreviation":
            this._predicate = this.ABBREVIATIONS[token.value];
            break;
          case ".":
          case "]":
          case "}":
            if (this._predicate === null)
              return this._error(`Unexpected ${type}`, token);
            this._subject = null;
            return type === "]" ? this._readBlankNodeTail(token) : this._readPunctuation(token);
          case ";":
            return this._predicate !== null ? this._readPredicate : this._error("Expected predicate but got ;", token);
          case "blank":
            if (!this._n3Mode)
              return this._error("Disallowed blank node as predicate", token);
          default:
            if ((this._predicate = this._readEntity(token)) === void 0)
              return;
        }
        return this._readObject;
      }
      // ### `_readObject` reads a quad's object
      _readObject(token) {
        switch (token.type) {
          case "literal":
            if (token.prefix.length === 0) {
              this._literalValue = token.value;
              return this._readDataTypeOrLang;
            } else
              this._object = this._literal(token.value, this._namedNode(token.prefix));
            break;
          case "[":
            this._saveContext("blank", this._graph, this._subject, this._predicate, this._subject = this._blankNode());
            return this._readBlankNodeHead;
          case "(":
            this._saveContext("list", this._graph, this._subject, this._predicate, this.RDF_NIL);
            this._subject = null;
            return this._readListItem;
          case "{":
            if (!this._n3Mode)
              return this._error("Unexpected graph", token);
            this._saveContext("formula", this._graph, this._subject, this._predicate, this._graph = this._blankNode());
            return this._readSubject;
          case "<<":
            if (!this._supportsRDFStar)
              return this._error("Unexpected RDF* syntax", token);
            this._saveContext("<<", this._graph, this._subject, this._predicate, null);
            this._graph = null;
            return this._readSubject;
          default:
            if ((this._object = this._readEntity(token)) === void 0)
              return;
            if (this._n3Mode)
              return this._getPathReader(this._getContextEndReader());
        }
        return this._getContextEndReader();
      }
      // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph
      _readPredicateOrNamedGraph(token) {
        return token.type === "{" ? this._readGraph(token) : this._readPredicate(token);
      }
      // ### `_readGraph` reads a graph
      _readGraph(token) {
        if (token.type !== "{")
          return this._error(`Expected graph but got ${token.type}`, token);
        this._graph = this._subject, this._subject = null;
        return this._readSubject;
      }
      // ### `_readBlankNodeHead` reads the head of a blank node
      _readBlankNodeHead(token) {
        if (token.type === "]") {
          this._subject = null;
          return this._readBlankNodeTail(token);
        } else {
          this._predicate = null;
          return this._readPredicate(token);
        }
      }
      // ### `_readBlankNodeTail` reads the end of a blank node
      _readBlankNodeTail(token) {
        if (token.type !== "]")
          return this._readBlankNodePunctuation(token);
        if (this._subject !== null)
          this._emit(this._subject, this._predicate, this._object, this._graph);
        const empty = this._predicate === null;
        this._restoreContext();
        if (this._object === null)
          return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;
        else
          return this._getContextEndReader();
      }
      // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node
      _readPredicateAfterBlank(token) {
        switch (token.type) {
          case ".":
          case "}":
            this._subject = null;
            return this._readPunctuation(token);
          default:
            return this._readPredicate(token);
        }
      }
      // ### `_readListItem` reads items from a list
      _readListItem(token) {
        let item = null, list = null, next = this._readListItem;
        const previousList = this._subject, stack = this._contextStack, parent = stack[stack.length - 1];
        switch (token.type) {
          case "[":
            this._saveContext("blank", this._graph, list = this._blankNode(), this.RDF_FIRST, this._subject = item = this._blankNode());
            next = this._readBlankNodeHead;
            break;
          case "(":
            this._saveContext("list", this._graph, list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);
            this._subject = null;
            break;
          case ")":
            this._restoreContext();
            if (stack.length !== 0 && stack[stack.length - 1].type === "list")
              this._emit(this._subject, this._predicate, this._object, this._graph);
            if (this._predicate === null) {
              next = this._readPredicate;
              if (this._subject === this.RDF_NIL)
                return next;
            } else {
              next = this._getContextEndReader();
              if (this._object === this.RDF_NIL)
                return next;
            }
            list = this.RDF_NIL;
            break;
          case "literal":
            if (token.prefix.length === 0) {
              this._literalValue = token.value;
              next = this._readListItemDataTypeOrLang;
            } else {
              item = this._literal(token.value, this._namedNode(token.prefix));
              next = this._getContextEndReader();
            }
            break;
          case "{":
            if (!this._n3Mode)
              return this._error("Unexpected graph", token);
            this._saveContext("formula", this._graph, this._subject, this._predicate, this._graph = this._blankNode());
            return this._readSubject;
          default:
            if ((item = this._readEntity(token)) === void 0)
              return;
        }
        if (list === null)
          this._subject = list = this._blankNode();
        if (previousList === null) {
          if (parent.predicate === null)
            parent.subject = list;
          else
            parent.object = list;
        } else {
          this._emit(previousList, this.RDF_REST, list, this._graph);
        }
        if (item !== null) {
          if (this._n3Mode && (token.type === "IRI" || token.type === "prefixed")) {
            this._saveContext("item", this._graph, list, this.RDF_FIRST, item);
            this._subject = item, this._predicate = null;
            return this._getPathReader(this._readListItem);
          }
          this._emit(list, this.RDF_FIRST, item, this._graph);
        }
        return next;
      }
      // ### `_readDataTypeOrLang` reads an _optional_ datatype or language
      _readDataTypeOrLang(token) {
        return this._completeObjectLiteral(token, false);
      }
      // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list
      _readListItemDataTypeOrLang(token) {
        return this._completeObjectLiteral(token, true);
      }
      // ### `_completeLiteral` completes a literal with an optional datatype or language
      _completeLiteral(token) {
        let literal4 = this._literal(this._literalValue);
        switch (token.type) {
          case "type":
          case "typeIRI":
            const datatype = this._readEntity(token);
            if (datatype === void 0)
              return;
            literal4 = this._literal(this._literalValue, datatype);
            token = null;
            break;
          case "langcode":
            literal4 = this._literal(this._literalValue, token.value);
            token = null;
            break;
        }
        return {
          token,
          literal: literal4
        };
      }
      // Completes a literal in subject position
      _completeSubjectLiteral(token) {
        this._subject = this._completeLiteral(token).literal;
        return this._readPredicateOrNamedGraph;
      }
      // Completes a literal in object position
      _completeObjectLiteral(token, listItem) {
        const completed = this._completeLiteral(token);
        if (!completed)
          return;
        this._object = completed.literal;
        if (listItem)
          this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);
        if (completed.token === null)
          return this._getContextEndReader();
        else {
          this._readCallback = this._getContextEndReader();
          return this._readCallback(completed.token);
        }
      }
      // ### `_readFormulaTail` reads the end of a formula
      _readFormulaTail(token) {
        if (token.type !== "}")
          return this._readPunctuation(token);
        if (this._subject !== null)
          this._emit(this._subject, this._predicate, this._object, this._graph);
        this._restoreContext();
        return this._object === null ? this._readPredicate : this._getContextEndReader();
      }
      // ### `_readPunctuation` reads punctuation between quads or quad parts
      _readPunctuation(token) {
        let next, graph = this._graph;
        const subject = this._subject, inversePredicate = this._inversePredicate;
        switch (token.type) {
          case "}":
            if (this._graph === null)
              return this._error("Unexpected graph closing", token);
            if (this._n3Mode)
              return this._readFormulaTail(token);
            this._graph = null;
          case ".":
            this._subject = null;
            next = this._contextStack.length ? this._readSubject : this._readInTopContext;
            if (inversePredicate)
              this._inversePredicate = false;
            break;
          case ";":
            next = this._readPredicate;
            break;
          case ",":
            next = this._readObject;
            break;
          default:
            if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== void 0) {
              next = this._readQuadPunctuation;
              break;
            }
            return this._error(`Expected punctuation to follow "${this._object.id}"`, token);
        }
        if (subject !== null) {
          const predicate = this._predicate, object = this._object;
          if (!inversePredicate)
            this._emit(subject, predicate, object, graph);
          else
            this._emit(object, predicate, subject, graph);
        }
        return next;
      }
      // ### `_readBlankNodePunctuation` reads punctuation in a blank node
      _readBlankNodePunctuation(token) {
        let next;
        switch (token.type) {
          case ";":
            next = this._readPredicate;
            break;
          case ",":
            next = this._readObject;
            break;
          default:
            return this._error(`Expected punctuation to follow "${this._object.id}"`, token);
        }
        this._emit(this._subject, this._predicate, this._object, this._graph);
        return next;
      }
      // ### `_readQuadPunctuation` reads punctuation after a quad
      _readQuadPunctuation(token) {
        if (token.type !== ".")
          return this._error("Expected dot to follow quad", token);
        return this._readInTopContext;
      }
      // ### `_readPrefix` reads the prefix of a prefix declaration
      _readPrefix(token) {
        if (token.type !== "prefix")
          return this._error("Expected prefix to follow @prefix", token);
        this._prefix = token.value;
        return this._readPrefixIRI;
      }
      // ### `_readPrefixIRI` reads the IRI of a prefix declaration
      _readPrefixIRI(token) {
        if (token.type !== "IRI")
          return this._error(`Expected IRI to follow prefix "${this._prefix}:"`, token);
        const prefixNode = this._readEntity(token);
        this._prefixes[this._prefix] = prefixNode.value;
        this._prefixCallback(this._prefix, prefixNode);
        return this._readDeclarationPunctuation;
      }
      // ### `_readBaseIRI` reads the IRI of a base declaration
      _readBaseIRI(token) {
        const iri = token.type === "IRI" && this._resolveIRI(token.value);
        if (!iri)
          return this._error("Expected valid IRI to follow base declaration", token);
        this._setBase(iri);
        return this._readDeclarationPunctuation;
      }
      // ### `_readNamedGraphLabel` reads the label of a named graph
      _readNamedGraphLabel(token) {
        switch (token.type) {
          case "IRI":
          case "blank":
          case "prefixed":
            return this._readSubject(token), this._readGraph;
          case "[":
            return this._readNamedGraphBlankLabel;
          default:
            return this._error("Invalid graph label", token);
        }
      }
      // ### `_readNamedGraphLabel` reads a blank node label of a named graph
      _readNamedGraphBlankLabel(token) {
        if (token.type !== "]")
          return this._error("Invalid graph label", token);
        this._subject = this._blankNode();
        return this._readGraph;
      }
      // ### `_readDeclarationPunctuation` reads the punctuation of a declaration
      _readDeclarationPunctuation(token) {
        if (this._sparqlStyle) {
          this._sparqlStyle = false;
          return this._readInTopContext(token);
        }
        if (token.type !== ".")
          return this._error("Expected declaration to end with a dot", token);
        return this._readInTopContext;
      }
      // Reads a list of quantified symbols from a @forSome or @forAll statement
      _readQuantifierList(token) {
        let entity;
        switch (token.type) {
          case "IRI":
          case "prefixed":
            if ((entity = this._readEntity(token, true)) !== void 0)
              break;
          default:
            return this._error(`Unexpected ${token.type}`, token);
        }
        if (!this._explicitQuantifiers)
          this._quantified[entity.id] = this._quantifier(this._blankNode().value);
        else {
          if (this._subject === null)
            this._emit(this._graph || this.DEFAULTGRAPH, this._predicate, this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);
          else
            this._emit(this._subject, this.RDF_REST, this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);
          this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);
        }
        return this._readQuantifierPunctuation;
      }
      // Reads punctuation from a @forSome or @forAll statement
      _readQuantifierPunctuation(token) {
        if (token.type === ",")
          return this._readQuantifierList;
        else {
          if (this._explicitQuantifiers) {
            this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);
            this._subject = null;
          }
          this._readCallback = this._getContextEndReader();
          return this._readCallback(token);
        }
      }
      // ### `_getPathReader` reads a potential path and then resumes with the given function
      _getPathReader(afterPath) {
        this._afterPath = afterPath;
        return this._readPath;
      }
      // ### `_readPath` reads a potential path
      _readPath(token) {
        switch (token.type) {
          case "!":
            return this._readForwardPath;
          case "^":
            return this._readBackwardPath;
          default:
            const stack = this._contextStack, parent = stack.length && stack[stack.length - 1];
            if (parent && parent.type === "item") {
              const item = this._subject;
              this._restoreContext();
              this._emit(this._subject, this.RDF_FIRST, item, this._graph);
            }
            return this._afterPath(token);
        }
      }
      // ### `_readForwardPath` reads a '!' path
      _readForwardPath(token) {
        let subject, predicate;
        const object = this._blankNode();
        if ((predicate = this._readEntity(token)) === void 0)
          return;
        if (this._predicate === null)
          subject = this._subject, this._subject = object;
        else
          subject = this._object, this._object = object;
        this._emit(subject, predicate, object, this._graph);
        return this._readPath;
      }
      // ### `_readBackwardPath` reads a '^' path
      _readBackwardPath(token) {
        const subject = this._blankNode();
        let predicate, object;
        if ((predicate = this._readEntity(token)) === void 0)
          return;
        if (this._predicate === null)
          object = this._subject, this._subject = subject;
        else
          object = this._object, this._object = subject;
        this._emit(subject, predicate, object, this._graph);
        return this._readPath;
      }
      // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple
      _readRDFStarTailOrGraph(token) {
        if (token.type !== ">>") {
          if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== void 0)
            return this._readRDFStarTail;
          return this._error(`Expected >> to follow "${this._object.id}"`, token);
        }
        return this._readRDFStarTail(token);
      }
      // ### `_readRDFStarTail` reads the end of a nested RDF* triple
      _readRDFStarTail(token) {
        if (token.type !== ">>")
          return this._error(`Expected >> but got ${token.type}`, token);
        const quad2 = this._quad(this._subject, this._predicate, this._object, this._graph || this.DEFAULTGRAPH);
        this._restoreContext();
        if (this._subject === null) {
          this._subject = quad2;
          return this._readPredicate;
        } else {
          this._object = quad2;
          return this._getContextEndReader();
        }
      }
      // ### `_getContextEndReader` gets the next reader function at the end of a context
      _getContextEndReader() {
        const contextStack = this._contextStack;
        if (!contextStack.length)
          return this._readPunctuation;
        switch (contextStack[contextStack.length - 1].type) {
          case "blank":
            return this._readBlankNodeTail;
          case "list":
            return this._readListItem;
          case "formula":
            return this._readFormulaTail;
          case "<<":
            return this._readRDFStarTailOrGraph;
        }
      }
      // ### `_emit` sends a quad through the callback
      _emit(subject, predicate, object, graph) {
        this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));
      }
      // ### `_error` emits an error message through the callback
      _error(message, token) {
        const err = new Error(`${message} on line ${token.line}.`);
        err.context = {
          token,
          line: token.line,
          previousToken: this._lexer.previousToken
        };
        this._callback(err);
        this._callback = noop;
      }
      // ### `_resolveIRI` resolves an IRI against the base path
      _resolveIRI(iri) {
        return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);
      }
      // ### `_resolveRelativeIRI` resolves an IRI against the base path,
      // assuming that a base path has been set and that the IRI is indeed relative
      _resolveRelativeIRI(iri) {
        if (!iri.length)
          return this._base;
        switch (iri[0]) {
          case "#":
            return this._base + iri;
          case "?":
            return this._base.replace(/(?:\?.*)?$/, iri);
          case "/":
            return (iri[1] === "/" ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);
          default:
            return /^[^/:]*:/.test(iri) ? null : this._removeDotSegments(this._basePath + iri);
        }
      }
      // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986
      _removeDotSegments(iri) {
        if (!/(^|\/)\.\.?($|[/#?])/.test(iri))
          return iri;
        const length = iri.length;
        let result = "", i = -1, pathStart = -1, segmentStart = 0, next = "/";
        while (i < length) {
          switch (next) {
            case ":":
              if (pathStart < 0) {
                if (iri[++i] === "/" && iri[++i] === "/")
                  while ((pathStart = i + 1) < length && iri[pathStart] !== "/")
                    i = pathStart;
              }
              break;
            case "?":
            case "#":
              i = length;
              break;
            case "/":
              if (iri[i + 1] === ".") {
                next = iri[++i + 1];
                switch (next) {
                  case "/":
                    result += iri.substring(segmentStart, i - 1);
                    segmentStart = i + 1;
                    break;
                  case void 0:
                  case "?":
                  case "#":
                    return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
                  case ".":
                    next = iri[++i + 1];
                    if (next === void 0 || next === "/" || next === "?" || next === "#") {
                      result += iri.substring(segmentStart, i - 2);
                      if ((segmentStart = result.lastIndexOf("/")) >= pathStart)
                        result = result.substr(0, segmentStart);
                      if (next !== "/")
                        return `${result}/${iri.substr(i + 1)}`;
                      segmentStart = i + 1;
                    }
                }
              }
          }
          next = iri[++i];
        }
        return result + iri.substring(segmentStart);
      }
      // ## Public methods
      // ### `parse` parses the N3 input and emits each parsed quad through the callback
      parse(input, quadCallback, prefixCallback) {
        this._readCallback = this._readInTopContext;
        this._sparqlStyle = false;
        this._prefixes = /* @__PURE__ */ Object.create(null);
        this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2) : `b${blankNodePrefix++}_`;
        this._prefixCallback = prefixCallback || noop;
        this._inversePredicate = false;
        this._quantified = /* @__PURE__ */ Object.create(null);
        if (!quadCallback) {
          const quads = [];
          let error;
          this._callback = (e, t) => {
            e ? error = e : t && quads.push(t);
          };
          this._lexer.tokenize(input).every((token) => {
            return this._readCallback = this._readCallback(token);
          });
          if (error)
            throw error;
          return quads;
        }
        this._callback = quadCallback;
        this._lexer.tokenize(input, (error, token) => {
          if (error !== null)
            this._callback(error), this._callback = noop;
          else if (this._readCallback)
            this._readCallback = this._readCallback(token);
        });
      }
    };
    exports.default = N3Parser;
    function noop() {
    }
    function initDataFactory(parser, factory) {
      const namedNode5 = factory.namedNode;
      parser._namedNode = namedNode5;
      parser._blankNode = factory.blankNode;
      parser._literal = factory.literal;
      parser._variable = factory.variable;
      parser._quad = factory.quad;
      parser.DEFAULTGRAPH = factory.defaultGraph();
      parser.RDF_FIRST = namedNode5(_IRIs.default.rdf.first);
      parser.RDF_REST = namedNode5(_IRIs.default.rdf.rest);
      parser.RDF_NIL = namedNode5(_IRIs.default.rdf.nil);
      parser.N3_FORALL = namedNode5(_IRIs.default.r.forAll);
      parser.N3_FORSOME = namedNode5(_IRIs.default.r.forSome);
      parser.ABBREVIATIONS = {
        "a": namedNode5(_IRIs.default.rdf.type),
        "=": namedNode5(_IRIs.default.owl.sameAs),
        ">": namedNode5(_IRIs.default.log.implies)
      };
      parser.QUANTIFIERS_GRAPH = namedNode5("urn:n3:quantifiers");
    }
    initDataFactory(N3Parser.prototype, _N3DataFactory.default);
  }
});

// node_modules/n3/lib/N3Writer.js
var require_N3Writer = __commonJS({
  "node_modules/n3/lib/N3Writer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _IRIs = _interopRequireDefault(require_IRIs());
    var _N3DataFactory = _interopRequireWildcard(require_N3DataFactory());
    var _N3Util = require_N3Util();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function")
        return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var DEFAULTGRAPH = _N3DataFactory.default.defaultGraph();
    var {
      rdf,
      xsd
    } = _IRIs.default;
    var escape = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/;
    var escapeAll = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g;
    var escapedCharacters = {
      "\\": "\\\\",
      '"': '\\"',
      "	": "\\t",
      "\n": "\\n",
      "\r": "\\r",
      "\b": "\\b",
      "\f": "\\f"
    };
    var SerializedTerm = class extends _N3DataFactory.Term {
      // Pretty-printed nodes are not equal to any other node
      // (e.g., [] does not equal [])
      equals() {
        return false;
      }
    };
    var N3Writer = class {
      constructor(outputStream, options) {
        this._prefixRegex = /$0^/;
        if (outputStream && typeof outputStream.write !== "function")
          options = outputStream, outputStream = null;
        options = options || {};
        this._lists = options.lists;
        if (!outputStream) {
          let output = "";
          this._outputStream = {
            write(chunk, encoding, done) {
              output += chunk;
              done && done();
            },
            end: (done) => {
              done && done(null, output);
            }
          };
          this._endStream = true;
        } else {
          this._outputStream = outputStream;
          this._endStream = options.end === void 0 ? true : !!options.end;
        }
        this._subject = null;
        if (!/triple|quad/i.test(options.format)) {
          this._lineMode = false;
          this._graph = DEFAULTGRAPH;
          this._baseIRI = options.baseIRI;
          this._prefixIRIs = /* @__PURE__ */ Object.create(null);
          options.prefixes && this.addPrefixes(options.prefixes);
        } else {
          this._lineMode = true;
          this._writeQuad = this._writeQuadLine;
        }
      }
      // ## Private methods
      // ### Whether the current graph is the default graph
      get _inDefaultGraph() {
        return DEFAULTGRAPH.equals(this._graph);
      }
      // ### `_write` writes the argument to the output stream
      _write(string, callback) {
        this._outputStream.write(string, "utf8", callback);
      }
      // ### `_writeQuad` writes the quad to the output stream
      _writeQuad(subject, predicate, object, graph, done) {
        try {
          if (!graph.equals(this._graph)) {
            this._write((this._subject === null ? "" : this._inDefaultGraph ? ".\n" : "\n}\n") + (DEFAULTGRAPH.equals(graph) ? "" : `${this._encodeIriOrBlank(graph)} {
`));
            this._graph = graph;
            this._subject = null;
          }
          if (subject.equals(this._subject)) {
            if (predicate.equals(this._predicate))
              this._write(`, ${this._encodeObject(object)}`, done);
            else
              this._write(`;
    ${this._encodePredicate(this._predicate = predicate)} ${this._encodeObject(object)}`, done);
          } else
            this._write(`${(this._subject === null ? "" : ".\n") + this._encodeSubject(this._subject = subject)} ${this._encodePredicate(this._predicate = predicate)} ${this._encodeObject(object)}`, done);
        } catch (error) {
          done && done(error);
        }
      }
      // ### `_writeQuadLine` writes the quad to the output stream as a single line
      _writeQuadLine(subject, predicate, object, graph, done) {
        delete this._prefixMatch;
        this._write(this.quadToString(subject, predicate, object, graph), done);
      }
      // ### `quadToString` serializes a quad as a string
      quadToString(subject, predicate, object, graph) {
        return `${this._encodeSubject(subject)} ${this._encodeIriOrBlank(predicate)} ${this._encodeObject(object)}${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .
` : " .\n"}`;
      }
      // ### `quadsToString` serializes an array of quads as a string
      quadsToString(quads) {
        return quads.map((t) => {
          return this.quadToString(t.subject, t.predicate, t.object, t.graph);
        }).join("");
      }
      // ### `_encodeSubject` represents a subject
      _encodeSubject(entity) {
        return entity.termType === "Quad" ? this._encodeQuad(entity) : this._encodeIriOrBlank(entity);
      }
      // ### `_encodeIriOrBlank` represents an IRI or blank node
      _encodeIriOrBlank(entity) {
        if (entity.termType !== "NamedNode") {
          if (this._lists && entity.value in this._lists)
            entity = this.list(this._lists[entity.value]);
          return "id" in entity ? entity.id : `_:${entity.value}`;
        }
        let iri = entity.value;
        if (this._baseIRI && iri.startsWith(this._baseIRI))
          iri = iri.substr(this._baseIRI.length);
        if (escape.test(iri))
          iri = iri.replace(escapeAll, characterReplacer);
        const prefixMatch = this._prefixRegex.exec(iri);
        return !prefixMatch ? `<${iri}>` : !prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2];
      }
      // ### `_encodeLiteral` represents a literal
      _encodeLiteral(literal4) {
        let value = literal4.value;
        if (escape.test(value))
          value = value.replace(escapeAll, characterReplacer);
        if (literal4.language)
          return `"${value}"@${literal4.language}`;
        if (this._lineMode) {
          if (literal4.datatype.value === xsd.string)
            return `"${value}"`;
        } else {
          switch (literal4.datatype.value) {
            case xsd.string:
              return `"${value}"`;
            case xsd.boolean:
              if (value === "true" || value === "false")
                return value;
              break;
            case xsd.integer:
              if (/^[+-]?\d+$/.test(value))
                return value;
              break;
            case xsd.decimal:
              if (/^[+-]?\d*\.\d+$/.test(value))
                return value;
              break;
            case xsd.double:
              if (/^[+-]?(?:\d+\.\d*|\.?\d+)[eE][+-]?\d+$/.test(value))
                return value;
              break;
          }
        }
        return `"${value}"^^${this._encodeIriOrBlank(literal4.datatype)}`;
      }
      // ### `_encodePredicate` represents a predicate
      _encodePredicate(predicate) {
        return predicate.value === rdf.type ? "a" : this._encodeIriOrBlank(predicate);
      }
      // ### `_encodeObject` represents an object
      _encodeObject(object) {
        switch (object.termType) {
          case "Quad":
            return this._encodeQuad(object);
          case "Literal":
            return this._encodeLiteral(object);
          default:
            return this._encodeIriOrBlank(object);
        }
      }
      // ### `_encodeQuad` encodes an RDF* quad
      _encodeQuad({
        subject,
        predicate,
        object,
        graph
      }) {
        return `<<${this._encodeSubject(subject)} ${this._encodePredicate(predicate)} ${this._encodeObject(object)}${(0, _N3Util.isDefaultGraph)(graph) ? "" : ` ${this._encodeIriOrBlank(graph)}`}>>`;
      }
      // ### `_blockedWrite` replaces `_write` after the writer has been closed
      _blockedWrite() {
        throw new Error("Cannot write because the writer has been closed.");
      }
      // ### `addQuad` adds the quad to the output stream
      addQuad(subject, predicate, object, graph, done) {
        if (object === void 0)
          this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);
        else if (typeof graph === "function")
          this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);
        else
          this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);
      }
      // ### `addQuads` adds the quads to the output stream
      addQuads(quads) {
        for (let i = 0; i < quads.length; i++)
          this.addQuad(quads[i]);
      }
      // ### `addPrefix` adds the prefix to the output stream
      addPrefix(prefix, iri, done) {
        const prefixes = {};
        prefixes[prefix] = iri;
        this.addPrefixes(prefixes, done);
      }
      // ### `addPrefixes` adds the prefixes to the output stream
      addPrefixes(prefixes, done) {
        if (!this._prefixIRIs)
          return done && done();
        let hasPrefixes = false;
        for (let prefix in prefixes) {
          let iri = prefixes[prefix];
          if (typeof iri !== "string")
            iri = iri.value;
          hasPrefixes = true;
          if (this._subject !== null) {
            this._write(this._inDefaultGraph ? ".\n" : "\n}\n");
            this._subject = null, this._graph = "";
          }
          this._prefixIRIs[iri] = prefix += ":";
          this._write(`@prefix ${prefix} <${iri}>.
`);
        }
        if (hasPrefixes) {
          let IRIlist = "", prefixList = "";
          for (const prefixIRI in this._prefixIRIs) {
            IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;
            prefixList += (prefixList ? "|" : "") + this._prefixIRIs[prefixIRI];
          }
          IRIlist = IRIlist.replace(/[\]\/\(\)\*\+\?\.\\\$]/g, "\\$&");
          this._prefixRegex = new RegExp(`^(?:${prefixList})[^/]*$|^(${IRIlist})([a-zA-Z][\\-_a-zA-Z0-9]*)$`);
        }
        this._write(hasPrefixes ? "\n" : "", done);
      }
      // ### `blank` creates a blank node with the given content
      blank(predicate, object) {
        let children = predicate, child, length;
        if (predicate === void 0)
          children = [];
        else if (predicate.termType)
          children = [{
            predicate,
            object
          }];
        else if (!("length" in predicate))
          children = [predicate];
        switch (length = children.length) {
          case 0:
            return new SerializedTerm("[]");
          case 1:
            child = children[0];
            if (!(child.object instanceof SerializedTerm))
              return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${this._encodeObject(child.object)} ]`);
          default:
            let contents = "[";
            for (let i = 0; i < length; i++) {
              child = children[i];
              if (child.predicate.equals(predicate))
                contents += `, ${this._encodeObject(child.object)}`;
              else {
                contents += `${(i ? ";\n  " : "\n  ") + this._encodePredicate(child.predicate)} ${this._encodeObject(child.object)}`;
                predicate = child.predicate;
              }
            }
            return new SerializedTerm(`${contents}
]`);
        }
      }
      // ### `list` creates a list node with the given content
      list(elements) {
        const length = elements && elements.length || 0, contents = new Array(length);
        for (let i = 0; i < length; i++)
          contents[i] = this._encodeObject(elements[i]);
        return new SerializedTerm(`(${contents.join(" ")})`);
      }
      // ### `end` signals the end of the output stream
      end(done) {
        if (this._subject !== null) {
          this._write(this._inDefaultGraph ? ".\n" : "\n}\n");
          this._subject = null;
        }
        this._write = this._blockedWrite;
        let singleDone = done && ((error, result) => {
          singleDone = null, done(error, result);
        });
        if (this._endStream) {
          try {
            return this._outputStream.end(singleDone);
          } catch (error) {
          }
        }
        singleDone && singleDone();
      }
    };
    exports.default = N3Writer;
    function characterReplacer(character) {
      let result = escapedCharacters[character];
      if (result === void 0) {
        if (character.length === 1) {
          result = character.charCodeAt(0).toString(16);
          result = "\\u0000".substr(0, 6 - result.length) + result;
        } else {
          result = ((character.charCodeAt(0) - 55296) * 1024 + character.charCodeAt(1) + 9216).toString(16);
          result = "\\U00000000".substr(0, 10 - result.length) + result;
        }
      }
      return result;
    }
  }
});

// node_modules/n3/node_modules/readable-stream/lib/internal/streams/stream.js
var require_stream = __commonJS({
  "node_modules/n3/node_modules/readable-stream/lib/internal/streams/stream.js"(exports, module2) {
    module2.exports = require("stream");
  }
});

// node_modules/n3/node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "node_modules/n3/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module2) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var _require = require("buffer");
    var Buffer2 = _require.Buffer;
    var _require2 = require("util");
    var inspect = _require2.inspect;
    var custom = inspect && inspect.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    module2.exports = /* @__PURE__ */ function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0)
            this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0)
            return;
          var ret = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0)
            return "";
          var p = this.head;
          var ret = "" + p.data;
          while (p = p.next) {
            ret += s + p.data;
          }
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0)
            return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;
          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        }
        // Consumes a specified amount of bytes or characters from the buffered data.
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
        // Consumes a specified amount of characters from the buffered data.
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;
          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length)
              ret += str;
            else
              ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
        // Consumes a specified amount of bytes from the buffered data.
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;
          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
        // Make sure the linked list only shows the minimal necessary information.
      }, {
        key: custom,
        value: function value(_10, options) {
          return inspect(this, _objectSpread({}, options, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// node_modules/n3/node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/n3/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module2) {
    "use strict";
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose)
        return;
      if (self2._readableState && !self2._readableState.emitClose)
        return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy)
        stream.destroy(err);
      else
        stream.emit("error", err);
    }
    module2.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/n3/node_modules/readable-stream/errors.js
var require_errors2 = __commonJS({
  "node_modules/n3/node_modules/readable-stream/errors.js"(exports, module2) {
    "use strict";
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      class NodeError extends Base {
        constructor(arg1, arg2, arg3) {
          super(getMessage(arg1, arg2, arg3));
        }
      }
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        const len = expected.length;
        expected = expected.map((i) => String(i));
        if (len > 2) {
          return `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` + expected[len - 1];
        } else if (len === 2) {
          return `one of ${thing} ${expected[0]} or ${expected[1]}`;
        } else {
          return `of ${thing} ${expected[0]}`;
        }
      } else {
        return `of ${thing} ${String(expected)}`;
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      let determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      let msg;
      if (endsWith(name, " argument")) {
        msg = `The ${name} ${determiner} ${oneOf(expected, "type")}`;
      } else {
        const type = includes(name, ".") ? "property" : "argument";
        msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, "type")}`;
      }
      msg += `. Received type ${typeof actual}`;
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
      return "The " + name + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name) {
      return "Cannot call " + name + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module2.exports.codes = codes;
  }
});

// node_modules/n3/node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "node_modules/n3/node_modules/readable-stream/lib/internal/streams/state.js"(exports, module2) {
    "use strict";
    var ERR_INVALID_OPT_VALUE = require_errors2().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module2.exports = {
      getHighWaterMark
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/inherits/inherits.js
var require_inherits = __commonJS({
  "node_modules/inherits/inherits.js"(exports, module2) {
    try {
      util = require("util");
      if (typeof util.inherits !== "function")
        throw "";
      module2.exports = util.inherits;
    } catch (e) {
      module2.exports = require_inherits_browser();
    }
    var util;
  }
});

// node_modules/util-deprecate/node.js
var require_node = __commonJS({
  "node_modules/util-deprecate/node.js"(exports, module2) {
    module2.exports = require("util").deprecate;
  }
});

// node_modules/n3/node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/n3/node_modules/readable-stream/lib/_stream_writable.js"(exports, module2) {
    "use strict";
    module2.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var Duplex;
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_node()
    };
    var Stream = require_stream();
    var Buffer2 = require("buffer").Buffer;
    var OurUint8Array = global.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors2().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_10) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this))
        return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
    }
    function validChunk(stream, state, chunk, cb) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ending)
        writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        process.nextTick(cb, er);
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== "function")
        throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished)
          process.nextTick(cb);
        else
          stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
  }
});

// node_modules/n3/node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/n3/node_modules/readable-stream/lib/_stream_duplex.js"(exports, module2) {
    "use strict";
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key in obj) {
        keys2.push(key);
      }
      return keys2;
    };
    module2.exports = Duplex;
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    require_inherits()(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false)
          this.readable = false;
        if (options.writable === false)
          this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended)
        return;
      process.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
  }
});

// node_modules/string_decoder/node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/string_decoder/node_modules/safe-buffer/index.js"(exports, module2) {
    var buffer = require("buffer");
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder = __commonJS({
  "node_modules/string_decoder/lib/string_decoder.js"(exports) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc)
        return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried)
              return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
        throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0)
        return "";
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === void 0)
          return "";
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length)
        return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127)
        return 0;
      else if (byte >> 5 === 6)
        return 2;
      else if (byte >> 4 === 14)
        return 3;
      else if (byte >> 3 === 30)
        return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i) {
      var j = buf.length - 1;
      if (j < i)
        return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2)
            nb = 0;
          else
            self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "\uFFFD";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "\uFFFD";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "\uFFFD";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== void 0)
        return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed)
        return buf.toString("utf8", i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i, end);
    }
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + "\uFFFD";
      return r;
    }
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 55296 && c <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i, buf.length - 1);
    }
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
      }
      return r;
    }
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0)
        return buf.toString("base64", i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i, buf.length - n);
    }
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// node_modules/n3/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({
  "node_modules/n3/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module2) {
    "use strict";
    var ERR_STREAM_PREMATURE_CLOSE = require_errors2().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable)
          onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable)
          callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable)
          callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module2.exports = eos;
  }
});

// node_modules/n3/node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({
  "node_modules/n3/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module2) {
    "use strict";
    var _Object$setPrototypeO;
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var finished = require_end_of_stream();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];
      if (resolve !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      process.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve, reject) {
            process.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module2.exports = createReadableStreamAsyncIterator;
  }
});

// node_modules/n3/node_modules/readable-stream/lib/internal/streams/from.js
var require_from = __commonJS({
  "node_modules/n3/node_modules/readable-stream/lib/internal/streams/from.js"(exports, module2) {
    "use strict";
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self2, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var ERR_INVALID_ARG_TYPE = require_errors2().codes.ERR_INVALID_ARG_TYPE;
    function from(Readable, iterable, opts) {
      var iterator;
      if (iterable && typeof iterable.next === "function") {
        iterator = iterable;
      } else if (iterable && iterable[Symbol.asyncIterator])
        iterator = iterable[Symbol.asyncIterator]();
      else if (iterable && iterable[Symbol.iterator])
        iterator = iterable[Symbol.iterator]();
      else
        throw new ERR_INVALID_ARG_TYPE("iterable", ["Iterable"], iterable);
      var readable = new Readable(_objectSpread({
        objectMode: true
      }, opts));
      var reading = false;
      readable._read = function() {
        if (!reading) {
          reading = true;
          next();
        }
      };
      function next() {
        return _next2.apply(this, arguments);
      }
      function _next2() {
        _next2 = _asyncToGenerator(function* () {
          try {
            var _ref = yield iterator.next(), value = _ref.value, done = _ref.done;
            if (done) {
              readable.push(null);
            } else if (readable.push(yield value)) {
              next();
            } else {
              reading = false;
            }
          } catch (err) {
            readable.destroy(err);
          }
        });
        return _next2.apply(this, arguments);
      }
      return readable;
    }
    module2.exports = from;
  }
});

// node_modules/n3/node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/n3/node_modules/readable-stream/lib/_stream_readable.js"(exports, module2) {
    "use strict";
    module2.exports = Readable;
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require("events").EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream();
    var Buffer2 = require("buffer").Buffer;
    var OurUint8Array = global.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = require("util");
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors2().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits()(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable))
        return new Readable(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck)
          er = chunkInvalid(state, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else
              addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else
                maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require_string_decoder().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p = this._readableState.buffer.head;
      var content = "";
      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }
      this._readableState.buffer.clear();
      if (content !== "")
        this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        process.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          errorOrDestroy(dest, er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++) {
          dests[i].emit("unpipe", this, {
            hasUnpiped: false
          });
        }
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null) {
        ;
      }
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (this[i] === void 0 && typeof stream[i] === "function") {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x)
          return i;
      }
      return -1;
    }
  }
});

// node_modules/n3/node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/n3/node_modules/readable-stream/lib/_stream_transform.js"(exports, module2) {
    "use strict";
    module2.exports = Transform;
    var _require$codes = require_errors2().codes;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex();
    require_inherits()(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform))
        return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
      });
    };
    function done(stream, er, data) {
      if (er)
        return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length)
        throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming)
        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }
});

// node_modules/n3/node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/n3/node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module2) {
    "use strict";
    module2.exports = PassThrough;
    var Transform = require_stream_transform();
    require_inherits()(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/n3/node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/n3/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module2) {
    "use strict";
    var eos;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = require_errors2().codes;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop(err) {
      if (err)
        throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0)
        eos = require_end_of_stream();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isRequest(stream))
          return stream.abort();
        if (typeof stream.destroy === "function")
          return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length)
        return noop;
      if (typeof streams[streams.length - 1] !== "function")
        return noop;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error;
      var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error)
            error = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    module2.exports = pipeline;
  }
});

// node_modules/n3/node_modules/readable-stream/readable.js
var require_readable = __commonJS({
  "node_modules/n3/node_modules/readable-stream/readable.js"(exports, module2) {
    var Stream = require("stream");
    if (process.env.READABLE_STREAM === "disable" && Stream) {
      module2.exports = Stream.Readable;
      Object.assign(module2.exports, Stream);
      module2.exports.Stream = Stream;
    } else {
      exports = module2.exports = require_stream_readable();
      exports.Stream = Stream || exports;
      exports.Readable = exports;
      exports.Writable = require_stream_writable();
      exports.Duplex = require_stream_duplex();
      exports.Transform = require_stream_transform();
      exports.PassThrough = require_stream_passthrough();
      exports.finished = require_end_of_stream();
      exports.pipeline = require_pipeline();
    }
  }
});

// node_modules/n3/lib/N3Store.js
var require_N3Store = __commonJS({
  "node_modules/n3/lib/N3Store.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _N3DataFactory = _interopRequireWildcard(require_N3DataFactory());
    var _readableStream = require_readable();
    var _IRIs = _interopRequireDefault(require_IRIs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function")
        return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var N3Store = class {
      constructor(quads, options) {
        this._size = 0;
        this._graphs = /* @__PURE__ */ Object.create(null);
        this._id = 0;
        this._ids = /* @__PURE__ */ Object.create(null);
        this._ids["><"] = 0;
        this._entities = /* @__PURE__ */ Object.create(null);
        this._blankNodeIndex = 0;
        if (!options && quads && !quads[0])
          options = quads, quads = null;
        options = options || {};
        this._factory = options.factory || _N3DataFactory.default;
        if (quads)
          this.addQuads(quads);
      }
      // ## Public properties
      // ### `size` returns the number of quads in the store
      get size() {
        let size = this._size;
        if (size !== null)
          return size;
        size = 0;
        const graphs = this._graphs;
        let subjects, subject;
        for (const graphKey in graphs)
          for (const subjectKey in subjects = graphs[graphKey].subjects)
            for (const predicateKey in subject = subjects[subjectKey])
              size += Object.keys(subject[predicateKey]).length;
        return this._size = size;
      }
      // ## Private methods
      // ### `_addToIndex` adds a quad to a three-layered index.
      // Returns if the index has changed, if the entry did not already exist.
      _addToIndex(index0, key0, key1, key2) {
        const index1 = index0[key0] || (index0[key0] = {});
        const index2 = index1[key1] || (index1[key1] = {});
        const existed = key2 in index2;
        if (!existed)
          index2[key2] = null;
        return !existed;
      }
      // ### `_removeFromIndex` removes a quad from a three-layered index
      _removeFromIndex(index0, key0, key1, key2) {
        const index1 = index0[key0], index2 = index1[key1];
        delete index2[key2];
        for (const key in index2)
          return;
        delete index1[key1];
        for (const key in index1)
          return;
        delete index0[key0];
      }
      // ### `_findInIndex` finds a set of quads in a three-layered index.
      // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
      // Any of these keys can be undefined, which is interpreted as a wildcard.
      // `name0`, `name1`, and `name2` are the names of the keys at each level,
      // used when reconstructing the resulting quad
      // (for instance: _subject_, _predicate_, and _object_).
      // Finally, `graph` will be the graph of the created quads.
      // If `callback` is given, each result is passed through it
      // and iteration halts when it returns truthy for any quad.
      // If instead `array` is given, each result is added to the array.
      _findInIndex(index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {
        let tmp, index1, index2;
        const varCount = !key0 + !key1 + !key2, entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities;
        if (key0)
          (tmp = index0, index0 = {})[key0] = tmp[key0];
        for (const value0 in index0) {
          const entity0 = entityKeys[value0];
          if (index1 = index0[value0]) {
            if (key1)
              (tmp = index1, index1 = {})[key1] = tmp[key1];
            for (const value1 in index1) {
              const entity1 = entityKeys[value1];
              if (index2 = index1[value1]) {
                const values = key2 ? key2 in index2 ? [key2] : [] : Object.keys(index2);
                for (let l = 0; l < values.length; l++) {
                  const parts = {
                    subject: null,
                    predicate: null,
                    object: null
                  };
                  parts[name0] = (0, _N3DataFactory.termFromId)(entity0, this._factory);
                  parts[name1] = (0, _N3DataFactory.termFromId)(entity1, this._factory);
                  parts[name2] = (0, _N3DataFactory.termFromId)(entityKeys[values[l]], this._factory);
                  const quad2 = this._factory.quad(parts.subject, parts.predicate, parts.object, (0, _N3DataFactory.termFromId)(graph, this._factory));
                  if (array)
                    array.push(quad2);
                  else if (callback(quad2))
                    return true;
                }
              }
            }
          }
        }
        return array;
      }
      // ### `_loop` executes the callback on all keys of index 0
      _loop(index0, callback) {
        for (const key0 in index0)
          callback(key0);
      }
      // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0
      _loopByKey0(index0, key0, callback) {
        let index1, key1;
        if (index1 = index0[key0]) {
          for (key1 in index1)
            callback(key1);
        }
      }
      // ### `_loopByKey1` executes the callback on given keys of all entries in index 0
      _loopByKey1(index0, key1, callback) {
        let key0, index1;
        for (key0 in index0) {
          index1 = index0[key0];
          if (index1[key1])
            callback(key0);
        }
      }
      // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2
      _loopBy2Keys(index0, key0, key1, callback) {
        let index1, index2, key2;
        if ((index1 = index0[key0]) && (index2 = index1[key1])) {
          for (key2 in index2)
            callback(key2);
        }
      }
      // ### `_countInIndex` counts matching quads in a three-layered index.
      // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
      // Any of these keys can be undefined, which is interpreted as a wildcard.
      _countInIndex(index0, key0, key1, key2) {
        let count = 0, tmp, index1, index2;
        if (key0)
          (tmp = index0, index0 = {})[key0] = tmp[key0];
        for (const value0 in index0) {
          if (index1 = index0[value0]) {
            if (key1)
              (tmp = index1, index1 = {})[key1] = tmp[key1];
            for (const value1 in index1) {
              if (index2 = index1[value1]) {
                if (key2)
                  key2 in index2 && count++;
                else
                  count += Object.keys(index2).length;
              }
            }
          }
        }
        return count;
      }
      // ### `_getGraphs` returns an array with the given graph,
      // or all graphs if the argument is null or undefined.
      _getGraphs(graph) {
        if (!isString(graph))
          return this._graphs;
        const graphs = {};
        graphs[graph] = this._graphs[graph];
        return graphs;
      }
      // ### `_uniqueEntities` returns a function that accepts an entity ID
      // and passes the corresponding entity to callback if it hasn't occurred before.
      _uniqueEntities(callback) {
        const uniqueIds = /* @__PURE__ */ Object.create(null);
        return (id) => {
          if (!(id in uniqueIds)) {
            uniqueIds[id] = true;
            callback((0, _N3DataFactory.termFromId)(this._entities[id], this._factory));
          }
        };
      }
      // ## Public methods
      // ### `addQuad` adds a new quad to the store.
      // Returns if the quad index has changed, if the quad did not already exist.
      addQuad(subject, predicate, object, graph) {
        if (!predicate)
          graph = subject.graph, object = subject.object, predicate = subject.predicate, subject = subject.subject;
        subject = (0, _N3DataFactory.termToId)(subject);
        predicate = (0, _N3DataFactory.termToId)(predicate);
        object = (0, _N3DataFactory.termToId)(object);
        graph = (0, _N3DataFactory.termToId)(graph);
        let graphItem = this._graphs[graph];
        if (!graphItem) {
          graphItem = this._graphs[graph] = {
            subjects: {},
            predicates: {},
            objects: {}
          };
          Object.freeze(graphItem);
        }
        const ids = this._ids;
        const entities = this._entities;
        subject = ids[subject] || (ids[entities[++this._id] = subject] = this._id);
        predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);
        object = ids[object] || (ids[entities[++this._id] = object] = this._id);
        const changed = this._addToIndex(graphItem.subjects, subject, predicate, object);
        this._addToIndex(graphItem.predicates, predicate, object, subject);
        this._addToIndex(graphItem.objects, object, subject, predicate);
        this._size = null;
        return changed;
      }
      // ### `addQuads` adds multiple quads to the store
      addQuads(quads) {
        for (let i = 0; i < quads.length; i++)
          this.addQuad(quads[i]);
      }
      // ### `import` adds a stream of quads to the store
      import(stream) {
        stream.on("data", (quad2) => {
          this.addQuad(quad2);
        });
        return stream;
      }
      // ### `removeQuad` removes a quad from the store if it exists
      removeQuad(subject, predicate, object, graph) {
        if (!predicate)
          graph = subject.graph, object = subject.object, predicate = subject.predicate, subject = subject.subject;
        subject = (0, _N3DataFactory.termToId)(subject);
        predicate = (0, _N3DataFactory.termToId)(predicate);
        object = (0, _N3DataFactory.termToId)(object);
        graph = (0, _N3DataFactory.termToId)(graph);
        const ids = this._ids, graphs = this._graphs;
        let graphItem, subjects, predicates;
        if (!(subject = ids[subject]) || !(predicate = ids[predicate]) || !(object = ids[object]) || !(graphItem = graphs[graph]) || !(subjects = graphItem.subjects[subject]) || !(predicates = subjects[predicate]) || !(object in predicates))
          return false;
        this._removeFromIndex(graphItem.subjects, subject, predicate, object);
        this._removeFromIndex(graphItem.predicates, predicate, object, subject);
        this._removeFromIndex(graphItem.objects, object, subject, predicate);
        if (this._size !== null)
          this._size--;
        for (subject in graphItem.subjects)
          return true;
        delete graphs[graph];
        return true;
      }
      // ### `removeQuads` removes multiple quads from the store
      removeQuads(quads) {
        for (let i = 0; i < quads.length; i++)
          this.removeQuad(quads[i]);
      }
      // ### `remove` removes a stream of quads from the store
      remove(stream) {
        stream.on("data", (quad2) => {
          this.removeQuad(quad2);
        });
        return stream;
      }
      // ### `removeMatches` removes all matching quads from the store
      // Setting any field to `undefined` or `null` indicates a wildcard.
      removeMatches(subject, predicate, object, graph) {
        return this.remove(this.match(subject, predicate, object, graph));
      }
      // ### `deleteGraph` removes all triples with the given graph from the store
      deleteGraph(graph) {
        return this.removeMatches(null, null, null, graph);
      }
      // ### `getQuads` returns an array of quads matching a pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      getQuads(subject, predicate, object, graph) {
        subject = subject && (0, _N3DataFactory.termToId)(subject);
        predicate = predicate && (0, _N3DataFactory.termToId)(predicate);
        object = object && (0, _N3DataFactory.termToId)(object);
        graph = graph && (0, _N3DataFactory.termToId)(graph);
        const quads = [], graphs = this._getGraphs(graph), ids = this._ids;
        let content, subjectId, predicateId, objectId;
        if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object]))
          return quads;
        for (const graphId in graphs) {
          if (content = graphs[graphId]) {
            if (subjectId) {
              if (objectId)
                this._findInIndex(content.objects, objectId, subjectId, predicateId, "object", "subject", "predicate", graphId, null, quads);
              else
                this._findInIndex(content.subjects, subjectId, predicateId, null, "subject", "predicate", "object", graphId, null, quads);
            } else if (predicateId)
              this._findInIndex(content.predicates, predicateId, objectId, null, "predicate", "object", "subject", graphId, null, quads);
            else if (objectId)
              this._findInIndex(content.objects, objectId, null, null, "object", "subject", "predicate", graphId, null, quads);
            else
              this._findInIndex(content.subjects, null, null, null, "subject", "predicate", "object", graphId, null, quads);
          }
        }
        return quads;
      }
      // ### `match` returns a stream of quads matching a pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      match(subject, predicate, object, graph) {
        const stream = new _readableStream.Readable({
          objectMode: true
        });
        stream._read = () => {
          for (const quad2 of this.getQuads(subject, predicate, object, graph))
            stream.push(quad2);
          stream.push(null);
        };
        return stream;
      }
      // ### `countQuads` returns the number of quads matching a pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      countQuads(subject, predicate, object, graph) {
        subject = subject && (0, _N3DataFactory.termToId)(subject);
        predicate = predicate && (0, _N3DataFactory.termToId)(predicate);
        object = object && (0, _N3DataFactory.termToId)(object);
        graph = graph && (0, _N3DataFactory.termToId)(graph);
        const graphs = this._getGraphs(graph), ids = this._ids;
        let count = 0, content, subjectId, predicateId, objectId;
        if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object]))
          return 0;
        for (const graphId in graphs) {
          if (content = graphs[graphId]) {
            if (subject) {
              if (object)
                count += this._countInIndex(content.objects, objectId, subjectId, predicateId);
              else
                count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);
            } else if (predicate) {
              count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);
            } else {
              count += this._countInIndex(content.objects, objectId, subjectId, predicateId);
            }
          }
        }
        return count;
      }
      // ### `forEach` executes the callback on all quads.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      forEach(callback, subject, predicate, object, graph) {
        this.some((quad2) => {
          callback(quad2);
          return false;
        }, subject, predicate, object, graph);
      }
      // ### `every` executes the callback on all quads,
      // and returns `true` if it returns truthy for all them.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      every(callback, subject, predicate, object, graph) {
        let some2 = false;
        const every2 = !this.some((quad2) => {
          some2 = true;
          return !callback(quad2);
        }, subject, predicate, object, graph);
        return some2 && every2;
      }
      // ### `some` executes the callback on all quads,
      // and returns `true` if it returns truthy for any of them.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      some(callback, subject, predicate, object, graph) {
        subject = subject && (0, _N3DataFactory.termToId)(subject);
        predicate = predicate && (0, _N3DataFactory.termToId)(predicate);
        object = object && (0, _N3DataFactory.termToId)(object);
        graph = graph && (0, _N3DataFactory.termToId)(graph);
        const graphs = this._getGraphs(graph), ids = this._ids;
        let content, subjectId, predicateId, objectId;
        if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object]))
          return false;
        for (const graphId in graphs) {
          if (content = graphs[graphId]) {
            if (subjectId) {
              if (objectId) {
                if (this._findInIndex(content.objects, objectId, subjectId, predicateId, "object", "subject", "predicate", graphId, callback, null))
                  return true;
              } else if (this._findInIndex(content.subjects, subjectId, predicateId, null, "subject", "predicate", "object", graphId, callback, null))
                return true;
            } else if (predicateId) {
              if (this._findInIndex(content.predicates, predicateId, objectId, null, "predicate", "object", "subject", graphId, callback, null)) {
                return true;
              }
            } else if (objectId) {
              if (this._findInIndex(content.objects, objectId, null, null, "object", "subject", "predicate", graphId, callback, null)) {
                return true;
              }
            } else if (this._findInIndex(content.subjects, null, null, null, "subject", "predicate", "object", graphId, callback, null)) {
              return true;
            }
          }
        }
        return false;
      }
      // ### `getSubjects` returns all subjects that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      getSubjects(predicate, object, graph) {
        const results = [];
        this.forSubjects((s) => {
          results.push(s);
        }, predicate, object, graph);
        return results;
      }
      // ### `forSubjects` executes the callback on all subjects that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      forSubjects(callback, predicate, object, graph) {
        predicate = predicate && (0, _N3DataFactory.termToId)(predicate);
        object = object && (0, _N3DataFactory.termToId)(object);
        graph = graph && (0, _N3DataFactory.termToId)(graph);
        const ids = this._ids, graphs = this._getGraphs(graph);
        let content, predicateId, objectId;
        callback = this._uniqueEntities(callback);
        if (isString(predicate) && !(predicateId = ids[predicate]) || isString(object) && !(objectId = ids[object]))
          return;
        for (graph in graphs) {
          if (content = graphs[graph]) {
            if (predicateId) {
              if (objectId)
                this._loopBy2Keys(content.predicates, predicateId, objectId, callback);
              else
                this._loopByKey1(content.subjects, predicateId, callback);
            } else if (objectId)
              this._loopByKey0(content.objects, objectId, callback);
            else
              this._loop(content.subjects, callback);
          }
        }
      }
      // ### `getPredicates` returns all predicates that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      getPredicates(subject, object, graph) {
        const results = [];
        this.forPredicates((p) => {
          results.push(p);
        }, subject, object, graph);
        return results;
      }
      // ### `forPredicates` executes the callback on all predicates that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      forPredicates(callback, subject, object, graph) {
        subject = subject && (0, _N3DataFactory.termToId)(subject);
        object = object && (0, _N3DataFactory.termToId)(object);
        graph = graph && (0, _N3DataFactory.termToId)(graph);
        const ids = this._ids, graphs = this._getGraphs(graph);
        let content, subjectId, objectId;
        callback = this._uniqueEntities(callback);
        if (isString(subject) && !(subjectId = ids[subject]) || isString(object) && !(objectId = ids[object]))
          return;
        for (graph in graphs) {
          if (content = graphs[graph]) {
            if (subjectId) {
              if (objectId)
                this._loopBy2Keys(content.objects, objectId, subjectId, callback);
              else
                this._loopByKey0(content.subjects, subjectId, callback);
            } else if (objectId)
              this._loopByKey1(content.predicates, objectId, callback);
            else
              this._loop(content.predicates, callback);
          }
        }
      }
      // ### `getObjects` returns all objects that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      getObjects(subject, predicate, graph) {
        const results = [];
        this.forObjects((o) => {
          results.push(o);
        }, subject, predicate, graph);
        return results;
      }
      // ### `forObjects` executes the callback on all objects that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      forObjects(callback, subject, predicate, graph) {
        subject = subject && (0, _N3DataFactory.termToId)(subject);
        predicate = predicate && (0, _N3DataFactory.termToId)(predicate);
        graph = graph && (0, _N3DataFactory.termToId)(graph);
        const ids = this._ids, graphs = this._getGraphs(graph);
        let content, subjectId, predicateId;
        callback = this._uniqueEntities(callback);
        if (isString(subject) && !(subjectId = ids[subject]) || isString(predicate) && !(predicateId = ids[predicate]))
          return;
        for (graph in graphs) {
          if (content = graphs[graph]) {
            if (subjectId) {
              if (predicateId)
                this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);
              else
                this._loopByKey1(content.objects, subjectId, callback);
            } else if (predicateId)
              this._loopByKey0(content.predicates, predicateId, callback);
            else
              this._loop(content.objects, callback);
          }
        }
      }
      // ### `getGraphs` returns all graphs that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      getGraphs(subject, predicate, object) {
        const results = [];
        this.forGraphs((g) => {
          results.push(g);
        }, subject, predicate, object);
        return results;
      }
      // ### `forGraphs` executes the callback on all graphs that match the pattern.
      // Setting any field to `undefined` or `null` indicates a wildcard.
      forGraphs(callback, subject, predicate, object) {
        for (const graph in this._graphs) {
          this.some((quad2) => {
            callback(quad2.graph);
            return true;
          }, subject, predicate, object, graph);
        }
      }
      // ### `createBlankNode` creates a new blank node, returning its name
      createBlankNode(suggestedName) {
        let name, index;
        if (suggestedName) {
          name = suggestedName = `_:${suggestedName}`, index = 1;
          while (this._ids[name])
            name = suggestedName + index++;
        } else {
          do {
            name = `_:b${this._blankNodeIndex++}`;
          } while (this._ids[name]);
        }
        this._ids[name] = ++this._id;
        this._entities[this._id] = name;
        return this._factory.blankNode(name.substr(2));
      }
      // ### `extractLists` finds and removes all list triples
      // and returns the items per list.
      extractLists({
        remove: remove2 = false,
        ignoreErrors = false
      } = {}) {
        const lists = {};
        const onError = ignoreErrors ? () => true : (node, message) => {
          throw new Error(`${node.value} ${message}`);
        };
        const tails = this.getQuads(null, _IRIs.default.rdf.rest, _IRIs.default.rdf.nil, null);
        const toRemove = remove2 ? [...tails] : [];
        tails.forEach((tailQuad) => {
          const items = [];
          let malformed = false;
          let head;
          let headPos;
          const graph = tailQuad.graph;
          let current = tailQuad.subject;
          while (current && !malformed) {
            const objectQuads = this.getQuads(null, null, current, null);
            const subjectQuads = this.getQuads(current, null, null, null);
            let quad2, first = null, rest = null, parent = null;
            for (let i = 0; i < subjectQuads.length && !malformed; i++) {
              quad2 = subjectQuads[i];
              if (!quad2.graph.equals(graph))
                malformed = onError(current, "not confined to single graph");
              else if (head)
                malformed = onError(current, "has non-list arcs out");
              else if (quad2.predicate.value === _IRIs.default.rdf.first) {
                if (first)
                  malformed = onError(current, "has multiple rdf:first arcs");
                else
                  toRemove.push(first = quad2);
              } else if (quad2.predicate.value === _IRIs.default.rdf.rest) {
                if (rest)
                  malformed = onError(current, "has multiple rdf:rest arcs");
                else
                  toRemove.push(rest = quad2);
              } else if (objectQuads.length)
                malformed = onError(current, "can't be subject and object");
              else {
                head = quad2;
                headPos = "subject";
              }
            }
            for (let i = 0; i < objectQuads.length && !malformed; ++i) {
              quad2 = objectQuads[i];
              if (head)
                malformed = onError(current, "can't have coreferences");
              else if (quad2.predicate.value === _IRIs.default.rdf.rest) {
                if (parent)
                  malformed = onError(current, "has incoming rdf:rest arcs");
                else
                  parent = quad2;
              } else {
                head = quad2;
                headPos = "object";
              }
            }
            if (!first)
              malformed = onError(current, "has no list head");
            else
              items.unshift(first.object);
            current = parent && parent.subject;
          }
          if (malformed)
            remove2 = false;
          else if (head)
            lists[head[headPos].value] = items;
        });
        if (remove2)
          this.removeQuads(toRemove);
        return lists;
      }
    };
    exports.default = N3Store;
    function isString(s) {
      return typeof s === "string" || s instanceof String;
    }
  }
});

// node_modules/n3/lib/N3StreamParser.js
var require_N3StreamParser = __commonJS({
  "node_modules/n3/lib/N3StreamParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _N3Parser = _interopRequireDefault(require_N3Parser());
    var _readableStream = require_readable();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var N3StreamParser = class extends _readableStream.Transform {
      constructor(options) {
        super({
          decodeStrings: true
        });
        this._readableState.objectMode = true;
        const parser = new _N3Parser.default(options);
        let onData, onEnd;
        parser.parse(
          {
            on: (event, callback) => {
              switch (event) {
                case "data":
                  onData = callback;
                  break;
                case "end":
                  onEnd = callback;
                  break;
              }
            }
          },
          // Handle quads by pushing them down the pipeline
          (error, quad2) => {
            error && this.emit("error", error) || quad2 && this.push(quad2);
          },
          // Emit prefixes through the `prefix` event
          (prefix, uri) => {
            this.emit("prefix", prefix, uri);
          }
        );
        this._transform = (chunk, encoding, done) => {
          onData(chunk);
          done();
        };
        this._flush = (done) => {
          onEnd();
          done();
        };
      }
      // ### Parses a stream of strings
      import(stream) {
        stream.on("data", (chunk) => {
          this.write(chunk);
        });
        stream.on("end", () => {
          this.end();
        });
        stream.on("error", (error) => {
          this.emit("error", error);
        });
        return this;
      }
    };
    exports.default = N3StreamParser;
  }
});

// node_modules/n3/lib/N3StreamWriter.js
var require_N3StreamWriter = __commonJS({
  "node_modules/n3/lib/N3StreamWriter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _readableStream = require_readable();
    var _N3Writer = _interopRequireDefault(require_N3Writer());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var N3StreamWriter = class extends _readableStream.Transform {
      constructor(options) {
        super({
          encoding: "utf8"
        });
        this._writableState.objectMode = true;
        const writer = this._writer = new _N3Writer.default({
          write: (quad2, encoding, callback) => {
            this.push(quad2);
            callback && callback();
          },
          end: (callback) => {
            this.push(null);
            callback && callback();
          }
        }, options);
        this._transform = (quad2, encoding, done) => {
          writer.addQuad(quad2, done);
        };
        this._flush = (done) => {
          writer.end(done);
        };
      }
      // ### Serializes a stream of quads
      import(stream) {
        stream.on("data", (quad2) => {
          this.write(quad2);
        });
        stream.on("end", () => {
          this.end();
        });
        stream.on("error", (error) => {
          this.emit("error", error);
        });
        stream.on("prefix", (prefix, iri) => {
          this._writer.addPrefix(prefix, iri);
        });
        return this;
      }
    };
    exports.default = N3StreamWriter;
  }
});

// node_modules/n3/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/n3/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Lexer", {
      enumerable: true,
      get: function() {
        return _N3Lexer.default;
      }
    });
    Object.defineProperty(exports, "Parser", {
      enumerable: true,
      get: function() {
        return _N3Parser.default;
      }
    });
    Object.defineProperty(exports, "Writer", {
      enumerable: true,
      get: function() {
        return _N3Writer.default;
      }
    });
    Object.defineProperty(exports, "Store", {
      enumerable: true,
      get: function() {
        return _N3Store.default;
      }
    });
    Object.defineProperty(exports, "StreamParser", {
      enumerable: true,
      get: function() {
        return _N3StreamParser.default;
      }
    });
    Object.defineProperty(exports, "StreamWriter", {
      enumerable: true,
      get: function() {
        return _N3StreamWriter.default;
      }
    });
    Object.defineProperty(exports, "DataFactory", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.default;
      }
    });
    Object.defineProperty(exports, "Term", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.Term;
      }
    });
    Object.defineProperty(exports, "NamedNode", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.NamedNode;
      }
    });
    Object.defineProperty(exports, "Literal", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.Literal;
      }
    });
    Object.defineProperty(exports, "BlankNode", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.BlankNode;
      }
    });
    Object.defineProperty(exports, "Variable", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.Variable;
      }
    });
    Object.defineProperty(exports, "DefaultGraph", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.DefaultGraph;
      }
    });
    Object.defineProperty(exports, "Quad", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.Quad;
      }
    });
    Object.defineProperty(exports, "Triple", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.Triple;
      }
    });
    Object.defineProperty(exports, "termFromId", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.termFromId;
      }
    });
    Object.defineProperty(exports, "termToId", {
      enumerable: true,
      get: function() {
        return _N3DataFactory.termToId;
      }
    });
    exports.Util = void 0;
    var _N3Lexer = _interopRequireDefault(require_N3Lexer());
    var _N3Parser = _interopRequireDefault(require_N3Parser());
    var _N3Writer = _interopRequireDefault(require_N3Writer());
    var _N3Store = _interopRequireDefault(require_N3Store());
    var _N3StreamParser = _interopRequireDefault(require_N3StreamParser());
    var _N3StreamWriter = _interopRequireDefault(require_N3StreamWriter());
    var Util2 = _interopRequireWildcard(require_N3Util());
    exports.Util = Util2;
    var _N3DataFactory = _interopRequireWildcard(require_N3DataFactory());
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function")
        return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/validate.io-string/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/validate.io-string/lib/index.js"(exports, module2) {
    "use strict";
    function isString(value) {
      return typeof value === "string" || Object.prototype.toString.call(value) === "[object String]";
    }
    module2.exports = isString;
  }
});

// node_modules/validate.io-uri/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/validate.io-uri/lib/index.js"(exports, module2) {
    "use strict";
    var isString = require_lib3();
    var URI;
    var ILLEGALS;
    var HEX1;
    var HEX2;
    var PATH;
    var SCHEME;
    URI = /(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?[^#]*)?(?:#.*)?/;
    ILLEGALS = /[^a-z0-9\:\/\?\#\[\]\@\!\$\&\'\(\)\*\+\,\;\=\.\-\_\~\%]/i;
    HEX1 = /%[^0-9a-f]/i;
    HEX2 = /%[0-9a-f](:?[^0-9a-f]|$)/i;
    PATH = /^\/\//;
    SCHEME = /^[a-z][a-z0-9\+\-\.]*$/;
    function uri(val) {
      var parts, scheme, authority, path;
      if (!isString(val)) {
        return false;
      }
      if (ILLEGALS.test(val)) {
        return false;
      }
      if (HEX1.test(val) || HEX2.test(val)) {
        return false;
      }
      parts = val.match(URI);
      scheme = parts[1];
      authority = parts[2];
      path = parts[3];
      if (!scheme || !scheme.length || !SCHEME.test(scheme.toLowerCase())) {
        return false;
      }
      if (!authority && PATH.test(path)) {
        return false;
      }
      return true;
    }
    module2.exports = uri;
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AggregationKind: () => AggregationKind,
  CARDINALITY_MAX: () => CARDINALITY_MAX,
  CARDINALITY_MAX_AS_NUMBER: () => CARDINALITY_MAX_AS_NUMBER,
  Cardinality: () => Cardinality,
  CardinalityValues: () => CardinalityValues,
  Class: () => Class,
  ClassStereotype: () => ClassStereotype,
  ClassView: () => ClassView,
  Classifier: () => Classifier,
  ConnectorView: () => ConnectorView,
  Decoratable: () => Decoratable,
  Diagram: () => Diagram,
  DiagramElement: () => DiagramElement,
  ElementView: () => ElementView,
  Generalization: () => Generalization,
  GeneralizationSet: () => GeneralizationSet3,
  GeneralizationSetView: () => GeneralizationSetView,
  GeneralizationView: () => GeneralizationView,
  Literal: () => Literal,
  ModelElement: () => ModelElement,
  Modularizer: () => Modularizer,
  MultilingualText: () => MultilingualText,
  NodeView: () => NodeView,
  ORDERLESS_LEVEL: () => ORDERLESS_LEVEL,
  OntologicalNature: () => OntologicalNature,
  Ontouml2Db: () => Ontouml2Db,
  Ontouml2DbOptions: () => Ontouml2DbOptions,
  Ontouml2Gufo: () => Ontouml2Gufo5,
  Ontouml2GufoOptions: () => Ontouml2GufoOptions,
  OntoumlElement: () => OntoumlElement,
  OntoumlType: () => OntoumlType,
  OntoumlVerification: () => OntoumlVerification,
  Package: () => Package,
  PackageView: () => PackageView,
  Path: () => Path,
  Point: () => Point,
  Project: () => Project2,
  Property: () => Property2,
  PropertyStereotype: () => PropertyStereotype4,
  Rectangle: () => Rectangle,
  RectangularShape: () => RectangularShape,
  Relation: () => Relation3,
  RelationStereotype: () => RelationStereotype2,
  RelationView: () => RelationView,
  ServiceIssueSeverity: () => ServiceIssueSeverity,
  Shape: () => Shape,
  Text: () => Text,
  VerificationIssue: () => VerificationIssue,
  VerificationIssueCode: () => VerificationIssueCode,
  containerUtils: () => containerUtils,
  natureUtils: () => natureUtils,
  serializationUtils: () => serializationUtils,
  stereotypeUtils: () => stereotypeUtils,
  utils: () => utils
});
module.exports = __toCommonJS(src_exports);

// src/libs/service_issue_severity.ts
var ServiceIssueSeverity = /* @__PURE__ */ ((ServiceIssueSeverity2) => {
  ServiceIssueSeverity2["ERROR"] = "error";
  ServiceIssueSeverity2["WARNING"] = "warning";
  ServiceIssueSeverity2["INCOMPLETE"] = "incomplete";
  ServiceIssueSeverity2["INFO"] = "info";
  return ServiceIssueSeverity2;
})(ServiceIssueSeverity || {});

// src/libs/ontouml/utils.ts
var import_lodash = __toESM(require_lodash());
function includesAll(superSet, subSet) {
  return !!superSet && !!subSet && import_lodash.default.isEmpty(import_lodash.default.difference(subSet, superSet));
}
function intersects(setA, setB) {
  return !!setA && !!setB && !import_lodash.default.isEmpty(import_lodash.default.intersection(setA, setB));
}
function equalContents(a, b) {
  if (!a || !b) {
    return false;
  }
  if (Array.isArray(a)) {
    a = new Set(a);
  }
  if (Array.isArray(b)) {
    b = new Set(b);
  }
  return a.size === b.size && [...a].every((content) => b.has(content));
}
function arrayFrom(input) {
  let resolvedInputArray = [];
  if (Array.isArray(input) && !import_lodash.default.isEmpty(input)) {
    resolvedInputArray = input;
  } else if (input instanceof Set) {
    resolvedInputArray = [...input];
  } else if (input) {
    resolvedInputArray = [input];
  }
  return resolvedInputArray;
}
var utils = {
  includesAll,
  intersects,
  arrayFrom,
  equalContents
};

// src/libs/ontouml/model/cardinality.ts
var SEPARATOR = "..";
var CARDINALITY_MAX = "*";
var CARDINALITY_MAX_AS_NUMBER = Infinity;
var CardinalityValues = /* @__PURE__ */ ((CardinalityValues2) => {
  CardinalityValues2["ZERO_TO_ONE"] = "0..1";
  CardinalityValues2["ZERO_TO_MANY"] = "0..*";
  CardinalityValues2["ONE"] = "1";
  CardinalityValues2["ONE_TO_ONE"] = "1..1";
  CardinalityValues2["ONE_TO_MANY"] = "1..*";
  CardinalityValues2["MANY"] = "*";
  return CardinalityValues2;
})(CardinalityValues || {});
var Cardinality = class {
  constructor(arg1, arg2) {
    if (arg1 === void 0 && arg2 === void 0) {
      this.value = "0..*" /* ZERO_TO_MANY */;
    } else if (arg1 !== void 0 && arg2 === void 0) {
      if (arg1 === null) {
        this.value = null;
      } else if (arg1 instanceof Cardinality) {
        this.value = arg1.value;
      } else if (typeof arg1 === "string") {
        this.value = arg1;
      } else {
        const msg = "Bad cardinality input";
        throw new Error(msg);
      }
    } else if (arg1 !== void 0 && arg2 !== void 0) {
      if (arg1 === null && arg2 === null) {
        this.value = null;
      } else if (typeof arg1 === "string" && typeof arg1 === "string") {
        this.value = `${arg1}..${arg2}`;
      } else if (typeof arg1 === "number" && typeof arg1 === "number") {
        this.value = `${arg1}..${arg2}`;
      } else {
        const msg = "Bad cardinality input";
        throw new Error(msg);
      }
    } else {
      throw new Error("Unexpected cardinality input");
    }
  }
  getCardinalityBounds() {
    if (!this.value) {
      return null;
    } else {
      const bounds = this.value.includes(SEPARATOR) ? this.value.split(SEPARATOR, 2) : [this.value, this.value];
      return { lowerBound: bounds[0], upperBound: bounds[1] };
    }
  }
  getCardinalityBoundsAsNumbers() {
    const cardinality = this.getCardinalityBounds();
    if (!cardinality) {
      return null;
    }
    const lowerBound = parseInt(cardinality.lowerBound);
    const upperBound = cardinality.upperBound === CARDINALITY_MAX ? CARDINALITY_MAX_AS_NUMBER : parseInt(cardinality.upperBound);
    return { lowerBound, upperBound };
  }
  get lowerBound() {
    const bounds = this.getCardinalityBounds();
    return bounds && bounds.lowerBound;
  }
  set lowerBound(lowerBound) {
    const bounds = this.getCardinalityBounds() || { upperBound: CARDINALITY_MAX };
    this.value = `${lowerBound}..${bounds.upperBound}`;
  }
  getLowerBoundAsNumber() {
    const bounds = this.getCardinalityBoundsAsNumbers();
    return bounds && bounds.lowerBound;
  }
  setLowerBoundFromNumber(lowerBound) {
    if (lowerBound < 0) {
      throw new Error("Lower bound must be a positive number");
    } else if (lowerBound === CARDINALITY_MAX_AS_NUMBER) {
      throw new Error("Lower bound cannot be unbounded");
    } else if (Number.isNaN(lowerBound)) {
      throw new Error("NaN lower bound value");
    }
    this.lowerBound = `${lowerBound}`;
  }
  get upperBound() {
    const bounds = this.getCardinalityBounds();
    return bounds && bounds.upperBound;
  }
  set upperBound(upperBound) {
    const bounds = this.getCardinalityBounds() || { lowerBound: "0" };
    this.value = `${bounds.lowerBound}..${upperBound}`;
  }
  getUpperBoundAsNumber() {
    const bounds = this.getCardinalityBoundsAsNumbers();
    return bounds && bounds.upperBound;
  }
  setUpperBoundFromNumber(upperBound) {
    if (upperBound < 1) {
      throw new Error("Upper bound must be a positive number greater than zero");
    }
    this.upperBound = `${upperBound === CARDINALITY_MAX_AS_NUMBER ? CARDINALITY_MAX : upperBound}`;
  }
  isValid() {
    const regex = /(\d+\.\.)?(\d+|\*)/;
    const { lowerBound, upperBound } = this.getCardinalityBoundsAsNumbers();
    return this.value && regex.test(this.value) && lowerBound <= upperBound && lowerBound < CARDINALITY_MAX_AS_NUMBER && upperBound > 0;
  }
  isLowerBoundValid() {
    return isNaN(Number.parseInt(this.lowerBound));
  }
  isUpperBoundValid() {
    return isNaN(Number.parseInt(this.upperBound));
  }
  isBounded() {
    const bounds = this.getCardinalityBounds();
    return bounds && bounds.upperBound !== CARDINALITY_MAX;
  }
  toJSON() {
    return this.value || null;
  }
  setCardinalityFromNumbers(lowerBound, upperBound) {
    if (lowerBound > upperBound) {
      throw new Error("Lower bound cannot be greater than upper bound");
    }
    this.lowerBound = `${lowerBound}`;
    this.upperBound = !upperBound || upperBound === CARDINALITY_MAX_AS_NUMBER ? `${CARDINALITY_MAX}` : `${upperBound}`;
  }
  isOptional() {
    return this.getLowerBoundAsNumber() === 0;
  }
  isMandatory() {
    return !this.isOptional();
  }
  isZeroToOne() {
    const cardinality = this.getCardinalityBoundsAsNumbers();
    return cardinality && cardinality.lowerBound === 0 && cardinality.upperBound === 1;
  }
  isZeroToMany() {
    const cardinality = this.getCardinalityBoundsAsNumbers();
    return cardinality && cardinality.lowerBound === 0 && cardinality.upperBound === CARDINALITY_MAX_AS_NUMBER;
  }
  isOneToOne() {
    const cardinality = this.getCardinalityBoundsAsNumbers();
    return cardinality && cardinality.lowerBound === 1 && cardinality.upperBound === 1;
  }
  isOneToMany() {
    const cardinality = this.getCardinalityBoundsAsNumbers();
    return cardinality && cardinality.lowerBound === 1 && cardinality.upperBound === CARDINALITY_MAX_AS_NUMBER;
  }
  setZeroToOne() {
    this.value = "0..1" /* ZERO_TO_ONE */;
  }
  setZeroToMany() {
    this.value = "0..*" /* ZERO_TO_MANY */;
  }
  setOneToOne() {
    this.value = "1..1" /* ONE_TO_ONE */;
  }
  setOneToMany() {
    this.value = "1..*" /* ONE_TO_MANY */;
  }
};

// src/libs/ontouml/ontouml_type.ts
var OntoumlType = /* @__PURE__ */ ((OntoumlType3) => {
  OntoumlType3["PROJECT_TYPE"] = "Project";
  OntoumlType3["PACKAGE_TYPE"] = "Package";
  OntoumlType3["CLASS_TYPE"] = "Class";
  OntoumlType3["RELATION_TYPE"] = "Relation";
  OntoumlType3["GENERALIZATION_TYPE"] = "Generalization";
  OntoumlType3["GENERALIZATION_SET_TYPE"] = "GeneralizationSet";
  OntoumlType3["PROPERTY_TYPE"] = "Property";
  OntoumlType3["LITERAL_TYPE"] = "Literal";
  OntoumlType3["DIAGRAM"] = "Diagram";
  OntoumlType3["CLASS_VIEW"] = "ClassView";
  OntoumlType3["RELATION_VIEW"] = "RelationView";
  OntoumlType3["GENERALIZATION_VIEW"] = "GeneralizationView";
  OntoumlType3["GENERALIZATION_SET_VIEW"] = "GeneralizationSetView";
  OntoumlType3["PACKAGE_VIEW"] = "PackageView";
  OntoumlType3["RECTANGLE"] = "Rectangle";
  OntoumlType3["TEXT"] = "Text";
  OntoumlType3["PATH"] = "Path";
  return OntoumlType3;
})(OntoumlType || {});

// src/libs/ontouml/multilingual_text.ts
var import_language_tags = __toESM(require_lib());
var _MultilingualText = class {
  constructor(value, language) {
    this.textMap = /* @__PURE__ */ new Map();
    if (value != null)
      this.addText(value, language);
  }
  getText(language) {
    if (language && import_language_tags.default.check(language)) {
      return this.textMap.get(language);
    }
    for (const lang of _MultilingualText.languagePreference) {
      if (this.textMap.has(lang)) {
        return this.textMap.get(lang);
      }
    }
    return this.textMap.size > 0 ? [...this.textMap.entries()][0][1] : null;
  }
  addText(value, language) {
    language = language && import_language_tags.default.check(language) ? language : _MultilingualText.defaultLanguage;
    this.textMap.set(language, value);
  }
  addAll(obj) {
    Object.entries(obj).forEach((entry) => {
      this.addText(entry[1], entry[0]);
    });
  }
  entries() {
    return [...this.textMap.entries()];
  }
  clear() {
    this.textMap.clear();
  }
  toJSON() {
    if (this.textMap.size == 0)
      return null;
    if (this.textMap.size == 1)
      return this.getText("en");
    return this.textMap;
  }
};
var MultilingualText = _MultilingualText;
MultilingualText.defaultLanguage = "en";
MultilingualText.languagePreference = ["en"];

// src/libs/ontouml/ontouml_element.ts
var import_uniqid = __toESM(require_uniqid());
var import_lodash2 = __toESM(require_lodash());
var OntoumlElement = class {
  constructor(type, base) {
    this.id = (base == null ? void 0 : base.id) || (0, import_uniqid.default)();
    this.project = (base == null ? void 0 : base.project) || null;
    this.container = (base == null ? void 0 : base.container) || null;
    if (typeof (base == null ? void 0 : base.name) === "string") {
      this.name = new MultilingualText(base.name);
    } else if ((base == null ? void 0 : base.name) instanceof MultilingualText) {
      this.name = base.name;
    } else {
      this.name = new MultilingualText();
    }
    if (typeof (base == null ? void 0 : base.description) === "string") {
      this.description = new MultilingualText(base.description);
    } else if ((base == null ? void 0 : base.description) instanceof MultilingualText) {
      this.description = base.description;
    } else {
      this.description = new MultilingualText();
    }
    Object.defineProperty(this, "type", {
      value: type,
      enumerable: true,
      writable: false,
      configurable: false
    });
  }
  getName(language) {
    return this.name.getText(language);
  }
  addName(value, language) {
    if (!this.name)
      this.name = new MultilingualText();
    this.name.addText(value, language);
  }
  setName(value, language) {
    this.name = new MultilingualText(value);
  }
  getDescription(language) {
    return this.description.getText(language);
  }
  addDescription(value, language) {
    if (!this.description)
      this.description = new MultilingualText();
    this.description.addText(value, language);
  }
  setDescription(value, language) {
    this.description = new MultilingualText(value);
  }
  getNameOrId(language) {
    return this.getName(language) || this.id;
  }
  getReference() {
    return {
      type: this.type,
      id: this.id
    };
  }
  setContainer(container) {
    this.container = container;
    this.setProject(container == null ? void 0 : container.project);
  }
  setProject(project) {
    this.project = project;
    this.getContents().forEach((element) => element.setProject(project));
  }
  getAllContents() {
    let children = this.getContents();
    if (children.length == 0) {
      return children;
    }
    let descendants = children.flatMap((child) => child.getAllContents());
    return children.concat(descendants);
  }
  toJSON() {
    const object = {
      type: null,
      id: null,
      name: null,
      description: null
    };
    Object.assign(object, this);
    delete object["project"];
    delete object["container"];
    Object.entries(object).forEach(([k, v]) => {
      if (Array.isArray(v) && import_lodash2.default.isEmpty(v)) {
        object[k] = null;
      }
    });
    return object;
  }
  /** Support method the returns an instance of `OntoumlElement` from a element
   * map based on the reference's id throwing an broken reference exception in
   * case an element with matching id is not found in the map.
   *
   * @throws Error accusing broken reference if a element with matching id is
   * not found in the map */
  static resolveReference(reference, elementReferenceMap, container, field) {
    if (!reference) {
      return reference;
    }
    const elementId = reference == null ? void 0 : reference.id;
    const element = elementReferenceMap.get(elementId);
    if (element) {
      return element;
    } else {
      const message = container && field ? `Could not resolve broken reference '${field}' in ${container.constructor.name} '${container.id}'.` : `Could not resolve broken reference.`;
      throw new Error(message);
    }
  }
};

// src/libs/ontouml/model/model_element.ts
var ModelElement = class extends OntoumlElement {
  constructor(type, base) {
    super(type, base);
    this.propertyAssignments = (base == null ? void 0 : base.propertyAssignments) || {};
  }
  toJSON() {
    const modelElementSerialization = {
      propertyAssignments: null
    };
    Object.assign(modelElementSerialization, super.toJSON());
    return modelElementSerialization;
  }
  lock() {
    throw new Error("Method unimplemented!");
  }
  unlock() {
    throw new Error("Method unimplemented!");
  }
  isLocked() {
    throw new Error("Method unimplemented!");
  }
  /**
   * Returns outermost package container of a model element which can either
   * 'model' package of a project, a package without a container, or null. This
   * is intended to support searches for other model elements within the same
   * context, regardless of the presence of a container project.
   */
  getModelOrRootPackage() {
    if (this.project) {
      return this.project.model;
    }
    let packageReference = this.container;
    while (packageReference && packageReference.container) {
      packageReference = packageReference.container;
    }
    if (packageReference instanceof Package) {
      return packageReference;
    } else if (this instanceof Package) {
      return this;
    } else {
      return null;
    }
  }
  resolveReferences(_elementReferenceMap) {
  }
};

// src/libs/ontouml/model/literal.ts
var Literal = class extends ModelElement {
  constructor(base) {
    super("Literal" /* LITERAL_TYPE */, base);
  }
  getContents() {
    return [];
  }
  clone() {
    return new Literal(this);
  }
  replace(originalElement, newElement) {
    if (this.container === originalElement) {
      this.container = newElement;
    }
  }
};

// src/libs/ontouml/model/decoratable.ts
var Decoratable = class extends ModelElement {
  constructor(type, base) {
    super(type, base);
    this.stereotype = (base == null ? void 0 : base.stereotype) || null;
  }
  isStereotypeValid(allowsNone = false) {
    return this.getAllowedStereotypes().includes(this.stereotype) || !this.stereotype && allowsNone;
  }
  /** Checks if `this.stereotype` is contained in the set of values in `stereotypes`.
   *
   * @throws error when the class has multiple stereotypes
   * */
  hasAnyStereotype(stereotypes) {
    return Array.isArray(stereotypes) ? stereotypes.includes(this.stereotype) : this.stereotype === stereotypes;
  }
};

// src/libs/ontouml/model/classifier.ts
var Classifier = class extends Decoratable {
  constructor(type, base) {
    super(type, base);
    this.isAbstract = (base == null ? void 0 : base.isAbstract) || false;
    this.isDerived = (base == null ? void 0 : base.isDerived) || false;
    this.properties = (base == null ? void 0 : base.properties) || [];
  }
  addParent(parent) {
    if (this.container instanceof Package)
      return this.container.createGeneralization(parent, this);
    if (this.project)
      return this.project.model.createGeneralization(parent, this);
    return new Generalization({ general: parent, specific: this });
  }
  addChild(child) {
    if (this.container instanceof Package)
      return this.container.createGeneralization(this, child);
    if (this.project)
      return this.project.model.createGeneralization(this, child);
    return new Generalization({ general: this, specific: child });
  }
  getGeneralizations() {
    return this.getModelOrRootPackage().getAllGeneralizations().filter((gen) => this === gen.specific || this === gen.general);
  }
  getGeneralizationsWhereGeneral() {
    return this.getModelOrRootPackage().getAllGeneralizations().filter((gen) => this === gen.general);
  }
  getGeneralizationsWhereSpecific() {
    return this.getModelOrRootPackage().getAllGeneralizations().filter((gen) => this === gen.specific);
  }
  getGeneralizationSets() {
    const root = this.getModelOrRootPackage();
    const generalizationSets = root.getAllGeneralizationSets();
    const generalizationSetsInvolvingClassifier = [];
    if (generalizationSets) {
      generalizationSets.forEach((genset) => {
        if (genset.getInvolvedClassifiers().includes(this)) {
          generalizationSetsInvolvingClassifier.push(genset);
        }
      });
    }
    return generalizationSetsInvolvingClassifier;
  }
  getGeneralizationSetsWhereGeneral() {
    const root = this.getModelOrRootPackage();
    const generalizationSets = root.getAllGeneralizationSets();
    const generalizationSetsInvolvingClassifier = [];
    if (generalizationSets) {
      generalizationSets.forEach((genset) => {
        if (genset.getGeneral() === this) {
          generalizationSetsInvolvingClassifier.push(genset);
        }
      });
    }
    return generalizationSetsInvolvingClassifier;
  }
  getGeneralizationSetsWhereSpecific() {
    const root = this.getModelOrRootPackage();
    const generalizationSets = root.getAllGeneralizationSets();
    const generalizationSetsInvolvingClassifier = [];
    if (generalizationSets) {
      generalizationSets.forEach((genset) => {
        if (genset.getSpecifics().includes(this)) {
          generalizationSetsInvolvingClassifier.push(genset);
        }
      });
    }
    return generalizationSetsInvolvingClassifier;
  }
  getGeneralizationSetsWhereCategorizer() {
    if (!(this instanceof Class))
      return [];
    const thisClass = this;
    return this.getModelOrRootPackage().getAllGeneralizationSets().filter((gs) => gs.categorizer === thisClass);
  }
  getParents() {
    return this.getModelOrRootPackage().getAllGeneralizations().filter((gen) => this === gen.specific).map((gen) => gen.general);
  }
  getChildren() {
    return this.getModelOrRootPackage().getAllGeneralizations().filter((gen) => this === gen.general).map((gen) => gen.specific);
  }
  getAncestors(knownAncestors = []) {
    const ancestors = [...knownAncestors];
    this.getParents().forEach((parent) => {
      if (!ancestors.includes(parent)) {
        ancestors.push(parent);
        ancestors.push(...parent.getAncestors(ancestors));
      }
    });
    return [...new Set(ancestors)];
  }
  getDescendants(knownDescendants = []) {
    const descendants = [...knownDescendants];
    this.getChildren().forEach((child) => {
      if (!descendants.includes(child)) {
        descendants.push(child);
        descendants.push(...child.getDescendants(descendants));
      }
    });
    return [...new Set(descendants)];
  }
  getFilteredAncestors(filter) {
    return this.getAncestors().filter(filter);
  }
  getFilteredDescendants(filter) {
    return this.getDescendants().filter(filter);
  }
  getOwnRelations(_filter) {
    let relations = this.project.getAllRelations().filter((r) => r.getMembers().includes(this));
    return [...new Set(relations)];
  }
  getOwnIncomingRelations() {
    return this.project.getAllRelations().filter((r) => r.isBinary()).filter((r) => r.getTarget() === this);
  }
  getOwnOutgoingRelations() {
    return this.project.getAllRelations().filter((r) => r.isBinary()).filter((r) => r.getSource() === this);
  }
  getAllRelations(_filter) {
    let relations = this.getAncestors().flatMap((a) => a.getOwnRelations());
    return [...new Set(relations)];
  }
  getAllIncomingRelations() {
    return this.getAncestors().flatMap((a) => a.getOwnIncomingRelations());
  }
  getAllOutgoingRelations() {
    return this.getAncestors().flatMap((a) => a.getOwnOutgoingRelations());
  }
  getOwnNaryRelations() {
    throw new Error("Method unimplemented!");
  }
  getAllNaryRelations() {
    throw new Error("Method unimplemented!");
  }
  getOwnDerivations() {
    throw new Error("Method unimplemented!");
  }
  getAllDerivations() {
    throw new Error("Method unimplemented!");
  }
  getAllOppositeRelationEnds() {
    throw new Error("Method unimplemented!");
  }
  getOwnOppositeRelationEnds() {
    throw new Error("Method unimplemented!");
  }
};

// src/libs/ontouml/model/class.ts
var import_lodash3 = __toESM(require_lodash());
var ORDERLESS_LEVEL = Infinity;
var Class = class extends Classifier {
  constructor(base) {
    super("Class" /* CLASS_TYPE */, base);
    this.literals = (base == null ? void 0 : base.literals) || [];
    this.restrictedTo = (base == null ? void 0 : base.restrictedTo) || [];
    this.isExtensional = (base == null ? void 0 : base.isExtensional) || false;
    this.isPowertype = (base == null ? void 0 : base.isPowertype) || false;
    let order = base == null ? void 0 : base.order;
    if (typeof order === "number") {
      this.order = order;
    } else if (typeof order === "string") {
      this.order = Class.parseOrder(order);
    } else {
      this.order = 1;
    }
  }
  static parseOrder(orderString) {
    if (orderString === "*") {
      return ORDERLESS_LEVEL;
    } else {
      return isNaN(Number(orderString)) ? 1 : Number(orderString);
    }
  }
  getContents() {
    let contents = [];
    if (this.properties) {
      contents = [...this.properties];
    }
    if (this.literals) {
      contents = [...contents, ...this.literals];
    }
    return contents;
  }
  getAllowedStereotypes() {
    return stereotypeUtils.ClassStereotypes;
  }
  toJSON() {
    const classSerialization = {
      stereotype: null,
      restrictedTo: null,
      properties: null,
      literals: null,
      isAbstract: false,
      isDerived: false,
      isExtensional: false,
      isPowertype: false,
      order: null
    };
    Object.assign(classSerialization, super.toJSON());
    if (typeof classSerialization.order === "number") {
      classSerialization.order = classSerialization.order === ORDERLESS_LEVEL ? "*" : classSerialization.order.toString();
    }
    return classSerialization;
  }
  createAttribute(propertyType, name, base) {
    let attribute = new Property2(
      Object.assign({}, base, { propertyType, name: new MultilingualText(name), container: this, project: this.project })
    );
    this.addAttribute(attribute);
    return attribute;
  }
  createLiteral(name, base) {
    let literal4 = new Literal(
      Object.assign({}, base, { name: new MultilingualText(name), container: this, project: this.project })
    );
    this.addLiteral(literal4);
    return literal4;
  }
  addAttribute(attribute) {
    if (!attribute) {
      return;
    }
    attribute.setContainer(this);
    this.properties.push(attribute);
  }
  addLiteral(literal4) {
    if (!literal4) {
      return;
    }
    literal4.setContainer(this);
    this.literals.push(literal4);
  }
  hasAttributes() {
    return !import_lodash3.default.isEmpty(this.properties);
  }
  hasLiterals() {
    return !import_lodash3.default.isEmpty(this.literals);
  }
  restrictedToOverlaps(natures) {
    const naturesArray = utils.arrayFrom(natures);
    return utils.intersects(this.restrictedTo, naturesArray);
  }
  restrictedToContainedIn(natures) {
    const naturesArray = utils.arrayFrom(natures);
    return !import_lodash3.default.isEmpty(this.restrictedTo) && !import_lodash3.default.isEmpty(naturesArray) && utils.includesAll(naturesArray, this.restrictedTo);
  }
  restrictedToContains(natures) {
    const naturesArray = utils.arrayFrom(natures);
    return !import_lodash3.default.isEmpty(this.restrictedTo) && !import_lodash3.default.isEmpty(naturesArray) && utils.includesAll(this.restrictedTo, naturesArray);
  }
  restrictedToEquals(natures) {
    const naturesArray = utils.arrayFrom(natures);
    return utils.equalContents(this.restrictedTo, naturesArray);
  }
  isRestrictedToEndurant() {
    return this.restrictedToContainedIn(natureUtils.EndurantNatures);
  }
  isRestrictedToSubstantial() {
    return this.restrictedToContainedIn(natureUtils.SubstantialNatures);
  }
  isRestrictedToMoment() {
    return this.restrictedToContainedIn(natureUtils.MomentNatures);
  }
  isRestrictedToFunctionalComplex() {
    return this.restrictedToContainedIn("functional-complex" /* functional_complex */);
  }
  isRestrictedToCollective() {
    return this.restrictedToContainedIn("collective" /* collective */);
  }
  isRestrictedToQuantity() {
    return this.restrictedToContainedIn("quantity" /* quantity */);
  }
  isRestrictedToIntrinsicMoment() {
    return this.restrictedToContainedIn(natureUtils.IntrinsicMomentNatures);
  }
  isRestrictedToExtrinsicMoment() {
    return this.restrictedToContainedIn(natureUtils.ExtrinsicMomentNatures);
  }
  isRestrictedToRelator() {
    return this.restrictedToContainedIn("relator" /* relator */);
  }
  isRestrictedToIntrinsicMode() {
    return this.restrictedToContainedIn("intrinsic-mode" /* intrinsic_mode */);
  }
  isRestrictedToExtrinsicMode() {
    return this.restrictedToContainedIn("extrinsic-mode" /* extrinsic_mode */);
  }
  isRestrictedToQuality() {
    return this.restrictedToContainedIn("quality" /* quality */);
  }
  isRestrictedToEvent() {
    return this.restrictedToContainedIn("event" /* event */);
  }
  isRestrictedToSituation() {
    return this.restrictedToContainedIn("situation" /* situation */);
  }
  isRestrictedToType() {
    return this.restrictedToContainedIn("type" /* type */);
  }
  isRestrictedToAbstract() {
    return this.restrictedToContainedIn("abstract" /* abstract */);
  }
  hasTypeStereotype() {
    return this.hasAnyStereotype("type" /* TYPE */);
  }
  hasEventStereotype() {
    return this.hasAnyStereotype("event" /* EVENT */);
  }
  hasSituationStereotype() {
    return this.hasAnyStereotype("situation" /* SITUATION */);
  }
  hasAbstractStereotype() {
    return this.hasAnyStereotype("abstract" /* ABSTRACT */);
  }
  hasDatatypeStereotype() {
    return this.hasAnyStereotype("datatype" /* DATATYPE */);
  }
  hasEnumerationStereotype() {
    return this.hasAnyStereotype("enumeration" /* ENUMERATION */);
  }
  isComplexDatatype() {
    return this.hasDatatypeStereotype() && this.hasAttributes();
  }
  isPrimitiveDatatype() {
    return this.hasDatatypeStereotype() && !this.hasAttributes();
  }
  hasEndurantOnlyStereotype() {
    return this.hasAnyStereotype(stereotypeUtils.EndurantStereotypes);
  }
  hasMomentOnlyStereotype() {
    return this.hasAnyStereotype(stereotypeUtils.MomentOnlyStereotypes);
  }
  // TODO: explain substantial
  hasSubstantialOnlyStereotype() {
    return this.hasAnyStereotype(stereotypeUtils.SubstantialOnlyStereotypes);
  }
  hasRigidStereotype() {
    return this.hasAnyStereotype(stereotypeUtils.RigidStereotypes);
  }
  hasSemiRigidStereotype() {
    return this.hasAnyStereotype(stereotypeUtils.SemiRigidStereotypes);
  }
  hasAntiRigidStereotype() {
    return this.hasAnyStereotype(stereotypeUtils.AntiRigidStereotypes);
  }
  hasNonSortalStereotype() {
    return this.hasAnyStereotype(stereotypeUtils.NonSortalStereotypes);
  }
  hasSortalStereotype() {
    return this.hasAnyStereotype(stereotypeUtils.SortalStereotypes);
  }
  hasUltimateSortalStereotype() {
    return this.hasAnyStereotype(stereotypeUtils.UltimateSortalStereotypes);
  }
  hasBaseSortalStereotype() {
    return this.hasAnyStereotype(stereotypeUtils.BaseSortalStereotypes);
  }
  hasKindStereotype() {
    return this.hasAnyStereotype("kind" /* KIND */);
  }
  hasCollectiveStereotype() {
    return this.hasAnyStereotype("collective" /* COLLECTIVE */);
  }
  hasQuantityStereotype() {
    return this.hasAnyStereotype("quantity" /* QUANTITY */);
  }
  hasRelatorStereotype() {
    return this.hasAnyStereotype("relator" /* RELATOR */);
  }
  hasQualityStereotype() {
    return this.hasAnyStereotype("quality" /* QUALITY */);
  }
  hasModeStereotype() {
    return this.hasAnyStereotype("mode" /* MODE */);
  }
  hasSubkindStereotype() {
    return this.hasAnyStereotype("subkind" /* SUBKIND */);
  }
  hasPhaseStereotype() {
    return this.hasAnyStereotype("phase" /* PHASE */);
  }
  hasRoleStereotype() {
    return this.hasAnyStereotype("role" /* ROLE */);
  }
  hasHistoricalRoleStereotype() {
    return this.hasAnyStereotype("historicalRole" /* HISTORICAL_ROLE */);
  }
  hasCategoryStereotype() {
    return this.hasAnyStereotype("category" /* CATEGORY */);
  }
  hasPhaseMixinStereotype() {
    return this.hasAnyStereotype("phaseMixin" /* PHASE_MIXIN */);
  }
  hasRoleMixinStereotype() {
    return this.hasAnyStereotype("roleMixin" /* ROLE_MIXIN */);
  }
  hasHistoricalRoleMixinStereotype() {
    return this.hasAnyStereotype("historicalRoleMixin" /* HISTORICAL_ROLE_MIXIN */);
  }
  hasMixinStereotype() {
    return this.hasAnyStereotype("mixin" /* MIXIN */);
  }
  getUltimateSortalAncestors() {
    return this.getFilteredAncestors((ancestor) => ancestor.hasUltimateSortalStereotype());
  }
  getUltimateSortalsDescendants() {
    return this.getFilteredDescendants((descendent) => descendent.hasUltimateSortalStereotype());
  }
  getSortalAncestors() {
    return this.getFilteredAncestors((ancestor) => ancestor.hasSortalStereotype());
  }
  getSortalDescendants() {
    return this.getFilteredDescendants((descendent) => descendent.hasSortalStereotype());
  }
  getBaseSortalAncestors() {
    return this.getFilteredAncestors((ancestor) => ancestor.hasBaseSortalStereotype());
  }
  getBaseSortalDescendants() {
    return this.getFilteredDescendants((descendent) => descendent.hasBaseSortalStereotype());
  }
  getNonSortalAncestors() {
    const ancestorsFilter = (ancestor) => ancestor.hasNonSortalStereotype();
    return this.getFilteredAncestors(ancestorsFilter);
  }
  getNonSortalDescendants() {
    const descendantsFilter = (descendent) => descendent.hasNonSortalStereotype();
    return this.getFilteredDescendants(descendantsFilter);
  }
  getRigidAncestors() {
    const ancestorsFilter = (ancestor) => ancestor.hasRigidStereotype();
    return this.getFilteredAncestors(ancestorsFilter);
  }
  getRigidDescendants() {
    const descendantsFilter = (descendent) => descendent.hasRigidStereotype();
    return this.getFilteredDescendants(descendantsFilter);
  }
  getSemiRigidAncestors() {
    const ancestorsFilter = (ancestor) => ancestor.hasSemiRigidStereotype();
    return this.getFilteredAncestors(ancestorsFilter);
  }
  getSemiRigidDescendants() {
    const descendantsFilter = (descendent) => descendent.hasSemiRigidStereotype();
    return this.getFilteredDescendants(descendantsFilter);
  }
  getAntiRigidAncestors() {
    const ancestorsFilter = (ancestor) => ancestor.hasAntiRigidStereotype();
    return this.getFilteredAncestors(ancestorsFilter);
  }
  getAntiRigidDescendants() {
    const descendantsFilter = (descendent) => descendent.hasAntiRigidStereotype();
    return this.getFilteredDescendants(descendantsFilter);
  }
  /** Returns both own attributes, excluding inherited ones */
  getOwnAttributes() {
    if (this.hasEnumerationStereotype()) {
      throw new Error("Cannot retrieve attributes from an enumeration.");
    }
    return this.properties ? [...this.properties] : [];
  }
  /** Returns both own and inherited attributes */
  getAllAttributes() {
    const thisAndAncestors = [this, ...this.getAncestors()];
    const allAttributes = thisAndAncestors.reduce((attributesAcc, _class) => {
      attributesAcc.push(..._class.getOwnAttributes());
      return attributesAcc;
    }, []);
    return allAttributes;
  }
  /** Returns both own literals, excluding inherited ones */
  getOwnLiterals() {
    if (!this.hasEnumerationStereotype()) {
      throw new Error("Cannot retrieve literals from a non-enumeration.");
    }
    return this.literals ? [...this.literals] : [];
  }
  /** Returns both own and inherited literals */
  getAllLiterals() {
    const thisAndAncestors = [this, ...this.getAncestors()];
    const allLiterals = thisAndAncestors.reduce((literalsAcc, _class) => {
      literalsAcc.push(..._class.getOwnLiterals());
      return literalsAcc;
    }, []);
    return allLiterals;
  }
  clone() {
    const clone2 = new Class(this);
    if (clone2.properties) {
      clone2.properties = clone2.properties.map((attribute) => attribute.clone());
    }
    if (clone2.literals) {
      clone2.literals = clone2.literals.map((literal4) => literal4.clone());
    }
    return clone2;
  }
  replace(originalElement, newElement) {
    if (this.container === originalElement) {
      this.container = newElement;
    }
    this.getContents().forEach((content) => content.replace(originalElement, newElement));
  }
  /**
   * Returns not only ancestors and descendants, but also those reachable through non-disjoint diverging branch in generalization hierarchies
   */
  getUltimateSortalsInReach() {
    throw new Error("Method unimplemented!");
  }
  // TODO: investigate TSLint error TS6133 "'filter' is declared but its value is never read"
  getOwnRelations(_filter) {
    throw new Error("Method unimplemented!");
  }
  // TODO: add static version of factory methods present in class here
  // TODO: expand support
  static haveRigidStereotypes(classes) {
    return classes.every((_class) => _class.hasRigidStereotype());
  }
  static areAbstract(classes) {
    return !import_lodash3.default.isEmpty(classes) && classes.every((_class) => _class.isAbstract);
  }
};

// src/libs/ontouml/model/generalization.ts
var Generalization = class extends ModelElement {
  constructor(base) {
    super("Generalization" /* GENERALIZATION_TYPE */, base);
    this.general = (base == null ? void 0 : base.general) || null;
    this.specific = (base == null ? void 0 : base.specific) || null;
  }
  getContents() {
    return [];
  }
  getGeneralizationSets() {
    return this.getModelOrRootPackage().getAllGeneralizationSets().filter((genset) => genset.generalizations && genset.generalizations.includes(this));
  }
  involvesClasses() {
    return this.general instanceof Class && this.specific instanceof Class;
  }
  involvesRelations() {
    return this.general instanceof Relation3 && this.specific instanceof Relation3;
  }
  clone() {
    return new Generalization(this);
  }
  replace(originalElement, newElement) {
    if (this.container === originalElement) {
      this.container = newElement;
    }
    if (this.general === originalElement) {
      this.general = newElement;
    }
    if (this.specific === originalElement) {
      this.specific = newElement;
    }
  }
  getGeneralClass() {
    if (this.general instanceof Class) {
      return this.general;
    } else {
      throw new Error("The generalization's general is not an instance of Class.");
    }
  }
  getGeneralRelation() {
    if (this.general instanceof Relation3) {
      return this.general;
    } else {
      throw new Error("The generalization's general is not an instance of Relation.");
    }
  }
  getSpecificClass() {
    if (this.specific instanceof Class) {
      return this.specific;
    } else {
      throw new Error("The generalization's specific is not an instance of Class.");
    }
  }
  getSpecificRelation() {
    if (this.specific instanceof Relation3) {
      return this.specific;
    } else {
      throw new Error("The generalization's specific is not an instance of Relation.");
    }
  }
  toJSON() {
    const generalizationSerialization = {
      general: null,
      specific: null
    };
    Object.assign(generalizationSerialization, super.toJSON());
    const general = this.general;
    const specific = this.specific;
    generalizationSerialization.general = general ? general.getReference() : null;
    generalizationSerialization.specific = specific ? specific.getReference() : null;
    return generalizationSerialization;
  }
  resolveReferences(elementReferenceMap) {
    super.resolveReferences(elementReferenceMap);
    const { general, specific } = this;
    if (general) {
      this.general = OntoumlElement.resolveReference(general, elementReferenceMap, this, "general");
    }
    if (specific) {
      this.specific = OntoumlElement.resolveReference(specific, elementReferenceMap, this, "specific");
    }
  }
};

// src/libs/ontouml/model/generalization_set.ts
var GeneralizationSet3 = class extends ModelElement {
  constructor(base) {
    var _a, _b, _c, _d;
    super("GeneralizationSet" /* GENERALIZATION_SET_TYPE */, base);
    this.isDisjoint = (_a = base == null ? void 0 : base.isDisjoint) != null ? _a : false;
    this.isComplete = (_b = base == null ? void 0 : base.isComplete) != null ? _b : false;
    this.categorizer = (_c = base == null ? void 0 : base.categorizer) != null ? _c : null;
    this.generalizations = (_d = base == null ? void 0 : base.generalizations) != null ? _d : null;
  }
  getContents() {
    return [];
  }
  /**
   * A disjoint complete set of subclasses
   */
  isPartition() {
    return this.isComplete && this.isDisjoint;
  }
  isPhasePartition() {
    return this.isPartition() && this.involvesClasses() && (this.getSpecificClasses().every((specific) => specific.hasPhaseStereotype()) && this.getGeneralClass().hasSortalStereotype() || this.getSpecificClasses().every((specific) => specific.hasPhaseMixinStereotype()) && this.getGeneralClass().hasCategoryStereotype());
  }
  /**
   * @throws exception if different generals are present
   */
  getGeneral() {
    if (!this.generalizations) {
      return null;
    }
    let general = this.generalizations[0].general;
    if (this.generalizations.some((gen) => gen.general !== general)) {
      throw new Error("Generalization set involving distinct general classifiers");
    }
    return general;
  }
  getSpecifics() {
    if (this.generalizations) {
      let specifics = this.generalizations.map((gen) => gen.specific);
      return [...new Set(specifics)];
    }
    return [];
  }
  getGeneralClass() {
    if (!this.involvesClasses()) {
      throw new Error("Generalization set does not involve classes");
    }
    return this.getGeneral();
  }
  getSpecificClasses() {
    if (!this.involvesClasses()) {
      throw new Error("Generalization set does not involve classes");
    }
    return this.getSpecifics();
  }
  getGeneralRelation() {
    if (!this.involvesRelations()) {
      throw new Error("Generalization set does not involve relations");
    }
    return this.getGeneral();
  }
  getSpecificRelations() {
    if (!this.involvesRelations()) {
      throw new Error("Generalization set does not involve relations");
    }
    return this.getSpecifics();
  }
  getInvolvedClassifiers() {
    let involvedClassifiers = [];
    const general = this.getGeneral();
    const specifics = this.getSpecifics();
    if (this.categorizer) {
      involvedClassifiers.push(this.categorizer);
    }
    if (general) {
      involvedClassifiers.push(general);
    }
    if (specifics) {
      involvedClassifiers.push(...specifics);
    }
    return involvedClassifiers;
  }
  /** Collects specifics from all input generalization sets. Removes duplicates. */
  static collectSpecifics(generalizations) {
    let specifics = generalizations.map((g) => g.specific);
    return [...new Set(specifics)];
  }
  /** Collects generalizations from all input generalization sets. Removes duplicates. */
  static collectGeneralizations(genSets) {
    let generalizations = genSets.flatMap((gs) => gs.generalizations);
    return [...new Set(generalizations)];
  }
  involvesClasses() {
    return this.generalizations && this.generalizations.every((gen) => gen.involvesClasses());
  }
  involvesRelations() {
    return this.generalizations && this.generalizations.every((gen) => gen.involvesRelations());
  }
  clone() {
    return new GeneralizationSet3(this);
  }
  replace(originalElement, newElement) {
    if (this.container === originalElement) {
      this.container = newElement;
    }
    if (this.categorizer === originalElement) {
      this.categorizer = newElement;
    }
    if (this.generalizations && this.generalizations.includes(originalElement)) {
      this.generalizations = this.generalizations.map(
        (gen) => gen === originalElement ? newElement : gen
      );
    }
  }
  /** Get instantiation relations where the categorizer (or one of its ancestors) is the source */
  getInstantiationRelations() {
    throw new Error("Method unimplemented!");
  }
  toJSON() {
    const object = {
      isDisjoint: false,
      isComplete: false,
      categorizer: null,
      generalizations: null
    };
    Object.assign(object, super.toJSON());
    object.categorizer = this.categorizer && this.categorizer.getReference();
    object.generalizations = this.generalizations ? [...this.generalizations].map((generalization) => generalization.getReference()) : null;
    return object;
  }
  resolveReferences(elementReferenceMap) {
    super.resolveReferences(elementReferenceMap);
    const { categorizer, generalizations } = this;
    if (categorizer) {
      this.categorizer = OntoumlElement.resolveReference(categorizer, elementReferenceMap, this, "categorizer");
    }
    if (Array.isArray(generalizations)) {
      this.generalizations = generalizations.map(
        (generalization) => OntoumlElement.resolveReference(generalization, elementReferenceMap, this, "generalizations")
      );
    }
  }
};

// src/libs/ontouml/container_utils.ts
var import_lodash4 = __toESM(require_lodash());
function getContents(element, contentFields, contentsFilter) {
  const contents = /* @__PURE__ */ new Set();
  contentFields.forEach((fieldName) => {
    const value = element[fieldName];
    const valueArray = Array.isArray(element[fieldName]) ? element[fieldName] : void 0;
    if (valueArray) {
      valueArray.forEach((arrayItem) => {
        if (arrayItem) {
          contents.add(arrayItem);
        }
      });
    } else if (value) {
      contents.add(value);
    }
  });
  return contentsFilter ? [...contents].filter(contentsFilter) : [...contents];
}
function getAllContents(element, contentFields, contentsFilter) {
  const contents = /* @__PURE__ */ new Set();
  const tryAdd = function(value) {
    if (value && contents.has(value)) {
      throw new Error("Bad contents hierarchy");
    } else if (value) {
      contents.add(value);
    }
  };
  contentFields.forEach((fieldName) => {
    const value = element[fieldName];
    const valueArray = Array.isArray(element[fieldName]) ? element[fieldName] : void 0;
    if (valueArray) {
      valueArray.forEach((arrayItem) => {
        if (arrayItem) {
          contents.add(arrayItem);
        }
      });
    } else if (value) {
      contents.add(value);
    }
  });
  [...contents].forEach((content) => {
    if (content.getAllContents) {
      content.getAllContents().forEach(tryAdd);
    }
  });
  return contentsFilter ? [...contents].filter(contentsFilter) : [...contents];
}
function addContentToArray(element, arrayField, content) {
  if (!Array.isArray(element[arrayField])) {
    element[arrayField] = [content];
  } else {
    element[arrayField].push(content);
  }
  return content;
}
function setContainer(element, container, containmentReference, isContainedInArray) {
  if (element.project !== container.project) {
    throw new Error("OntoumlElement and content projects do not match");
  }
  const currentContainer = element.container;
  if (currentContainer && currentContainer[containmentReference]) {
    import_lodash4.default.remove(currentContainer[containmentReference], (element2) => element2 === element2);
  }
  if (isContainedInArray) {
    if (container[containmentReference]) {
      container[containmentReference].push(element);
    } else {
      container[containmentReference] = [element];
    }
  } else {
    if (container[containmentReference]) {
      throw new Error(`Content field '${containmentReference}' already defined`);
    } else {
      container[containmentReference] = element;
    }
  }
  element.container = container;
}
var containerUtils = {
  getContents,
  getAllContents,
  addContentToArray,
  setContainer
};

// src/libs/ontouml/project.ts
var import_lodash5 = __toESM(require_lodash());
var Project2 = class extends OntoumlElement {
  constructor(base) {
    super("Project" /* PROJECT_TYPE */, base);
    this.model = (base == null ? void 0 : base.model) || null;
    this.diagrams = (base == null ? void 0 : base.diagrams) || [];
    this.project = this;
  }
  createModel(base) {
    if (this.model) {
      throw new Error("Model already defined");
    }
    this.model = new Package(__spreadProps(__spreadValues({}, base), { container: null, project: this }));
    return this.model;
  }
  setModel(pkg) {
    this.model = pkg;
    if (pkg != null) {
      this.model.setContainer(this);
    }
  }
  createDiagram(base) {
    if (!this.diagrams) {
      this.diagrams = [];
    }
    const diagram = new Diagram(__spreadProps(__spreadValues({}, base), { container: null, project: this }));
    this.diagrams.push(diagram);
    return diagram;
  }
  addDiagram(diagram) {
    if (diagram === null)
      return;
    diagram.setContainer(this);
    this.diagrams.push(diagram);
  }
  addDiagrams(diagrams) {
    if (diagrams === null)
      return;
    diagrams.forEach((d) => this.addDiagram(d));
  }
  setDiagrams(diagrams) {
    this.diagrams = [];
    if (diagrams === null)
      return;
    this.addDiagrams(diagrams);
  }
  getContents() {
    let contents = [];
    if (this.model) {
      contents.push(this.model);
    }
    if (this.diagrams) {
      contents = [...contents, ...this.diagrams];
    }
    return contents;
  }
  getElementById(id) {
    var _a;
    return (_a = this.getAllContents().filter((e) => e.id === id)) == null ? void 0 : _a[0];
  }
  getClassById(id) {
    var _a;
    return (_a = this.getAllClasses().filter((e) => e.id === id)) == null ? void 0 : _a[0];
  }
  getRelationById(id) {
    var _a;
    return (_a = this.getAllRelations().filter((e) => e.id === id)) == null ? void 0 : _a[0];
  }
  getPropertyById(id) {
    var _a;
    return (_a = this.getAllProperties().filter((e) => e.id === id)) == null ? void 0 : _a[0];
  }
  getGeneralizationById(id) {
    var _a;
    return (_a = this.getAllGeneralizations().filter((e) => e.id === id)) == null ? void 0 : _a[0];
  }
  getGeneralizationSetById(id) {
    var _a;
    return (_a = this.getAllGeneralizationSets().filter((e) => e.id === id)) == null ? void 0 : _a[0];
  }
  getPackageById(id) {
    var _a;
    return (_a = this.getAllPackages().filter((e) => e.id === id)) == null ? void 0 : _a[0];
  }
  getAllAttributes() {
    return this.model.getAllAttributes();
  }
  getAllProperties() {
    return this.model.getAllProperties();
  }
  getAllRelationEnds() {
    return this.model.getAllRelationEnds();
  }
  getAllRelations() {
    return this.model.getAllRelations();
  }
  getAllGeneralizations() {
    return this.model.getAllGeneralizations();
  }
  /** Returns every generalization in the project that connects any two classifiers in the input array. */
  getGeneralizationsBetween(classifiers) {
    return this.getAllGeneralizations().filter((gen) => {
      const childSelected = classifiers.findIndex((c) => c.id === gen.specific.id) >= 0;
      const parentSelected = classifiers.findIndex((c) => c.id === gen.general.id) >= 0;
      return childSelected && parentSelected;
    });
  }
  getAllGeneralizationSets() {
    return this.model.getAllGeneralizationSets();
  }
  /** Returns every generalization set that involves at least of the generalizations in the input array */
  getGeneralizationSetsInvolvingAny(generalizations) {
    return this.getAllGeneralizationSets().filter(
      (gs) => (0, import_lodash5.some)(gs.generalizations, (gen) => generalizations.find((refGen) => refGen.id === gen.id))
    );
  }
  /** Returns every generalization set that involves at least of the generalizations in the input array */
  getGeneralizationSetsInvolvingAll(generalizations) {
    return this.getAllGeneralizationSets().filter(
      (gs) => (0, import_lodash5.every)(gs.generalizations, (gen) => generalizations.find((refGen) => refGen.id === gen.id))
    );
  }
  getAllPackages() {
    return this.getAllContents().filter((e) => e instanceof Package);
  }
  getAllClasses() {
    return this.model.getAllClasses();
  }
  getAllEnumerations() {
    return this.model.getAllEnumerations();
  }
  getAllLiterals() {
    return this.model.getAllLiterals();
  }
  getAllModelElements() {
    return this.getAllContents().filter((e) => e instanceof ModelElement);
  }
  getAllContentsByType(type) {
    return this.model.getAllContentsByType(type);
  }
  getAllAttributesByStereotype(stereotype) {
    return this.model.getAllAttributesByStereotype(stereotype);
  }
  getAllClassesByStereotype(stereotype) {
    return this.model.getAllClassesByStereotype(stereotype);
  }
  getAllRelationsByStereotype(stereotype) {
    return this.model.getAllRelationsByStereotype(stereotype);
  }
  getAllClassesWithRestrictedToContainedIn(nature) {
    return this.model.getAllClassesWithRestrictedToContainedIn(nature);
  }
  getClassesWithTypeStereotype() {
    return this.model.getClassesWithTypeStereotype();
  }
  getClassesWithHistoricalRoleStereotype() {
    return this.model.getClassesWithHistoricalRoleStereotype();
  }
  getClassesWithHistoricalRoleMixinStereotype() {
    return this.model.getClassesWithHistoricalRoleMixinStereotype();
  }
  getClassesWithEventStereotype() {
    return this.model.getClassesWithEventStereotype();
  }
  getClassesWithSituationStereotype() {
    return this.model.getClassesWithSituationStereotype();
  }
  getClassesWithCategoryStereotype() {
    return this.model.getClassesWithCategoryStereotype();
  }
  getClassesWithMixinStereotype() {
    return this.model.getClassesWithMixinStereotype();
  }
  getClassesWithRoleMixinStereotype() {
    return this.model.getClassesWithRoleMixinStereotype();
  }
  getClassesWithPhaseMixinStereotype() {
    return this.model.getClassesWithPhaseMixinStereotype();
  }
  getClassesWithKindStereotype() {
    return this.model.getClassesWithKindStereotype();
  }
  getClassesWithCollectiveStereotype() {
    return this.model.getClassesWithCollectiveStereotype();
  }
  getClassesWithQuantityStereotype() {
    return this.model.getClassesWithQuantityStereotype();
  }
  getClassesWithRelatorStereotype() {
    return this.model.getClassesWithRelatorStereotype();
  }
  getClassesWithQualityStereotype() {
    return this.model.getClassesWithQualityStereotype();
  }
  getClassesWithModeStereotype() {
    return this.model.getClassesWithModeStereotype();
  }
  getClassesWithSubkindStereotype() {
    return this.model.getClassesWithSubkindStereotype();
  }
  getClassesWithRoleStereotype() {
    return this.model.getClassesWithRoleStereotype();
  }
  getClassesWithPhaseStereotype() {
    return this.model.getClassesWithPhaseStereotype();
  }
  getClassesWithEnumerationStereotype() {
    return this.model.getClassesWithEnumerationStereotype();
  }
  getClassesWithDatatypeStereotype() {
    return this.model.getClassesWithDatatypeStereotype();
  }
  getClassesWithAbstractStereotype() {
    return this.model.getClassesWithAbstractStereotype();
  }
  getClassesRestrictedToFunctionalComplex() {
    return this.model.getClassesRestrictedToFunctionalComplex();
  }
  getClassesRestrictedToCollective() {
    return this.model.getClassesRestrictedToCollective();
  }
  getClassesRestrictedToQuantity() {
    return this.model.getClassesRestrictedToQuantity();
  }
  getClassesRestrictedToMode() {
    return this.model.getClassesRestrictedToMode();
  }
  getClassesRestrictedToIntrinsicMode() {
    return this.model.getClassesRestrictedToIntrinsicMode();
  }
  getClassesRestrictedToExtrinsicMode() {
    return this.model.getClassesRestrictedToExtrinsicMode();
  }
  getClassesRestrictedToQuality() {
    return this.model.getClassesRestrictedToQuality();
  }
  getClassesRestrictedToRelator() {
    return this.model.getClassesRestrictedToRelator();
  }
  lock() {
    throw new Error("Unimplemented method");
  }
  unlock() {
    throw new Error("Unimplemented method");
  }
  getClassesByNature() {
    throw new Error("Method unimplemented!");
  }
  toJSON() {
    const projectSerialization = {
      model: null,
      diagrams: null
    };
    Object.assign(projectSerialization, super.toJSON());
    return projectSerialization;
  }
  // No reference fields to resolve/replace
  resolveReferences(_elementReferenceMap) {
  }
};

// src/libs/ontouml/model/package.ts
var import_lodash6 = __toESM(require_lodash());
var Package = class extends ModelElement {
  constructor(base) {
    super("Package" /* PACKAGE_TYPE */, base);
    this.contents = (base == null ? void 0 : base.contents) || [];
  }
  addContent(child) {
    if (child == null)
      return null;
    if (child.container instanceof Package)
      child.container.removeContent(child);
    child.setContainer(this);
    this.contents.push(child);
    return child;
  }
  addContents(contents) {
    if (!contents)
      return [];
    return contents.filter((x) => x !== null).map((x) => this.addContent(x));
  }
  setContents(contents) {
    this.contents = [];
    return this.addContents(contents);
  }
  removeContent(child) {
    var _a;
    let removed = import_lodash6.default.remove(this.contents, (x) => child === x);
    return ((_a = import_lodash6.remove) == null ? void 0 : _a[0]) || null;
  }
  getContents() {
    return this.contents ? [...this.contents] : [];
  }
  getElementById(id) {
    var _a;
    return (_a = this.getAllContents().filter((e) => e.id === id)) == null ? void 0 : _a[0];
  }
  getClassById(id) {
    var _a;
    return (_a = this.getAllClasses().filter((e) => e.id === id)) == null ? void 0 : _a[0];
  }
  getRelationById(id) {
    var _a;
    return (_a = this.getAllRelations().filter((e) => e.id === id)) == null ? void 0 : _a[0];
  }
  getPropertyById(id) {
    var _a;
    return (_a = this.getAllProperties().filter((e) => e.id === id)) == null ? void 0 : _a[0];
  }
  getGeneralizationById(id) {
    var _a;
    return (_a = this.getAllGeneralizations().filter((e) => e.id === id)) == null ? void 0 : _a[0];
  }
  getGeneralizationSetById(id) {
    var _a;
    return (_a = this.getAllGeneralizationSets().filter((e) => e.id === id)) == null ? void 0 : _a[0];
  }
  getPackageById(id) {
    var _a;
    return (_a = this.getAllPackages().filter((e) => e.id === id)) == null ? void 0 : _a[0];
  }
  getAllProperties() {
    return this.getAllContents().filter((e) => e instanceof Property2);
  }
  getAllAttributes() {
    return this.getAllProperties().filter((p) => p.isAttribute());
  }
  getAllRelationEnds() {
    return this.getAllProperties().filter((p) => p.isRelationEnd());
  }
  getAllRelations() {
    return this.getAllContents().filter((e) => e instanceof Relation3);
  }
  getAllGeneralizations() {
    return this.getAllContents().filter((e) => e instanceof Generalization);
  }
  getAllGeneralizationSets() {
    return this.getAllContents().filter((e) => e instanceof GeneralizationSet3);
  }
  getAllPackages() {
    return this.getAllContents().filter((e) => e instanceof Package);
  }
  getAllClasses() {
    return this.getAllContents().filter((e) => e instanceof Class);
  }
  getAllEnumerations() {
    return this.getAllClasses().filter((c) => c.hasEnumerationStereotype());
  }
  getAllLiterals() {
    return this.getAllContents().filter((e) => e instanceof Literal);
  }
  getAllModelElements() {
    return this.getAllContents().filter((e) => e instanceof ModelElement);
  }
  getAllContentsByType(type) {
    const types = utils.arrayFrom(type);
    return this.getAllContents().filter((e) => types.includes(e.type));
  }
  getAllAttributesByStereotype(stereotype) {
    const stereotypes = utils.arrayFrom(stereotype);
    const stereotypesFilter = (attribute) => stereotypes.includes(attribute.stereotype);
    return this.getAllAttributes().filter(stereotypesFilter);
  }
  getAllClassesByStereotype(stereotype) {
    const stereotypes = utils.arrayFrom(stereotype);
    const stereotypesFilter = (_class) => stereotypes.includes(_class.stereotype);
    return this.getAllClasses().filter(stereotypesFilter);
  }
  getAllRelationsByStereotype(stereotype) {
    const stereotypes = utils.arrayFrom(stereotype);
    const stereotypesFilter = (relation) => stereotypes.includes(relation.stereotype);
    return this.getAllRelations().filter(stereotypesFilter);
  }
  getAllClassesWithRestrictedToContainedIn(nature) {
    const natures = utils.arrayFrom(nature);
    const naturesFilter = (_class) => _class.restrictedToContainedIn(natures);
    return this.getAllClasses().filter(naturesFilter);
  }
  getClassesWithTypeStereotype() {
    return this.getAllClassesByStereotype("type" /* TYPE */);
  }
  getClassesWithHistoricalRoleStereotype() {
    return this.getAllClassesByStereotype("historicalRole" /* HISTORICAL_ROLE */);
  }
  getClassesWithHistoricalRoleMixinStereotype() {
    return this.getAllClassesByStereotype("historicalRoleMixin" /* HISTORICAL_ROLE_MIXIN */);
  }
  getClassesWithEventStereotype() {
    return this.getAllClassesByStereotype("event" /* EVENT */);
  }
  getClassesWithSituationStereotype() {
    return this.getAllClassesByStereotype("situation" /* SITUATION */);
  }
  getClassesWithCategoryStereotype() {
    return this.getAllClassesByStereotype("category" /* CATEGORY */);
  }
  getClassesWithMixinStereotype() {
    return this.getAllClassesByStereotype("mixin" /* MIXIN */);
  }
  getClassesWithRoleMixinStereotype() {
    return this.getAllClassesByStereotype("roleMixin" /* ROLE_MIXIN */);
  }
  getClassesWithPhaseMixinStereotype() {
    return this.getAllClassesByStereotype("phaseMixin" /* PHASE_MIXIN */);
  }
  getClassesWithKindStereotype() {
    return this.getAllClassesByStereotype("kind" /* KIND */);
  }
  getClassesWithCollectiveStereotype() {
    return this.getAllClassesByStereotype("collective" /* COLLECTIVE */);
  }
  getClassesWithQuantityStereotype() {
    return this.getAllClassesByStereotype("quantity" /* QUANTITY */);
  }
  getClassesWithRelatorStereotype() {
    return this.getAllClassesByStereotype("relator" /* RELATOR */);
  }
  getClassesWithQualityStereotype() {
    return this.getAllClassesByStereotype("quality" /* QUALITY */);
  }
  getClassesWithModeStereotype() {
    return this.getAllClassesByStereotype("mode" /* MODE */);
  }
  getClassesWithSubkindStereotype() {
    return this.getAllClassesByStereotype("subkind" /* SUBKIND */);
  }
  getClassesWithRoleStereotype() {
    return this.getAllClassesByStereotype("role" /* ROLE */);
  }
  getClassesWithPhaseStereotype() {
    return this.getAllClassesByStereotype("phase" /* PHASE */);
  }
  getClassesWithEnumerationStereotype() {
    return this.getAllClassesByStereotype("enumeration" /* ENUMERATION */);
  }
  getClassesWithDatatypeStereotype() {
    return this.getAllClassesByStereotype("datatype" /* DATATYPE */);
  }
  getClassesWithAbstractStereotype() {
    return this.getAllClassesByStereotype("abstract" /* ABSTRACT */);
  }
  getClassesRestrictedToFunctionalComplex() {
    return this.getAllClassesWithRestrictedToContainedIn("functional-complex" /* functional_complex */);
  }
  getClassesRestrictedToCollective() {
    return this.getAllClassesWithRestrictedToContainedIn("collective" /* collective */);
  }
  getClassesRestrictedToQuantity() {
    return this.getAllClassesWithRestrictedToContainedIn("quantity" /* quantity */);
  }
  getClassesRestrictedToMode() {
    return this.getAllClassesWithRestrictedToContainedIn(["intrinsic-mode" /* intrinsic_mode */, "extrinsic-mode" /* extrinsic_mode */]);
  }
  getClassesRestrictedToIntrinsicMode() {
    return this.getAllClassesWithRestrictedToContainedIn("intrinsic-mode" /* intrinsic_mode */);
  }
  getClassesRestrictedToExtrinsicMode() {
    return this.getAllClassesWithRestrictedToContainedIn("extrinsic-mode" /* extrinsic_mode */);
  }
  getClassesRestrictedToQuality() {
    return this.getAllClassesWithRestrictedToContainedIn("quality" /* quality */);
  }
  getClassesRestrictedToRelator() {
    return this.getAllClassesWithRestrictedToContainedIn("relator" /* relator */);
  }
  toJSON() {
    const packageSerialization = {
      contents: null
    };
    Object.assign(packageSerialization, super.toJSON());
    return packageSerialization;
  }
  createPackage(name, base) {
    let pkg = new Package(Object.assign({}, base, { name: new MultilingualText(name), container: this, project: this.project }));
    return this.addContent(pkg);
  }
  // TODO: documentation
  createClass(name, stereotype, natures, base) {
    let clazz = new Class(
      Object.assign({}, base, {
        name: new MultilingualText(name),
        stereotype,
        restrictedTo: utils.arrayFrom(natures),
        container: this,
        project: this.project
      })
    );
    return this.addContent(clazz);
  }
  createType(name, base) {
    return this.createClass(name, "type" /* TYPE */, "type" /* type */, base);
  }
  createHistoricalRole(name, base) {
    return this.createClass(name, "historicalRole" /* HISTORICAL_ROLE */, "functional-complex" /* functional_complex */, base);
  }
  createHistoricalRoleMixin(name, natures, base) {
    const isAbstract = true;
    return this.createClass(
      name,
      "historicalRoleMixin" /* HISTORICAL_ROLE_MIXIN */,
      natures || "functional-complex" /* functional_complex */,
      Object.assign({}, base, { isAbstract })
    );
  }
  createEvent(name, base) {
    return this.createClass(name, "event" /* EVENT */, "event" /* event */, base);
  }
  createSituation(name, base) {
    return this.createClass(name, "situation" /* SITUATION */, "situation" /* situation */, base);
  }
  createCategory(name, natures, base) {
    const isAbstract = true;
    return this.createClass(
      name,
      "category" /* CATEGORY */,
      natures || "functional-complex" /* functional_complex */,
      Object.assign({}, base, { isAbstract })
    );
  }
  createMixin(name, natures, base) {
    const isAbstract = true;
    return this.createClass(
      name,
      "mixin" /* MIXIN */,
      natures || "functional-complex" /* functional_complex */,
      Object.assign({}, base, { isAbstract })
    );
  }
  // TODO: move default
  createRoleMixin(name, natures, base) {
    const isAbstract = true;
    return this.createClass(
      name,
      "roleMixin" /* ROLE_MIXIN */,
      natures || "functional-complex" /* functional_complex */,
      Object.assign({}, base, { isAbstract })
    );
  }
  createPhaseMixin(name, natures, base) {
    const isAbstract = true;
    return this.createClass(
      name,
      "phaseMixin" /* PHASE_MIXIN */,
      natures || "functional-complex" /* functional_complex */,
      Object.assign({}, base, { isAbstract })
    );
  }
  createKind(name, base) {
    return this.createClass(name, "kind" /* KIND */, "functional-complex" /* functional_complex */, base);
  }
  createCollective(name, isExtensional, base) {
    return this.createClass(
      name,
      "collective" /* COLLECTIVE */,
      "collective" /* collective */,
      Object.assign({}, base, { isExtensional })
    );
  }
  createQuantity(name, base) {
    return this.createClass(name, "quantity" /* QUANTITY */, "quantity" /* quantity */, base);
  }
  createRelator(name, base) {
    return this.createClass(name, "relator" /* RELATOR */, "relator" /* relator */, base);
  }
  createQuality(name, base) {
    return this.createClass(name, "quality" /* QUALITY */, "quality" /* quality */, base);
  }
  createIntrinsicMode(name, base) {
    return this.createClass(name, "mode" /* MODE */, "intrinsic-mode" /* intrinsic_mode */, base);
  }
  createExtrinsicMode(name, base) {
    return this.createClass(name, "mode" /* MODE */, "extrinsic-mode" /* extrinsic_mode */, base);
  }
  createSubkind(name, nature, base) {
    return this.createClass(name, "subkind" /* SUBKIND */, nature || "functional-complex" /* functional_complex */, base);
  }
  createRole(name, nature, base) {
    return this.createClass(name, "role" /* ROLE */, nature || "functional-complex" /* functional_complex */, base);
  }
  createPhase(name, nature, base) {
    return this.createClass(name, "phase" /* PHASE */, nature || "functional-complex" /* functional_complex */, base);
  }
  createAbstract(name, base) {
    return this.createClass(name, "abstract" /* ABSTRACT */, "abstract" /* abstract */, base);
  }
  createDatatype(name, base) {
    return this.createClass(name, "datatype" /* DATATYPE */, "abstract" /* abstract */, base);
  }
  createEnumeration(name, literals, base) {
    const enumeration = this.createClass(name, "enumeration" /* ENUMERATION */, "abstract" /* abstract */, base);
    if (Array.isArray(literals)) {
      literals.forEach((literalBase) => enumeration.createLiteral(void 0, literalBase));
    }
    return enumeration;
  }
  createRelation(base) {
    let relation = new Relation3(Object.assign({}, base, { container: this, project: this.project }));
    return this.addContent(relation);
  }
  // TODO: update names
  createBinaryRelation(source, target, name, stereotype, base) {
    const binaryRelation = this.createRelation(Object.assign({}, base, { name, stereotype }));
    binaryRelation.createSourceEnd({ propertyType: source });
    binaryRelation.createTargetEnd({ propertyType: target });
    return binaryRelation;
  }
  createDerivationRelation(derivingRelation, derivedClass, name, base) {
    const derivationRelation = this.createRelation(Object.assign({}, base, { name, stereotype: "derivation" /* DERIVATION */ }));
    derivationRelation.createSourceEnd({ propertyType: derivingRelation });
    derivationRelation.createTargetEnd({ propertyType: derivedClass });
    return derivationRelation;
  }
  createTernaryRelation(relata, name, base) {
    if (relata.length < 3) {
      throw new Error("Ternary relations must involve at least 3 members");
    }
    const ternaryRelation = this.createRelation(Object.assign({}, base, { name }));
    relata.forEach((relatum, index) => ternaryRelation.createMemberEnd(index, { propertyType: relatum }));
    return ternaryRelation;
  }
  createMaterialRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "material" /* MATERIAL */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    if (target.hasRoleStereotype() || target.hasRoleMixinStereotype()) {
      sourceEnd.cardinality.setOneToMany();
    } else {
      sourceEnd.cardinality.setZeroToMany();
    }
    if (source.hasRoleStereotype() || source.hasRoleMixinStereotype()) {
      targetEnd.cardinality.setOneToMany();
    } else {
      targetEnd.cardinality.setZeroToMany();
    }
    return relation;
  }
  createComparativeRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "comparative" /* COMPARATIVE */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setZeroToOne();
    sourceEnd.isReadOnly = true;
    targetEnd.cardinality.setZeroToOne();
    targetEnd.isReadOnly = true;
    return relation;
  }
  createMediationRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "mediation" /* MEDIATION */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    if (target.hasRoleStereotype() || target.hasRoleMixinStereotype()) {
      sourceEnd.cardinality.setOneToMany();
    } else {
      sourceEnd.cardinality.setZeroToMany();
    }
    targetEnd.cardinality.setOneToOne();
    targetEnd.isReadOnly = true;
    return relation;
  }
  createCharacterizationRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "characterization" /* CHARACTERIZATION */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setOneToOne();
    targetEnd.cardinality.setOneToOne();
    targetEnd.isReadOnly = true;
    return relation;
  }
  createExternalDependencyRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "externalDependence" /* EXTERNAL_DEPENDENCE */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setZeroToMany();
    targetEnd.cardinality.setOneToMany();
    targetEnd.isReadOnly = true;
    return relation;
  }
  createComponentOfRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "componentOf" /* COMPONENT_OF */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setOneToMany();
    targetEnd.cardinality.setOneToOne();
    targetEnd.aggregationKind = "COMPOSITE" /* COMPOSITE */;
    return relation;
  }
  createMemberOfRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "memberOf" /* MEMBER_OF */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setOneToMany();
    targetEnd.cardinality.setOneToMany();
    targetEnd.aggregationKind = "SHARED" /* SHARED */;
    return relation;
  }
  createSubCollectionOfRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "subCollectionOf" /* SUBCOLLECTION_OF */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setCardinalityFromNumbers(1, 1);
    targetEnd.cardinality.setCardinalityFromNumbers(1, 1);
    targetEnd.aggregationKind = "COMPOSITE" /* COMPOSITE */;
    return relation;
  }
  createSubQuantityOfRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "subQuantityOf" /* SUBQUANTITY_OF */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setCardinalityFromNumbers(1, 1);
    targetEnd.cardinality.setCardinalityFromNumbers(1, 1);
    targetEnd.aggregationKind = "COMPOSITE" /* COMPOSITE */;
    return relation;
  }
  createInstantiationRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "instantiation" /* INSTANTIATION */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setZeroToMany();
    targetEnd.cardinality.setOneToMany();
    return relation;
  }
  createTerminationRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "termination" /* TERMINATION */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setCardinalityFromNumbers(1, 1);
    sourceEnd.isReadOnly = true;
    targetEnd.cardinality.setCardinalityFromNumbers(1, 1);
    targetEnd.isReadOnly = true;
    return relation;
  }
  createParticipationalRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "participational" /* PARTICIPATIONAL */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setOneToMany();
    sourceEnd.isReadOnly = true;
    targetEnd.cardinality.setOneToOne();
    targetEnd.isReadOnly = true;
    targetEnd.aggregationKind = "COMPOSITE" /* COMPOSITE */;
    return relation;
  }
  createParticipationRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "participation" /* PARTICIPATION */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setZeroToOne();
    sourceEnd.isReadOnly = true;
    if (source.hasHistoricalRoleStereotype() || source.hasHistoricalRoleMixinStereotype()) {
      targetEnd.cardinality.setOneToMany();
    } else {
      targetEnd.cardinality.setZeroToMany();
    }
    return relation;
  }
  createHistoricalDependenceRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "historicalDependence" /* HISTORICAL_DEPENDENCE */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setZeroToMany();
    sourceEnd.isReadOnly = true;
    targetEnd.cardinality.setOneToOne();
    return relation;
  }
  createCreationRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "creation" /* CREATION */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setOneToOne();
    sourceEnd.isReadOnly = true;
    targetEnd.cardinality.setOneToOne();
    targetEnd.isReadOnly = true;
    return relation;
  }
  createManifestationRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "manifestation" /* MANIFESTATION */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setOneToMany();
    sourceEnd.isReadOnly = true;
    targetEnd.cardinality.setZeroToMany();
    return relation;
  }
  createBringsAboutRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "bringsAbout" /* BRINGS_ABOUT */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setOneToOne();
    sourceEnd.isReadOnly = true;
    targetEnd.cardinality.setOneToOne();
    targetEnd.isReadOnly = true;
    return relation;
  }
  createTriggersRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, "triggers" /* TRIGGERS */, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setOneToOne();
    sourceEnd.isReadOnly = true;
    targetEnd.cardinality.setOneToOne();
    return relation;
  }
  createPartWholeRelation(source, target, name, base) {
    const relation = this.createBinaryRelation(source, target, name, null, base);
    const sourceEnd = relation.getSourceEnd();
    const targetEnd = relation.getTargetEnd();
    sourceEnd.cardinality.setCardinalityFromNumbers(2);
    targetEnd.cardinality.setOneToOne();
    targetEnd.aggregationKind = "COMPOSITE" /* COMPOSITE */;
    return relation;
  }
  createGeneralization(general, specific, name, base) {
    let generalization = new Generalization(
      Object.assign({}, base, { name, general, specific, container: this, project: this.project })
    );
    return this.addContent(generalization);
  }
  createGeneralizationSet(generalizations, isDisjoint = false, isComplete = false, categorizer, name, base) {
    isDisjoint = isDisjoint || false;
    isComplete = isComplete || false;
    categorizer = categorizer || null;
    let gs = new GeneralizationSet3(
      Object.assign({}, base, {
        name,
        isDisjoint,
        isComplete,
        categorizer,
        generalizations: utils.arrayFrom(generalizations),
        container: this,
        project: this.project
      })
    );
    return this.addContent(gs);
  }
  createPartition(generalizations, categorizer, name, base) {
    categorizer = categorizer || null;
    return this.createGeneralizationSet(generalizations, true, true, categorizer, name, Object.assign({}, base));
  }
  createPartitionFromClasses(general, specifics, name) {
    const generalizations = specifics.map((s) => s.addParent(general));
    return this.createGeneralizationSet(generalizations, true, true, null, name);
  }
  createGeneralizationSetFromClasses(general, specifics, isDisjoint = false, isComplete = false, name) {
    const generalizations = specifics.map((s) => s.addParent(general));
    return this.createGeneralizationSet(generalizations, isDisjoint, isComplete, null, name);
  }
  /**
   * Clones the model element and all its contents. Replaces all references to
   * original contents with references to their clones if
   * `replaceReferences = true`. If `replaceReferences = false`, replace() will
   * not be triggered, but this argument should only be used in recursive calls.
   *
   * @param replaceReferences - set to false on recursive calls to avoid
   * unnecessary call to `replace()`.
   *  */
  clone(replaceReferences = true) {
    const clone2 = new Package(this);
    if (clone2.contents) {
      clone2.contents = clone2.contents.map((content) => {
        if (content instanceof Package) {
          return content.clone(false);
        } else {
          return content.clone();
        }
      });
    }
    if (replaceReferences) {
      Package.triggersReplaceOnClonedPackage(this, clone2);
    }
    return clone2;
  }
  replace(originalElement, newElement) {
    if (this.container === originalElement) {
      this.container = newElement;
    }
    this.getContents().forEach((content) => content.replace(originalElement, newElement));
  }
  /** Triggers `replace()` on `clonedPackage` and all of its contents, removing
   * references to the contents of `originalPackage` with their references to
   * their clones. */
  static triggersReplaceOnClonedPackage(originalPackage, clonedPackage) {
    const replacementsMap = /* @__PURE__ */ new Map();
    replacementsMap.set(originalPackage.id, { originalContent: originalPackage, newContent: clonedPackage });
    originalPackage.getAllContents().forEach((content) => {
      replacementsMap.set(content.id, { originalContent: content, newContent: null });
    });
    clonedPackage.getAllContents().forEach((content) => {
      const id = content.id;
      const entry = __spreadProps(__spreadValues({}, replacementsMap.get(id)), { newContent: content });
      replacementsMap.set(id, entry);
    });
    clonedPackage.getContents().forEach(
      (content) => replacementsMap.forEach(({ originalContent, newContent }) => content.replace(originalContent, newContent))
    );
  }
};

// src/libs/ontouml/model/property.ts
var AggregationKind = /* @__PURE__ */ ((AggregationKind2) => {
  AggregationKind2["NONE"] = "NONE";
  AggregationKind2["SHARED"] = "SHARED";
  AggregationKind2["COMPOSITE"] = "COMPOSITE";
  return AggregationKind2;
})(AggregationKind || {});
var Property2 = class extends Decoratable {
  constructor(base) {
    super("Property" /* PROPERTY_TYPE */, base);
    this.propertyType = base == null ? void 0 : base.propertyType;
    this.cardinality = new Cardinality(base == null ? void 0 : base.cardinality);
    this.subsettedProperties = (base == null ? void 0 : base.subsettedProperties) || [];
    this.redefinedProperties = (base == null ? void 0 : base.redefinedProperties) || [];
    this.aggregationKind = (base == null ? void 0 : base.aggregationKind) || "NONE" /* NONE */;
    this.isDerived = (base == null ? void 0 : base.isDerived) || false;
    this.isOrdered = (base == null ? void 0 : base.isOrdered) || false;
    this.isReadOnly = (base == null ? void 0 : base.isReadOnly) || false;
  }
  getContents() {
    return [];
  }
  getAllowedStereotypes() {
    return stereotypeUtils.PropertyStereotypes;
  }
  isStereotypeValid(allowsNone = true) {
    return super.isStereotypeValid(allowsNone);
  }
  isAttribute() {
    return this.container instanceof Class;
  }
  isRelationEnd() {
    return this.container instanceof Relation3;
  }
  isPropertyTypeDefined() {
    return this.propertyType instanceof Classifier;
  }
  isShared() {
    return this.isRelationEnd() && this.aggregationKind === "SHARED" /* SHARED */;
  }
  isComposite() {
    return this.isRelationEnd() && this.aggregationKind === "COMPOSITE" /* COMPOSITE */;
  }
  isAggregationEnd() {
    return this.isShared() || this.isComposite();
  }
  /**
   * Only in binary relations
   */
  getOppositeEnd() {
    if (this.container instanceof Relation3 && this.container.isBinary()) {
      return this !== this.container.getSourceEnd() ? this.container.getSourceEnd() : this.container.getTargetEnd();
    }
    throw new Error("Invalid method on non-binary relations");
  }
  /**
   * Only in Nary relations
   */
  getOtherEnds() {
    const container = this.container;
    if (container instanceof Relation3 && container.isTernary()) {
      return container.properties.filter((relationEnd) => relationEnd !== this);
    } else {
      throw new Error("Invalid method on non-ternary relations");
    }
  }
  clone() {
    return new Property2(this);
  }
  replace(originalElement, newElement) {
    if (this.container === originalElement) {
      this.container = newElement;
    }
    if (this.propertyType === originalElement) {
      this.propertyType = newElement;
    }
    if (this.subsettedProperties && this.subsettedProperties.includes(originalElement)) {
      this.subsettedProperties = this.subsettedProperties.map(
        (subsettedProperty) => subsettedProperty === originalElement ? newElement : subsettedProperty
      );
    }
    if (this.redefinedProperties && this.redefinedProperties.includes(originalElement)) {
      this.redefinedProperties = this.redefinedProperties.map(
        (redefinedProperty) => redefinedProperty === originalElement ? newElement : redefinedProperty
      );
    }
  }
  toJSON() {
    var _a;
    const propertySerialization = {
      stereotype: null,
      cardinality: null,
      propertyType: null,
      subsettedProperties: null,
      redefinedProperties: null,
      aggregationKind: null,
      isDerived: false,
      isOrdered: false,
      isReadOnly: false
    };
    Object.assign(propertySerialization, super.toJSON());
    propertySerialization.propertyType = (_a = this.propertyType) == null ? void 0 : _a.getReference();
    return propertySerialization;
  }
  resolveReferences(elementReferenceMap) {
    super.resolveReferences(elementReferenceMap);
    const { propertyType } = this;
    if (propertyType) {
      this.propertyType = OntoumlElement.resolveReference(propertyType, elementReferenceMap, this, "propertyType");
    }
  }
};

// src/libs/ontouml/model/relation.ts
var Relation3 = class extends Classifier {
  constructor(base) {
    super("Relation" /* RELATION_TYPE */, base);
  }
  getContents() {
    return [...this.properties];
  }
  getAllowedStereotypes() {
    return stereotypeUtils.RelationStereotypes;
  }
  isStereotypeValid(allowsNone = true) {
    return super.isStereotypeValid(allowsNone);
  }
  toJSON() {
    const relationSerialization = {
      stereotype: null,
      properties: null,
      isAbstract: false,
      isDerived: false
    };
    Object.assign(relationSerialization, super.toJSON());
    return relationSerialization;
  }
  createSourceEnd(base) {
    this.properties = this.properties || [];
    if (this.properties[0]) {
      throw new Error("Source already defined");
    }
    const sourceEnd = new Property2(__spreadProps(__spreadValues({}, base), { container: this, project: this.project }));
    this.properties[0] = sourceEnd;
    return sourceEnd;
  }
  createTargetEnd(base) {
    this.properties = this.properties || [];
    if (this.properties[1]) {
      throw new Error("Target already defined");
    }
    const targetEnd = new Property2(__spreadProps(__spreadValues({}, base), { container: this, project: this.project }));
    this.properties[1] = targetEnd;
    return targetEnd;
  }
  /**
   * Create member end at designated position. If no position is informed, append the member end at the last position.
   *
   * @param position - position to place the member end; optional
   * @param base - partial property object to base the new member end; optional
   * */
  createMemberEnd(position, base) {
    this.properties = this.properties || [];
    position = position || position === 0 ? position : this.properties.length;
    if (typeof position !== "number" || position < 0) {
      throw new Error(`Invalid position value: ${position}`);
    }
    if (this.properties[position]) {
      throw new Error("Member already defined in this position");
    }
    const memberEnd = new Property2(__spreadProps(__spreadValues({}, base), { container: this, project: this.project }));
    position = position;
    this.properties[position] = memberEnd;
    return memberEnd;
  }
  getSourceEnd() {
    if (!this.isBinary()) {
      throw new Error("Unable to retrieve source end on a non-binary relation");
    }
    return this.properties[0];
  }
  getTargetEnd() {
    if (!this.isBinary()) {
      throw new Error("Unable to retrieve target end on a non-binary relation");
    }
    return this.properties[1];
  }
  getMemberEnd(position) {
    if (!this.isTernary()) {
      throw new Error("Unable to retrieve member end on a non-ternary relation");
    }
    return this.properties[position];
  }
  getSourceClassEnd() {
    if (!this.isBinaryClassRelation()) {
      throw new Error("Unable to retrieve source end on a non-binary relation");
    }
    return this.properties[0];
  }
  getTargetClassEnd() {
    if (!this.isBinaryClassRelation()) {
      throw new Error("Unable to retrieve target end on a non-binary relation");
    }
    return this.properties[1];
  }
  getDerivingRelationEnd() {
    if (!this.isDerivation()) {
      throw new Error("Unable to retrieve source end on a non-binary relation");
    }
    return this.properties[0];
  }
  getDerivedClassEnd() {
    if (!this.isDerivation()) {
      throw new Error("Unable to retrieve target end on a non-binary relation");
    }
    return this.properties[1];
  }
  getMemberClassEnd(position) {
    if (!this.isTernaryClassRelation()) {
      throw new Error("Unable to retrieve member end on a non-ternary relation");
    }
    return this.properties[position];
  }
  getSource() {
    return this.getSourceEnd().propertyType;
  }
  getTarget() {
    return this.getTargetEnd().propertyType;
  }
  getMembers() {
    var _a;
    let members = ((_a = this.properties) == null ? void 0 : _a.map((prop) => prop.propertyType).filter((type) => type !== null)) || [];
    return [...new Set(members)];
  }
  getMember(position) {
    if (this.hasDerivationStereotype()) {
      throw new Error("Unable to retrieve class from derivation relation");
    }
    return this.getMemberClassEnd(position).propertyType;
  }
  getSourceClass() {
    if (this.hasDerivationStereotype()) {
      throw new Error("Unable to retrieve class from derivation relation");
    }
    return this.getSourceEnd().propertyType;
  }
  getTargetClass() {
    if (this.hasDerivationStereotype()) {
      throw new Error("Unable to retrieve class from derivation relation");
    }
    return this.getTargetEnd().propertyType;
  }
  getMemberClass(position) {
    if (this.hasDerivationStereotype()) {
      throw new Error("Unable to retrieve class from derivation relation");
    }
    return this.getMemberClassEnd(position).propertyType;
  }
  getDerivingRelation() {
    if (!this.hasDerivationStereotype()) {
      throw new Error("Unable to retrieve deriving relation from non-derivation relation");
    }
    return this.getDerivingRelationEnd().propertyType;
  }
  getDerivedClass() {
    if (!this.hasDerivationStereotype()) {
      throw new Error("Unable to retrieve derived class from non-derivation relation");
    }
    return this.getDerivedClassEnd().propertyType;
  }
  getSourceStereotype() {
    return this.getSource().stereotype;
  }
  getTargetStereotype() {
    return this.getTarget().stereotype;
  }
  getSourceClassStereotype() {
    return this.getSourceClass().stereotype;
  }
  getTargetClassStereotype() {
    return this.getTargetClass().stereotype;
  }
  getMemberClassStereotype(position) {
    return this.getMemberClass(position).stereotype;
  }
  getDerivingRelationStereotype() {
    return this.getDerivingRelation().stereotype;
  }
  getDerivedClassStereotype() {
    return this.getDerivedClass().stereotype;
  }
  // TODO: check whether isBinaryRelation() is a better name
  isBinary() {
    var _a;
    return ((_a = this.properties) == null ? void 0 : _a.length) === 2;
  }
  // TODO: check whether isTernaryRelation() is a better name
  isTernary() {
    var _a;
    return ((_a = this.properties) == null ? void 0 : _a.length) > 2;
  }
  isBinaryClassRelation() {
    return this.isBinary() && this.getSource() instanceof Class && this.getTarget() instanceof Class;
  }
  // TODO: check whether isDerivationRelation() is a better name
  isDerivation() {
    return this.isBinary() && this.properties[0].propertyType instanceof Relation3 && this.properties[1].propertyType instanceof Class;
  }
  isTernaryClassRelation() {
    return this.isTernary() && this.properties.every((relationEnd) => relationEnd.propertyType instanceof Class);
  }
  isPartWholeRelation() {
    return this.isBinary() && this.getTargetEnd().isAggregationEnd();
  }
  isMediation() {
    return this.stereotype === "mediation" /* MEDIATION */;
  }
  // TODO: check weather ternary relations may denote existential dependencies
  isExistentialDependency() {
    return this.properties.some((relationEnd) => relationEnd.isReadOnly);
  }
  isSourceExistentiallyDependent() {
    return this.getTargetEnd().isReadOnly;
  }
  isTargetExistentiallyDependent() {
    return this.getSourceEnd().isReadOnly;
  }
  isBinaryExistentialDependency() {
    return this.isSourceExistentiallyDependent() || this.isTargetExistentiallyDependent();
  }
  hasExistentialDependencyStereotype() {
    const stereotype = this.stereotype;
    return stereotypeUtils.ExistentialDependencyRelationStereotypes.includes(stereotype);
  }
  hasMaterialStereotype() {
    return this.stereotype === "material" /* MATERIAL */;
  }
  hasDerivationStereotype() {
    return this.stereotype === "derivation" /* DERIVATION */;
  }
  hasComparativeStereotype() {
    return this.stereotype === "comparative" /* COMPARATIVE */;
  }
  hasMediationStereotype() {
    return this.stereotype === "mediation" /* MEDIATION */;
  }
  hasCharacterizationStereotype() {
    return this.stereotype === "characterization" /* CHARACTERIZATION */;
  }
  hasExternalDependenceStereotype() {
    return this.stereotype === "externalDependence" /* EXTERNAL_DEPENDENCE */;
  }
  hasComponentOfStereotype() {
    return this.stereotype === "componentOf" /* COMPONENT_OF */;
  }
  hasMemberOfStereotype() {
    return this.stereotype === "memberOf" /* MEMBER_OF */;
  }
  hasSubCollectionOfStereotype() {
    return this.stereotype === "subCollectionOf" /* SUBCOLLECTION_OF */;
  }
  hasSubQuantityOfStereotype() {
    return this.stereotype === "subQuantityOf" /* SUBQUANTITY_OF */;
  }
  hasInstantiationStereotype() {
    return this.stereotype === "instantiation" /* INSTANTIATION */;
  }
  hasTerminationStereotype() {
    return this.stereotype === "termination" /* TERMINATION */;
  }
  hasParticipationalStereotype() {
    return this.stereotype === "participational" /* PARTICIPATIONAL */;
  }
  hasParticipationStereotype() {
    return this.stereotype === "participation" /* PARTICIPATION */;
  }
  hasHistoricalDependenceStereotype() {
    return this.stereotype === "historicalDependence" /* HISTORICAL_DEPENDENCE */;
  }
  hasCreationStereotype() {
    return this.stereotype === "creation" /* CREATION */;
  }
  hasManifestationStereotype() {
    return this.stereotype === "manifestation" /* MANIFESTATION */;
  }
  hasBringsAboutStereotype() {
    return this.stereotype === "bringsAbout" /* BRINGS_ABOUT */;
  }
  hasTriggersStereotype() {
    return this.stereotype === "triggers" /* TRIGGERS */;
  }
  holdsBetween(...conditions) {
    if (this.properties.length !== conditions.length) {
      throw new Error("Method requires a same number conditions and relation ends");
    }
    return this.properties.every((relationEnd, relationEndIndex) => conditions[relationEndIndex](relationEnd));
  }
  holdsBetweenEvents() {
    if (!this.isBinaryClassRelation() || this.isDerivation()) {
      return false;
    }
    const isEndTypeAnEvent = (relationEnd) => relationEnd.propertyType instanceof Class && relationEnd.propertyType.isRestrictedToEvent();
    return this.holdsBetween(isEndTypeAnEvent, isEndTypeAnEvent);
  }
  holdsBetweenMoments() {
    if (!this.isBinaryClassRelation() || this.isDerivation()) {
      return false;
    }
    const isEndTypeAMoment = (relationEnd) => relationEnd.propertyType instanceof Class && relationEnd.propertyType.isRestrictedToMoment();
    return this.holdsBetween(isEndTypeAMoment, isEndTypeAMoment);
  }
  holdsBetweenSubstantials() {
    if (!this.isBinaryClassRelation() || this.isDerivation()) {
      return false;
    }
    const isEndTypeASubstantial = (relationEnd) => relationEnd.propertyType instanceof Class && relationEnd.propertyType.isRestrictedToSubstantial();
    return this.holdsBetween(isEndTypeASubstantial, isEndTypeASubstantial);
  }
  clone() {
    const clone2 = new Relation3(this);
    if (clone2.properties) {
      clone2.properties = clone2.properties.map((attribute) => attribute.clone());
    }
    return clone2;
  }
  replace(originalElement, newElement) {
    if (this.container === originalElement) {
      this.container = newElement;
    }
    this.getContents().forEach((content) => content.replace(originalElement, newElement));
  }
  /**
   * Returns the `propertyType` of `properties[1]` if the relation is a derivation relation (see `isDerivation()`).
   */
  // getTruthmakerClass(): Class {
  //   throw new Error('Method unimplemented!');
  // }
  // TODO: support specific methods for binary, nary, and derivations, throwing exception when otherwise
  getMediatedClass() {
    throw new Error("Method unimplemented!");
  }
  getMediatedEnd() {
    throw new Error("Method unimplemented!");
  }
  getRelatorClass() {
    throw new Error("Method unimplemented!");
  }
  getRelatorEnd() {
    throw new Error("Method unimplemented!");
  }
  // Applies only to characterization
  getBearerClass() {
    throw new Error("Method unimplemented!");
  }
  getBearerEnd() {
    throw new Error("Method unimplemented!");
  }
  getInheringClass() {
    throw new Error("Method unimplemented!");
  }
  getInheringEnd() {
    throw new Error("Method unimplemented!");
  }
  // All part-whole relations and parthood without stereotype
  getPartClass() {
    throw new Error("Method unimplemented!");
  }
  getPartEnd() {
    throw new Error("Method unimplemented!");
  }
  getWholeClass() {
    throw new Error("Method unimplemented!");
  }
  getWholeEnd() {
    throw new Error("Method unimplemented!");
  }
  getDependedClass() {
    throw new Error("Method unimplemented!");
  }
  getDependedEnd() {
    throw new Error("Method unimplemented!");
  }
  getDependentClass() {
    throw new Error("Method unimplemented!");
  }
  getDependentEnd() {
    throw new Error("Method unimplemented!");
  }
  getTypeClass() {
    throw new Error("Method unimplemented!");
  }
  getTypeEnd() {
    throw new Error("Method unimplemented!");
  }
  getInstanceClass() {
    throw new Error("Method unimplemented!");
  }
  getInstanceEnd() {
    throw new Error("Method unimplemented!");
  }
  getEventClass() {
    throw new Error("Method unimplemented!");
  }
  getEventEnd() {
    throw new Error("Method unimplemented!");
  }
  getEndurantClass() {
    throw new Error("Method unimplemented!");
  }
  getEndurantEnd() {
    throw new Error("Method unimplemented!");
  }
  getSituationClass() {
    throw new Error("Method unimplemented!");
  }
  getSituationEnd() {
    throw new Error("Method unimplemented!");
  }
  // TODO: Bring in the relevant relations from Class
};

// src/libs/ontouml/model/stereotypes.ts
var ClassStereotype = /* @__PURE__ */ ((ClassStereotype4) => {
  ClassStereotype4["TYPE"] = "type";
  ClassStereotype4["HISTORICAL_ROLE"] = "historicalRole";
  ClassStereotype4["HISTORICAL_ROLE_MIXIN"] = "historicalRoleMixin";
  ClassStereotype4["EVENT"] = "event";
  ClassStereotype4["SITUATION"] = "situation";
  ClassStereotype4["CATEGORY"] = "category";
  ClassStereotype4["MIXIN"] = "mixin";
  ClassStereotype4["ROLE_MIXIN"] = "roleMixin";
  ClassStereotype4["PHASE_MIXIN"] = "phaseMixin";
  ClassStereotype4["KIND"] = "kind";
  ClassStereotype4["COLLECTIVE"] = "collective";
  ClassStereotype4["QUANTITY"] = "quantity";
  ClassStereotype4["RELATOR"] = "relator";
  ClassStereotype4["QUALITY"] = "quality";
  ClassStereotype4["MODE"] = "mode";
  ClassStereotype4["SUBKIND"] = "subkind";
  ClassStereotype4["ROLE"] = "role";
  ClassStereotype4["PHASE"] = "phase";
  ClassStereotype4["ENUMERATION"] = "enumeration";
  ClassStereotype4["DATATYPE"] = "datatype";
  ClassStereotype4["ABSTRACT"] = "abstract";
  return ClassStereotype4;
})(ClassStereotype || {});
var RelationStereotype2 = /* @__PURE__ */ ((RelationStereotype4) => {
  RelationStereotype4["MATERIAL"] = "material";
  RelationStereotype4["DERIVATION"] = "derivation";
  RelationStereotype4["COMPARATIVE"] = "comparative";
  RelationStereotype4["MEDIATION"] = "mediation";
  RelationStereotype4["CHARACTERIZATION"] = "characterization";
  RelationStereotype4["EXTERNAL_DEPENDENCE"] = "externalDependence";
  RelationStereotype4["COMPONENT_OF"] = "componentOf";
  RelationStereotype4["MEMBER_OF"] = "memberOf";
  RelationStereotype4["SUBCOLLECTION_OF"] = "subCollectionOf";
  RelationStereotype4["SUBQUANTITY_OF"] = "subQuantityOf";
  RelationStereotype4["INSTANTIATION"] = "instantiation";
  RelationStereotype4["TERMINATION"] = "termination";
  RelationStereotype4["PARTICIPATIONAL"] = "participational";
  RelationStereotype4["PARTICIPATION"] = "participation";
  RelationStereotype4["HISTORICAL_DEPENDENCE"] = "historicalDependence";
  RelationStereotype4["CREATION"] = "creation";
  RelationStereotype4["MANIFESTATION"] = "manifestation";
  RelationStereotype4["BRINGS_ABOUT"] = "bringsAbout";
  RelationStereotype4["TRIGGERS"] = "triggers";
  return RelationStereotype4;
})(RelationStereotype2 || {});
var PropertyStereotype4 = /* @__PURE__ */ ((PropertyStereotype6) => {
  PropertyStereotype6["BEGIN"] = "begin";
  PropertyStereotype6["END"] = "end";
  return PropertyStereotype6;
})(PropertyStereotype4 || {});
var NonSortalStereotypes = [
  "category" /* CATEGORY */,
  "mixin" /* MIXIN */,
  "phaseMixin" /* PHASE_MIXIN */,
  "roleMixin" /* ROLE_MIXIN */,
  "historicalRoleMixin" /* HISTORICAL_ROLE_MIXIN */
];
var UltimateSortalStereotypes = [
  "kind" /* KIND */,
  "collective" /* COLLECTIVE */,
  "quantity" /* QUANTITY */,
  "relator" /* RELATOR */,
  "quality" /* QUALITY */,
  "mode" /* MODE */
];
var BaseSortalStereotypes = [
  "subkind" /* SUBKIND */,
  "phase" /* PHASE */,
  "role" /* ROLE */,
  "historicalRole" /* HISTORICAL_ROLE */
];
var SortalStereotypes = [...UltimateSortalStereotypes, ...BaseSortalStereotypes];
var RigidStereotypes = [
  "kind" /* KIND */,
  "quantity" /* QUANTITY */,
  "collective" /* COLLECTIVE */,
  "mode" /* MODE */,
  "quality" /* QUALITY */,
  "relator" /* RELATOR */,
  "subkind" /* SUBKIND */,
  "category" /* CATEGORY */,
  "event" /* EVENT */,
  "situation" /* SITUATION */,
  "type" /* TYPE */,
  "abstract" /* ABSTRACT */,
  "datatype" /* DATATYPE */,
  "enumeration" /* ENUMERATION */
];
var AntiRigidStereotypes = [
  "role" /* ROLE */,
  "roleMixin" /* ROLE_MIXIN */,
  "historicalRole" /* HISTORICAL_ROLE */,
  "historicalRoleMixin" /* HISTORICAL_ROLE_MIXIN */,
  "phase" /* PHASE */,
  "phaseMixin" /* PHASE_MIXIN */
];
var SemiRigidStereotypes = ["mixin" /* MIXIN */];
var MomentOnlyStereotypes = ["mode" /* MODE */, "quality" /* QUALITY */, "relator" /* RELATOR */];
var SubstantialOnlyStereotypes = ["kind" /* KIND */, "quantity" /* QUANTITY */, "collective" /* COLLECTIVE */];
var EndurantStereotypes = [...SortalStereotypes, ...NonSortalStereotypes];
var AbstractStereotypes = ["abstract" /* ABSTRACT */, "datatype" /* DATATYPE */, "enumeration" /* ENUMERATION */];
var ClassStereotypes = [
  ...EndurantStereotypes,
  ...AbstractStereotypes,
  "event" /* EVENT */,
  "situation" /* SITUATION */,
  "type" /* TYPE */
];
var RelationStereotypes = [
  "material" /* MATERIAL */,
  "derivation" /* DERIVATION */,
  "comparative" /* COMPARATIVE */,
  "mediation" /* MEDIATION */,
  "characterization" /* CHARACTERIZATION */,
  "externalDependence" /* EXTERNAL_DEPENDENCE */,
  "componentOf" /* COMPONENT_OF */,
  "memberOf" /* MEMBER_OF */,
  "subCollectionOf" /* SUBCOLLECTION_OF */,
  "subQuantityOf" /* SUBQUANTITY_OF */,
  "instantiation" /* INSTANTIATION */,
  "termination" /* TERMINATION */,
  "participational" /* PARTICIPATIONAL */,
  "participation" /* PARTICIPATION */,
  "historicalDependence" /* HISTORICAL_DEPENDENCE */,
  "creation" /* CREATION */,
  "manifestation" /* MANIFESTATION */,
  "bringsAbout" /* BRINGS_ABOUT */,
  "triggers" /* TRIGGERS */
];
var ExistentialDependentSourceRelationStereotypes = [
  "bringsAbout" /* BRINGS_ABOUT */,
  "creation" /* CREATION */,
  "manifestation" /* MANIFESTATION */,
  "participation" /* PARTICIPATION */,
  "participational" /* PARTICIPATIONAL */,
  "termination" /* TERMINATION */,
  "triggers" /* TRIGGERS */
];
var ExistentialDependentTargetRelationStereotypes = [
  "bringsAbout" /* BRINGS_ABOUT */,
  "characterization" /* CHARACTERIZATION */,
  "creation" /* CREATION */,
  "externalDependence" /* EXTERNAL_DEPENDENCE */,
  "historicalDependence" /* HISTORICAL_DEPENDENCE */,
  "mediation" /* MEDIATION */,
  "participational" /* PARTICIPATIONAL */
];
var ExistentialDependencyRelationStereotypes = [
  .../* @__PURE__ */ new Set([...ExistentialDependentSourceRelationStereotypes, ...ExistentialDependentTargetRelationStereotypes])
];
var PartWholeRelationStereotypes = [
  "componentOf" /* COMPONENT_OF */,
  "memberOf" /* MEMBER_OF */,
  "subCollectionOf" /* SUBCOLLECTION_OF */,
  "subQuantityOf" /* SUBQUANTITY_OF */,
  "participational" /* PARTICIPATIONAL */
];
var PropertyStereotypes = ["begin" /* BEGIN */, "end" /* END */];
var OntoumlStereotypes = [...ClassStereotypes, ...RelationStereotypes, ...PropertyStereotypes];
{
  const stereotypeArrays = [
    // Class stereotypes arrays
    NonSortalStereotypes,
    UltimateSortalStereotypes,
    BaseSortalStereotypes,
    SortalStereotypes,
    RigidStereotypes,
    AntiRigidStereotypes,
    SemiRigidStereotypes,
    MomentOnlyStereotypes,
    SubstantialOnlyStereotypes,
    EndurantStereotypes,
    AbstractStereotypes,
    ClassStereotypes,
    // Relation stereotypes arrays
    RelationStereotypes,
    ExistentialDependentSourceRelationStereotypes,
    ExistentialDependentTargetRelationStereotypes,
    ExistentialDependencyRelationStereotypes,
    PartWholeRelationStereotypes,
    // Property stereotypes arrays
    PropertyStereotypes,
    // OntoUML stereotypes arrays
    OntoumlStereotypes
  ];
  stereotypeArrays.forEach((array) => Object.freeze(array));
}
function isNonSortalClassStereotype(stereotype) {
  return NonSortalStereotypes.includes(stereotype);
}
function isSortalClassStereotype(stereotype) {
  return SortalStereotypes.includes(stereotype);
}
function isUltimateSortalClassStereotype(stereotype) {
  return UltimateSortalStereotypes.includes(stereotype);
}
function isBaseSortalClassStereotype(stereotype) {
  return BaseSortalStereotypes.includes(stereotype);
}
function isRigidClassStereotype(stereotype) {
  return RigidStereotypes.includes(stereotype);
}
function isAntiRigidClassStereotype(stereotype) {
  return AntiRigidStereotypes.includes(stereotype);
}
function isSemiRigidClassStereotype(stereotype) {
  return SemiRigidStereotypes.includes(stereotype);
}
function isAbstractClassStereotype(stereotype) {
  return AbstractStereotypes.includes(stereotype);
}
function isEndurantClassStereotype(stereotype) {
  return EndurantStereotypes.includes(stereotype);
}
function isSubstantialClassStereotype(stereotype) {
  return SubstantialOnlyStereotypes.includes(stereotype);
}
function isMomentClassStereotype(stereotype) {
  return MomentOnlyStereotypes.includes(stereotype);
}
function isEventClassStereotype(stereotype) {
  return stereotype === "event" /* EVENT */;
}
function isSituationClassStereotype(stereotype) {
  return stereotype === "situation" /* SITUATION */;
}
function isTypeClassStereotype(stereotype) {
  return stereotype === "type" /* TYPE */;
}
var stereotypeUtils = {
  // Class stereotypes arrays
  ClassStereotypes,
  AbstractStereotypes,
  EndurantStereotypes,
  SubstantialOnlyStereotypes,
  MomentOnlyStereotypes,
  NonSortalStereotypes,
  SortalStereotypes,
  UltimateSortalStereotypes,
  BaseSortalStereotypes,
  RigidStereotypes,
  AntiRigidStereotypes,
  SemiRigidStereotypes,
  // Relation stereotypes arrays
  RelationStereotypes,
  ExistentialDependencyRelationStereotypes,
  ExistentialDependentSourceRelationStereotypes,
  ExistentialDependentTargetRelationStereotypes,
  PartWholeRelationStereotypes,
  // Property stereotypes arrays
  PropertyStereotypes,
  // ClassStereotype utility methods
  isNonSortalClassStereotype,
  isSortalClassStereotype,
  isUltimateSortalClassStereotype,
  isBaseSortalClassStereotype,
  isRigidClassStereotype,
  isAntiRigidClassStereotype,
  isSemiRigidClassStereotype,
  isAbstractClassStereotype,
  isEndurantClassStereotype,
  isSubstantialClassStereotype,
  isMomentClassStereotype,
  isEventClassStereotype,
  isSituationClassStereotype,
  isTypeClassStereotype
};

// src/libs/ontouml/model/natures.ts
var OntologicalNature = /* @__PURE__ */ ((OntologicalNature3) => {
  OntologicalNature3["functional_complex"] = "functional-complex";
  OntologicalNature3["collective"] = "collective";
  OntologicalNature3["quantity"] = "quantity";
  OntologicalNature3["relator"] = "relator";
  OntologicalNature3["intrinsic_mode"] = "intrinsic-mode";
  OntologicalNature3["extrinsic_mode"] = "extrinsic-mode";
  OntologicalNature3["quality"] = "quality";
  OntologicalNature3["event"] = "event";
  OntologicalNature3["situation"] = "situation";
  OntologicalNature3["type"] = "type";
  OntologicalNature3["abstract"] = "abstract";
  return OntologicalNature3;
})(OntologicalNature || {});
var Natures = [
  "functional-complex" /* functional_complex */,
  "collective" /* collective */,
  "quantity" /* quantity */,
  "intrinsic-mode" /* intrinsic_mode */,
  "extrinsic-mode" /* extrinsic_mode */,
  "quality" /* quality */,
  "relator" /* relator */,
  "event" /* event */,
  "situation" /* situation */,
  "type" /* type */,
  "abstract" /* abstract */
];
var EndurantNatures = [
  "functional-complex" /* functional_complex */,
  "collective" /* collective */,
  "quantity" /* quantity */,
  "intrinsic-mode" /* intrinsic_mode */,
  "extrinsic-mode" /* extrinsic_mode */,
  "quality" /* quality */,
  "relator" /* relator */
];
var SubstantialNatures = ["functional-complex" /* functional_complex */, "collective" /* collective */, "quantity" /* quantity */];
var MomentNatures = [
  "intrinsic-mode" /* intrinsic_mode */,
  "extrinsic-mode" /* extrinsic_mode */,
  "quality" /* quality */,
  "relator" /* relator */
];
var IntrinsicMomentNatures = ["intrinsic-mode" /* intrinsic_mode */, "quality" /* quality */];
var ExtrinsicMomentNatures = ["extrinsic-mode" /* extrinsic_mode */, "relator" /* relator */];
var naturesArrays = [
  Natures,
  EndurantNatures,
  SubstantialNatures,
  MomentNatures,
  IntrinsicMomentNatures,
  ExtrinsicMomentNatures
];
naturesArrays.forEach((array) => Object.freeze(array));
var natureUtils = {
  Natures,
  EndurantNatures,
  SubstantialNatures,
  MomentNatures,
  IntrinsicMomentNatures,
  ExtrinsicMomentNatures
};

// src/libs/ontouml/view/point.ts
var Point = class {
  constructor(x, y) {
    this.setX(x);
    this.setY(y);
  }
  getX() {
    return this.x;
  }
  setX(x) {
    this.x = x != null ? x : 0;
  }
  getY() {
    return this.y;
  }
  setY(y) {
    this.y = y != null ? y : 0;
  }
  toString() {
    return "(" + this.x + ", " + this.y + ")";
  }
};

// src/libs/ontouml/view/diagram_element.ts
var DiagramElement = class extends OntoumlElement {
  constructor(type, base) {
    super(type, base);
  }
};

// src/libs/ontouml/view/shape.ts
var Shape = class extends DiagramElement {
  constructor(type, base) {
    super(type, base);
  }
  // No reference fields to resolve/replace
  resolveReferences(_elementReferenceMap) {
  }
};

// src/libs/ontouml/view/rectangular_shape.ts
var RectangularShape = class extends Shape {
  constructor(type, base) {
    super(type, base);
    this.topLeft = (base == null ? void 0 : base.topLeft) || new Point(0, 0);
    this.width = (base == null ? void 0 : base.width) || 20;
    this.height = (base == null ? void 0 : base.height) || 10;
  }
  getX() {
    return this.topLeft.getX();
  }
  setX(x) {
    this.topLeft.setX(x);
  }
  getY() {
    return this.topLeft.getY();
  }
  setY(y) {
    this.topLeft.setY(y);
  }
  getWidth() {
    return this.width;
  }
  setWidth(width) {
    this.width = width;
  }
  getHeight() {
    return this.height;
  }
  setHeight(height) {
    this.height = height;
  }
  toJSON() {
    var _a, _b;
    const serialization = {
      width: null,
      height: null,
      x: null,
      y: null
    };
    Object.assign(serialization, super.toJSON());
    delete serialization["topLeft"];
    serialization.x = (_a = this.topLeft) == null ? void 0 : _a.x;
    serialization.y = (_b = this.topLeft) == null ? void 0 : _b.y;
    return serialization;
  }
};

// src/libs/ontouml/view/rectangle.ts
var Rectangle = class extends RectangularShape {
  constructor(base) {
    super("Rectangle" /* RECTANGLE */, base);
  }
  getContents() {
    return [];
  }
};

// src/libs/ontouml/view/text.ts
var Text = class extends RectangularShape {
  constructor(base) {
    super("Text" /* TEXT */, base);
    this.value = (base == null ? void 0 : base.value) || null;
  }
  getContents() {
    return [];
  }
};

// src/libs/ontouml/view/path.ts
var Path = class extends Shape {
  constructor(base) {
    super("Path" /* PATH */, base);
    this.points = (base == null ? void 0 : base.points) || null;
  }
  getContents() {
    return [];
  }
  moveTo(x, y) {
    this.points.push(new Point(x, y));
  }
  setPoints(points) {
    this.points = [];
    if (points != null)
      this.addPoints(points);
  }
  addPoints(points) {
    if (points != null)
      points.forEach((p) => this.addPoint(p));
  }
  addPoint(point) {
    if (point != null)
      this.points.push(point);
  }
};

// src/libs/ontouml/view/element_view.ts
var ElementView = class extends DiagramElement {
  constructor(type, base) {
    super(type, base);
    this.modelElement = (base == null ? void 0 : base.modelElement) || null;
    this.shape = (base == null ? void 0 : base.shape) || this.createShape();
    this.shape.setContainer(this);
  }
  getContents() {
    return [this.shape];
  }
  toJSON() {
    var _a;
    const serialization = {
      modelElement: null,
      shape: null
    };
    Object.assign(serialization, super.toJSON());
    serialization.modelElement = (_a = this.modelElement) == null ? void 0 : _a.getReference();
    return serialization;
  }
  resolveReferences(elementReferenceMap) {
    const { modelElement } = this;
    if (modelElement) {
      this.modelElement = OntoumlElement.resolveReference(modelElement, elementReferenceMap, this, "modelElement");
    }
  }
};

// src/libs/ontouml/view/node_view.ts
var NodeView = class extends ElementView {
  constructor(type, base) {
    super(type, base);
  }
  getX() {
    return this.shape.getX();
  }
  setX(x) {
    this.shape.setX(x);
  }
  getY() {
    return this.shape.getY();
  }
  setY(y) {
    this.shape.setY(y);
  }
  getWidth() {
    return this.shape.width;
  }
  setWidth(width) {
    this.shape.setWidth(width);
  }
  getHeight() {
    return this.shape.height;
  }
  setHeight(height) {
    this.shape.setHeight(height);
  }
};

// src/libs/ontouml/view/package_view.ts
var PackageView = class extends NodeView {
  constructor(base) {
    super("PackageView" /* PACKAGE_VIEW */, base);
  }
  createShape() {
    const rectangle = new Rectangle();
    rectangle.width = 60;
    rectangle.height = 30;
    return rectangle;
  }
  getContents() {
    return super.getContents();
  }
};

// src/libs/ontouml/view/generalization_set_view.ts
var GeneralizationSetView = class extends ElementView {
  constructor(base) {
    super("GeneralizationSetView" /* GENERALIZATION_SET_VIEW */, base);
  }
  createShape() {
    const text = new Text();
    text.width = 100;
    text.height = 50;
    return text;
  }
};

// src/libs/ontouml/view/class_view.ts
var ClassView = class extends NodeView {
  constructor(base) {
    super("ClassView" /* CLASS_VIEW */, base);
  }
  createShape() {
    const rectangle = new Rectangle();
    rectangle.width = 100;
    rectangle.height = 50;
    return rectangle;
  }
  getContents() {
    return super.getContents();
  }
};

// src/libs/ontouml/view/connector_view.ts
var ConnectorView = class extends ElementView {
  constructor(type, base) {
    super(type, base);
    this.source = (base == null ? void 0 : base.source) || null;
    this.target = (base == null ? void 0 : base.target) || null;
  }
  createShape() {
    return new Path();
  }
  toJSON() {
    var _a, _b;
    const serialization = {
      source: null,
      target: null
    };
    Object.assign(serialization, super.toJSON());
    serialization.source = (_a = this.source) == null ? void 0 : _a.getReference();
    serialization.target = (_b = this.target) == null ? void 0 : _b.getReference();
    return serialization;
  }
  resolveReferences(elementReferenceMap) {
    super.resolveReferences(elementReferenceMap);
    const { source, target } = this;
    if (source) {
      this.source = OntoumlElement.resolveReference(source, elementReferenceMap, this, "source");
    }
    if (target) {
      this.target = OntoumlElement.resolveReference(target, elementReferenceMap, this, "target");
    }
  }
};

// src/libs/ontouml/view/generalization_view.ts
var GeneralizationView = class extends ConnectorView {
  constructor(base) {
    super("GeneralizationView" /* GENERALIZATION_VIEW */, base);
  }
  createShape() {
    return new Path();
  }
};

// src/libs/ontouml/view/relation_view.ts
var RelationView = class extends ConnectorView {
  constructor(base) {
    super("RelationView" /* RELATION_VIEW */, base);
  }
  getContents() {
    return super.getContents();
  }
};

// src/libs/ontouml/view/diagram.ts
var Diagram = class extends OntoumlElement {
  constructor(base) {
    super("Diagram" /* DIAGRAM */, base);
    this.owner = (base == null ? void 0 : base.owner) || null;
    this.contents = (base == null ? void 0 : base.contents) || [];
  }
  getContents() {
    return [...this.contents];
  }
  getClassViews() {
    var _a;
    return (_a = this.contents) == null ? void 0 : _a.filter((view) => view instanceof ClassView);
  }
  getRelationViews() {
    var _a;
    return (_a = this.contents) == null ? void 0 : _a.filter((view) => view instanceof RelationView);
  }
  getGeneralizationViews() {
    var _a;
    return (_a = this.contents) == null ? void 0 : _a.filter((view) => view instanceof GeneralizationView);
  }
  getGeneralizationSetViews() {
    var _a;
    return (_a = this.contents) == null ? void 0 : _a.filter((view) => view instanceof GeneralizationSetView);
  }
  getRealizedModelElements() {
    return this.contents.map((view) => view.modelElement);
  }
  addElement(element) {
    if (!element)
      return;
    element.setContainer(this);
    this.contents.push(element);
  }
  addElements(elements) {
    if (!elements)
      return;
    elements.forEach((e) => this.addElement(e));
  }
  setElements(elements) {
    this.contents = [];
    if (!elements)
      return;
    this.addElements(elements);
  }
  findElementById(id) {
    return this.contents.find((view) => view.modelElement.id === id);
  }
  findView(modelElement) {
    return this.contents.find((view) => view.modelElement === modelElement);
  }
  containsView(modelElement) {
    return this.findView(modelElement) !== null;
  }
  addModelElements(modelElements) {
    return modelElements == null ? void 0 : modelElements.filter((e) => e !== null).map((e) => this.addModelElement(e));
  }
  addModelElement(modelElement) {
    if (modelElement instanceof Class)
      return this.addClass(modelElement);
    if (modelElement instanceof Relation3 && modelElement.isBinary())
      return this.addBinaryRelation(modelElement);
    if (modelElement instanceof Generalization)
      return this.addGeneralization(modelElement);
    if (modelElement instanceof GeneralizationSet3)
      return this.addGeneralizationSet(modelElement);
    if (modelElement instanceof Package)
      return this.addPackage(modelElement);
    return null;
  }
  findOrCreateView(modelElement) {
    if (!modelElement)
      throw new Error("Failed to get or add view. Input element is null or undefined.");
    return this.findView(modelElement) || this.addModelElement(modelElement);
  }
  addClass(clazz) {
    let view = new ClassView({ modelElement: clazz });
    this.addElement(view);
    return view;
  }
  addGeneralizationSet(gs) {
    let view = new GeneralizationSetView({ modelElement: gs });
    this.addElement(view);
    return view;
  }
  addPackage(gs) {
    let view = new PackageView({ modelElement: gs });
    this.addElement(view);
    return view;
  }
  addBinaryRelation(relation) {
    let sourceView = this.findOrCreateView(relation.getSource());
    let targetView = this.findOrCreateView(relation.getTarget());
    let relationView = new RelationView({
      modelElement: relation,
      source: sourceView,
      target: targetView
    });
    this.addElement(relationView);
    return relationView;
  }
  addGeneralization(generalization) {
    let sourceView = this.findOrCreateView(generalization.general);
    let targetView = this.findOrCreateView(generalization.specific);
    let generalizationView = new GeneralizationView({
      modelElement: generalization,
      source: sourceView,
      target: targetView
    });
    this.addElement(generalizationView);
    return generalizationView;
  }
  toJSON() {
    var _a, _b;
    const serialization = {
      owner: null,
      contents: null
    };
    Object.assign(serialization, super.toJSON());
    serialization.owner = (_b = (_a = this.owner) == null ? void 0 : _a.getReference()) != null ? _b : null;
    return serialization;
  }
  resolveReferences(elementReferenceMap) {
    const { owner } = this;
    if (owner) {
      this.owner = OntoumlElement.resolveReference(owner, elementReferenceMap, this, "owner");
    }
  }
};

// src/libs/ontouml/serialization.ts
var import_ajv = __toESM(require_ajv());
var schemas = {
  "https://ontouml.org/ontouml-schema/2021-02-26/Project": require_project_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/Package": require_package_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/Class": require_class_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/Relation": require_relation_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/Generalization": require_generalization_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/GeneralizationSet": require_generalization_set_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/Property": require_property_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/Literal": require_literal_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/Diagram": require_diagram_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/ClassView": require_class_view_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/RelationView": require_relation_view_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/GeneralizationView": require_generalization_view_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/GeneralizationSetView": require_generalization_set_view_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/PackageView": require_package_view_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/RectangleShape": require_rectangle_shape_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/TextShape": require_text_shape_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/PathShape": require_path_shape_schema(),
  "https://ontouml.org/ontouml-schema/2021-02-26/definitions": require_definitions_schema()
};
var typeToSchemaId = {
  [`${"Project" /* PROJECT_TYPE */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/Project",
  [`${"Package" /* PACKAGE_TYPE */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/Package",
  [`${"Class" /* CLASS_TYPE */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/Class",
  [`${"Relation" /* RELATION_TYPE */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/Relation",
  [`${"Generalization" /* GENERALIZATION_TYPE */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/Generalization",
  [`${"GeneralizationSet" /* GENERALIZATION_SET_TYPE */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/GeneralizationSet",
  [`${"Property" /* PROPERTY_TYPE */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/Property",
  [`${"Literal" /* LITERAL_TYPE */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/Literal",
  [`${"Diagram" /* DIAGRAM */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/Diagram",
  [`${"ClassView" /* CLASS_VIEW */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/ClassView",
  [`${"RelationView" /* RELATION_VIEW */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/RelationView",
  [`${"GeneralizationView" /* GENERALIZATION_VIEW */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/GeneralizationView",
  [`${"GeneralizationSetView" /* GENERALIZATION_SET_VIEW */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/GeneralizationSetView",
  [`${"PackageView" /* PACKAGE_VIEW */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/PackageView",
  [`${"Rectangle" /* RECTANGLE */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/RectangleShape",
  [`${"Text" /* TEXT */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/TextShape",
  [`${"Path" /* PATH */}`]: "https://ontouml.org/ontouml-schema/2021-02-26/PathShape",
  definitions: "https://ontouml.org/ontouml-schema/2021-02-26/definitions"
};
var ajv = new import_ajv.default({
  schemas: Object.values(schemas)
});
function validate(input) {
  if (!input) {
    throw new Error("Unexpected parameter");
  }
  if (input instanceof OntoumlElement) {
    input = JSON.stringify(input);
  }
  if (typeof input === "string") {
    input = JSON.parse(input);
  }
  if (typeof input !== "object") {
    throw new Error("Unexpected parameter");
  }
  const schemaId = typeToSchemaId[input.type] || typeToSchemaId["Project" /* PROJECT_TYPE */];
  const validator = ajv.getSchema(schemaId);
  const isValid = validator(input);
  return isValid ? isValid : validator.errors;
}
function getElementMap(element) {
  const map = /* @__PURE__ */ new Map();
  map.set(element.id, element);
  element.getAllContents().forEach((element2) => map.set(element2.id, element2));
  return map;
}
function clone(original) {
  switch (original.type) {
    case "Project" /* PROJECT_TYPE */:
      return new Project2(original);
    case "Package" /* PACKAGE_TYPE */:
      return new Package(original);
    case "Class" /* CLASS_TYPE */:
      return new Class(original);
    case "Relation" /* RELATION_TYPE */:
      return new Relation3(original);
    case "Generalization" /* GENERALIZATION_TYPE */:
      return new Generalization(original);
    case "GeneralizationSet" /* GENERALIZATION_SET_TYPE */:
      return new GeneralizationSet3(original);
    case "Property" /* PROPERTY_TYPE */:
      return new Property2(original);
    case "Literal" /* LITERAL_TYPE */:
      return new Literal(original);
    case "Diagram" /* DIAGRAM */:
      return new Diagram(original);
    case "ClassView" /* CLASS_VIEW */:
      return new ClassView(original);
    case "RelationView" /* RELATION_VIEW */:
      return new RelationView(original);
    case "GeneralizationView" /* GENERALIZATION_VIEW */:
      return new GeneralizationView(original);
    case "GeneralizationSetView" /* GENERALIZATION_SET_VIEW */:
      return new GeneralizationSetView(original);
    case "PackageView" /* PACKAGE_VIEW */:
      return new PackageView(original);
    case "Rectangle" /* RECTANGLE */:
      return new Rectangle(original);
    case "Text" /* TEXT */:
      return new Text(original);
    case "Path" /* PATH */:
      return new Path(original);
    default:
      throw new Error("No match for parameter's type");
  }
}
function revive(_key, value) {
  let element;
  if ((value == null ? void 0 : value.type) && (value == null ? void 0 : value.id)) {
    if ((value == null ? void 0 : value.type) === "Text" /* TEXT */ || (value == null ? void 0 : value.type) === "Rectangle" /* RECTANGLE */) {
      value.topLeft = {
        x: value.x,
        y: value.y
      };
    }
    element = clone(value);
  }
  if (element instanceof Project2 || !_key && element instanceof OntoumlElement) {
    const project = element instanceof Project2 ? element : null;
    const allContents = element.getAllContents();
    allContents.forEach((content) => {
      content.project = project;
      content.getContents().forEach((ownContent) => ownContent.container = content);
    });
    const contentsMap = getElementMap(element);
    const allElements = [element, ...allContents];
    allElements.forEach((content) => content.resolveReferences(contentsMap));
  }
  return element ? element : value;
}
function parse(serializedElement, validateElement = false) {
  if (validateElement) {
    const result = validate(serializedElement);
    if (result !== true) {
      throw new Error("Invalid input");
    }
  }
  return JSON.parse(serializedElement, revive);
}
var serializationUtils = {
  validate,
  revive,
  parse,
  schemas,
  typeToSchemaId
};

// src/libs/complexity/module.ts
var import_lodash7 = __toESM(require_lodash());
var Module = class {
  constructor(name) {
    this.name = name;
    this.classes = [];
    this.relations = [];
    this.generalizations = [];
    this.generalizationSets = [];
  }
  createDiagram(owner) {
    let diagram = new Diagram();
    diagram.setName(this.name);
    diagram.owner = owner;
    let pos = 40;
    this == null ? void 0 : this.classes.forEach((_class) => {
      let view = diagram.addClass(_class);
      view.setX(pos);
      view.setY(40);
      pos += 120;
    });
    diagram.addModelElements(this.relations);
    diagram.addModelElements(this.generalizations);
    diagram.addModelElements(this.generalizationSets);
    return diagram;
  }
  addClasses(classes) {
    this.classes = this.classes.concat(classes);
  }
  containsRelation(relation) {
    return this.relations.findIndex((r) => r.id === relation.id) >= 0;
  }
  addRelations(relations) {
    this.relations = this.relations.concat(relations);
  }
  addGeneralizations(generalizations) {
    this.generalizations = this.generalizations.concat(generalizations);
  }
  addGeneralizationSets(generalizationSets) {
    this.generalizationSets = this.generalizationSets.concat(generalizationSets);
  }
  removeDuplicates() {
    this.classes = Module.removeDuplicatesArray(this.classes);
    this.relations = Module.removeDuplicatesArray(this.relations);
    this.generalizations = Module.removeDuplicatesArray(this.generalizations);
    this.generalizationSets = Module.removeDuplicatesArray(this.generalizationSets);
  }
  static removeDuplicatesArray(elements) {
    return (0, import_lodash7.uniqBy)(elements, "id");
  }
  addAll(cluster) {
    if (!cluster)
      return false;
    this.addClasses(cluster.classes);
    this.addRelations(cluster.relations);
    this.addGeneralizations(cluster.generalizations);
    this.addGeneralizationSets(cluster.generalizationSets);
    this.removeDuplicates();
    return true;
  }
};

// src/libs/complexity/modularizer.ts
var Modularizer = class {
  constructor(project, _options) {
    this.project = project;
    if (_options) {
      console.log("Options ignored: this service does not support options");
    }
  }
  run() {
    let generatedDiagrams = this.buildAll();
    this.project.addDiagrams(generatedDiagrams);
    return {
      result: this.project,
      issues: null
    };
  }
  buildAll() {
    return this.project.getClassesRestrictedToRelator().map((relator, index) => this.buildModule(String(index), relator)).map((module2) => module2.createDiagram(this.project.model));
  }
  buildModule(id, relator) {
    let cluster = new Module("Cluster of " + relator.getName());
    let relatorChain = Modularizer.getRelatorChain(relator);
    cluster.addAll(relatorChain);
    const outgoingMediations = relatorChain.relations;
    const directlyConnectedClasses = outgoingMediations.filter((r) => r.isBinaryClassRelation()).map((relation) => relation.getTargetClass());
    cluster.addClasses(directlyConnectedClasses);
    let ancestors = [];
    let descendants = [];
    directlyConnectedClasses.forEach((_class) => {
      if (_class.hasBaseSortalStereotype()) {
        ancestors = ancestors.concat(_class.getSortalAncestors());
      }
      if (_class.hasNonSortalStereotype()) {
        descendants = descendants.concat(Modularizer.getNonSortalLine(_class));
      }
    });
    let descendantAncestors = descendants.flatMap((clazz) => clazz.getAncestors()).filter((clazz) => clazz instanceof Class).filter((clazz) => clazz.hasSortalStereotype());
    cluster.addClasses(ancestors);
    cluster.addClasses(descendants);
    cluster.addClasses(descendantAncestors);
    cluster.removeDuplicates();
    cluster.addGeneralizations(this.project.getGeneralizationsBetween(cluster.classes));
    const genSets = this.getGeneralizationSetsFrom(cluster.generalizations);
    cluster.addGeneralizationSets(genSets);
    const complementGens = GeneralizationSet3.collectGeneralizations(cluster.generalizationSets);
    cluster.addGeneralizations(complementGens);
    const complementClasses = GeneralizationSet3.collectSpecifics(complementGens).filter((s) => s instanceof Class);
    cluster.addClasses(complementClasses);
    cluster.removeDuplicates();
    return cluster;
  }
  static getRelatorChain(relator) {
    let module2 = new Module("Relator chain: " + relator.getName());
    return this.traverseRelatorChain(relator, module2);
  }
  static traverseRelatorChain(relator, module2) {
    module2.classes.push(relator);
    relator.getOwnOutgoingRelations().filter((r) => r.isMediation()).forEach((mediation) => {
      module2.relations.push(mediation);
      const target = mediation.getTarget();
      if (!(target instanceof Class) || module2.classes.includes(target))
        return;
      if (target.isRestrictedToRelator()) {
        module2 = this.traverseRelatorChain(target, module2);
      }
    });
    relator.getParents().forEach((parent) => {
      if (!(parent instanceof Class) || module2.classes.includes(parent))
        return;
      if (parent.isRestrictedToRelator()) {
        module2 = this.traverseRelatorChain(parent, module2);
      }
    });
    return module2;
  }
  static getNonSortalLine(nonSortal) {
    return this.traverseNonSortalLine(nonSortal, []);
  }
  static traverseNonSortalLine(nonSortal, path) {
    nonSortal.getChildren().forEach((child) => {
      if (!(child instanceof Class) || !child.stereotype)
        return;
      if (!path.includes(child))
        path.push(child);
      if (child.hasNonSortalStereotype())
        path = this.traverseNonSortalLine(child, path);
    });
    return path;
  }
  getGeneralizationSetsFrom(referenceGens) {
    let gsInvolvesAll = this.project.getGeneralizationSetsInvolvingAll(referenceGens);
    let partitionInvolvesAny = this.project.getGeneralizationSetsInvolvingAny(referenceGens).filter((gs) => gs.isPhasePartition());
    return [...gsInvolvesAll, ...partitionInvolvesAny];
  }
};

// src/libs/ontouml2db/graph/GraphAssociation.ts
var GraphAssociation = class {
  //this is important when there is a name collision in the FK name propagation process.
  constructor(id, name, associationType) {
    this.id = id;
    this.name = name;
    this.associationType = associationType;
    this.resolved = false;
    this.nodeNameRemoved = null;
  }
  /**
   * Returns the association ID (Relation, Generalization, Generalization Set,
   * or any other association). The ID is the same as found in the source model.
   */
  getAssociationID() {
    return this.id;
  }
  /**
   * Indicates the association name.
   *
   * @param name. Association name.
   */
  setName(name) {
    this.name = name;
  }
  /**
   * Returns the association name.
   *
   * @return A string with the association name.
   */
  getName() {
    return this.name;
  }
  /**
   * Checks if the current association is the same type as the association
   * passed as a parameter.
   *
   * @param associationType. association to be tested.
   * @return boolean. Returns true if are the same, otherwise false.
   */
  isAssociationType(associationType) {
    return this.associationType === associationType;
  }
  /**
   * Marks the association as visited or not.
   *
   * @param flag. True indicates that the association was visited and false
   * as not visited.
   */
  setResolved(flag) {
    this.resolved = flag;
  }
  /**
   * Indicates whether the association has already been visited.
   *
   * @return True if the association was visited, otherwise false.
   */
  isResolved() {
    return this.resolved;
  }
  /**
   * Informs the name of the Node that was removed.
   * @param nodeName
   */
  setNodeNameRemoved(nodeName) {
    this.nodeNameRemoved = nodeName;
  }
  /**
   * Return the name of the Node removed.
   */
  getNodeNameRemoved() {
    return this.nodeNameRemoved;
  }
  /**
   * Clone the association changing the associated nodes to the nodes in
   * the array. This method generally used to clone the node.
   *
   * @param nodes. New nodes to be linked.
   * @return IGraphAssociation
   */
  cloneChangingReferencesTo(nodes) {
    throw new Error("This method must be called by the inheriting classes.");
  }
  /**
   * Delete the association from the nodes.
   *
   * @param node Node to be checked for its existence in the association.
   */
  deleteAssociation() {
    throw new Error("This method must be called by the inheriting classes.");
  }
};

// src/libs/ontouml2db/graph/GraphGeneralization.ts
var GraphGeneralization = class extends GraphAssociation {
  constructor(id, generalizationNode, specializationNode) {
    super(id, "unnamed", "Generalization" /* GENERALIZATION_TYPE */);
    this.generalizationNode = generalizationNode;
    this.specializationNode = specializationNode;
    this.belongToGS = null;
  }
  /**
   * Returns the generalization node (superclass).
   *
   * @return Generalization.
   */
  getGeneral() {
    return this.generalizationNode;
  }
  /**
   * Returns the specialization node (subclass).
   *
   * @return Specialization node.
   */
  getSpecific() {
    return this.specializationNode;
  }
  /**
   * Tells which set of generalizations the generalization belongs to.
   *
   * @param gs Generalization set to be associated with generalization.
   */
  setBelongGeneralizationSet(gs) {
    this.belongToGS = gs;
  }
  /**
   * Returns which set of generalizations the generalization belongs to.
   */
  getBelongGeneralizationSet() {
    return this.belongToGS;
  }
  /**
   * Tells whether the generalization belongs to a generalization set.
   */
  isBelongGeneralizationSet() {
    if (this.belongToGS === null)
      return false;
    else
      return true;
  }
  /**
   * Clone the association changing the associated nodes to the nodes in
   * the array. This method generally used to clone the node.
   *
   * @param nodes. New nodes to be linked.
   * @return IGraphAssociation
   */
  cloneChangingReferencesTo(nodes) {
    let newGeneralizationNode = Util.findNodeById(this.generalizationNode.getId(), nodes);
    let newSpecializationNode = Util.findNodeById(this.specializationNode.getId(), nodes);
    let newGeneralization = new GraphGeneralization(
      this.getAssociationID(),
      newGeneralizationNode,
      newSpecializationNode
    );
    newGeneralizationNode.addGeneralization(newGeneralization);
    newSpecializationNode.addGeneralization(newGeneralization);
    return newGeneralization;
  }
  /**
   * Delete the association from the nodes.
   *
   * @param node Node to be checked for its existence in the association.
   */
  deleteAssociation() {
    this.generalizationNode.deleteAssociation(this);
    this.specializationNode.deleteAssociation(this);
  }
  /**
   * Returns the generalization formatted as string;
   */
  toString() {
    if (this.belongToGS === null) {
      return "\n	 : " + this.generalizationNode.getName() + " <- " + this.specializationNode.getName();
    } else {
      return this.belongToGS.toString();
    }
  }
};

// src/libs/ontouml2db/graph/GraphRelation.ts
var GraphRelation = class extends GraphAssociation {
  constructor(ID, name, sourceNode, sourceCardinality, targetNode, targetCardinality) {
    super(ID, name, "Relation" /* RELATION_TYPE */);
    this.sourceNode = sourceNode;
    this.targetNode = targetNode;
    this.sourceCardinality = sourceCardinality;
    this.targetCardinality = targetCardinality;
  }
  /**
   * Returns the source node.
   *
   * @return Relation source node.
   */
  getSourceNode() {
    return this.sourceNode;
  }
  /**
   * Indicates the source node.
   *
   * @param sourceNode. Relation source node.
   */
  setSourceNode(sourceNode) {
    this.sourceNode = sourceNode;
  }
  /**
   * Returns the target node.
   *
   * @return Relation target node.
   */
  getTargetNode() {
    return this.targetNode;
  }
  /**
   * Indicates the target node.
   *
   * @param targetNode. Relation target node.
   */
  setTargetNode(targetNode) {
    this.targetNode = targetNode;
  }
  /**
   * Returns the source cardinality.
   *
   * @return A Cardinality type with the source cardinality.
   */
  getSourceCardinality() {
    return this.sourceCardinality;
  }
  /**
   * Indicates the source cardinality.
   *
   * @param sourceCardinality. The source cardinality of the relation.
   */
  setSourceCardinality(sourceCardinality) {
    this.sourceCardinality = sourceCardinality;
  }
  /**
   * Returns the target cardinality.
   *
   * @return A Cardinality type with the target cardinality.
   */
  getTargetCardinality() {
    return this.targetCardinality;
  }
  /**
   * Indicates the target cardinality.
   *
   * @param targetCardinality. The target cardinality of the relation.
   */
  setTargetCardinality(targetCardinality) {
    this.targetCardinality = targetCardinality;
  }
  /**
   * Clone the relation by referencing the current nodes.
   */
  clone(newID) {
    let newRelation;
    newRelation = new GraphRelation(
      newID !== null ? newID : this.getAssociationID(),
      this.getName(),
      this.sourceNode,
      this.sourceCardinality,
      this.targetNode,
      this.targetCardinality
    );
    newRelation.setNodeNameRemoved(this.getNodeNameRemoved());
    return newRelation;
  }
  /**
   * Clone the association changing the associated nodes to the nodes in
   * the array. This method generally used to clone the node.
   *
   * @param nodes. New nodes to be linked.
   * @return IGraphAssociation
   */
  cloneChangingReferencesTo(nodes) {
    let source = Util.findNodeById(this.sourceNode.getId(), nodes);
    let target = Util.findNodeById(this.targetNode.getId(), nodes);
    let relation = new GraphRelation(
      this.getAssociationID(),
      this.getName(),
      source,
      this.sourceCardinality,
      target,
      this.targetCardinality
    );
    relation.setNodeNameRemoved(this.getNodeNameRemoved());
    source.addRelation(relation);
    target.addRelation(relation);
    return relation;
  }
  /**
   * Delete the association from the nodes.
   *
   * @param node Node to be checked for its existence in the association.
   */
  deleteAssociation() {
    this.sourceNode.deleteAssociation(this);
    this.targetNode.deleteAssociation(this);
  }
  /**
   * Checks if the cardinality with node is low (1; 0..1).
   *
   * @param node. Side of the relationship with the node to be evaluated.
   */
  isLowCardinalityOfNode(node) {
    if (this.sourceNode === node && (this.sourceCardinality === "0..1" /* C0_1 */ || this.sourceCardinality === "1" /* C1 */)) {
      return true;
    }
    if (this.targetNode === node && (this.targetCardinality === "0..1" /* C0_1 */ || this.targetCardinality === "1" /* C1 */)) {
      return true;
    }
    return false;
  }
  /**
   * Checks if the cardinality with node is high (1..N; 0..N).
   *
   * @param node. Side of the relationship with the node to be evaluated.
   */
  isHighCardinalityOfNode(node) {
    if (this.sourceNode === node && (this.sourceCardinality === "0..*" /* C0_N */ || this.sourceCardinality === "1..*" /* C1_N */)) {
      return true;
    }
    if (this.targetNode === node && (this.targetCardinality === "0..*" /* C0_N */ || this.targetCardinality === "1..*" /* C1_N */)) {
      return true;
    }
    return false;
  }
  /**
   * Returns the relation formatted as string;
   */
  toString() {
    return this.sourceNode.getName() + "(" + this.sourceCardinality + ") - (" + this.targetCardinality + ")" + this.targetNode.getName();
  }
};

// src/libs/ontouml2db/util/Increment.ts
var Increment = class {
  static getNext() {
    if (Increment.next == null)
      this.next = 1;
    return Increment.next++;
  }
};

// src/libs/ontouml2db/util/Util.ts
var Util = class {
  static findNodeById(id, nodes) {
    let i = 0;
    while (i < nodes.length) {
      if (nodes[i].getId() === id)
        return nodes[i];
      i++;
    }
    return null;
  }
  static isNonSortal(type) {
    if (type === "category" /* CATEGORY */ || type === "roleMixin" /* ROLE_MIXIN */ || type === "phaseMixin" /* PHASE_MIXIN */ || type === "mixin" /* MIXIN */)
      return true;
    else
      return false;
  }
  static isSortalNonKind(type) {
    if (type === "role" /* ROLE */ || type === "phase" /* PHASE */ || type === "subkind" /* SUBKIND */)
      return true;
    else
      return false;
  }
  static getSpaces(name, qtd) {
    let tam = name.length;
    let spaces;
    spaces = " ";
    tam++;
    while (tam <= qtd) {
      spaces += " ";
      tam++;
    }
    return spaces;
  }
  static transformGeneralizationToRelation1to1(graph) {
    let generalization;
    let newRelation;
    let id;
    let toDestroy = [];
    for (let association of graph.getAssociations()) {
      if (association instanceof GraphGeneralization) {
        generalization = association;
        id = Increment.getNext().toString();
        newRelation = new GraphRelation(
          id,
          //ID
          id,
          //association name
          generalization.getGeneral(),
          //sourceNode
          "1" /* C1 */,
          //sourceCardinality
          generalization.getSpecific(),
          //targetNode
          "1" /* C1 */
          //targetCardinality
        );
        generalization.getGeneral().addRelation(newRelation);
        generalization.getSpecific().addRelation(newRelation);
        graph.addRelation(newRelation);
        toDestroy.push(generalization);
      }
    }
    for (generalization of toDestroy) {
      graph.removeAssociation(generalization);
    }
  }
};

// src/libs/ontouml2db/graph/Graph.ts
var Graph = class {
  constructor() {
    this.nodes = [];
    this.sourceNodes = [];
    this.associations = [];
    this.generalizationSets = [];
  }
  /**
   * Adds a new node (class) on the graph.
   * Method used to create the original graph. It should not be used
   * to perform the transformations. This method identifies that the
   * node passed as an argument belongs to the original model.
   *
   * @param Node. Node to be added in the graph.
   */
  putNode(newNode) {
    this.nodes.push(newNode);
    this.sourceNodes.push(newNode.clone());
  }
  /**
   * Adds a new node (class) on the graph.
   * This method NOT identifies that the node passed as an argument
   * belongs to the original model.
   *
   * @param Node. Node to be added in the graph.
   */
  addNode(newNode) {
    this.nodes.push(newNode);
  }
  /**
   * Returns the node instance. If not find, returns null.
   *
   * @param id. The class identifier of the original model.
   */
  getNodeById(id) {
    for (let val of this.nodes) {
      if (val.getId() === id)
        return val;
    }
    return null;
  }
  /**
   * Returns the node instance. If not find, returns null.
   *
   * @param name. The class name to search for.
   */
  getNodeByName(name) {
    for (let val of this.nodes) {
      if (val.getName() === name)
        return val;
    }
    return null;
  }
  /**
   * Returns all nodes of the graph.
   *
   * @return An array with all nodes.
   */
  getNodes() {
    return this.nodes;
  }
  /**
   * Returns all nodes of the graph added by the putNode
   * method, in their original form.
   *
   * @returns An array with all original nodes.
   */
  getSourceNodes() {
    return this.sourceNodes;
  }
  /**
   * Verifies whether the node exists on the graph.
   *
   * @param node. Node to be verified.
   * @return True if the node exists in the graph, otherwise false.
   */
  existsNode(node) {
    return this.nodes.includes(node);
  }
  /**
   * Verifies whether the association name exists on the graph.
   *
   * @param name Association name.
   */
  existsAssociationName(name) {
    for (let association of this.associations) {
      if (association.getName() === name)
        return true;
    }
    return false;
  }
  /**
   * Adds a new relation to the graph.
   *
   * @param relation. The relation to be stored.
   */
  addRelation(relation) {
    if (this.getAssociationByID(relation.getAssociationID()) === null) {
      this.associations.push(relation);
    }
  }
  /**
   * Adds a new generalization to the graph.
   *
   * @param generalization. The generalization to be stored.
   */
  addGeneralization(generalization) {
    if (!this.associations.includes(generalization)) {
      this.associations.push(generalization);
    }
  }
  /**
   * Returns the association of the respective ID.
   *
   * @param id Association ID.
   */
  addGeneralizationSet(generalizationSet) {
    if (!this.generalizationSets.includes(generalizationSet)) {
      this.generalizationSets.push(generalizationSet);
    }
  }
  /**
   * Adds a new Generalization Set to the graph.
   *
   * @param generalizationSet. The generalization set to be stored.
   */
  getAssociationByID(id) {
    for (let val of this.associations) {
      if (val.getAssociationID() === id)
        return val;
    }
    return null;
  }
  /**
   * Returns all associations of the graph.
   *
   * @return An array with all associations.
   */
  getAssociations() {
    return this.associations;
  }
  /**
   * Returns a top-level non-sortal in a package and remove it from array.
   *
   * @return An Node with the top-level non-sortal from the graph, or null
   * if none can be found
   */
  getTopLevelNonSortal() {
    for (let node of this.nodes) {
      if (Util.isNonSortal(node.getStereotype()) && !node.isSpecialization() && node.hasSpecialization()) {
        return node;
      }
    }
    return null;
  }
  /**
   * Returns the first node that it finds to be non-kind.
   *
   * @return An Node non-kind.
   */
  getLeafSortalNonKind() {
    for (let node of this.nodes) {
      if (Util.isSortalNonKind(node.getStereotype()) && //is a subkind, phase or role
      !node.hasSpecialization()) {
        return node;
      }
    }
    return null;
  }
  /**
   * Removes an node and its associations of the graph.
   *
   * @param node. Node to be removed.
   */
  removeNodes(nodes) {
    for (let node of nodes) {
      this.removeNode(node);
    }
  }
  /**
   * Removes set of nodes and its associations of the graph.
   *
   * @param node. Node to be removed.
   */
  removeNode(node) {
    let index = this.nodes.indexOf(node);
    this.nodes.splice(index, 1);
    let relation;
    let removeRelations = node.getRelations();
    while (removeRelations.length != 0) {
      relation = removeRelations[0];
      index = this.associations.indexOf(relation);
      this.associations.splice(index, 1);
      relation.deleteAssociation();
    }
    let generalization;
    let removeGeneralizations = node.getGeneralizations();
    while (removeGeneralizations.length != 0) {
      generalization = removeGeneralizations[0];
      index = this.associations.indexOf(generalization);
      this.associations.splice(index, 1);
      generalization.deleteAssociation();
    }
  }
  /**
   * Removes the association of the graph. The association will be removed from the nodes.
   *
   * @param association. Association to be removed.
   */
  removeAssociation(association) {
    if (association instanceof GraphRelation) {
      this.removeRelation(association);
    }
    if (association instanceof GraphGeneralization) {
      this.removeGeneralization(association);
    }
    let index = this.associations.indexOf(association);
    if (index != -1)
      this.associations.splice(index, 1);
  }
  /**
   * Removes the associations of the graph. The associations will be removed from the nodes.
   *
   * @param associations. Associations to be removed.
   */
  removeAssociations(associations) {
    for (let association of associations) {
      this.removeAssociation(association);
    }
  }
  /**
   * Marks all nodes as unsolved.
   */
  setAllNodesUnsolved() {
    this.nodes.forEach((node) => {
      node.setResolved(false);
    });
    this.associations.forEach((association) => {
      association.setResolved(false);
    });
  }
  removeRelation(relation) {
    relation.deleteAssociation();
  }
  removeGeneralization(generalization) {
    generalization.deleteAssociation();
  }
  toString() {
    let msg = "";
    this.nodes.forEach((node) => {
      msg += node.toString() + "\n";
    });
    return msg;
  }
};

// src/libs/ontouml2db/graph/PropertyContainer.ts
var PropertyContainer = class {
  constructor() {
    this.properties = [];
  }
  addProperty(property) {
    if (!this.existsPropertyName(property.getName())) {
      if (this.existsPropertyName(property.getName())) {
        throw new Error(
          `The '${property.getName()}' attribute is repeated between two classes of a generalization.[PropertyContainer.addProperty]`
        );
      }
      this.properties.push(property);
    }
  }
  addProperties(properties) {
    for (let property of properties) {
      if (this.existsPropertyName(property.getName())) {
        throw new Error(
          `The '${property.getName()}' attribute is repeated between two classes of a generalization.[PropertyContainer.addProperties]`
        );
      }
      this.addProperty(property);
    }
  }
  addPropertyAt(index, property) {
    if (this.existsPropertyName(property.getName())) {
      throw new Error(
        `The '${property.getName()}' attribute is repeated between two classes of a generalization.[PropertyContainer.addPropertyAt]`
      );
    }
    this.properties.splice(index, 0, property);
  }
  addPropertiesAt(index, properties) {
    properties.forEach((property) => {
      if (this.existsPropertyName(property.getName())) {
        throw new Error(
          `The '${property.getName()}' attribute is repeated between two classes of a generalization.[PropertyContainer.addPropertiesAt]`
        );
      }
      this.addPropertyAt(index, property);
      index++;
    });
  }
  getPropertyByID(id) {
    for (let val of this.properties) {
      if (val.getID() === id)
        return val;
    }
    return null;
  }
  getPropertyByName(name) {
    for (let val of this.properties) {
      if (val.getName() === name)
        return val;
    }
    return null;
  }
  getProperties() {
    return this.properties;
  }
  removeProperty(id) {
    for (let index = 0; index < this.properties.length; index++) {
      if (this.properties[index].getID() === id) {
        this.properties.splice(index, 1);
        return;
      }
    }
  }
  getPrimaryKey() {
    for (let property of this.properties) {
      if (property.isPrimaryKey())
        return property;
    }
    return null;
  }
  getPKName() {
    for (let property of this.properties) {
      if (property.isPrimaryKey()) {
        return property.getName();
      }
    }
    return "[Did not find the pk name]";
  }
  existsPropertyName(propertyName) {
    for (let property of this.properties) {
      if (propertyName === property.getName())
        return true;
    }
    return false;
  }
  existsProperty(property) {
    for (let value of this.properties) {
      if (value.getID() === property.getID()) {
        return true;
      }
    }
    return false;
  }
  clonePropertyContainer() {
    let container = new PropertyContainer();
    this.properties.forEach((property) => {
      container.addProperty(property.clone());
    });
    return container;
  }
  getFKRelatedOfNodeID(id) {
    for (let property of this.properties) {
      if (property.getForeignKeyNodeID() === id) {
        return property;
      }
    }
    return null;
  }
  toString() {
    let msg = "";
    msg += "\n	 : [ ";
    this.properties.forEach((property) => {
      msg += property.toString() + " | ";
    });
    msg += "]";
    return msg;
  }
};

// src/libs/ontouml2db/graph/AssociationContainer.ts
var AssociationContainer = class {
  constructor(parentNode) {
    this.parentNode = parentNode;
    this.relations = [];
    this.generalizations = [];
  }
  /**
   * Adds a new association to the node. Each node has a list of its associations. In
   * this way, a association is referenced by the origin and destination node, forming
   * a bidirectional graph.
   *
   * @param relation Relation to be added.
   */
  addRelation(relation) {
    this.relations.push(relation);
  }
  /**
   * Returns the associations with the node.
   *
   * @return An list with all the associations that arrive and depart from the
   * respective node.
   */
  getRelations() {
    return this.relations;
  }
  /**
   * Returns the association that references the node.
   *
   * @param nodeID Node identifier to be searched.
   */
  getAssociationWithNode(nodeID) {
    for (let relation of this.relations) {
      if (relation.getSourceNode().getId() === nodeID || relation.getTargetNode().getId() === nodeID)
        return relation;
    }
    return null;
  }
  /**
   * Adds a new generalization to the node's association set.
   *
   * @param generalization Generalization to be added
   */
  addGeneralization(generalization) {
    this.generalizations.push(generalization);
  }
  /**
   * Returns generalizations belonging to the node.
   */
  getGeneralizations() {
    return this.generalizations;
  }
  /**
   * Returns generalization sets belonging to the node, when the node is a
   * generalization of some node.
   */
  getGeneralizationSets() {
    let gSets = [];
    for (let generalization of this.generalizations) {
      if (generalization.isBelongGeneralizationSet()) {
        if (!gSets.includes(generalization.getBelongGeneralizationSet()))
          gSets.push(generalization.getBelongGeneralizationSet());
      }
    }
    return gSets;
  }
  /**
   * Removes the association form the node. The association still exists in the graph.
   * @param association
   */
  deleteAssociation(association) {
    if (association instanceof GraphRelation) {
      let index = this.relations.indexOf(association);
      if (index !== -1)
        this.relations.splice(index, 1);
    } else {
      if (association instanceof GraphGeneralization) {
        let index = this.generalizations.indexOf(association);
        this.generalizations.splice(index, 1);
      }
    }
  }
  /**
   * Checks whether the current node is a specialist node of some generalization.
   *
   * @return True if the node is a specialization of another node, otherwise false.
   */
  isSpecialization() {
    for (let generalization of this.generalizations) {
      if (generalization.getSpecific().getId() === this.parentNode.getId())
        return true;
    }
    return false;
  }
  /**
   * Checks whether the current node has any specialization.
   *
   * @return True if the node has at last one specialization node, otherwise false.
   */
  hasSpecialization() {
    for (let generalization of this.generalizations) {
      if (generalization.getGeneral().getId() === this.parentNode.getId())
        return true;
    }
    return false;
  }
  /**
   * Returns all associations formatted as a string.
   */
  toString() {
    let msg = "";
    if (this.generalizations.length > 0) {
      this.generalizations.forEach((generalization) => {
        msg += generalization.toString();
      });
    }
    if (this.relations.length > 0) {
      msg += "\n	 : ";
      this.relations.forEach((relation) => {
        msg += relation.toString() + " | ";
      });
    }
    return msg;
  }
};

// src/libs/ontouml2db/graph/Node.ts
var Node = class {
  //This property should only be filled in when the node originates from an N to N association.
  constructor(id, name, stereotype) {
    this.id = id;
    this.name = name;
    this.stereotype = stereotype;
    this.resolved = false;
    this.propertyContainer = new PropertyContainer();
    this.associationContainer = new AssociationContainer(this);
    this.associationNameNtoN = null;
  }
  /**
   * Returns the class identifier of the original model.
   */
  getId() {
    return this.id;
  }
  /**
   * Informs the node name.
   *
   * @param name. Name of the node.
   */
  setName(name) {
    this.name = name;
  }
  /**
   * Returns the node name.
   *
   * @return The name of the node.
   */
  getName() {
    return this.name;
  }
  /**
   * Informs the node stereotype.
   *
   * @param stereotype. The stereotype name.
   */
  setStereotype(stereotype) {
    this.stereotype = stereotype;
  }
  /**
   * Returns the stereotype name.
   *
   * @return The name of the stereotype.
   */
  getStereotype() {
    return this.stereotype;
  }
  /**
   * Informs the node's properties container.
   *
   * @param container Container to be put on the node.
   */
  setPropertyContainer(container) {
    this.propertyContainer = container;
  }
  /**
   * Informs that the node has been resolved. Used in the transformation
   * processes to walk in the graph produced by the Nodes.
   *
   * @param flag. True reports that the node was resolved, false not.
   */
  setResolved(flag) {
    this.resolved = flag;
  }
  /**
   * Returns if the node was resolved.
   *
   * @return A boolean indicating whether the node has been resolved.
   */
  isResolved() {
    return this.resolved;
  }
  /**
   * Informs the association name of an N to N relationship.
   * @param name
   */
  setAssociationNameNtoN(name) {
    this.associationNameNtoN = name;
  }
  /**
   * Returns the N to N association name in which the node originated.
   */
  getAssociationNameNtoN() {
    return this.associationNameNtoN;
  }
  /**
   * Creates a new node with the same properties values.
   *
   * @return A new node identical to the current one.
   */
  clone() {
    let newNode = new Node(this.id, this.name, this.stereotype);
    newNode.setPropertyContainer(this.propertyContainer.clonePropertyContainer());
    newNode.setAssociationNameNtoN(this.associationNameNtoN);
    return newNode;
  }
  //---------------------------------------------------------------------------------------
  //--- The methods below are intended to manipulate the attributes (PropertyContainer)
  //---------------------------------------------------------------------------------------
  addProperty(property) {
    this.propertyContainer.addProperty(property);
  }
  addProperties(properties) {
    this.propertyContainer.addProperties(properties);
  }
  addPropertyAt(index, property) {
    this.propertyContainer.addPropertyAt(index, property);
  }
  addPropertiesAt(index, properties) {
    this.propertyContainer.addPropertiesAt(index, properties);
  }
  getPropertyByID(id) {
    return this.propertyContainer.getPropertyByID(id);
  }
  getPropertyByName(name) {
    return this.propertyContainer.getPropertyByName(name);
  }
  getProperties() {
    return this.propertyContainer.getProperties();
  }
  clonePropertyContainer() {
    return this.propertyContainer.clonePropertyContainer();
  }
  removeProperty(id) {
    this.propertyContainer.removeProperty(id);
  }
  getPrimaryKey() {
    return this.propertyContainer.getPrimaryKey();
  }
  getPKName() {
    return this.propertyContainer.getPKName();
  }
  existsPropertyName(propertyName) {
    return this.propertyContainer.existsPropertyName(propertyName);
  }
  existsProperty(property) {
    return this.propertyContainer.existsProperty(property);
  }
  getFKRelatedOfNodeID(id) {
    return this.propertyContainer.getFKRelatedOfNodeID(id);
  }
  //---------------------------------------------------------------------------------------
  //--- The methods below are intended to manipulate the associations (AssociationContainer)
  //---------------------------------------------------------------------------------------
  addGeneralization(generalization) {
    this.associationContainer.addGeneralization(generalization);
  }
  getGeneralizations() {
    return this.associationContainer.getGeneralizations();
  }
  getGeneralizationSets() {
    return this.associationContainer.getGeneralizationSets();
  }
  addRelation(relation) {
    this.associationContainer.addRelation(relation);
  }
  getRelations() {
    return this.associationContainer.getRelations();
  }
  getAssociationWithNode(nodeID) {
    return this.associationContainer.getAssociationWithNode(nodeID);
  }
  isSpecialization() {
    return this.associationContainer.isSpecialization();
  }
  hasSpecialization() {
    return this.associationContainer.hasSpecialization();
  }
  deleteAssociation(association) {
    this.associationContainer.deleteAssociation(association);
  }
  //----------------------------------------------------
  toString() {
    let msg = "\n" + this.name + " <<" + this.stereotype + ">>";
    msg += this.propertyContainer.toString();
    msg += this.associationContainer.toString();
    return msg;
  }
};

// src/libs/ontouml2db/graph/NodeProperty.ts
var NodeProperty = class {
  constructor(id, name, dataType, acceptNull, multivalued) {
    this.id = id;
    this.name = name;
    this.dataType = dataType;
    this.acceptNull = acceptNull;
    this.multivalued = multivalued;
    this.isPK = false;
    this.isPKAutoIncrement = false;
    this.isFK = false;
    this.defaultValue = null;
    this.resolved = false;
    this.associationRelated = null;
  }
  /**
   * Returns the property ID. This ID is the same as the json file.
   */
  getID() {
    return this.id;
  }
  /**
   * Informs the property name.
   *
   * @param name. Property name.
   */
  setName(name) {
    this.name = name;
  }
  /**
   * Returns the property name.
   *
   * @return string with the property name.
   */
  getName() {
    return this.name;
  }
  /**
   * Informs the property data type.
   *
   * @param dataType. Name of the property type.
   */
  setDataType(dataType) {
    this.dataType = dataType;
  }
  /**
   * Returns the property data type.
   *
   * @return string with the property data type.
   */
  getDataType() {
    return this.dataType;
  }
  /**
   * Informs that the property is a primary key.
   *
   * @param flag. If true, the property will be marked as a
   * primary key.
   */
  setPrimaryKey(flag) {
    this.isPK = flag;
    this.isPKAutoIncrement = flag;
    if (flag) {
      this.acceptNull = false;
    }
  }
  /**
   * Returns whether the property is marked as primary key.
   *
   * @return True if the property is a primary key, otherwise false.
   */
  isPrimaryKey() {
    return this.isPK;
  }
  /**
   * Informs whether the Primary Key is auto-incrementing or not. By default, the primary key is auto-incremented.
   * @param flag
   */
  setPKAutoIncrement(flag) {
    this.isPKAutoIncrement = flag;
  }
  /**
   * Returns whether the primary key is auto-increment.
   */
  isPrimaryKeyAutoIncrement() {
    return this.isPKAutoIncrement;
  }
  /**
   * Informs which node the property (marked as a foreign key) refers to.
   * This is necessary because the foreign key name may be different from
   * the primary key name of the referenced table. This method marks the
   * property as foreign key.
   *
   * @param foreignNode. Node to be referenced.
   */
  setForeignNodeID(foreignNodeID, associationRelated) {
    if (foreignNodeID !== null) {
      this.isFK = true;
      this.foreignNodeID = foreignNodeID;
      this.associationRelated = associationRelated;
    } else {
      this.isFK = false;
      this.foreignNodeID = null;
      this.associationRelated = null;
    }
  }
  /**
   * Returns the ID of the node referenced as foreign key.
   *
   * @return A string with the node name.
   */
  getForeignKeyNodeID() {
    return this.foreignNodeID;
  }
  /**
   * Returns if the property is marked as a foreign key.
   *
   * @return True if the property is a foreign key, otherwise false.
   */
  isForeignKey() {
    return this.isFK;
  }
  /**
   * Returns the association related of Foreign Key.
   */
  getAssociationRelatedOfFK() {
    return this.associationRelated;
  }
  /**
   * Informs whether the property accepts null.
   *
   * @param flag. If true, the property accepts null.
   */
  setNullable(flag) {
    this.acceptNull = flag;
  }
  /**
   * Returns whether the property accepts null.
   *
   * @return True if the property accepts null, otherwise false.
   */
  isNullable() {
    return this.acceptNull;
  }
  /**
   * Informs whether the property is multivalued.
   *
   * @param flag. If true, the property is multivalued.
   */
  setMultivalued(flag) {
    this.multivalued = flag;
  }
  /**
   * Returns whether the property is multivalued.
   *
   * @return True if the property is multivalued, otherwise false.
   */
  isMultivalued() {
    return this.multivalued;
  }
  /**
   * Informs a default value for the property.
   *
   * @param value. The default value.
   */
  setDefaultValue(value) {
    this.defaultValue = value;
  }
  /**
   * Returns the default value of the property.
   *
   * @return An object with de default value.
   */
  getDefaultValue() {
    return this.defaultValue;
  }
  /**
   * Informs that the property has already been resolved. Important
   * for the graph operations.
   *
   * @param flag. True if the property has been resolved.
   */
  setResolved(flag) {
    this.resolved = flag;
  }
  /**
   * Returns whether the property has been resolved.
   *
   * @return True if the property has been resolved.
   */
  isResolved() {
    return this.resolved;
  }
  /**
   * Returns a new property with the same values of the current property.
   *
   * @return IOntoProperty.
   */
  clone(newKey) {
    let newProperty = new NodeProperty(
      newKey == null ? this.id : newKey,
      this.name,
      this.dataType,
      this.acceptNull,
      this.multivalued
    );
    newProperty.setPrimaryKey(this.isPK);
    newProperty.setPKAutoIncrement(this.isPKAutoIncrement);
    newProperty.setForeignNodeID(this.foreignNodeID, this.associationRelated);
    newProperty.setDefaultValue(this.defaultValue);
    return newProperty;
  }
  toString() {
    return this.name + ": " + this.dataType + ", " + (this.acceptNull === true ? "NULL" : "NOT NULL");
  }
};

// src/libs/ontouml2db/graph/GraphGeneralizationSet.ts
var GraphGeneralizationSet = class extends GraphAssociation {
  constructor(id, name, disjoint, complete) {
    super(id, name, "GeneralizationSet" /* GENERALIZATION_SET_TYPE */);
    this.specializationNodes = [];
    this.disjoint = disjoint;
    this.complete = complete;
  }
  /**
   * Informs the generalist node of the generalization set.
   *
   * @param generalizationNode Generalist node.
   */
  setGeneral(generalizationNode) {
    this.generalizationNode = generalizationNode;
  }
  /**
   * Returns the generalization set supernode.
   *
   * @return Node with the supernode.
   */
  getGeneral() {
    return this.generalizationNode;
  }
  /**
   * Adds a new specialization node to the generalization set.,
   *
   * @param specialization Specialization node to be add in the generalization set
   */
  addSpecific(specialization) {
    if (this.specializationNodes.includes(specialization))
      return;
    this.specializationNodes.push(specialization);
  }
  /**
   * Returns the specialization nodes linked to the generalization set.
   *
   * @return An ArrayList with all the specialization nodes.
   */
  getSpecific() {
    return this.specializationNodes;
  }
  /**
   * Checks whether the generalization set is disjoint.
   *
   * @return True if the generalization set is disjoint and false if it
   * is overlapping.
   */
  isDisjoint() {
    return this.disjoint;
  }
  /**
   * Checks whether the generalization set is classified as incomplete.
   *
   * @return True if the generalization set is classified as complete
   * and false if it is incomplete.
   */
  isComplete() {
    return this.complete;
  }
  /**
   * Clone the association changing the associated nodes to the nodes in
   * the array. This method generally used to clone the node.
   *
   * @param nodes. New nodes to be linked.
   * @return IGraphAssociation
   */
  cloneChangingReferencesTo(nodes) {
    let gs;
    let superNode;
    let subNode;
    let generalization;
    gs = new GraphGeneralizationSet(this.getAssociationID(), this.getName(), this.disjoint, this.complete);
    superNode = Util.findNodeById(this.generalizationNode.getId(), nodes);
    gs.setGeneral(superNode);
    this.specializationNodes.forEach((node) => {
      subNode = Util.findNodeById(node.getId(), nodes);
      gs.addSpecific(subNode);
      generalization = this.getGeneralization(superNode, subNode);
      generalization.setBelongGeneralizationSet(gs);
    });
    return gs;
  }
  getGeneralization(superNode, subNode) {
    let i = 0;
    let generalizations = superNode.getGeneralizations();
    while (i < generalizations.length) {
      if (generalizations[i].getGeneral().getId() === superNode.getId() && generalizations[i].getSpecific().getId() === subNode.getId())
        return generalizations[i];
      i++;
    }
    return null;
  }
  /**
   * Returns the generalization set formatted as string;
   */
  toString() {
    let msg = "\n	 : ";
    msg += this.generalizationNode.getName() + " <-GS- ";
    this.specializationNodes.forEach((node) => {
      msg += node.getName() + "| ";
    });
    return msg;
  }
};

// src/libs/ontouml2db/factory/Factory.ts
var Factory = class {
  constructor(project) {
    this.project = project;
    this.graph = new Graph();
  }
  mountGraph() {
    this.putClasses();
    this.putRelations();
    this.putGeneralizations();
    this.putGeneralizationSets();
    return this.graph;
  }
  /********************************************************************
   ** puts the classes
   *********************************************************************/
  putClasses() {
    let classes;
    classes = this.project.getAllClasses();
    classes.forEach((_class) => {
      if (this.getUfoStereotype(_class)) {
        this.putClass(_class);
      }
    });
  }
  putClass(_class) {
    const node = new Node(_class.id, _class.getNameOrId(), this.getUfoStereotype(_class));
    for (const attribute of _class.getOwnAttributes()) {
      const cardinality = attribute.cardinality.lowerBound + ".." + attribute.cardinality.upperBound;
      const property = new NodeProperty(
        attribute.id,
        attribute.getName(),
        attribute.propertyType.getName(),
        this.getAcceptNull(cardinality),
        this.getIsMultivalued(cardinality)
      );
      node.addProperty(property);
    }
    this.graph.putNode(node);
  }
  getAcceptNull(cardinality) {
    if (cardinality === null)
      return true;
    if (cardinality.substring(0, 1) === "0")
      return true;
    else
      return false;
  }
  getIsMultivalued(cardinality) {
    if (cardinality === null)
      return false;
    if (cardinality.length > 3) {
      let num = cardinality.substring(cardinality.length - 1, cardinality.length);
      if (num === "*")
        return true;
      if (!isNaN(parseFloat(num))) {
        if (Number(num) > 1)
          return true;
        else
          return false;
      }
    }
    return false;
  }
  getUfoStereotype(_class) {
    return ["type" /* TYPE */, "datatype" /* DATATYPE */, "abstract" /* ABSTRACT */].includes(_class.stereotype) ? null : _class.stereotype;
  }
  /********************************************************************
   ** puts the relations
   *********************************************************************/
  putRelations() {
    let newRelation;
    let sourceNode;
    let targetNode;
    let relations = this.project.getAllRelations();
    relations.forEach((relation) => {
      const source = relation.getSourceEnd();
      const target = relation.getTargetEnd();
      const sourceCardinality = `${source.cardinality.lowerBound}..${source.cardinality.upperBound}`;
      const targetCardinality = `${target.cardinality.lowerBound}..${target.cardinality.upperBound}`;
      sourceNode = this.graph.getNodeById(relation.getSource().id);
      targetNode = this.graph.getNodeById(relation.getTarget().id);
      newRelation = new GraphRelation(
        relation.id,
        relation.getName(),
        sourceNode,
        this.getCardinality(sourceCardinality),
        targetNode,
        this.getCardinality(targetCardinality)
      );
      sourceNode.addRelation(newRelation);
      targetNode.addRelation(newRelation);
      this.graph.addRelation(newRelation);
    });
  }
  getCardinality(cardinality) {
    let lowerCardinality = this.getLowerBoundCardinality(cardinality);
    let upperCardinality = this.getUpperBoundCardinality(cardinality);
    if (lowerCardinality === 0) {
      if (upperCardinality === 1)
        return "0..1" /* C0_1 */;
      else
        return "0..*" /* C0_N */;
    } else {
      if (lowerCardinality === 1) {
        if (upperCardinality === 1)
          return "1" /* C1 */;
        else
          return "1..*" /* C1_N */;
      } else {
        return "1..*" /* C1_N */;
      }
    }
  }
  getLowerBoundCardinality(cardinality) {
    const cardinalities = cardinality.split("..");
    const lowerBound = cardinalities[0];
    return lowerBound === "*" ? 99999 : Number(lowerBound);
  }
  getUpperBoundCardinality(cardinality) {
    const cardinalities = cardinality.split("..");
    const upperBound = cardinalities[1] || cardinalities[0];
    return upperBound === "*" ? 99999 : Number(upperBound);
  }
  /********************************************************************
   ** puts the generalizations
   *********************************************************************/
  putGeneralizations() {
    let newGeneralization;
    let generalizationNode;
    let specializationNode;
    let generalizations = this.project.getAllGeneralizations();
    generalizations.forEach((gen) => {
      generalizationNode = this.graph.getNodeById(gen.general.id);
      specializationNode = this.graph.getNodeById(gen.specific.id);
      newGeneralization = new GraphGeneralization(gen.id, generalizationNode, specializationNode);
      generalizationNode.addGeneralization(newGeneralization);
      specializationNode.addGeneralization(newGeneralization);
      this.graph.addGeneralization(newGeneralization);
    });
  }
  /********************************************************************
   ** puts the generalization sets
   *********************************************************************/
  putGeneralizationSets() {
    let newGeneralizationSet;
    let graphGeneralization;
    let generalizationSets = this.project.getAllGeneralizationSets();
    generalizationSets.forEach((gs) => {
      newGeneralizationSet = new GraphGeneralizationSet(gs.id, gs.getNameOrId(), gs.isDisjoint, gs.isComplete);
      newGeneralizationSet.setGeneral(this.graph.getNodeById(gs.getGeneral().id));
      gs.generalizations.forEach((generalization) => {
        newGeneralizationSet.addSpecific(this.graph.getNodeById(generalization.specific.id));
        graphGeneralization = this.graph.getAssociationByID(generalization.id);
        graphGeneralization.setBelongGeneralizationSet(newGeneralizationSet);
      });
      this.graph.addGeneralizationSet(newGeneralizationSet);
    });
  }
};

// src/libs/ontouml2db/approaches/one_table_per_class/OneTablePerClass.ts
var OneTablePerClass = class {
  run(graph, tracker) {
    Util.transformGeneralizationToRelation1to1(graph);
  }
};

// src/libs/ontouml2db/approaches/processes/Flatten.ts
var Flatten = class {
  static doFlattening(graph, tracker) {
    let node;
    node = graph.getTopLevelNonSortal();
    while (node !== null) {
      Flatten.flattenNode(node, graph, tracker);
      graph.removeNode(node);
      node = graph.getTopLevelNonSortal();
    }
  }
  static flattenNode(node, graph, tracker) {
    for (let generalization of node.getGeneralizations()) {
      Flatten.flattenGeneralization(generalization, tracker);
    }
    tracker.removeNodeFromTraces(node);
    for (let relation of node.getRelations()) {
      Flatten.flattenAssociation(node, relation, graph);
    }
  }
  static flattenGeneralization(generalization, tracker) {
    generalization.getSpecific().addPropertiesAt(0, generalization.getGeneral().getProperties());
    tracker.copyTracesFromTo(generalization.getGeneral(), generalization.getSpecific());
  }
  static flattenAssociation(flattenNode, relation, graph) {
    for (let generalization of flattenNode.getGeneralizations()) {
      Flatten.flattenAssociationWith(flattenNode, generalization.getSpecific(), relation, graph);
    }
  }
  static flattenAssociationWith(flattenNode, toNode, relation, graph) {
    let newRelation = relation.clone(Increment.getNext().toString());
    newRelation.setNodeNameRemoved(flattenNode.getName());
    if (relation.getSourceNode() === flattenNode) {
      newRelation.setSourceNode(toNode);
      newRelation.setSourceCardinality(Flatten.getNewCardinality(relation.getSourceCardinality()));
      newRelation.getTargetNode().addRelation(newRelation);
      newRelation.getTargetNode().deleteAssociation(relation);
    } else {
      newRelation.setTargetNode(toNode);
      newRelation.setTargetCardinality(Flatten.getNewCardinality(relation.getTargetCardinality()));
      newRelation.getSourceNode().addRelation(newRelation);
      newRelation.getSourceNode().deleteAssociation(relation);
    }
    toNode.addRelation(newRelation);
    graph.addRelation(newRelation);
  }
  static getNewCardinality(oldCardinality) {
    if (oldCardinality === "1" /* C1 */) {
      return "0..1" /* C0_1 */;
    } else if (oldCardinality === "1..*" /* C1_N */) {
      return "0..*" /* C0_N */;
    } else
      return oldCardinality;
  }
};

// src/libs/ontouml2db/graph/NodePropertyEnumeration.ts
var NodePropertyEnumeration = class extends NodeProperty {
  constructor(id, name, dataType, isNull, multiValues) {
    super(id, name, dataType, isNull, multiValues);
    this.values = [];
  }
  /**
   * Adds a new value belonging to the Enumeration.
   *
   * @param value. Name to be added.
   */
  addValue(value) {
    this.values.push(value);
  }
  /**
   * Returns the names belonging to the Enumeration.
   *
   * @return The ArrayList with the names.
   */
  getValues() {
    return this.values;
  }
  /**
   * Returns the enumerations as string.
   */
  toString() {
    let result = this.getName() + ": " + this.getDataType() + " [";
    for (let str of this.values) {
      result += str + " | ";
    }
    result += "]";
    return result;
  }
};

// src/libs/ontouml2db/approaches/processes/Lifting.ts
var Lifting = class {
  static doLifting(graph, tracker) {
    let node = graph.getLeafSortalNonKind();
    while (node !== null) {
      Lifting.liftNode(node, graph, tracker);
      graph.removeNode(node);
      node = graph.getLeafSortalNonKind();
    }
  }
  static liftNode(node, graph, tracker) {
    Lifting.resolveGeneralization(node, tracker);
    Lifting.resolveGeneralizationSet(node, graph, tracker);
    Lifting.liftAttributes(node);
    Lifting.remakeReferences(node, tracker);
  }
  // **************************************************************************************
  // *********** Resolve the nodes generalizations
  // **************************************************************************************
  static resolveGeneralization(node, tracker) {
    let newProperty;
    node.setResolved(true);
    let generalization = node.getGeneralizations()[0];
    if (!generalization.isBelongGeneralizationSet()) {
      newProperty = new NodeProperty(
        Increment.getNext().toString(),
        "is" + generalization.getSpecific().getName(),
        "boolean",
        false,
        false
      );
      newProperty.setDefaultValue(false);
      node.addProperty(newProperty);
      tracker.moveTraceFromTo(generalization.getSpecific(), generalization.getGeneral(), newProperty, true, null);
    }
  }
  // **************************************************************************************
  // *********** Resolve the node attributes
  // **************************************************************************************
  //must be called after creating all attributes on the specialization nodes.
  static liftAttributes(node) {
    if (node.getGeneralizations().length === 0)
      return;
    let generalization = node.getGeneralizations()[0];
    let properties = generalization.getSpecific().getProperties();
    for (let property of properties) {
      if (property.getDefaultValue() === null)
        property.setNullable(true);
    }
    generalization.getGeneral().addProperties(properties);
  }
  // **************************************************************************************
  // *********** Resolve the node generalization sets
  // **************************************************************************************
  static resolveGeneralizationSet(node, graph, tracker) {
    let enumTableName;
    let enumFieldName;
    let associationID;
    let associationName;
    let newEnumerationField;
    let newNode;
    let newRelation;
    for (let gs of node.getGeneralizationSets()) {
      if (!gs.isResolved()) {
        enumTableName = Lifting.getEnumName(gs);
        enumFieldName = enumTableName + "Enum";
        associationID = "enum_" + Increment.getNext();
        associationName = "has_" + enumTableName;
        newEnumerationField = new NodePropertyEnumeration(Increment.getNext().toString(), enumFieldName, "int", false, false);
        newNode = new Node(Increment.getNext().toString(), enumTableName, "enumeration" /* ENUMERATION */);
        newNode.addProperty(newEnumerationField);
        newRelation = new GraphRelation(
          associationID,
          associationName,
          newNode,
          Lifting.getNewSourceCardinality(gs),
          gs.getGeneral(),
          "0..*" /* C0_N */
        );
        gs.getGeneral().addRelation(newRelation);
        newNode.addRelation(newRelation);
        graph.addNode(newNode);
        graph.addRelation(newRelation);
        for (let specializationNode of gs.getSpecific()) {
          newEnumerationField.addValue(specializationNode.getName());
          tracker.addFilterAtNode(
            specializationNode,
            specializationNode,
            newEnumerationField,
            specializationNode.getName(),
            newNode
          );
        }
        gs.setResolved(true);
      }
    }
  }
  static getEnumName(gs) {
    if (gs.getName() === null || gs.getName().trim() === "")
      return "Enum" + Increment.getNext();
    else
      return gs.getName();
  }
  static getNewSourceCardinality(gs) {
    if (gs.isDisjoint() && gs.isComplete()) {
      return "1" /* C1 */;
    } else if (gs.isDisjoint() && !gs.isComplete()) {
      return "0..1" /* C0_1 */;
    } else if (!gs.isDisjoint() && gs.isComplete()) {
      return "1..*" /* C1_N */;
    } else if (!gs.isDisjoint() && !gs.isComplete()) {
      return "0..*" /* C0_N */;
    }
    return null;
  }
  // **************************************************************************************
  // *********** Resolve the references
  // **************************************************************************************
  static remakeReferences(node, tracker) {
    let generalization = node.getGeneralizations()[0];
    let superNode = generalization.getGeneral();
    while (node.getRelations().length !== 0) {
      let relation = node.getRelations()[0];
      if (relation.getSourceNode() === node) {
        relation.setSourceNode(superNode);
        relation.setTargetCardinality(Lifting.getNewCardinality(relation.getTargetCardinality()));
      } else {
        relation.setTargetNode(superNode);
        relation.setSourceCardinality(Lifting.getNewCardinality(relation.getSourceCardinality()));
      }
      superNode.addRelation(relation);
      node.deleteAssociation(relation);
    }
    tracker.copyTracesFromTo(node, superNode);
    tracker.removeNodeFromTraces(node);
  }
  static getNewCardinality(oldCardinality) {
    if (oldCardinality === "1..*" /* C1_N */) {
      return "0..*" /* C0_N */;
    } else if (oldCardinality === "1" /* C1 */) {
      return "0..1" /* C0_1 */;
    } else
      return oldCardinality;
  }
};

// src/libs/ontouml2db/approaches/one_table_per_kind/OneTablePerKind.ts
var OneTablePerKind = class {
  run(graph, tracker) {
    Flatten.doFlattening(graph, tracker);
    Lifting.doLifting(graph, tracker);
  }
};

// src/libs/ontouml2db/convert/SolvesEnumeration.ts
var SolvesEnumeration = class {
  static solves(graph, tracker, enumFiledToLookupTable) {
    if (enumFiledToLookupTable) {
      this.transformEnumToLookupTables(graph, tracker);
    } else {
      this.applyEnumToFilds(graph, tracker);
    }
  }
  // **********************************************************
  // *** Methodos to apply enumerations to fields
  // **********************************************************
  static applyEnumToFilds(graph, tracker) {
    let nodesToDestroy = [];
    let associationsToRemove = [];
    for (let node of graph.getNodes()) {
      if (node.getStereotype() === "enumeration" /* ENUMERATION */) {
        associationsToRemove.length = 0;
        for (let relation of node.getRelations()) {
          if (relation.isLowCardinalityOfNode(node)) {
            SolvesEnumeration.addEnumerationColumn(node, relation, tracker);
            nodesToDestroy.push(node);
            associationsToRemove.push(relation);
          } else {
            if (relation.getSourceNode() === node)
              relation.setTargetCardinality("1" /* C1 */);
            else
              relation.setSourceCardinality("1" /* C1 */);
          }
        }
        graph.removeAssociations(associationsToRemove);
      }
    }
    graph.removeNodes(nodesToDestroy);
  }
  static addEnumerationColumn(enumNode, relation, tracker) {
    let targetNode;
    let cardinalityOfEnum;
    let isNull;
    let isMultivalued;
    targetNode = SolvesEnumeration.getTargetNode(enumNode, relation);
    cardinalityOfEnum = SolvesEnumeration.getCardinalityOf(enumNode, relation);
    if (cardinalityOfEnum === "0..1" /* C0_1 */ || cardinalityOfEnum === "1" /* C1 */)
      isMultivalued = false;
    else
      isMultivalued = true;
    if (cardinalityOfEnum === "0..1" /* C0_1 */ || cardinalityOfEnum === "0..*" /* C0_N */)
      isNull = true;
    else
      isNull = false;
    for (let property of enumNode.getProperties()) {
      property.setNullable(isNull);
      property.setMultivalued(isMultivalued);
      targetNode.addProperty(property);
    }
    tracker.removePropertyBelongsToOtherNode(enumNode);
  }
  static getTargetNode(node, relation) {
    if (relation.getSourceNode() === node)
      return relation.getTargetNode();
    else
      return relation.getSourceNode();
  }
  static getCardinalityOf(node, relation) {
    if (relation.getSourceNode() === node)
      return relation.getSourceCardinality();
    else
      return relation.getTargetCardinality();
  }
  // **********************************************************
  // *** Methodos to transform enumerations to lookup tables
  // **********************************************************
  static transformEnumToLookupTables(graph, tracker) {
    let newField;
    for (let node of graph.getNodes()) {
      if (node.getStereotype() === "enumeration" /* ENUMERATION */) {
        for (let property of node.getProperties()) {
          if (property instanceof NodePropertyEnumeration) {
            node.removeProperty(property.getID());
            newField = new NodeProperty(Increment.getNext().toString(), node.getName(), "string", false, false);
            node.addProperty(newField);
            tracker.changeFieldToFilter(property, newField);
          }
        }
      }
    }
  }
};

// src/libs/ontouml2db/convert/SolvesPrimaryKey.ts
var SolvesPrimaryKey = class {
  static solves(graph) {
    let pkName;
    let property;
    let newID;
    for (let node of graph.getNodes()) {
      pkName = node.getName() + "_id";
      newID = pkName + Increment.getNext().toString();
      property = new NodeProperty(newID, pkName, "int", false, false);
      property.setPrimaryKey(true);
      node.addPropertyAt(0, property);
    }
  }
};

// src/libs/ontouml2db/convert/SolvesForeignKey.ts
var SolvesForeignKey = class {
  static solves(graph) {
    SolvesForeignKey.removePKFromTargetNode1To1(graph);
    SolvesForeignKey.propagateForeignKey(graph);
  }
  /**
   * Removes the primary key from the destination node, which participates in the 1: 1
   * relationship, because the same primary key from the source node will be added.
   * @param graph
   */
  static removePKFromTargetNode1To1(graph) {
    let node;
    for (let relation of graph.getAssociations()) {
      if (SolvesForeignKey.is1To1(relation)) {
        node = relation.getTargetNode();
        if (node.getPrimaryKey() !== null) {
          node.removeProperty(node.getPrimaryKey().getID());
        }
      }
    }
  }
  static propagateForeignKey(graph) {
    let relations = graph.getAssociations().filter(() => {
      return true;
    });
    SolvesForeignKey.resolve1To1(relations);
    SolvesForeignKey.resolve1ToN(relations);
  }
  static resolve1To1(relations) {
    let relation;
    let i = 0;
    while (i < relations.length) {
      relation = relations[i];
      if (SolvesForeignKey.is1To1(relation)) {
        relations.splice(i, 1);
        if (relation.getSourceNode().getPrimaryKey() !== null) {
          SolvesForeignKey.propagateKey(
            relation.getSourceNode(),
            relation.getTargetCardinality(),
            relation.getTargetNode(),
            relation
          );
        } else {
          relations.push(relation);
        }
      } else {
        i++;
      }
    }
  }
  static resolve1ToN(relations) {
    for (let relation of relations) {
      if (SolvesForeignKey.is1ToN(relation)) {
        SolvesForeignKey.propagateKey(
          relation.getSourceNode(),
          relation.getSourceCardinality(),
          relation.getTargetNode(),
          relation
        );
      } else if (SolvesForeignKey.isNTo1(relation)) {
        SolvesForeignKey.propagateKey(
          relation.getTargetNode(),
          relation.getTargetCardinality(),
          relation.getSourceNode(),
          relation
        );
      }
    }
  }
  static is1ToN(relation) {
    if ((relation.getSourceCardinality() === "0..1" /* C0_1 */ || relation.getSourceCardinality() === "1" /* C1 */) && (relation.getTargetCardinality() === "0..*" /* C0_N */ || relation.getTargetCardinality() === "1..*" /* C1_N */))
      return true;
    else
      return false;
  }
  static isNTo1(relation) {
    if ((relation.getTargetCardinality() === "0..1" /* C0_1 */ || relation.getTargetCardinality() === "1" /* C1 */) && (relation.getSourceCardinality() === "0..*" /* C0_N */ || relation.getSourceCardinality() === "1..*" /* C1_N */))
      return true;
    else
      return false;
  }
  static is1To1(relation) {
    if ((relation.getSourceCardinality() === "0..1" /* C0_1 */ || relation.getSourceCardinality() === "1" /* C1 */) && (relation.getTargetCardinality() === "0..1" /* C0_1 */ || relation.getTargetCardinality() === "1" /* C1 */))
      return true;
    else
      return false;
  }
  static propagateKey(from, cardinalityFrom, to, relation) {
    let fk = from.getPrimaryKey().clone(from.getPrimaryKey().getName() + "_" + Increment.getNext());
    fk.setForeignNodeID(from.getId(), relation);
    if (cardinalityFrom === "0..1" /* C0_1 */ || cardinalityFrom === "0..*" /* C0_N */) {
      fk.setNullable(true);
    } else {
      fk.setNullable(false);
    }
    if (to.existsPropertyName(fk.getName())) {
      fk.setName(SolvesForeignKey.getNewFKName(fk, relation, from));
    }
    if (SolvesForeignKey.is1To1(relation)) {
      fk.setPrimaryKey(true);
      fk.setPKAutoIncrement(false);
      to.addPropertyAt(0, fk);
    } else {
      fk.setPrimaryKey(false);
      to.addPropertyAt(1, fk);
    }
  }
  static getNewFKName(prop, relation, nodeFrom) {
    let result;
    let associationName;
    result = prop.getName().substring(0, prop.getName().length - 3);
    associationName = relation.getNodeNameRemoved();
    if (associationName == null) {
      associationName = nodeFrom.getName();
    }
    associationName = associationName.trim();
    if (associationName !== "") {
      result += associationName.substring(0, 1).toUpperCase() + associationName.substring(1);
    }
    return result + "_id";
  }
};

// src/libs/ontouml2db/convert/SolvesName.ts
var SolvesName = class {
  static solves(graph) {
    for (let node of graph.getNodes()) {
      node.setName(SolvesName.adjust(node.getName()));
      for (let property of node.getProperties()) {
        property.setName(SolvesName.adjust(property.getName()));
        if (property instanceof NodePropertyEnumeration) {
          SolvesName.adjustEnumerationValues(property);
        }
      }
    }
  }
  static adjustEnumerationValues(enumeration) {
    let values = enumeration.getValues();
    for (let index = 0; index < values.length; index++) {
      values[index] = values[index].toUpperCase();
    }
  }
  static adjust(name) {
    let newName = "";
    let index = 0;
    while (index < name.length && name.charAt(index) >= "A" && name.charAt(index) <= "Z") {
      newName += name.charAt(index);
      index++;
    }
    while (index < name.length) {
      if (name.charAt(index) >= "A" && name.charAt(index) <= "Z") {
        newName += "_";
      }
      newName += name.charAt(index);
      index++;
    }
    return newName.toLowerCase();
  }
};

// src/libs/ontouml2db/convert/SolvesMultivaluedProperty.ts
var SolvesMultivaluedProperty = class {
  static solves(graph, tracker) {
    let idToRemove = [];
    for (let node of graph.getNodes()) {
      idToRemove.length = 0;
      for (let property of node.getProperties()) {
        if (property.isMultivalued()) {
          SolvesMultivaluedProperty.transformPropertyIntoNode(property, node, graph, tracker);
          idToRemove.push(property.getID());
        }
      }
      while (idToRemove.length !== 0) {
        node.removeProperty(idToRemove.pop());
      }
    }
  }
  static transformPropertyIntoNode(property, node, graph, tracker) {
    let newNode;
    let relation;
    newNode = new Node(Increment.getNext().toString(), property.getName(), "mixin" /* MIXIN */);
    newNode.addProperty(new NodeProperty(property.getID(), property.getName(), property.getDataType(), false, false));
    relation = new GraphRelation(
      Increment.getNext().toString(),
      "has" + property.getName() + "_" + Increment.getNext().toString(),
      node,
      "1" /* C1 */,
      newNode,
      "0..*" /* C0_N */
    );
    newNode.addRelation(relation);
    graph.addNode(newNode);
    graph.addRelation(relation);
    SolvesMultivaluedProperty.doTracking(node, newNode, property, graph, tracker);
  }
  static doTracking(tracedNode, joinedNode, property, graph, tracker) {
    let sourceNodes = graph.getSourceNodes();
    sourceNodes.forEach((tracerNode) => {
      if (tracerNode.existsProperty(property)) {
        if (property.isNullable()) {
          tracker.addJoinedNode(tracerNode, tracedNode, joinedNode, false);
        } else {
          tracker.addJoinedNode(tracerNode, tracedNode, joinedNode, true);
        }
      }
    });
  }
};

// src/libs/ontouml2db/convert/SolvesCardinalityNtoN.ts
var SolvesCardinalityNtoN = class {
  static solves(graph, tracker) {
    let relations = graph.getAssociations().filter(this.filterNtoN);
    for (let relation of relations) {
      SolvesCardinalityNtoN.resolveNtoN(relation, graph, tracker);
    }
  }
  static resolveNtoN(relation, graph, tracker) {
    let newNode = new Node(
      Increment.getNext().toString(),
      relation.getSourceNode().getName() + relation.getTargetNode().getName(),
      "mixin" /* MIXIN */
    );
    let nodeName = SolvesCardinalityNtoN.getAssociationName(relation);
    newNode.setAssociationNameNtoN(nodeName);
    let newRelation1 = new GraphRelation(
      Increment.getNext().toString(),
      //ID
      "has_" + relation.getSourceNode().getName(),
      //name
      relation.getSourceNode(),
      //sourceNode
      "1" /* C1 */,
      //sourceCardinality
      newNode,
      //targetNode
      "0..*" /* C0_N */
    );
    let newRelation2 = new GraphRelation(
      Increment.getNext().toString(),
      //ID
      "has_" + relation.getTargetNode().getName(),
      //name
      relation.getTargetNode(),
      //sourceNode
      "1" /* C1 */,
      //sourceCardinality
      newNode,
      //targetNode
      "0..*" /* C0_N */
    );
    newNode.addRelation(newRelation1);
    newNode.addRelation(newRelation2);
    relation.getSourceNode().addRelation(newRelation1);
    relation.getTargetNode().addRelation(newRelation2);
    graph.addNode(newNode);
    graph.addRelation(newRelation1);
    graph.addRelation(newRelation2);
    graph.removeAssociation(relation);
    SolvesCardinalityNtoN.adjustTraceability(tracker, relation, newNode);
  }
  static filterNtoN(element) {
    if (!(element instanceof GraphRelation))
      return false;
    if ((element.getSourceCardinality() === "0..*" /* C0_N */ || element.getSourceCardinality() === "1..*" /* C1_N */) && (element.getTargetCardinality() === "0..*" /* C0_N */ || element.getTargetCardinality() === "1..*" /* C1_N */))
      return true;
    else
      return false;
  }
  static getAssociationName(relation) {
    let associationName;
    if (relation.getName() !== null) {
      associationName = relation.getName();
    } else {
      associationName = relation.getSourceNode().getName().substring(0, 1).toLowerCase() + relation.getSourceNode().getName().substring(1) + "Has" + relation.getTargetNode().getName();
    }
    return associationName;
  }
  static adjustTraceability(tracker, relation, newNode) {
    tracker.createNewTracerForTheSourceNode(newNode);
    if (!this.existsEnumAtRelation(relation))
      return;
    let enumNode = this.getEnumNode(relation);
    tracker.addJoinedNodeToApplyFilter(enumNode, newNode);
  }
  static existsEnumAtRelation(relation) {
    if (relation.getSourceNode().getStereotype() === "enumeration" /* ENUMERATION */ || relation.getTargetNode().getStereotype() === "enumeration" /* ENUMERATION */)
      return true;
    else
      return false;
  }
  static getEnumNode(relation) {
    if (relation.getSourceNode().getStereotype() === "enumeration" /* ENUMERATION */) {
      return relation.getSourceNode();
    }
    if (relation.getTargetNode().getStereotype() === "enumeration" /* ENUMERATION */) {
      return relation.getTargetNode();
    }
    return null;
  }
};

// src/libs/ontouml2db/convert/ToEntityRelationship.ts
var ToEntityRelationship = class {
  static run(graph, tracker, applyStandardizeNames, enumFiledToLookupTable) {
    SolvesMultivaluedProperty.solves(graph, tracker);
    SolvesEnumeration.solves(graph, tracker, enumFiledToLookupTable);
    SolvesCardinalityNtoN.solves(graph, tracker);
    SolvesPrimaryKey.solves(graph);
    SolvesForeignKey.solves(graph);
    if (applyStandardizeNames)
      SolvesName.solves(graph);
  }
};

// src/libs/ontouml2db/supported_database/Generic.ts
var Generic = class {
  constructor() {
    this.types = /* @__PURE__ */ new Map();
    this.types.set("boolean", "BIT");
    this.types.set("byte", "BIT(8)");
    this.types.set("char", "CHAR(3)");
    this.types.set("double", "DOUBLE");
    this.types.set("float", "FLOAT");
    this.types.set("int", "INTEGER");
    this.types.set("long", "BIGINT");
    this.types.set("short", "SMALLINT");
    this.types.set("string", "VARCHAR(20)");
  }
  getSchema(graph) {
    let ddl = "";
    ddl = this.createTables(graph);
    ddl += this.createForeignKeys(graph);
    return ddl;
  }
  // ************************************************************************
  createTables(graph) {
    let ddl = "";
    for (let node of graph.getNodes()) {
      ddl += this.createTable(node);
    }
    return ddl;
  }
  createTable(node) {
    let ddl = "";
    let firstColumn = true;
    ddl += this.createTableDescription() + node.getName() + " ( ";
    for (let property of node.getProperties()) {
      ddl += this.createColumn(property, firstColumn);
      firstColumn = false;
    }
    ddl += this.getConstraintTable(node);
    ddl += "\n); \n\n";
    return ddl;
  }
  createTableDescription() {
    return "CREATE TABLE ";
  }
  getConstraintTable(node) {
    return "";
  }
  createColumn(property, firstColumn) {
    let ddl = "";
    let comma = "";
    let columnName = "";
    let columnType = "";
    let primaryKey = "";
    let nullable = "";
    let defaultValue = "";
    if (firstColumn)
      comma = "\n" + Util.getSpaces("", 8);
    else
      comma = "\n," + Util.getSpaces(",", 8);
    columnName = property.getName() + Util.getSpaces(property.getName(), 23);
    columnType = this.getColumnName(property);
    primaryKey = this.getPKDescription(property);
    nullable = this.getNullable(property);
    defaultValue = this.getDefaultValue(property);
    ddl += comma;
    ddl += columnName;
    ddl += columnType;
    ddl += nullable;
    ddl += primaryKey;
    ddl += defaultValue;
    return ddl;
  }
  getPKDescription(property) {
    if (property.isPrimaryKey())
      return " PRIMARY KEY";
    else
      return "";
  }
  getNullable(property) {
    if (property.isNullable())
      return " NULL";
    else
      return " NOT NULL";
  }
  getColumnName(property) {
    return this.getColumnType(property);
  }
  getDefaultValue(property) {
    if (property.getDefaultValue() !== null)
      return (" DEFAULT " + property.getDefaultValue()).toUpperCase();
    else
      return "";
  }
  getColumnType(property) {
    let ddl = "";
    let first;
    if (property instanceof NodePropertyEnumeration) {
      ddl = "ENUM(";
      first = true;
      for (let value of property.getValues()) {
        if (first) {
          ddl += "'" + value + "'";
          first = false;
        } else {
          ddl += ",'" + value + "'";
        }
      }
      ddl += ")";
    } else {
      if (this.types.has(property.getDataType())) {
        ddl = this.types.get(property.getDataType());
      } else {
        ddl = property.getDataType().toUpperCase();
      }
    }
    ddl += Util.getSpaces(ddl, 13);
    return ddl;
  }
  // ***************************************************************************
  createForeignKeys(graph) {
    let ddl = "";
    for (let node of graph.getNodes()) {
      for (let property of node.getProperties()) {
        if (property.isForeignKey()) {
          ddl += "\n\nALTER TABLE ";
          ddl += node.getName();
          ddl += " ADD FOREIGN KEY ( ";
          ddl += property.getName();
          ddl += " ) REFERENCES ";
          ddl += graph.getNodeById(property.getForeignKeyNodeID()).getName();
          ddl += " ( ";
          ddl += graph.getNodeById(property.getForeignKeyNodeID()).getPKName();
          ddl += " );";
        }
      }
    }
    return ddl;
  }
  //*****************************************************************************************
  getConnectionToProtege(options) {
    let stringConnection = "";
    let today = /* @__PURE__ */ new Date();
    stringConnection += "#Ontouml2DB " + today.toDateString() + "\n";
    stringConnection += "jdbc.url=" + options.hostName + "/" + options.databaseName + "\n";
    stringConnection += "jdbc.driver=[PUT_DRIVE_HERE]\n";
    stringConnection += "jdbc.user=" + options.userConnection + "\n";
    stringConnection += "jdbc.name=ontouml2-db00-ufes-nemo-000000000001\n";
    stringConnection += "jdbc.password=" + options.passwordConnection + "\n";
    return stringConnection;
  }
};

// src/libs/ontouml2db/supported_database/H2.ts
var H2 = class extends Generic {
  constructor() {
    super();
    this.types.set("boolean", "BOOLEAN");
    this.types.set("byte", "BINARY(8)");
  }
  getSchema(graph) {
    let ddl = "";
    ddl = this.createTables(graph);
    ddl += this.createForeignKeys(graph);
    return ddl;
  }
  createTableDescription() {
    return "CREATE TABLE IF NOT EXISTS ";
  }
  getPKDescription(property) {
    if (property.isPrimaryKey()) {
      if (property.isPrimaryKeyAutoIncrement())
        return " IDENTITY PRIMARY KEY";
      return " PRIMARY KEY";
    }
    return "";
  }
  //*****************************************************************************************
  getConnectionToProtege(options) {
    let stringConnection = "";
    let today = /* @__PURE__ */ new Date();
    stringConnection += "#Ontouml2DB " + today.toDateString() + "\n";
    stringConnection += "jdbc.url=jdbc:h2:tcp://" + options.hostName + "/" + options.databaseName + "\n";
    stringConnection += "jdbc.driver=org.h2.Driver\n";
    stringConnection += "jdbc.user=" + options.userConnection + "\n";
    stringConnection += "jdbc.name=ontouml2-db00-ufes-nemo-000000000001\n";
    stringConnection += "jdbc.password=" + options.passwordConnection + "\n";
    return stringConnection;
  }
};

// src/libs/ontouml2db/supported_database/MySql.ts
var MySql = class extends Generic {
  constructor() {
    super();
    this.types.set("boolean", "TINYINT(1)");
    this.types.set("byte", "BINARY(8)");
  }
  createTableDescription() {
    return "CREATE TABLE IF NOT EXISTS ";
  }
  getPKDescription(property) {
    if (property.isPrimaryKey()) {
      if (property.isPrimaryKeyAutoIncrement())
        return " AUTO_INCREMENT PRIMARY KEY";
      return " PRIMARY KEY";
    }
    return "";
  }
  getConnectionToProtege(options) {
    let stringConnection = "";
    let today = /* @__PURE__ */ new Date();
    stringConnection += "#Ontouml2DB " + today.toDateString() + "\n";
    stringConnection += "jdbc.url=jdbc:mysql:tcp://" + options.hostName + "/" + options.databaseName + "\n";
    stringConnection += "jdbc.driver=org.mysql.Driver\n";
    stringConnection += "jdbc.user=" + options.userConnection + "\n";
    stringConnection += "jdbc.name=ontouml2-db00-ufes-nemo-000000000001\n";
    stringConnection += "jdbc.password=" + options.passwordConnection + "\n";
    return stringConnection;
  }
};

// src/libs/ontouml2db/supported_database/Oracle.ts
var Oracle = class extends Generic {
  constructor() {
    super();
    this.types.set("boolean", "CHAR(1)");
    this.types.set("byte", "RAW(1)");
    this.types.set("char", "CHAR(3)");
    this.types.set("double", "NUMBER(20,4)");
    this.types.set("float", "NUMBER(10,2)");
    this.types.set("int", "NUMBER(10,0)");
    this.types.set("long", "NUMBER(20,0)");
    this.types.set("short", "NUMBER(3,0)");
    this.types.set("string", "VARCHAR2(20)");
  }
  createTableDescription() {
    return "CREATE TABLE ";
  }
  getPKDescription(property) {
    if (property.isPrimaryKey() && property.isPrimaryKeyAutoIncrement()) {
      return " GENERATED ALWAYS AS IDENTITY ";
    }
    return "";
  }
  getConstraintTable(node) {
    return "\n," + Util.getSpaces(",", 8) + "CONSTRAINT pk_" + node.getName() + " PRIMARY KEY( " + node.getPrimaryKey().getName() + " )";
  }
  getConnectionToProtege(options) {
    let stringConnection = "";
    let today = /* @__PURE__ */ new Date();
    stringConnection += "#Ontouml2DB " + today.toDateString() + "\n";
    stringConnection += "jdbc.url=jdbc:oracle:tcp://" + options.hostName + "/" + options.databaseName + "\n";
    stringConnection += "jdbc.driver=org.oracle.Driver\n";
    stringConnection += "jdbc.user=" + options.userConnection + "\n";
    stringConnection += "jdbc.name=ontouml2-db00-ufes-nemo-000000000001\n";
    stringConnection += "jdbc.password=" + options.passwordConnection + "\n";
    return stringConnection;
  }
};

// src/libs/ontouml2db/supported_database/Postgre.ts
var Postgre = class extends Generic {
  constructor() {
    super();
    this.types.set("boolean", "BOOLEAN");
    this.types.set("byte", "BYTEA(4)");
    this.types.set("double", "FLOAT(8)");
    this.types.set("float", "FLOAT(4)");
    this.types.set("int", "INTEGER");
  }
  createTableDescription() {
    return "CREATE TABLE IF NOT EXISTS ";
  }
  getPKDescription(property) {
    if (property.isPrimaryKey())
      return " PRIMARY KEY";
    else
      return "";
  }
  getColumnType(property) {
    let ddl = "";
    let first;
    if (property instanceof NodePropertyEnumeration) {
      ddl = "ENUM(";
      first = true;
      for (let value of property.getValues()) {
        if (first) {
          ddl += "'" + value + "'";
          first = false;
        } else {
          ddl += ",'" + value + "'";
        }
      }
      ddl += ")";
    } else {
      if (property.isPrimaryKey()) {
        ddl += "SERIAL ";
      } else {
        if (this.types.has(property.getDataType())) {
          ddl = this.types.get(property.getDataType());
        } else {
          ddl = property.getDataType().toUpperCase();
        }
      }
    }
    ddl += Util.getSpaces(ddl, 13);
    return ddl;
  }
  /*
    createForeignKeys(graph: Graph): string {
      let ddl: string = '';
  
      for (let node of graph.getNodes()) {
        for (let property of node.getProperties()) {
          if (property.isForeignKey()) {
            ddl += '\n\nALTER TABLE ';
            ddl += node.getName();
            ddl += ' ADD CONSTRAINT ';
            ddl +=
              'fk_' +
              node.getName() +
              '_x_' +
              graph.getNodeById(property.getForeignKeyNodeID()).getName() +
              '_' +
              Increment.getNext().toString() +
              ' ';
            ddl += '\nFOREIGN KEY ( ';
            ddl += property.getName();
            ddl += ' ) REFERENCES ';
            ddl += graph.getNodeById(property.getForeignKeyNodeID()).getName();
            ddl += ' ( ';
            ddl += graph.getNodeById(property.getForeignKeyNodeID()).getPKName();
            ddl += ' );';
          }
        }
      }
      return ddl;
    }
  */
  getConnectionToProtege(options) {
    let stringConnection = "";
    let today = /* @__PURE__ */ new Date();
    stringConnection += "#Ontouml2DB " + today.toDateString() + "\n";
    stringConnection += "jdbc.url=jdbc:postgre:tcp://" + options.hostName + "/" + options.databaseName + "\n";
    stringConnection += "jdbc.driver=org.postgre.Driver\n";
    stringConnection += "jdbc.user=" + options.userConnection + "\n";
    stringConnection += "jdbc.name=ontouml2-db00-ufes-nemo-000000000001\n";
    stringConnection += "jdbc.password=" + options.passwordConnection + "\n";
    return stringConnection;
  }
};

// src/libs/ontouml2db/supported_database/SqlServer.ts
var SqlServer = class extends Generic {
  constructor() {
    super();
    this.types.set("boolean", "BIT");
    this.types.set("byte", "BINARY(8)");
    this.types.set("double", "REAL");
    this.types.set("float", "FLOAT(53)");
  }
  createTableDescription() {
    return "CREATE TABLE ";
  }
  getPKDescription(property) {
    if (property.isPrimaryKey()) {
      if (property.isPrimaryKeyAutoIncrement())
        return " IDENTITY(1,1) PRIMARY KEY";
      return " PRIMARY KEY";
    }
    return "";
  }
  getConnectionToProtege(options) {
    let stringConnection = "";
    let today = /* @__PURE__ */ new Date();
    stringConnection += "#Ontouml2DB " + today.toDateString() + "\n";
    stringConnection += "jdbc.url=jdbc:sqlserver:tcp://" + options.hostName + "/" + options.databaseName + "\n";
    stringConnection += "jdbc.driver=org.sqlserver.Driver\n";
    stringConnection += "jdbc.user=" + options.userConnection + "\n";
    stringConnection += "jdbc.name=ontouml2-db00-ufes-nemo-000000000001\n";
    stringConnection += "jdbc.password=" + options.passwordConnection + "\n";
    return stringConnection;
  }
};

// src/libs/ontouml2db/convert/ToRelationalSchema.ts
var ToRelationalSchema = class {
  static getSchema(graph, dbms) {
    let targetDBMS;
    switch (dbms) {
      case "H2" /* H2 */: {
        targetDBMS = new H2();
        break;
      }
      case "MySql" /* MYSQL */: {
        targetDBMS = new MySql();
        break;
      }
      case "Oracle" /* ORACLE */: {
        targetDBMS = new Oracle();
        break;
      }
      case "Postgre" /* POSTGRE */: {
        targetDBMS = new Postgre();
        break;
      }
      case "SqlServer" /* SQLSERVER */: {
        targetDBMS = new SqlServer();
        break;
      }
      default:
        targetDBMS = new Generic();
        break;
    }
    return targetDBMS.getSchema(graph);
  }
};

// src/libs/ontouml2db/Ontouml2DbOptions.ts
var Ontouml2DbOptions = class {
  constructor(base = {}) {
    this.mappingStrategy = "One Table per Kind" /* ONE_TABLE_PER_KIND */;
    this.targetDBMS = "Generic Schema" /* GENERIC_SCHEMA */;
    this.isStandardizeNames = true;
    this.baseIri = "https://example.com";
    this.generateSchema = true;
    this.generateConnection = false;
    this.enumFieldToLookupTable = true;
    Object.keys(base).forEach((key) => this[key] = base[key]);
  }
};

// src/libs/ontouml2db/tracker/Filter.ts
var Filter = class {
  constructor(sourceNode, property, value, belongsToOtherNode) {
    this.id = Increment.getNext().toString();
    this.sourceNode = sourceNode;
    this.filterProperty = property;
    this.value = value;
    this.nodeToApplyFilter = belongsToOtherNode;
    this.chainOfNodesToApplyFilter = [];
    if (belongsToOtherNode !== null) {
      this.chainOfNodesToApplyFilter.push(belongsToOtherNode);
    }
  }
  /**
   * Return the filter identifier.
   */
  getId() {
    return this.id;
  }
  /**
   * Informs the class in which the rule will be applied.
   */
  setSourceNode(node) {
    this.sourceNode = node;
  }
  /**
   * Returns the class in which the rule will be applied.
   */
  getSourceNode() {
    return this.sourceNode;
  }
  /**
   * Informs the property to be filtered.
   * @param property
   */
  setProperty(property) {
    this.filterProperty = property;
  }
  /**
   * Returns the property to be filtered.
   */
  getProperty() {
    return this.filterProperty;
  }
  /**
   * Informs the value of the property.
   * @param value
   */
  setValue(value) {
    this.value = value;
  }
  /**
   * Return the value of the property.
   */
  getValue() {
    return this.value;
  }
  /**
   * Informs that the filter must be applied in another class. This occurs when the
   * property to be filtered has been transferred to another class, requiring a join.
   * If the given node is null, it will have the same behavior as removeNodeToApplayFilter()
   * methodo.
   *
   * @param node
   */
  setNodeToApplyFilter(node) {
    if (node !== null) {
      this.nodeToApplyFilter = node;
      this.chainOfNodesToApplyFilter.push(node);
    } else {
      this.removeNodeToApplyFilter();
    }
  }
  /**
   * Informs that the filter will be applied to the node it belongs to.
   */
  removeNodeToApplyFilter() {
    this.nodeToApplyFilter = null;
    this.chainOfNodesToApplyFilter = [];
  }
  /**
   * Adds an intermediate node to perform the filter. The tracking process will make joins
   * from the source node until it arrives at the node to be carried out the filter. The
   * node is added at the beginning of the chain, that is, the node to be filtered is the
   * last one in the chain.
   * @param node
   */
  addJoinedNodeToDoFilter(node) {
    this.chainOfNodesToApplyFilter.unshift(node);
  }
  /**
   * Returns the linked class where the filter will be applied.
   */
  //getBelongToOtherNode(): Node {
  getNodeToApplyFilter() {
    return this.nodeToApplyFilter;
  }
  /**
   * Informs if the nodo is the same as the filter will be applied.
   * @param node
   * @returns
   */
  isNodeToApplyFilter(node) {
    if (this.nodeToApplyFilter == null) {
      return false;
    }
    if (this.nodeToApplyFilter.getId() === node.getId())
      return true;
    else
      return false;
  }
  /**
   * Returns the nodes that make the connection between the tracked node and the node
   * that will be applied to the filter (including).
   *
   * @returns
   */
  getChainOfNodesToApplyFilter() {
    return this.chainOfNodesToApplyFilter;
  }
  /**
   * Informs if the filter will be applied on the informed property.
   *
   * @param property
   * @returns
   */
  isFiltredByProperty(property) {
    if (this.filterProperty.getID() === property.getID()) {
      return true;
    }
    return false;
  }
  toString() {
    let msg;
    msg = "[" + this.filterProperty.getName() + " = " + this.value;
    if (this.nodeToApplyFilter !== null) {
      for (let node of this.chainOfNodesToApplyFilter) {
        msg += " linked to " + node.getName();
      }
    }
    msg += " (" + this.sourceNode.getName() + ") ";
    msg += "] ";
    return msg;
  }
};

// src/libs/ontouml2db/tracker/TracedNode.ts
var TracedNode = class {
  //true do a join; false do a left join
  constructor(node) {
    this.nodes = [];
    this.nodes.push(node);
    this.innerJoin = true;
  }
  /**
   * Return the nodes traced. The result is a clone of the original structure.
   *
   * @returns
   */
  getNodes() {
    return [...this.nodes];
  }
  /**
   * Returns the main node of traced nodes. The main node is the first node added.
   * @returns
   */
  getMainNode() {
    if (this.nodes.length > 0) {
      return this.nodes[0];
    }
    return null;
  }
  /**
   * Informs if the node is traced.
   *
   * @param node
   * @returns
   */
  isNodeTraced(node) {
    let result = false;
    this.nodes.forEach((value) => {
      if (value.getId() === node.getId()) {
        result = true;
      }
    });
    return result;
  }
  /**
   * Adds a new node belonging to the first node added, that is, when the
   * main node is divided into other nodes.
   *
   * @param joinedNode
   * @param innerJoin
   */
  addJoinedNode(joinedNode, innerJoin) {
    this.nodes.push(joinedNode);
    this.innerJoin = innerJoin;
  }
  /**
   * Returns the property of the given ID.
   *
   * @param id
   * @returns
   */
  getPropertyByID(id) {
    for (let node of this.nodes) {
      for (let property of node.getProperties()) {
        if (property.getID() === id) {
          return property;
        }
      }
    }
    return null;
  }
  /**
   * Returns the FKs properties of the main node. The main node is the first node added.
   * @returns
   */
  getFKPropertiesOfMainNode() {
    let array = [];
    let node = this.getMainNode();
    for (let property of node.getProperties()) {
      if (property.isForeignKey()) {
        array.push(property);
      }
    }
    return array;
  }
  /**
   * Returns the node of the given property ID.
   *
   * @param id
   * @returns
   */
  getNodeProperty(id) {
    for (let node of this.nodes) {
      for (let property of node.getProperties()) {
        if (property.getID() === id) {
          return node;
        }
      }
    }
    return null;
  }
  /**
   * Informs if there is a node traced to the given node name.
   *
   * @param nodeName
   * @returns
   */
  existsTracedNodeByName(nodeName) {
    for (let node of this.nodes) {
      if (node.getName() === nodeName) {
        return true;
      }
    }
    return false;
  }
  toString() {
    let msg = "";
    let first = true;
    for (let node of this.nodes) {
      if (first) {
        msg += node.getName();
        first = false;
      } else {
        if (this.innerJoin) {
          msg += " JOIN " + node.getName();
        } else {
          msg += " LEFT JOIN " + node.getName();
        }
      }
    }
    return msg;
  }
};

// src/libs/ontouml2db/tracker/Tracer.ts
var Tracer = class {
  constructor(newNode) {
    this.sourceNode = newNode;
    this.targetNodes = /* @__PURE__ */ new Map();
    this.filters = [];
  }
  // /**
  //  * Returns the tracked nodes from the original node.
  //  */
  // getTargetNodes(): Node[] {
  //   let nodes: Node[] = [];
  //   for(let tracedNode of this.targetNodes.values()){
  //     nodes = nodes.concat(tracedNode.getNodes());
  //   }
  //   return nodes;
  // }
  /**
   * Returns the tracked nodes from the original node.
   */
  getTargetNodes() {
    return this.targetNodes;
  }
  /**
   * Adds a new node to be tracked from the original node.
   * @param newNode. Node to be tracked.
   */
  addTargetNode(newNode) {
    this.targetNodes.set(newNode.getId(), new TracedNode(newNode));
  }
  /**
   * Informs that a join between the traced node and another node must be performed.
   *
   * @param tracedNode
   * @param joinedNode
   * @param innerJoin
   */
  addJoinedNode(tracedNode, joinedNode, innerJoin) {
    for (let trace of this.targetNodes.values()) {
      if (trace.isNodeTraced(tracedNode)) {
        trace.addJoinedNode(joinedNode, innerJoin);
      }
    }
  }
  /**
   * Informs if the node is a tracer node.
   * @param id. Identifier to be verified.
   */
  existsTraceFor(node) {
    return this.targetNodes.has(node.getId());
  }
  /**
   * Informs if the node is traced from the source node.
   * @param node
   * @returns
   */
  isNodeTraced(node) {
    for (let tracedNode of this.targetNodes.values()) {
      if (tracedNode.isNodeTraced(node)) {
        return true;
      }
    }
    return false;
  }
  /**
   * Removes the tracked node. If the node is tracked, it will be removed and will
   * return true. If the node is not tracked, this method do nothing and return false.
   * @param id Node identifier to be removed
   */
  removeTrace(node) {
    if (this.targetNodes.has(node.getId())) {
      this.targetNodes.delete(node.getId());
      return true;
    }
    return false;
  }
  /**
   * Returns the tracker node.
   *
   * @return A Node in the target graph.
   */
  getSourceNode() {
    return this.sourceNode;
  }
  /**
   * Informs a node to be tracked in the target graph.
   *
   * @param node. Node to be tracked.
   */
  setSourceNode(node) {
    this.sourceNode = node;
  }
  /**
   * Create end put a new filter in the tracer.
   *
   * @param sourceNode
   * @param property
   * @param value
   * @param propertyBelongsToOtherNode
   */
  newFilter(sourceNode, property, value, propertyBelongsToOtherNode) {
    this.filters.push(new Filter(sourceNode, property, value, propertyBelongsToOtherNode));
  }
  /**
   * Adds a filter in the tracer if not exists
   * @param filter
   */
  addFilter(filter) {
    if (!this.existsFilter(filter)) {
      this.filters.push(filter);
    }
  }
  /**
   * Checks whether the filter exists in the tracer.
   *
   * @param newFilter
   */
  existsFilter(newFilter) {
    for (let filter of this.filters) {
      if (newFilter.getId() === filter.getId()) {
        return true;
      }
    }
    return false;
  }
  /**
   * Returns the filter of the tracer.
   */
  getFilters() {
    return this.filters;
  }
  /**
   * Changes the class in which the rule will be applied.
   *
   * @param fromNode
   * @param toNode
   */
  updateSourceRulesToFrom(fromNode, toNode) {
    for (let filter of this.filters) {
      if (filter.getSourceNode().getId() === fromNode.getId()) {
        filter.setSourceNode(toNode);
      }
    }
  }
  isNodeToApplyFilter(node) {
    for (let filter of this.filters) {
      if (filter.isNodeToApplyFilter(node)) {
        return true;
      }
    }
    return false;
  }
  /**
   * Informs that it will be necessary to make a junction with one more node for the
   * filter to be made in the desired node from the tracked node.
   *
   * @param nodoFilter
   * @param joinedNode
   */
  addJoinedNodeToDoFilter(nodoFilter, joinedNode) {
    for (let filter of this.filters) {
      if (filter.isNodeToApplyFilter(nodoFilter)) {
        filter.addJoinedNodeToDoFilter(joinedNode);
      }
    }
  }
  /**
   * Change the field in which the filter will be performed.
   *
   * @param oldProperty
   * @param newProperty
   */
  changeFieldToFilter(oldProperty, newProperty) {
    for (let filter of this.filters) {
      if (filter.getProperty().getID() === oldProperty.getID()) {
        filter.setProperty(newProperty);
      }
    }
  }
  /**
   * Informs if the informed property is used in any filter.
   *
   * @param property
   * @returns
   */
  isFiltredByProperty(property) {
    for (let filter of this.filters) {
      if (filter.isFiltredByProperty(property)) {
        return true;
      }
    }
    return false;
  }
  /**
   * Removes the property belongs to another Node.
   *
   * @param node
   */
  removeNodeToApplyFilter(node) {
    for (let filter of this.filters) {
      if (filter.getNodeToApplyFilter() !== null) {
        if (filter.getNodeToApplyFilter().getId() === node.getId()) {
          filter.removeNodeToApplyFilter();
        }
      }
    }
  }
  /**
   * Informs if there is a node tracer between the given source and target node name.
   *
   * @param sourceNodeName
   * @param targetNodeName
   * @returns
   */
  existsTracerByName(sourceNodeName, targetNodeName) {
    if (this.sourceNode.getName() === sourceNodeName) {
      for (let tracedNode of this.targetNodes.values()) {
        if (tracedNode.existsTracedNodeByName(targetNodeName)) {
          return true;
        }
      }
    }
    return false;
  }
  toString() {
    let msg = this.sourceNode.getName() + " -> ";
    for (let tracedNode of this.targetNodes.values()) {
      msg += tracedNode.toString();
    }
    this.filters.forEach((filter) => {
      msg += filter.toString();
    });
    return msg;
  }
};

// src/libs/ontouml2db/tracker/Tracker.ts
var Tracker = class {
  constructor(graph) {
    this.traceMap = /* @__PURE__ */ new Map();
    for (let node of graph.getNodes()) {
      this.createNewTracerForTheSourceNode(node);
    }
  }
  /**
   * Creates a new tracer for the source node, that is, adds a new node to be tracked.
   * @param node
   */
  createNewTracerForTheSourceNode(node) {
    let trace;
    trace = new Tracer(node.clone());
    trace.addTargetNode(node);
    this.traceMap.set(node.getId(), trace);
  }
  /**
   * Returns the tracers.
   */
  getTraceMap() {
    return this.traceMap;
  }
  /**
   * Causes the originating node to track a new node.
   * @param fromID
   * @param toID
   * @param property
   * @param value
   * @param propertyBelongsToTheNode
   */
  moveTraceFromTo(from, to, property, value, propertyBelongsToTheNode) {
    this.addFilterAtNode(from, to, property, value, propertyBelongsToTheNode);
    this.copyTracesFromTo(from, to);
    this.removeNodeFromTraces(from);
  }
  /**
   * It just copies the trace from the source node to the destination node.
   * @param fromID
   * @param toID
   */
  copyTracesFromTo(from, to) {
    let trace = this.traceMap.get(from.getId());
    trace.addTargetNode(to);
    for (trace of this.traceMap.values()) {
      if (trace.existsTraceFor(from)) {
        trace.addTargetNode(to);
        trace.updateSourceRulesToFrom(from, to);
      }
    }
  }
  /**
   * Deletes a node from all tracers.
   * @param id
   */
  removeNodeFromTraces(node) {
    for (let trace of this.traceMap.values()) {
      trace.removeTrace(node);
    }
  }
  /**
   * Adds a new filte to the node.
   * @param id
   * @param mappedToTheNode
   * @param property
   * @param value
   * @param belongsToTheNode
   */
  addFilterAtNode(from, mappedToTheNode, property, value, belongsToTheNode) {
    let trace = this.traceMap.get(from.getId());
    trace.newFilter(mappedToTheNode, property, value, belongsToTheNode);
    let nextTrace = this.traceMap.get(mappedToTheNode.getId());
    this.putCascateRules(trace, nextTrace);
    this.putRulesInFlatteningClasses(trace);
  }
  /**
   * Adds to the tracker all the rules of the tracked node, and of your
   * trackers until there are no more tracks.
   */
  putCascateRules(sourcelTrace, currentTrace) {
    let nextTrace = this.traceMap.get(currentTrace.getSourceNode().getId());
    if (sourcelTrace.getSourceNode().getId() !== currentTrace.getSourceNode().getId()) {
      for (let filter of currentTrace.getFilters()) {
        sourcelTrace.addFilter(filter);
      }
    }
    if (currentTrace.getSourceNode().getId() !== nextTrace.getSourceNode().getId()) {
      this.putCascateRules(sourcelTrace, nextTrace);
    }
  }
  /**
   * Checks whether the current node is tracked by any source node. If so, add the
   * rules from the source node to the current node. This is important when a class
   * is flattened and there are selection rules in the target class.
   * @param originalTracer
   */
  putRulesInFlatteningClasses(sourceTracer) {
    let id = sourceTracer.getSourceNode().getId();
    for (let tracer of this.traceMap.values()) {
      if (tracer.getSourceNode().getId() !== id) {
        for (let tracedNode of tracer.getTargetNodes().values()) {
          for (let targetNode of tracedNode.getNodes()) {
            if (targetNode.getId() === id) {
              for (let filter of sourceTracer.getFilters()) {
                tracer.addFilter(filter);
              }
            }
          }
        }
      }
    }
  }
  /**
   * Informs that the property no longer belongs to another class. The method informs
   * all traced nodes that the node passed as an argument is not the owner of the property.
   * @param id
   */
  removePropertyBelongsToOtherNode(node) {
    for (let tracer of this.traceMap.values()) {
      tracer.removeNodeToApplyFilter(node);
    }
  }
  /**
   * Informs if exists the tracer from the source node to the target node.
   * @param sourceNodeName
   * @param targetNodeName
   */
  existsTracerByName(sourceNodeName, targetNodeName) {
    for (let tracer of this.traceMap.values()) {
      if (tracer.existsTracerByName(sourceNodeName, targetNodeName)) {
        return true;
      }
    }
    return false;
  }
  /**
   * Adds a node to the set of nodes traced by the origin node. This method must be
   * used when the source node always references a set of nodes. Ex .: when a node
   * has a multivalued attribute, it is divided into two nodes, thus, it will be
   * necessary to join the destination nodes to reflect the same set of the origin node.
   *
   * @param tracerNode
   * @param tracedNode
   * @param joinedNode
   * @param innerJoin
   */
  addJoinedNode(tracerNode, tracedNode, joinedNode, innerJoin) {
    let tracer = this.traceMap.get(tracerNode.getId());
    tracer.addJoinedNode(tracedNode, joinedNode, innerJoin);
  }
  /**
   * Informs that it will be necessary to make a junction with one more node for the
   * filter to be made in the desired node from the tracked node.
   *
   * @param nodeFilter
   * @param joinedNode
   */
  addJoinedNodeToApplyFilter(nodeFilter, joinedNode) {
    for (let tracer of this.traceMap.values()) {
      if (tracer.isNodeToApplyFilter(nodeFilter)) {
        tracer.addJoinedNodeToDoFilter(nodeFilter, joinedNode);
      }
    }
  }
  /**
   * Change the field in which the filter will be performed.
   * This method goes through all the filters linked to the nodes and, if it finds the
   * old field, it substitutes for the new field.
   *
   * @param oldProperty
   * @param newProperty
   */
  changeFieldToFilter(oldProperty, newProperty) {
    for (let tracer of this.traceMap.values()) {
      if (tracer.isFiltredByProperty(oldProperty)) {
        tracer.changeFieldToFilter(oldProperty, newProperty);
      }
    }
  }
  toString() {
    let msg = "\n : Tracker ";
    for (let trace of this.traceMap.values()) {
      msg += "\n		" + trace.toString();
    }
    return msg;
  }
};

// src/libs/ontouml2db/obda/GenerateObdaMappingId.ts
var GenerateObdaMappingId = class {
  static generate(sourceNode, project, first) {
    let text = "";
    text += "mappingId    ";
    text += project;
    text += "-";
    if (sourceNode.getAssociationNameNtoN() == null) {
      text += sourceNode.getName();
    } else {
      text += sourceNode.getAssociationNameNtoN();
    }
    if (!first) {
      text += Increment.getNext();
    }
    text += "\n";
    return text;
  }
};

// src/libs/ontouml2db/obda/GenerateObdaTarget.ts
var GenerateObdaTarget = class {
  //public static generate(originalNode: Node, project: string, trackedNode: Node): string {
  static generate(sourceNode, project, tracedNode) {
    if (sourceNode.getAssociationNameNtoN() == null) {
      return "target       " + this.generateTarget(sourceNode, project, tracedNode);
    } else {
      return "target       " + this.generateTargetNtoN(sourceNode, project, tracedNode);
    }
  }
  static generateTarget(sourceNode, project, tracedNode) {
    let text = "";
    text += this.generateSource(sourceNode, project, tracedNode);
    text += this.generatePredicateAndObjects(sourceNode, tracedNode);
    text += this.generateForeignKeyAssociations(project, tracedNode);
    text += ".\n";
    return text;
  }
  static generateSource(sourceNode, project, tracedNode) {
    let text = "";
    text += ":";
    text += project;
    text += "/";
    text += tracedNode.getNodes()[0].getName();
    text += "/";
    text += "{";
    text += tracedNode.getNodes()[0].getPKName();
    text += "}";
    text += " a ";
    text += ":";
    text += sourceNode.getName();
    text += " ";
    return text;
  }
  static generatePredicateAndObjects(sourceNode, tracedNode) {
    let text = "";
    for (let property of sourceNode.getProperties()) {
      if (!property.isPrimaryKey()) {
        text += "; ";
        text += this.generatePredicateFromProperty(property);
        text += " ";
        text += this.generateObject(property, tracedNode);
      }
    }
    return text;
  }
  static generatePredicateFromProperty(property) {
    let text = ":";
    text += property.getName();
    return text;
  }
  static generateObject(property, tracedNode) {
    let text = "";
    let targetProperty = "";
    let tracedProperty = tracedNode.getPropertyByID(property.getID());
    if (tracedProperty !== null) {
      targetProperty = tracedProperty.getName();
    } else {
      targetProperty = "[CAN NOT FIND " + property.getName() + " property at the target node.]";
    }
    text += "{";
    text += targetProperty;
    text += "}";
    text += this.getType(property);
    text += " ";
    return text;
  }
  static generateForeignKeyAssociations(project, tracedNode) {
    let text = "";
    let association;
    for (let property of tracedNode.getMainNode().getProperties()) {
      if (property.isForeignKey()) {
        association = property.getAssociationRelatedOfFK();
        text += "; ";
        text += this.generatePredicateFromAssociation(association);
        text += " :";
        text += project;
        text += "/";
        text += association.getSourceNode().getId() === property.getForeignKeyNodeID() ? association.getSourceNode().getName() : association.getTargetNode().getName();
        text += "/";
        text += this.generateReferencedObject(property, tracedNode);
        text += " ";
      }
    }
    return text;
  }
  static generateReferencedObject(property, tracedNode) {
    let text = "";
    text += "{";
    text += tracedNode.getPropertyByID(property.getID()).getName();
    text += "}";
    text += " ";
    return text;
  }
  static generatePredicateFromAssociation(association) {
    let text = ":";
    text += association.getName() !== null ? association.getName() : "unnamed_association";
    return text;
  }
  static getType(property) {
    if (property.getDataType() === "Date") {
      return "^^xsd:dateTime";
    } else if (property.getDataType() === "DateTime") {
      return "^^xsd:dateTime";
    } else if (property.getDataType() === "float") {
      return "^^xsd:decimal";
    } else if (property.getDataType() === "double") {
      return "^^xsd:decimal";
    } else if (property.getDataType() === "long") {
      return "^^xsd:decimal";
    }
    return "^^xsd:" + property.getDataType();
  }
  static generateTargetNtoN(sourceNode, project, tracedNode) {
    let text = "";
    let association;
    let propertiesFK = tracedNode.getFKPropertiesOfMainNode();
    if (propertiesFK.length !== 2) {
      return "[ERROR: must exists tow FKs]";
    }
    association = propertiesFK[0].getAssociationRelatedOfFK();
    text += ":";
    text += project;
    text += "/";
    text += association.getSourceNode().getName();
    text += "/";
    text += "{";
    text += propertiesFK[0].getName();
    text += "}";
    text += " ";
    text += ":";
    text += sourceNode.getAssociationNameNtoN();
    text += " ";
    association = propertiesFK[1].getAssociationRelatedOfFK();
    text += ":";
    text += project;
    text += "/";
    text += association.getSourceNode().getName();
    text += "/";
    text += "{";
    text += propertiesFK[1].getName();
    text += "}";
    text += ".\n";
    return text;
  }
};

// src/libs/ontouml2db/obda/GenerateObdaSource.ts
var GenerateObdaSource = class {
  static generate(tracer, tracedNode) {
    let text = "";
    text += "source       ";
    text += this.getSelect(tracer.getSourceNode(), tracedNode);
    text += this.getFrom(tracer, tracedNode);
    text += this.getWhere(tracer, tracedNode);
    return text;
  }
  static getSelect(sourceNode, tracedNode) {
    let text = "";
    text += "SELECT ";
    text += tracedNode.getMainNode().getName();
    text += ".";
    text += tracedNode.getMainNode().getPKName();
    for (let sourceProperty of sourceNode.getProperties()) {
      text += ", ";
      text += tracedNode.getNodeProperty(sourceProperty.getID()).getName();
      text += ".";
      text += tracedNode.getPropertyByID(sourceProperty.getID()).getName();
    }
    for (let property of tracedNode.getFKPropertiesOfMainNode()) {
      text += ", ";
      text += tracedNode.getMainNode().getName();
      text += ".";
      text += property.getName();
    }
    text += " \n";
    return text;
  }
  static getFrom(tracer, tracedNode) {
    let text = "";
    let smallTab;
    let largeTab;
    let first = true;
    let lastNode;
    smallTab = Util.getSpaces("", 12);
    largeTab = Util.getSpaces("", 20);
    text += smallTab;
    first = true;
    for (let node of tracedNode.getNodes()) {
      if (first) {
        text += "FROM ";
        text += node.getName();
        text += " ";
        first = false;
        lastNode = node;
      } else {
        text += "\n";
        text += smallTab;
        text += "INNER JOIN ";
        text += node.getName();
        text += "\n";
        text += largeTab;
        text += "ON ";
        text += lastNode.getName();
        text += ".";
        text += lastNode.getPKName();
        text += " = ";
        text += node.getName();
        text += ".";
        text += node.getFKRelatedOfNodeID(lastNode.getId()).getName();
        text += " ";
        lastNode = node;
      }
    }
    let fkField;
    for (let filter of tracer.getFilters()) {
      if (filter.getNodeToApplyFilter() !== null) {
        let lastNode2 = tracedNode.getMainNode();
        for (let joinedNode of filter.getChainOfNodesToApplyFilter()) {
          fkField = this.getFKFields(lastNode2, joinedNode);
          text += "\n";
          text += smallTab;
          text += "INNER JOIN ";
          text += joinedNode.getName();
          text += "\n";
          text += largeTab;
          text += "ON ";
          text += lastNode2.getName();
          text += ".";
          text += fkField;
          text += " = ";
          text += joinedNode.getName();
          text += ".";
          text += fkField;
          lastNode2 = joinedNode;
        }
        text += "\n";
        text += largeTab;
        text += "AND ";
        text += lastNode2.getName();
        text += ".";
        text += filter.getProperty().getName();
        text += " = ";
        text += this.getStringValue(filter.getValue());
        text += " ";
      }
    }
    text += "\n";
    return text;
  }
  static getWhere(tracer, tracedNode) {
    let first = true;
    let text = "";
    let smallTab = Util.getSpaces("", 12);
    for (let filter of tracer.getFilters()) {
      if (filter.getNodeToApplyFilter() == null && //Done as inner join
      tracedNode.getMainNode().getId() === filter.getSourceNode().getId()) {
        if (first) {
          text += smallTab;
          text += "WHERE ";
          first = false;
        } else {
          text += smallTab;
          text += "AND   ";
        }
        text += filter.getProperty().getName();
        text += " = ";
        text += this.getStringValue(filter.getValue());
        text += " \n";
      }
    }
    return text;
  }
  static getFKFields(sourceNode, targetNode) {
    let fk;
    fk = sourceNode.getFKRelatedOfNodeID(targetNode.getId());
    if (fk !== null) {
      return fk.getName();
    } else {
      fk = targetNode.getFKRelatedOfNodeID(sourceNode.getId());
      if (fk !== null) {
        return fk.getName();
      }
    }
    return "Did not find the fk of the referenced table";
  }
  static getStringValue(value) {
    let text = value;
    text = text.toString();
    text = text.toUpperCase();
    if (typeof value === "string") {
      return "'" + text + "'";
    } else {
      return text;
    }
  }
};

// src/libs/ontouml2db/obda/GenerateObda.ts
var GenerateObda = class {
  static getFile(options, tracker) {
    let file;
    file = this.generatePrefixDeclaration(options);
    file += this.generateMappingDeclaration(options, tracker);
    return file;
  }
  static generatePrefixDeclaration(options) {
    return "[PrefixDeclaration]\n:       " + options.baseIri + "#\ngufo:   http://purl.org/nemo/gufo#\nrdf:    http://www.w3.org/1999/02/22-rdf-syntax-ns#\nrdfs:   http://www.w3.org/2000/01/rdf-schema#\nowl:    http://www.w3.org/2002/07/owl#\nxsd:    http://www.w3.org/2001/XMLSchema#\n\n";
  }
  static generateMappingDeclaration(options, tracker) {
    let projectName = options.databaseName;
    let first;
    let text = "[MappingDeclaration] @collection [[\n\n";
    for (let trace of tracker.getTraceMap().values()) {
      first = true;
      trace.getTargetNodes().forEach((tracedNode) => {
        text += GenerateObdaMappingId.generate(trace.getSourceNode(), projectName, first);
        text += GenerateObdaTarget.generate(trace.getSourceNode(), projectName, tracedNode);
        text += GenerateObdaSource.generate(trace, tracedNode);
        first = false;
        text += "\n";
      });
    }
    text += "]]\n";
    return text;
  }
};

// src/libs/ontouml2db/obda/GenerateConnection.ts
var GenerateConnection = class {
  static getFile(options) {
    let database;
    database = this.getDatabase(options.targetDBMS);
    return database.getConnectionToProtege(options);
  }
  static getDatabase(db) {
    switch (db) {
      case "Generic Schema" /* GENERIC_SCHEMA */: {
        return new Generic();
      }
      case "H2" /* H2 */: {
        return new H2();
      }
      case "MySql" /* MYSQL */: {
        return new MySql();
      }
      case "Oracle" /* ORACLE */: {
        return new Oracle();
      }
      case "Postgre" /* POSTGRE */: {
        return new Postgre();
      }
      case "SqlServer" /* SQLSERVER */: {
        return new SqlServer();
      }
      default:
        throw new Error("There is no support for the chosen database.");
    }
  }
};

// src/libs/ontouml2db/approaches/one_table_per_concrete_class/OneTablePerConcreteClass.ts
var OneTablePerConcreteClass = class {
  run(graph, tracker) {
    Flatten.doFlattening(graph, tracker);
    Util.transformGeneralizationToRelation1to1(graph);
  }
};

// src/libs/ontouml2db/Ontouml2Db.ts
var Ontouml2Db = class {
  constructor(project, opt) {
    let factory = new Factory(project);
    this.graph = factory.mountGraph();
    this.tracker = new Tracker(this.graph);
    this.options = opt ? new Ontouml2DbOptions(opt) : new Ontouml2DbOptions();
  }
  // TODO: review the implementation of run(), move the actual behavior into the method, and delete unnecessary methods.
  run() {
    this.validate();
    this.doMapping();
    this.transformToEntityRelationship();
    return {
      result: {
        schema: this.getRelationalSchema(),
        obda: this.getOBDAFile(),
        connection: this.getProtegeConnection()
      }
    };
  }
  /**
   * Validte if is possible to make the transformation.
   */
  validate() {
    if (this.options.targetDBMS === "Generic Schema" /* GENERIC_SCHEMA */ && this.options.enumFieldToLookupTable === false) {
      throw new Error("It is not possible to make lookup tables for a GENERIC database.");
    }
  }
  /**
   * Performs the transformation according to the selected strategy.
   */
  doMapping() {
    let strategy;
    switch (this.options.mappingStrategy) {
      case "One Table per Class" /* ONE_TABLE_PER_CLASS */:
        strategy = new OneTablePerClass();
        break;
      case "One Table per Kind" /* ONE_TABLE_PER_KIND */:
        strategy = new OneTablePerKind();
        break;
      case "One Table per Concrete Class" /* ONE_TABLE_PER_CONCRETE_CLASS */:
        strategy = new OneTablePerConcreteClass();
        break;
      default:
        console.log("ops");
        break;
    }
    strategy.run(this.graph, this.tracker);
  }
  /**
   * Adds database constructs to the graph.
   */
  transformToEntityRelationship() {
    ToEntityRelationship.run(this.graph, this.tracker, this.options.isStandardizeNames, this.options.enumFieldToLookupTable);
  }
  /**
   * Returns the relational schema form the transformed OntoUML model.
   *
   * @param options
   */
  getRelationalSchema() {
    return ToRelationalSchema.getSchema(this.graph, this.options.targetDBMS);
  }
  /**
   * Returns the OBDA file of the OntoUML model. For this, the selected transformation strategy is applied.
   * @param options
   */
  getOBDAFile() {
    return GenerateObda.getFile(this.options, this.tracker);
  }
  /**
   * Returns de connection file. This a specific file for Protegé.
   */
  getProtegeConnection() {
    return GenerateConnection.getFile(this.options);
  }
  /**
   * Returns the model read from the json file as a graph
   */
  getSourceGraph() {
    return this.graph;
  }
  /**
   * Return the tracking between the source and target graph nodes
   */
  getTracker() {
    return this.tracker;
  }
  /**
   * Returns the configuration options.
   */
  getOptions() {
    return this.options;
  }
};

// src/libs/ontouml2gufo/annotation_function.ts
var import_language_tags2 = __toESM(require_lib());
function transformAnnotations(transformer, element) {
  const labels = transformer.options.getCustomLabels(element) || {};
  const uri = transformer.getUri(element);
  for (const language of Object.keys(labels)) {
    if (import_language_tags2.default.check(language)) {
      transformer.addLiteralQuad(uri, "rdfs:label", labels[language], language);
    }
  }
  const { propertyAssignments } = element;
  if (propertyAssignments) {
    for (const language of Object.keys(propertyAssignments)) {
      if (import_language_tags2.default.check(language)) {
        transformer.addLiteralQuad(uri, "rdfs:label", propertyAssignments[language], language);
      }
    }
  }
  if (labels.default) {
    transformer.addLiteralQuad(uri, "rdfs:label", labels.default);
  }
  if (element.name) {
    for (const [language, value] of element.name.entries()) {
      if (import_language_tags2.default.check(language)) {
        transformer.addLiteralQuad(uri, "rdfs:label", value, language);
      }
    }
  }
  if (element.description) {
    for (const [language, value] of element.description.entries()) {
      if (import_language_tags2.default.check(language)) {
        transformer.addLiteralQuad(uri, "rdfs:comment", value, language);
      }
    }
  }
  return true;
}
function transformInverseAnnotations(transformer, relation) {
  transformAnnotations(transformer, relation.properties[0]);
}

// src/libs/ontouml2gufo/attribute_functions.ts
function transformAttribute(transformer, attribute) {
  const container = attribute.container;
  if (container.type !== "Class" /* CLASS_TYPE */) {
    return false;
  }
  const containerClass = container;
  const attributeUri = transformer.getUri(attribute);
  const containerUri = transformer.getUri(containerClass);
  const containerIsDatatype = containerClass.hasDatatypeStereotype();
  const containerIsConcreteIndividual = !containerClass.isRestrictedToAbstract();
  const isTypelessAttribute = !attribute.propertyType;
  const isPrimitiveAttribute = attribute.propertyType && attribute.propertyType.isPrimitiveDatatype();
  transformer.addQuad(attributeUri, "rdfs:domain", containerUri);
  if (!isTypelessAttribute) {
    const attributeTypeUri = transformer.getUri(attribute.propertyType);
    transformer.addQuad(attributeUri, "rdfs:range", attributeTypeUri);
  }
  if (isTypelessAttribute || isPrimitiveAttribute) {
    transformer.addQuad(attributeUri, "rdf:type", "owl:DatatypeProperty");
    if (containerIsDatatype) {
      transformer.addQuad(attributeUri, "rdfs:subPropertyOf", "gufo:hasValueComponent");
    } else if (containerIsConcreteIndividual) {
      transformer.addQuad(attributeUri, "rdfs:subPropertyOf", "gufo:hasQualityValue");
    }
  } else {
    transformer.addQuad(attributeUri, "rdf:type", "owl:ObjectProperty");
    const isComplexAttribute = attribute.propertyType.isComplexDatatype();
    const isEnumeratedAttribute = attribute.propertyType.hasEnumerationStereotype();
    if (containerIsConcreteIndividual && (isComplexAttribute || isEnumeratedAttribute)) {
      transformer.addQuad(attributeUri, "rdfs:subPropertyOf", "gufo:hasReifiedQualityValue");
    }
  }
  transformAnnotations(transformer, attribute);
  return true;
}

// src/libs/ontouml2gufo/cardinality_functions.ts
var N3 = require_lib2();
var { namedNode, literal } = N3.DataFactory;
function transformRelationCardinalities(transformer, relation) {
  if (!(relation.getSource() instanceof Class) || !(relation.getTarget() instanceof Class) || relation.hasInstantiationStereotype() || relation.hasDerivationStereotype() || !relation.isBinary() || !relation.isBinaryExistentialDependency()) {
    return;
  }
  const sourceProperty = relation.getSourceEnd();
  if (!sourceProperty.cardinality.isZeroToMany()) {
    writerCardinalityAxiom(transformer, relation, Direction.TARGET_TO_SOURCE);
  }
  const targetProperty = relation.getTargetEnd();
  if (!targetProperty.cardinality.isZeroToMany()) {
    writerCardinalityAxiom(transformer, relation, Direction.SOURCE_TO_TARGET);
  }
}
function getObjectPropertyNodes(transformer, relation, propertyPosition) {
  const { options } = transformer;
  if (relation.hasInstantiationStereotype() || relation.isDerivation() || relation.isTernary()) {
    throw new Error("Cannot get property nodes for n-ary, \xABinstantation\xBB, or \xABderivation\xBB relations");
  }
  if (propertyPosition === 0) {
    if (relation.hasMaterialStereotype() || relation.hasComparativeStereotype() || !relation.stereotype && !relation.isPartWholeRelation() || options.createObjectProperty) {
      return options.createInverses ? namedNode(transformer.getInverseRelationUri(relation)) : transformer.writer.blank(namedNode("owl:inverseOf"), namedNode(transformer.getUri(relation)));
    }
    return options.createInverses ? namedNode(getInverseSuperProperty(relation)) : transformer.writer.blank(namedNode("owl:inverseOf"), namedNode(getSuperProperty(relation)));
  }
  if (propertyPosition === 1) {
    if (relation.hasMaterialStereotype() || relation.hasComparativeStereotype() || !relation.stereotype && !relation.isPartWholeRelation() || options.createObjectProperty) {
      return namedNode(transformer.getUri(relation));
    }
    return namedNode(getSuperProperty(relation));
  }
  return null;
}
var Direction = /* @__PURE__ */ ((Direction2) => {
  Direction2[Direction2["SOURCE_TO_TARGET"] = 1] = "SOURCE_TO_TARGET";
  Direction2[Direction2["TARGET_TO_SOURCE"] = 2] = "TARGET_TO_SOURCE";
  return Direction2;
})(Direction || {});
function writerCardinalityAxiom(transformer, relation, direction) {
  if (!direction)
    return;
  let sourceClass;
  let targetAssociationEnd;
  let objectPropertyNode;
  let isExistentialDependency;
  if (direction === 1 /* SOURCE_TO_TARGET */) {
    sourceClass = relation.getSourceClass();
    targetAssociationEnd = relation.getTargetEnd();
    objectPropertyNode = getObjectPropertyNodes(transformer, relation, 1);
    isExistentialDependency = relation.getSourceEnd().isReadOnly;
  } else {
    sourceClass = relation.getTargetClass();
    targetAssociationEnd = relation.getSourceEnd();
    objectPropertyNode = getObjectPropertyNodes(transformer, relation, 0);
    isExistentialDependency = relation.getTargetEnd().isReadOnly;
  }
  let restrictionNodes = [];
  const lowerBound = targetAssociationEnd.cardinality.getLowerBoundAsNumber();
  const upperBound = targetAssociationEnd.cardinality.getUpperBoundAsNumber();
  const targetClassNode = namedNode(transformer.getUri(targetAssociationEnd.propertyType));
  if (lowerBound === 1 && upperBound === CARDINALITY_MAX_AS_NUMBER) {
    restrictionNodes.push([
      {
        predicate: namedNode("rdf:type"),
        object: namedNode("owl:Restriction")
      },
      {
        predicate: namedNode("owl:onProperty"),
        object: objectPropertyNode
      },
      {
        predicate: namedNode("owl:someValuesFrom"),
        object: targetClassNode
      }
    ]);
  } else if (lowerBound > 0 && upperBound > 0 && lowerBound === upperBound) {
    restrictionNodes.push([
      {
        predicate: namedNode("rdf:type"),
        object: namedNode("owl:Restriction")
      },
      {
        predicate: namedNode("owl:onProperty"),
        object: objectPropertyNode
      },
      {
        predicate: isExistentialDependency ? namedNode("owl:qualifiedCardinality") : namedNode("owl:minQualifiedCardinality"),
        object: literal(lowerBound, namedNode("xsd:nonNegativeInteger"))
      },
      {
        predicate: namedNode("owl:onClass"),
        object: targetClassNode
      }
    ]);
  } else {
    if (lowerBound > 0) {
      restrictionNodes.push([
        {
          predicate: namedNode("rdf:type"),
          object: namedNode("owl:Restriction")
        },
        {
          predicate: namedNode("owl:onProperty"),
          object: objectPropertyNode
        },
        {
          predicate: namedNode("owl:minQualifiedCardinality"),
          object: literal(lowerBound, namedNode("xsd:nonNegativeInteger"))
        },
        {
          predicate: namedNode("owl:onClass"),
          object: targetClassNode
        }
      ]);
    }
    if (upperBound > 0 && upperBound !== CARDINALITY_MAX_AS_NUMBER && isExistentialDependency) {
      restrictionNodes.push([
        {
          predicate: namedNode("rdf:type"),
          object: namedNode("owl:Restriction")
        },
        {
          predicate: namedNode("owl:onProperty"),
          object: objectPropertyNode
        },
        {
          predicate: namedNode("owl:maxQualifiedCardinality"),
          object: literal(upperBound, namedNode("xsd:nonNegativeInteger"))
        },
        {
          predicate: namedNode("owl:onClass"),
          object: targetClassNode
        }
      ]);
    }
  }
  const sourceClassNode = namedNode(transformer.getUri(sourceClass));
  restrictionNodes.forEach((restriction) => {
    transformer.addQuad(sourceClassNode, namedNode("rdfs:subClassOf"), transformer.writer.blank(restriction));
  });
}

// src/libs/ontouml2gufo/class_functions.ts
var N32 = require_lib2();
var { namedNode: namedNode2, literal: literal2 } = N32.DataFactory;
function transformClass(transformer, _class) {
  const { uriManager } = transformer;
  if (uriManager.getUriFromTaggedValues(_class) || getUriFromXsdMapping(_class) || _class.isPrimitiveDatatype()) {
    return true;
  }
  transformClassAsIndividual(transformer, _class);
  transformClassAsClass(transformer, _class);
  if (_class.hasEnumerationStereotype()) {
    transformEnumeration(transformer, _class);
  }
  transformAnnotations(transformer, _class);
  return true;
}
function transformClassAsIndividual(transformer, _class) {
  const classTypeMap = {
    ["kind" /* KIND */]: "gufo:Kind",
    ["quantity" /* QUANTITY */]: "gufo:Kind",
    ["collective" /* COLLECTIVE */]: "gufo:Kind",
    ["relator" /* RELATOR */]: "gufo:Kind",
    ["mode" /* MODE */]: "gufo:Kind",
    ["quality" /* QUALITY */]: "gufo:Kind",
    ["subkind" /* SUBKIND */]: "gufo:SubKind",
    ["role" /* ROLE */]: "gufo:Role",
    ["historicalRole" /* HISTORICAL_ROLE */]: "gufo:Role",
    ["historicalRoleMixin" /* HISTORICAL_ROLE_MIXIN */]: "gufo:Role",
    ["phase" /* PHASE */]: "gufo:Phase",
    ["category" /* CATEGORY */]: "gufo:Category",
    ["mixin" /* MIXIN */]: "gufo:Mixin",
    ["roleMixin" /* ROLE_MIXIN */]: "gufo:RoleMixin",
    ["phaseMixin" /* PHASE_MIXIN */]: "gufo:PhaseMixin",
    ["event" /* EVENT */]: "gufo:EventType",
    ["situation" /* SITUATION */]: "gufo:SituationType",
    ["type" /* TYPE */]: null,
    ["abstract" /* ABSTRACT */]: "gufo:AbstractIndividualType",
    ["datatype" /* DATATYPE */]: "gufo:AbstractIndividualType",
    ["enumeration" /* ENUMERATION */]: "gufo:AbstractIndividualType"
  };
  const classTypeUri = classTypeMap[_class.stereotype];
  if (!classTypeUri)
    return false;
  const classUri = transformer.getUri(_class);
  transformer.addQuad(classUri, "rdf:type", "owl:Class");
  transformer.addQuad(classUri, "rdf:type", classTypeUri);
  return true;
}
function transformClassAsClass(transformer, classElement) {
  const classUri = transformer.getUri(classElement);
  transformer.addQuad(classUri, "rdf:type", "owl:NamedIndividual");
  const parentSettings = getGufoParents(classElement);
  if (parentSettings && parentSettings.parentUri) {
    transformer.addQuad(classUri, "rdfs:subClassOf", parentSettings.parentUri);
  }
  if (parentSettings && parentSettings.unionOf && parentSettings.unionOf.length > 1) {
    transformer.addQuad(
      namedNode2(classUri),
      namedNode2("rdfs:subClassOf"),
      transformer.writer.blank([
        {
          predicate: namedNode2("rdf:type"),
          object: namedNode2("owl:Class")
        },
        {
          predicate: namedNode2("owl:unionOf"),
          object: transformer.writer.list(parentSettings.unionOf.map((parentUri) => namedNode2(parentUri)))
        }
      ])
    );
  }
}
function transformEnumeration(transformer, classElement) {
  const { literals } = classElement;
  if (!literals) {
    return;
  }
  const uri = transformer.getUri(classElement);
  const literalUris = literals.map((literal4) => namedNode2(transformer.getUri(literal4)));
  transformer.addQuad(
    namedNode2(uri),
    namedNode2("owl:equivalentClass"),
    transformer.writer.blank([
      {
        predicate: namedNode2("rdf:type"),
        object: namedNode2("owl:Class")
      },
      {
        predicate: namedNode2("owl:oneOf"),
        object: transformer.writer.list(literalUris)
      }
    ])
  );
  for (let i = 0; i < literalUris.length; i += 1) {
    const literalUri = literalUris[i];
    transformer.addQuad(literalUri, "rdf:type", uri);
    transformer.addQuad(literalUri, "rdf:label", literal2(literals[i].name));
  }
}
function getCollectiveGufoParent(classElement) {
  if (classElement.isExtensional === null)
    return "gufo:Collection";
  if (classElement.isExtensional)
    return "gufo:FixedCollection";
  return "gufo:VariableCollection";
}
function getGufoParentFromAllowed(classElement) {
  const basicMapping = {
    abstract: "gufo:QualityValue",
    collective: "gufo:Collection",
    event: "gufo:Event",
    situation: "gufo:Situation",
    "functional-complex": "gufo:FunctionalComplex",
    "intrinsic-mode": "gufo:IntrinsicMode",
    "extrinsic-mode": "gufo:ExtrinsicMode",
    quality: "gufo:Quality",
    quantity: "gufo:Quantity",
    relator: "gufo:Relator",
    type: "gufo:ConcreteIndividualType"
  };
  const restrictedTo = classElement.restrictedTo;
  if (!restrictedTo || restrictedTo.length === 0)
    return null;
  if (restrictedTo.length === 1) {
    const nature = restrictedTo[0];
    if (nature === "collective" /* collective */)
      return { parentUri: getCollectiveGufoParent(classElement), unionOf: null };
    if (nature === "abstract" /* abstract */) {
      switch (classElement.stereotype) {
        case "datatype" /* DATATYPE */:
        case "enumeration" /* ENUMERATION */:
          return { parentUri: "gufo:QualityValue", unionOf: null };
        case "abstract" /* ABSTRACT */:
        default:
          return { parentUri: "gufo:AbstractIndividual", unionOf: null };
      }
    }
    return { parentUri: basicMapping[nature], unionOf: null };
  }
  if (restrictedTo.includes("type" /* type */))
    return { parentUri: "owl:Thing", unionOf: null };
  if (restrictedTo.includes("abstract" /* abstract */))
    return { parentUri: "gufo:Individual", unionOf: null };
  if (restrictedTo.includes("event" /* event */))
    return { parentUri: "gufo:ConcreteIndividual", unionOf: null };
  if (!restrictedTo.includes("quality" /* quality */) && !restrictedTo.includes("intrinsic-mode" /* intrinsic_mode */) && !restrictedTo.includes("extrinsic-mode" /* extrinsic_mode */) && !restrictedTo.includes("relator" /* relator */))
    return { parentUri: "gufo:Object", unionOf: null };
  if (!restrictedTo.includes("collective" /* collective */) && !restrictedTo.includes("functional-complex" /* functional_complex */) && !restrictedTo.includes("quantity" /* quantity */)) {
    if (!restrictedTo.includes("relator" /* relator */) && !restrictedTo.includes("extrinsic-mode" /* extrinsic_mode */))
      return { parentUri: "gufo:IntrinsicAspect", unionOf: null };
    if (!restrictedTo.includes("quality" /* quality */) && !restrictedTo.includes("intrinsic-mode" /* intrinsic_mode */))
      return { parentUri: "gufo:ExtrinsicAspect", unionOf: null };
    if (!restrictedTo.includes("quality" /* quality */) && !restrictedTo.includes("relator" /* relator */))
      return { parentUri: "gufo:Aspect", unionOf: ["gufo:IntrinsicMode", "gufo:ExtrinsicMode"] };
    return { parentUri: "gufo:Aspect", unionOf: null };
  }
  return { parentUri: "gufo:Endurant", unionOf: null };
}
function getGufoParents(classElement) {
  const parents = classElement.getParents() || [];
  const restrictedTo = classElement.restrictedTo || [];
  if (parents.length === 0)
    return getGufoParentFromAllowed(classElement);
  let hasSameNatureAsAParent = false;
  for (let parent of parents) {
    if (parent.type !== "Class" /* CLASS_TYPE */)
      continue;
    const parentRestrictedTo = parent.restrictedTo || [];
    const containsAll = (source, target) => target.every((v) => source.includes(v));
    if (containsAll(restrictedTo, parentRestrictedTo) && containsAll(parentRestrictedTo, restrictedTo)) {
      hasSameNatureAsAParent = true;
      break;
    }
  }
  if (hasSameNatureAsAParent)
    return null;
  return getGufoParentFromAllowed(classElement);
}
function writeDisjointnessAxioms(transformer, classes) {
  const ultimateSortalStereotypes = [
    "kind" /* KIND */,
    "quantity" /* QUANTITY */,
    "collective" /* COLLECTIVE */,
    "relator" /* RELATOR */,
    "mode" /* MODE */,
    "quality" /* QUALITY */
  ];
  for (let i = 0; i < ultimateSortalStereotypes.length; i += 1) {
    const ultimateSortalStereotype = ultimateSortalStereotypes[i];
    const stereotypeClasses = classes.filter(({ stereotype }) => stereotype && stereotype[0] === ultimateSortalStereotype).map((classElement) => {
      const uri = transformer.getUri(classElement);
      return namedNode2(uri);
    });
    if (stereotypeClasses.length > 1) {
      transformer.addQuad(
        transformer.writer.blank(namedNode2("rdf:type"), namedNode2("owl:AllDisjointClasses")),
        namedNode2("owl:members"),
        transformer.writer.list(stereotypeClasses)
      );
    }
  }
  return true;
}

// src/libs/ontouml2gufo/generalization_functions.ts
function transformGeneralization(transformer, generalization) {
  const specific = generalization.specific;
  const general = generalization.general;
  const specificUri = transformer.getUri(specific);
  const generalUri = transformer.getUri(general);
  if (generalization.involvesClasses()) {
    transformer.addQuad(specificUri, "rdfs:subClassOf", generalUri);
  }
  if (generalization.involvesRelations()) {
    transformer.addQuad(specificUri, "rdfs:subPropertyOf", generalUri);
  }
}

// src/libs/ontouml2gufo/generalization_set_functions.ts
var N33 = require_lib2();
var { namedNode: namedNode3 } = N33.DataFactory;
var transformGeneralizationSet = (transformer, genSet) => {
  if (!genSet.generalizations || genSet.generalizations.length === 0 || !genSet.isComplete && !genSet.isDisjoint)
    return;
  const classChildren = genSet.generalizations.map((gen) => gen.specific).filter((child) => child.type === "Class" /* CLASS_TYPE */);
  const onlyClassChildren = classChildren.length === genSet.generalizations.length;
  if (!onlyClassChildren)
    return;
  const classParents = genSet.generalizations.map((gen) => gen.getGeneralClass());
  const onlyClassParent = classParents.length === genSet.generalizations.length;
  const parent = genSet.getGeneralClass();
  const uniqueParent = !!parent;
  if (!uniqueParent || !onlyClassParent) {
    return;
  }
  if (genSet.isDisjoint) {
    const rigidOrAbstractChildren = genSet.getSpecificClasses().filter((child) => child.hasRigidStereotype() || child.isRestrictedToAbstract() && !child.isPrimitiveDatatype());
    if (rigidOrAbstractChildren.length > 1) {
      const childrenNodes = rigidOrAbstractChildren.map((_class) => namedNode3(transformer.getUri(_class)));
      transformer.addQuad(
        transformer.writer.blank(namedNode3("rdf:type"), namedNode3("owl:AllDisjointClasses")),
        namedNode3("owl:members"),
        transformer.writer.list(childrenNodes)
      );
    }
  }
  if (genSet.isComplete && classChildren.length > 1) {
    const parentUri = transformer.getUri(parent);
    const childrenNodes = classChildren.map((_class) => namedNode3(transformer.getUri(_class)));
    transformer.addQuad(
      namedNode3(parentUri),
      namedNode3("owl:equivalentClass"),
      transformer.writer.blank([
        {
          predicate: namedNode3("rdf:type"),
          object: namedNode3("owl:Class")
        },
        {
          predicate: namedNode3("owl:unionOf"),
          object: transformer.writer.list(childrenNodes)
        }
      ])
    );
  }
};

// src/libs/ontouml2gufo/inspector.ts
var import_validate = __toESM(require_lib4());
var Inspector = class {
  constructor(transformer) {
    this.issues = [];
    this.transformer = transformer;
  }
  /* 
  Pre-transformation issues to give users feedback about things that could potentially impact the transformation. Including:
  - Identify elements without name
  - Check invalid Base URI
  - Check package names prefixes that can clash with popular prefixes (rdfs, rdf, owl, etc)
  - Check repeated names (attributes, relation names and association ends, etc.)
  - Check relations without cardinality
  - Check attributes without type
  */
  run() {
    this.issues = [];
    this.checkBaseIri();
    this.checkPackagePrefixes();
    this.checkRelationNames();
    this.checkRepeatedNames();
    this.checkCardinality();
    this.checkAttributeType();
    return this.issues;
  }
  checkBaseIri() {
    const { baseIri } = this.transformer.options;
    if (!(0, import_validate.default)(baseIri)) {
      this.issues.push(Issue.createInvalidBaseIri(baseIri));
    }
  }
  checkPackagePrefixes() {
    const packages = this.transformer.model.getAllPackages();
    const { customPackageMapping, prefixPackages } = this.transformer.options;
    const defaultPrefixKeys = Object.keys(DefaultPrefixes);
    const defaultPrefixUris = Object.values(DefaultPrefixes);
    for (const key of Object.keys(customPackageMapping)) {
      const packageEl = packages.find(({ id, name }) => id === key || name.getText() === key) || {
        id: "",
        name: ""
      };
      const { prefix, uri } = customPackageMapping[key];
      if (defaultPrefixKeys.includes(prefix)) {
        const issue = Issue.createInvalidCustomPackagePrefix(prefix, defaultPrefixKeys, packageEl);
        this.issues.push(issue);
      }
      if (defaultPrefixUris.includes(uri)) {
        const issue = Issue.createInvalidCustomPackageUri(uri, packageEl);
        this.issues.push(issue);
      }
    }
    if (prefixPackages) {
      const prefixes = getPackagePrefixes(this.transformer);
      for (const prefix of Object.keys(prefixes)) {
        const uri = prefixes[prefix];
        if (defaultPrefixKeys.includes(prefix)) {
          const issue = Issue.createInvalidPackagePrefix(prefix, defaultPrefixKeys);
          this.issues.push(issue);
        }
        if (defaultPrefixUris.includes(uri)) {
          const issue = Issue.createInvalidPackageUri(uri);
          this.issues.push(issue);
        }
      }
    }
  }
  checkRelationNames() {
    const relations = this.transformer.model.getAllRelations();
    relations.forEach((relation) => {
      const sourceAssociationName = relation.properties[0].getName();
      const targetAssociationName = relation.properties[1].getName();
      if (!relation.getName() && !targetAssociationName) {
        const issue = Issue.createMissingRelationName(relation);
        this.issues.push(issue);
      }
      if (this.transformer.options.createInverses && !sourceAssociationName) {
        const issue = Issue.createMissingInverseRelationName(relation);
        this.issues.push(issue);
      }
    });
  }
  checkRepeatedNames() {
    const elements = this.transformer.model.getAllContents();
    const elementNames = {};
    elements.forEach((element) => {
      const name = element.getName();
      if (name) {
        if (!elementNames[name]) {
          elementNames[name] = [element];
        } else {
          elementNames[name].push(element);
        }
      }
    });
    for (const name of Object.keys(elementNames)) {
      const repeatedElements = elementNames[name];
      if (repeatedElements.length > 1) {
        const issue = Issue.createDuplicateNames(repeatedElements, name);
        this.issues.push(issue);
      }
    }
  }
  checkCardinality() {
    const relations = this.transformer.model.getAllRelations();
    relations.forEach((relation) => {
      const { properties } = relation;
      const sourceCardinality = properties[0].cardinality;
      const targetCardinality = properties[1].cardinality;
      if (!sourceCardinality) {
        const issue = Issue.createMissingSourceCardinality(relation);
        this.issues.push(issue);
      }
      if (!targetCardinality) {
        const issue = Issue.createMissingTargetCardinality(relation);
        this.issues.push(issue);
      }
    });
  }
  checkAttributeType() {
    const classes = this.transformer.model.getAllClasses();
    classes.forEach((classEl) => {
      (classEl.properties || []).forEach((attribute) => {
        if (!attribute.propertyType) {
          const issue = Issue.createMissingAttributeType(classEl, attribute);
          this.issues.push(issue);
        }
      });
    });
  }
};

// src/libs/ontouml2gufo/issue.ts
var import_uniqid2 = __toESM(require_uniqid());
var IssueType = {
  INVALID_BASE_IRI: {
    code: "invalid_base_iri",
    severity: "warning" /* WARNING */,
    title: "Invalid BaseIRI"
  },
  INVALID_CUSTOM_PACKAGE_PREFIX: {
    code: "invalid_custom_package_prefix",
    severity: "warning" /* WARNING */,
    title: "Protected prefix provided in custom package mapping"
  },
  INVALID_CUSTOM_PACKAGE_URI: {
    code: "invalid_custom_package_uri",
    severity: "warning" /* WARNING */,
    title: "Protected URI provided in custom package mapping"
  },
  INVALID_PACKAGE_PREFIX: {
    code: "invalid_package_prefix",
    severity: "warning" /* WARNING */,
    title: "Protected prefix generated in package mapping"
  },
  INVALID_PACKAGE_URI: {
    code: "invalid_package_uri",
    severity: "warning" /* WARNING */,
    title: "Protected URI generated in package mapping"
  },
  MISSING_RELATION_NAME: {
    code: "missing_relation_name",
    severity: "warning" /* WARNING */,
    title: "Missing relation name"
  },
  MISSING_INVERSE_RELATION_NAME: {
    code: "missing_inverse_relation_name",
    severity: "warning" /* WARNING */,
    title: "Missing inverse relation name"
  },
  MISSING_SOURCE_CARDINALITY: {
    code: "missing_source_cardinality",
    severity: "warning" /* WARNING */,
    title: "Missing cardinality"
  },
  MISSING_TARGET_CARDINALITY: {
    code: "missing_target_cardinality",
    severity: "warning" /* WARNING */,
    title: "Missing cardinality"
  },
  DUPLICATE_NAMES: {
    code: "duplicate_names",
    severity: "warning" /* WARNING */,
    title: "Duplicate element name"
  },
  MISSING_ATTRIBUTE_TYPE: {
    code: "missing_attribute_type",
    severity: "warning" /* WARNING */,
    title: "Missing attribute type"
  }
};
var Issue = class {
  constructor(base) {
    this.id = base.id || (0, import_uniqid2.default)(), this.code = base.code, this.severity = base.severity, this.title = base.title, this.description = base.description, this.data = base.data;
  }
  static createInvalidBaseIri(baseIri) {
    const warning = __spreadProps(__spreadValues({}, IssueType.INVALID_BASE_IRI), {
      description: `"${baseIri}" is not a valid IRI.`,
      data: { baseIri }
    });
    return new Issue(warning);
  }
  static createInvalidCustomPackagePrefix(prefix, forbiddenPrefixes, packageEl) {
    const warning = __spreadProps(__spreadValues({}, IssueType.INVALID_CUSTOM_PACKAGE_PREFIX), {
      description: `The prefix "${prefix}" is already used by another package imported by gUFO. Avoid using the following prefixes: 
        ${forbiddenPrefixes.join(", ")}.`,
      data: __spreadValues({
        prefix
      }, this.getElementData(packageEl))
    });
    return new Issue(warning);
  }
  static createInvalidCustomPackageUri(uri, packageEl) {
    const warning = __spreadProps(__spreadValues({}, IssueType.INVALID_CUSTOM_PACKAGE_URI), {
      description: `The URI "${uri}" is already used by another package imported by gUFO.`,
      data: __spreadValues({
        uri
      }, this.getElementData(packageEl))
    });
    return new Issue(warning);
  }
  static createInvalidPackagePrefix(prefix, forbiddenPrefixes) {
    const warning = __spreadProps(__spreadValues({}, IssueType.INVALID_PACKAGE_PREFIX), {
      description: `The prefix "${prefix}" is already used by another package imported by gUFO. Beware of the following prefixes: 
        ${forbiddenPrefixes.join(", ")}.`,
      data: { prefix }
    });
    return new Issue(warning);
  }
  static createInvalidPackageUri(uri) {
    const warning = __spreadProps(__spreadValues({}, IssueType.INVALID_PACKAGE_URI), {
      description: `The URI "${uri}" is already used by another package imported by gUFO.`,
      data: { uri }
    });
    return new Issue(warning);
  }
  static createMissingRelationName(relation) {
    const stereotypeName = getStereotypeName(relation);
    const source = relation.getSource();
    const target = relation.getTarget();
    const warning = __spreadProps(__spreadValues({}, IssueType.MISSING_RELATION_NAME), {
      description: `Missing name on ${stereotypeName} relation between classes "${source.name}" and "${target.name}".`,
      data: __spreadValues({}, this.getElementData(relation))
    });
    return new Issue(warning);
  }
  static createMissingInverseRelationName(relation) {
    const stereotypeName = getStereotypeName(relation);
    const source = relation.getSource();
    const target = relation.getTarget();
    const warning = __spreadProps(__spreadValues({}, IssueType.MISSING_INVERSE_RELATION_NAME), {
      description: `Missing inverse name for ${stereotypeName} relation between classes "${source.name}" and "${target.name}".`,
      data: __spreadValues({}, this.getElementData(relation))
    });
    return new Issue(warning);
  }
  static createMissingSourceCardinality(relation) {
    const source = relation.getSource();
    const target = relation.getTarget();
    const warning = __spreadProps(__spreadValues({}, IssueType.MISSING_SOURCE_CARDINALITY), {
      description: `Missing cardinality on the source end of relation "${relation.name}" between clasess "${source.name}" and "${target.name}".`,
      data: __spreadValues({}, this.getElementData(relation))
    });
    return new Issue(warning);
  }
  static createMissingTargetCardinality(relation) {
    const source = relation.getSource();
    const target = relation.getTarget();
    const warning = __spreadProps(__spreadValues({}, IssueType.MISSING_TARGET_CARDINALITY), {
      description: `Missing cardinality on the target end of relation "${relation.name}" between classes "${source.name}" and "${target.name}".`,
      data: __spreadValues({}, this.getElementData(relation))
    });
    return new Issue(warning);
  }
  static createDuplicateNames(repeatedElements, duplicateName) {
    const occurrences = repeatedElements.map((element) => {
      if (element.type === "Property" /* PROPERTY_TYPE */) {
        const property = element;
        const parent = property.container;
        if (parent.type === "Relation" /* RELATION_TYPE */) {
          const relation = parent;
          const source = relation.getSource();
          const target = relation.getTarget();
          return `association end "${element.getName()}" of relation "${relation.name}" between classes "${source.name}" and "${target.name}"`;
        }
        return `attribute "${element.getName()}" of class ${parent.name}`;
      }
      if (element.type === "Relation" /* RELATION_TYPE */) {
        const relation = element;
        const source = relation.getSource();
        const target = relation.getTarget();
        return `relation "${relation.name}" between classes "${source.name}" and "${target.name}"`;
      }
      return `${element.type.toLowerCase()} "${element.getName()}"`;
    });
    const warning = __spreadProps(__spreadValues({}, IssueType.DUPLICATE_NAMES), {
      description: `The name "${duplicateName}" has been used multiple times: ${occurrences.join(", ").replace(/,(?!.*,)/gim, " and")}.`,
      data: {
        elements: repeatedElements.map((elem) => ({ id: elem.id, name: elem.name }))
      }
    });
    return new Issue(warning);
  }
  static createMissingAttributeType(classEl, attribute) {
    const warning = __spreadProps(__spreadValues({}, IssueType.MISSING_ATTRIBUTE_TYPE), {
      description: `Missing type on attribute "${classEl.name}::${attribute.name}".`,
      data: {
        element: this.getIdName(classEl),
        attribute: this.getIdName(attribute)
      }
    });
    return new Issue(warning);
  }
  static getElementData(element) {
    return {
      element: this.getIdName(element)
    };
  }
  static getIdName(element) {
    return {
      id: element.id,
      name: element.getName()
    };
  }
};
function getStereotypeName(relation) {
  const stereotype = relation.stereotype || null;
  return stereotype ? `\xAB${stereotype}\xBB` : "";
}

// src/libs/ontouml2gufo/ontouml2gufo.ts
var N34 = require_lib2();
var { namedNode: namedNode4, quad, literal: literal3 } = N34.DataFactory;
var Ontouml2Gufo5 = class {
  constructor(input, options) {
    if (input instanceof Project2) {
      this.model = input.model;
    } else if (input instanceof Package) {
      this.model = input;
    }
    this.options = options ? new Ontouml2GufoOptions(options) : new Ontouml2GufoOptions();
    this.inspector = new Inspector(this);
    this.uriManager = new UriManager(this);
    if (input instanceof Project2) {
      this.model = input.model;
    } else if (input instanceof Package) {
      this.model = input;
    }
  }
  getIssues() {
    return this.inspector.issues;
  }
  getOwlCode() {
    return this.owlCode;
  }
  getUri(element) {
    return this.uriManager.getUri(element);
  }
  getInverseRelationUri(element) {
    return this.uriManager.getInverseRelationUri(element);
  }
  getSourceUri(relation) {
    return this.uriManager.getSourceUri(relation);
  }
  getTargetUri(relation) {
    return this.uriManager.getTargetUri(relation);
  }
  addQuad(subject, predicate, object) {
    if (subject && predicate && object) {
      if (typeof subject === "string")
        subject = namedNode4(subject);
      if (typeof predicate === "string")
        predicate = namedNode4(predicate);
      if (typeof object === "string")
        object = namedNode4(object);
      this.writer.addQuad(subject, predicate, object);
    } else {
      this.writer.addQuad(subject);
    }
  }
  addLiteralQuad(subject, predicate, literalValue, language) {
    const literalNode = language ? literal3(literalValue, language) : literal3(literalValue);
    this.addQuad(namedNode4(subject), namedNode4(predicate), literalNode);
  }
  addQuads(quads) {
    this.writer.addQuads(quads);
  }
  transform() {
    try {
      this.inspector.run();
    } catch (error) {
      console.log(error);
      console.log("An error occurrence while inspecting the model and the transformation options.");
    }
    try {
      this.initializeWriter();
      this.writePreamble();
      this.transformClasses();
      this.transformGeneralizations();
      this.transformGeneralizationSets();
      this.transformAttributes();
      this.transformRelations();
      this.transformCardinalities();
      this.writer.end((error, result) => {
        if (error)
          throw error;
        this.owlCode = result;
      });
    } catch (error) {
      console.log(error);
      console.log("An error occurred while transforming the model to gufo.");
      throw error;
    }
    return true;
  }
  initializeWriter() {
    this.writer = new N34.Writer({
      format: this.options.format,
      prefixes: getPrefixes(this)
    });
  }
  writePreamble() {
    this.writer.addQuads([
      quad(namedNode4(this.options.baseIri), namedNode4("rdf:type"), namedNode4("owl:Ontology")),
      quad(namedNode4(this.options.baseIri), namedNode4("owl:imports"), namedNode4("gufo:"))
    ]);
  }
  transformClasses() {
    const classes = this.model.getAllClasses();
    for (const _class of classes) {
      transformClass(this, _class);
    }
    writeDisjointnessAxioms(this, classes);
    return true;
  }
  transformAttributes() {
    const attributes = this.model.getAllAttributes();
    for (const attribute of attributes) {
      transformAttribute(this, attribute);
    }
  }
  transformRelations() {
    const relations = this.model.getAllRelations();
    for (const relation of relations) {
      transformRelation(this, relation);
      if (this.options.createInverses) {
        transformInverseRelation(this, relation);
      }
    }
  }
  transformCardinalities() {
    const relations = this.model.getAllRelations();
    for (const relation of relations) {
      transformRelationCardinalities(this, relation);
    }
  }
  transformGeneralizations() {
    const generalizations = this.model.getAllGeneralizations();
    for (const gen of generalizations) {
      transformGeneralization(this, gen);
    }
  }
  transformGeneralizationSets() {
    const generalizationSets = this.model.getAllGeneralizationSets();
    for (const genSet of generalizationSets) {
      transformGeneralizationSet(this, genSet);
    }
  }
  // static run(_package: Package, options?: Partial<Options>): { output: string; issues: Issue[] } {
  //   const ontouml2gufo = new Ontouml2Gufo(_package, options);
  //   ontouml2gufo.transform();
  //   return { output: ontouml2gufo.getOwlCode(), issues: ontouml2gufo.getIssues() };
  // }
  run() {
    this.transform();
    return {
      result: this.getOwlCode(),
      issues: this.getIssues() || void 0
    };
  }
};

// src/libs/ontouml2gufo/options.ts
var Ontouml2GufoOptions = class {
  constructor(base = {}) {
    this.format = "Turtle";
    this.baseIri = "https://example.com";
    this.uriFormatBy = "name";
    this.createObjectProperty = true;
    this.createInverses = false;
    this.prefixPackages = false;
    this.customElementMapping = {};
    this.customPackageMapping = {};
    Object.keys(base).forEach((key) => this[key] = base[key]);
  }
  getCustomUri(element) {
    const allMappings = this.customElementMapping;
    let elementCustomMapping = allMappings[element.id];
    if (elementCustomMapping && elementCustomMapping.uri) {
      return elementCustomMapping.uri;
    }
    elementCustomMapping = allMappings[element.getName()];
    if (elementCustomMapping && elementCustomMapping.uri) {
      return elementCustomMapping.uri;
    }
    return null;
  }
  getCustomLabels(element) {
    const allMappings = this.customElementMapping;
    let elementCustomMapping = allMappings[element.id];
    if (elementCustomMapping && elementCustomMapping.label) {
      return elementCustomMapping.label;
    }
    elementCustomMapping = allMappings[element.getName()];
    if (elementCustomMapping && elementCustomMapping.label) {
      return elementCustomMapping.label;
    }
    return null;
  }
  // type CustomPrefixData = { customPrefix?: string; customUri: string };
  getCustomPackagePrefix(pkg) {
    const idMapping = this.customPackageMapping[pkg.id];
    if (idMapping && idMapping.prefix) {
      return idMapping.prefix;
    }
    const packageName = pkg.getName();
    const nameMapping = this.customPackageMapping[packageName];
    if (nameMapping && nameMapping.prefix) {
      return nameMapping.prefix;
    }
    return null;
  }
  getCustomPackageUri(pkg) {
    const idMapping = this.customPackageMapping[pkg.id];
    if (idMapping && idMapping.uri) {
      return idMapping.uri;
    }
    const packageName = pkg.getName();
    const nameMapping = this.customPackageMapping[packageName];
    if (nameMapping && nameMapping.uri) {
      return nameMapping.uri;
    }
    return null;
  }
};

// src/libs/ontouml2gufo/prefix_functions.ts
var import_lodash8 = __toESM(require_lodash());
var DefaultPrefixes = {
  gufo: "http://purl.org/nemo/gufo#",
  rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
  rdfs: "http://www.w3.org/2000/01/rdf-schema#",
  owl: "http://www.w3.org/2002/07/owl#",
  xsd: "http://www.w3.org/2001/XMLSchema#"
};
var getPrefixes = (ontouml2gufo) => {
  return __spreadValues(__spreadValues(__spreadValues({}, getBasePrefix(ontouml2gufo)), getPackagePrefixes(ontouml2gufo)), DefaultPrefixes);
};
var getBasePrefix = (ontouml2gufo) => {
  const { baseIri, basePrefix } = ontouml2gufo.options;
  let prefix = {};
  if (basePrefix && basePrefix.trim().length > 0) {
    prefix[basePrefix] = `${baseIri}#`;
  } else {
    prefix[""] = `${baseIri}#`;
  }
  return prefix;
};
var getPackagePrefixes = (ontouml2gufo) => {
  if (!ontouml2gufo.options.prefixPackages) {
    return {};
  }
  const prefixes = {};
  const packages = ontouml2gufo.model.getAllPackages();
  for (const pkg of packages) {
    const prefix = getPackagePrefix(ontouml2gufo, pkg);
    const uri = getPackageUri(ontouml2gufo, pkg);
    prefixes[prefix] = uri;
  }
  return prefixes;
};
var getPackagePrefix = (ontouml2gufo, pkg) => {
  const customPrefix = ontouml2gufo.options.getCustomPackagePrefix(pkg);
  if (customPrefix) {
    return customPrefix;
  }
  if (ontouml2gufo.options.prefixPackages) {
    let prefix = normalizeName(pkg.getNameOrId());
    prefix = prefix.charAt(0).toLowerCase() + prefix.slice(1);
    return prefix;
  }
  return "";
};
var getPackageUri = (ontouml2gufo, pkg) => {
  const customUri = ontouml2gufo.options.getCustomPackageUri(pkg);
  if (customUri) {
    return customUri;
  }
  const { options } = ontouml2gufo;
  if (options.prefixPackages) {
    let uriSuffix = pkg.getName();
    uriSuffix = import_lodash8.default.kebabCase(uriSuffix);
    return `${options.baseIri}/${uriSuffix}#`;
  }
  return "";
};

// src/libs/ontouml2gufo/relation_functions.ts
function transformRelation(transformer, relation) {
  if (relation.hasInstantiationStereotype()) {
    transformInstantiation(transformer, relation);
    return;
  }
  if (relation.hasDerivationStereotype()) {
    transformDerivation(transformer, relation);
    return;
  }
  if (relation.hasMaterialStereotype() || relation.hasComparativeStereotype()) {
    writeBaseRelationAxioms(transformer, relation);
    transformAnnotations(transformer, relation);
    writeRelationTypeAxiom(transformer, relation);
    return;
  }
  if (!relation.isPartWholeRelation() && !relation.stereotype) {
    writeBaseRelationAxioms(transformer, relation);
    transformAnnotations(transformer, relation);
    return;
  }
  if (transformer.options.createObjectProperty) {
    writeBaseRelationAxioms(transformer, relation);
    transformAnnotations(transformer, relation);
    writeSubPropertyAxiom(transformer, relation);
    return;
  }
}
function writeBaseRelationAxioms(transformer, relation) {
  const relationUri = transformer.getUri(relation);
  transformer.addQuad(relationUri, "rdf:type", "owl:ObjectProperty");
  const domainUri = transformer.getSourceUri(relation);
  if (domainUri) {
    transformer.addQuad(relationUri, "rdfs:domain", domainUri);
  }
  const rangeUri = transformer.getTargetUri(relation);
  if (rangeUri) {
    transformer.addQuad(relationUri, "rdfs:range", rangeUri);
  }
}
function getPartWholeSuperProperty(relation) {
  if (!relation.isPartWholeRelation())
    return null;
  if (relation.holdsBetweenSubstantials())
    return "gufo:isObjectProperPartOf";
  if (relation.holdsBetweenMoments())
    return "gufo:isAspectProperPartOf";
  if (relation.holdsBetweenEvents())
    return "gufo:isEventProperPartOf";
  return "gufo:isProperPartOf";
}
function getSuperPropertyFromStereotype(relation) {
  const stereotype = relation.stereotype;
  const ontoumlRelation2GufoProperty = {
    bringsAbout: "gufo:broughtAbout",
    characterization: "gufo:inheresIn",
    componentOf: "gufo:isComponentOf",
    creation: "gufo:wasCreatedIn",
    derivation: "gufo:isDerivedFrom",
    externalDependence: "gufo:externallyDependsOn",
    historicalDependence: "gufo:historicallyDependsOn",
    instantiation: "gufo:categorizes",
    manifestation: "gufo:manifestedIn",
    mediation: "gufo:mediates",
    memberOf: "gufo:isCollectionMemberOf",
    participation: "gufo:participatedIn",
    participational: "gufo:isEventProperPartOf",
    subCollectionOf: "gufo:isSubCollectionOf",
    subQuantityOf: "gufo:isSubQuantityOf",
    termination: "gufo:wasTerminatedIn",
    triggers: "gufo:contributedToTrigger"
  };
  return ontoumlRelation2GufoProperty[stereotype];
}
function getSuperProperty(relation) {
  return getSuperPropertyFromStereotype(relation) || getPartWholeSuperProperty(relation);
}
function writeSubPropertyAxiom(transformer, relation) {
  let superProperty = getSuperProperty(relation);
  if (!superProperty) {
    return;
  }
  const relationUri = transformer.getUri(relation);
  transformer.addQuad(relationUri, "rdfs:subPropertyOf", superProperty);
}
function writeRelationTypeAxiom(transformer, relation) {
  const relationUri = transformer.getUri(relation);
  const relationTypeMap = {
    material: "gufo:MaterialRelationshipType",
    comparative: "gufo:ComparativeRelationshipType"
  };
  const stereotype = relation.stereotype;
  const typeUri = relationTypeMap[stereotype];
  transformer.addQuad(relationUri, "rdf:type", typeUri);
}
function transformInstantiation(transformer, relation) {
  const domainUri = transformer.getTargetUri(relation);
  const rangeUri = transformer.getSourceUri(relation);
  if (!domainUri || !rangeUri) {
    return false;
  }
  transformer.addQuad(domainUri, "gufo:categorizes", rangeUri);
  return true;
}
function transformDerivation(transformer, relation) {
  const domainUri = transformer.getSourceUri(relation);
  const rangeUri = transformer.getTargetUri(relation);
  if (!domainUri || !rangeUri) {
    return false;
  }
  transformer.addQuad(domainUri, "gufo:isDerivedFrom", rangeUri);
  return true;
}

// src/libs/ontouml2gufo/relations_inverse_functions.ts
function getPartWholeSuperPropertyInverse(relation) {
  if (!relation.isPartWholeRelation())
    return null;
  if (relation.holdsBetweenSubstantials())
    return "gufoi:hasObjectProperPart";
  if (relation.holdsBetweenMoments())
    return "gufoi:hasAspectProperPart";
  if (relation.holdsBetweenEvents())
    return "gufoi:hasEventProperPart";
  return "gufoi:hasProperPart";
}
function getSuperPropertyFromStereotypeInverse(relation) {
  const stereotype = relation.stereotype;
  const ontoumlRelation2GufoInverseProperty = {
    bringsAbout: "gufoi:wasBroughtAboutBy",
    characterization: "gufoi:bears",
    componentOf: "gufoi:hasComponent",
    creation: "gufoi:created",
    externalDependence: "gufoi:hasModeDependee",
    historicalDependence: "gufoi:hasHistoricalDependee",
    manifestation: "gufoi:manifested",
    mediation: "gufoi:isMediatedBy",
    memberOf: "gufoi:hasCollectionMember",
    participation: "gufoi:hadParticipant",
    participational: "gufoi:hasEventProperPart",
    subCollectionOf: "gufoi:hasSubCollection",
    subQuantityOf: "gufoi:hasSubQuantity",
    termination: "gufoi:terminated",
    triggers: "gufoi:wasTriggeredBy"
  };
  return ontoumlRelation2GufoInverseProperty[stereotype];
}
function getInverseSuperProperty(relation) {
  return getSuperPropertyFromStereotypeInverse(relation) || getPartWholeSuperPropertyInverse(relation);
}
function transformInverseRelation(transformer, relation) {
  if (relation.hasInstantiationStereotype() || relation.isDerivation()) {
    return;
  }
  if (relation.hasMaterialStereotype() || relation.hasComparativeStereotype()) {
    writeInverseBaseRelationAxioms(transformer, relation);
    transformInverseAnnotations(transformer, relation);
    writeInverseRelationTypeAxiom(transformer, relation);
    return;
  }
  if (!relation.isPartWholeRelation() && !relation.stereotype) {
    writeInverseBaseRelationAxioms(transformer, relation);
    transformInverseAnnotations(transformer, relation);
    return;
  }
  if (transformer.options.createObjectProperty && transformer.options.createInverses) {
    writeInverseBaseRelationAxioms(transformer, relation);
    transformInverseAnnotations(transformer, relation);
    writeInverseSubPropertyAxiom(transformer, relation);
    return;
  }
}
function writeInverseRelationTypeAxiom(transformer, relation) {
  const relationUri = transformer.getInverseRelationUri(relation);
  const relationTypeMap = {
    material: "gufo:MaterialRelationshipType",
    comparative: "gufo:ComparativeRelationshipType"
  };
  const stereotype = relation.stereotype;
  const typeUri = relationTypeMap[stereotype];
  transformer.addQuad(relationUri, "rdf:type", typeUri);
}
function writeInverseBaseRelationAxioms(transformer, relation) {
  const relationUri = transformer.getInverseRelationUri(relation);
  transformer.addQuad(relationUri, "rdf:type", "owl:ObjectProperty");
  const domainUri = transformer.getSourceUri(relation);
  if (domainUri) {
    transformer.addQuad(relationUri, "rdfs:range", domainUri);
  }
  const rangeUri = transformer.getTargetUri(relation);
  if (rangeUri) {
    transformer.addQuad(relationUri, "rdfs:domain", rangeUri);
  }
}
function writeInverseSubPropertyAxiom(transformer, relation) {
  let superProperty = getInverseSuperProperty(relation);
  if (!superProperty) {
    return;
  }
  const relationUri = transformer.getInverseRelationUri(relation);
  transformer.addQuad(relationUri, "rdfs:subPropertyOf", superProperty);
}

// src/libs/ontouml2gufo/uri_manager.ts
var import_lodash9 = __toESM(require_lodash());
var UriManager = class {
  constructor(transformer) {
    this.transformer = transformer;
    this.generateUniqueUris();
  }
  getUri(element) {
    return this.id2Uri[element.id];
  }
  getSourceUri(relation) {
    const source = relation.properties[0].propertyType;
    if (!source || !source.id)
      return null;
    return this.getUri(source);
  }
  getTargetUri(relation) {
    const target = relation.properties[1].propertyType;
    if (!target || !target.id)
      return null;
    return this.getUri(target);
  }
  uriExists(uri) {
    return this.uniqueUris.includes(uri);
  }
  saveUri(element, uri) {
    this.id2Uri[element.id] = uri;
    this.uniqueUris.push(uri);
  }
  generateUniqueUris() {
    this.id2Uri = {};
    this.uniqueUris = [];
    const { model } = this.transformer;
    const packages = import_lodash9.default.sortBy(model.getAllPackages(), ["id", "name"]);
    const classes = import_lodash9.default.sortBy(model.getAllClasses(), ["id", "name"]);
    const attributes = import_lodash9.default.sortBy(model.getAllAttributes(), ["id", "name"]);
    const relations = import_lodash9.default.sortBy(model.getAllRelations(), ["id", "name"]);
    const associationEnds = import_lodash9.default.sortBy(model.getAllRelationEnds(), ["id", "name"]);
    const literals = import_lodash9.default.sortBy(model.getAllLiterals(), ["id", "name"]);
    const elements = import_lodash9.default.concat(classes, attributes, relations, associationEnds, literals, packages, [
      model
    ]);
    for (const element of elements) {
      if (!element.id) {
        throw new Error("Cannot generate id-based URI for an element that does not have an id.");
      }
      if (element instanceof Relation3 && (element.hasInstantiationStereotype() || element.hasDerivationStereotype())) {
        continue;
      }
      const fixedUri = this.getFixedUri(element);
      if (fixedUri) {
        this.saveUri(element, fixedUri);
        continue;
      }
      if (this.transformer.options.uriFormatBy === "id") {
        const idUri = this.getUriFromId(element);
        if (!this.uriExists(idUri)) {
          this.saveUri(element, idUri);
          continue;
        }
        throw new Error("Cannot generate id-based URIs if elements with duplicate ids exist.");
      }
      let nameUri = this.getNameBasedUri(element);
      if (this.uriExists(nameUri)) {
        nameUri = this.getUniqueUriVariation(nameUri);
      }
      this.saveUri(element, nameUri);
    }
  }
  getUniqueUriVariation(originalUri) {
    let candidateUri = originalUri;
    let i = 0;
    while (this.uriExists(candidateUri)) {
      i++;
      candidateUri = originalUri + "_" + i;
    }
    return candidateUri;
  }
  getUriFromId(element) {
    return this.getPrefix(element) + ":" + element.id;
  }
  getFixedUri(element) {
    return this.getUriFromTaggedValues(element) || this.getUriFromOptions(element) || getUriFromXsdMapping(element);
  }
  getUriFromTaggedValues(element) {
    const assignments = element.propertyAssignments;
    return assignments && assignments.uri ? assignments.uri : null;
  }
  getUriFromOptions(element) {
    const uri = this.transformer.options.getCustomUri(element);
    return uri ? this.getPrefix(element) + ":" + uri : null;
  }
  getNameBasedUri(element) {
    if (element instanceof Relation3) {
      return this.getRelationNameBasedUri(element);
    }
    let elementName = getNormalizedName(element) || normalizeName(element.id);
    return this.getPrefix(element) + ":" + elementName;
  }
  getRelationNameBasedUri(relation) {
    if (relation.hasInstantiationStereotype() || relation.hasDerivationStereotype()) {
      throw new Error("Instantiation and derivation relations do not have URIs");
    }
    const prefix = this.getPrefix(relation) + ":";
    let normalizedRelationName = getNormalizedName(relation);
    if (normalizedRelationName) {
      return prefix + normalizedRelationName;
    }
    let normalizedTargetRoleName = getNormalizedName(relation.properties[1]);
    if (normalizedTargetRoleName) {
      return prefix + normalizedTargetRoleName;
    }
    let sourceType = relation.getSource();
    let sourceTypeName = sourceType.getNameOrId();
    let targetType = relation.getTarget();
    let targetTypeName = targetType.getNameOrId();
    let middleUriSegment;
    if (relation.hasMaterialStereotype() || relation.hasComparativeStereotype()) {
      middleUriSegment = "has";
    } else if (relation.stereotype || relation.isPartWholeRelation()) {
      let gufoPropertyUri = getSuperProperty(relation);
      middleUriSegment = gufoPropertyUri.replace("gufo:", "");
    } else {
      middleUriSegment = "has";
    }
    let relationName = import_lodash9.default.camelCase(sourceTypeName + " " + middleUriSegment + " " + targetTypeName);
    return prefix + normalizeName(relationName);
  }
  getInverseRelationUri(relation) {
    if (this.transformer.options.uriFormatBy === "id") {
      return this.getPrefix(relation) + ":inverse_" + relation.id;
    }
    return this.getInverseRelationNameBasedUri(relation);
  }
  getInverseRelationNameBasedUri(relation) {
    if (relation.hasInstantiationStereotype() || relation.hasDerivationStereotype()) {
      throw new Error("Instantiation and derivation relations do not have URIs");
    }
    const prefix = this.getPrefix(relation);
    let normalizedTargetRoleName = getNormalizedName(relation.properties[0]);
    if (normalizedTargetRoleName) {
      return prefix + ":" + normalizedTargetRoleName;
    }
    let sourceType = relation.getSource();
    let sourceTypeName = sourceType.getNameOrId();
    let targetType = relation.getTarget();
    let targetTypeName = targetType.getNameOrId();
    let middleUriSegment;
    if (relation.hasMaterialStereotype() || relation.hasComparativeStereotype()) {
      middleUriSegment = "has";
    } else if (relation.stereotype || relation.isPartWholeRelation()) {
      let gufoPropertyUri = getSuperProperty(relation);
      middleUriSegment = gufoPropertyUri.replace("gufo:", "");
    } else {
      middleUriSegment = "has";
    }
    let relationName = import_lodash9.default.camelCase(sourceTypeName + " " + middleUriSegment + " " + targetTypeName);
    return prefix + ":" + normalizeName(relationName);
  }
  getPrefix(element) {
    const { options } = this.transformer;
    const hasCustomPackage = options.customPackageMapping && Object.keys(options.customPackageMapping).length > 0;
    if (options.prefixPackages || hasCustomPackage) {
      const root = element.getModelOrRootPackage();
      const packageEl = element.container;
      if (packageEl && packageEl.id && packageEl.name) {
        const isRoot = root && root.id === packageEl.id;
        const prefix = getPackagePrefix(this.transformer, packageEl);
        return isRoot ? "" : prefix;
      }
    }
    return options.basePrefix || "";
  }
};
function normalizeName(name) {
  if (!name) {
    return null;
  }
  name = name.replace(/[\s-](\w)/g, (_match, $1) => {
    return $1.toUpperCase();
  });
  return name.replace(/[^a-zA-Z0-9_]/g, "");
}
var getNormalizedName = (element) => {
  let name = element.getName();
  return normalizeName(name);
};
var getUriFromXsdMapping = (element) => {
  if (!(element instanceof Class)) {
    return null;
  } else if (!element.hasDatatypeStereotype() || element.hasAttributes()) {
    return null;
  }
  const xsdTypes = [
    "anyURI",
    "base64Binary",
    "boolean",
    "byte",
    "date",
    "dateTime",
    "dateTimeStamp",
    "dayTimeDuration",
    "decimal",
    "double",
    "float",
    "gDay",
    "gMonth",
    "gMonthDay",
    "gYear",
    "gYearMonth",
    "hexBinary",
    "int",
    "integer",
    "language",
    "long",
    "Name",
    "NCName",
    "NMTOKEN",
    "negativeInteger",
    "nonNegativeInteger",
    "nonPositiveInteger",
    "normalizedString",
    "positiveInteger",
    "short",
    "string",
    "time",
    "token",
    "unsignedByte",
    "unsignedInt",
    "unsignedLong",
    "unsignedShort",
    "yearMonthDuration",
    "precisionDecimal",
    "duration",
    "QName",
    "ENTITY",
    "ID",
    "IDREF",
    "NOTATION",
    "IDREFS",
    "ENTITIES",
    "NMTOKENS"
  ];
  const datatypeName = element.getName().toLowerCase();
  for (const type of xsdTypes) {
    if (type.toLowerCase() === datatypeName) {
      return "xsd:" + type;
    }
  }
  return null;
};

// src/libs/verification/constants.ts
var VerificationIssueCode = /* @__PURE__ */ ((VerificationIssueCode2) => {
  VerificationIssueCode2["class_identity_provider_specialization"] = "class_identity_provider_specialization";
  VerificationIssueCode2["class_missing_nature_restrictions"] = "class_missing_nature_restrictions";
  VerificationIssueCode2["class_missing_identity_provider"] = "class_missing_identity_provider";
  VerificationIssueCode2["class_missing_is_extensional"] = "class_missing_is_extensional";
  VerificationIssueCode2["class_missing_is_powertype"] = "class_missing_is_powertype";
  VerificationIssueCode2["class_missing_order"] = "class_missing_order";
  VerificationIssueCode2["class_multiple_identity_providers"] = "class_multiple_identity_providers";
  VerificationIssueCode2["class_not_unique_stereotype"] = "class_not_unique_stereotype";
  VerificationIssueCode2["class_invalid_ontouml_stereotype"] = "class_invalid_ontouml_stereotype";
  VerificationIssueCode2["class_non_enumeration_with_literals"] = "class_non_enumeration_with_literals";
  VerificationIssueCode2["class_enumeration_with_properties"] = "class_enumeration_with_properties";
  VerificationIssueCode2["class_incompatible_natures"] = "class_incompatible_natures";
  VerificationIssueCode2["generalization_inconsistent_specialization"] = "generalization_inconsistent_specialization";
  VerificationIssueCode2["generalization_incompatible_natures"] = "generalization_incompatible_natures";
  VerificationIssueCode2["generalization_incompatible_enumeration"] = "generalization_incompatible_enumeration";
  VerificationIssueCode2["generalization_incompatible_datatype"] = "generalization_incompatible_datatype";
  VerificationIssueCode2["generalization_incompatible_class_rigidity"] = "generalization_incompatible_class_rigidity";
  VerificationIssueCode2["generalization_incompatible_class_sortality"] = "generalization_incompatible_class_sortality";
  VerificationIssueCode2["generalization_incompatible_general_and_specific_types"] = "generalization_incompatible_general_and_specific_types";
  VerificationIssueCode2["generalization_circular"] = "generalization_circular";
  VerificationIssueCode2["generalization_incompatible_relation_type"] = "generalization_incompatible_relation_type";
  VerificationIssueCode2["relation_multiple_stereotypes"] = "relation_multiple_stereotypes";
  VerificationIssueCode2["relation_missing_is_read_only"] = "relation_missing_is_read_only";
  VerificationIssueCode2["relation_improper_derivation"] = "relation_improper_derivation";
  return VerificationIssueCode2;
})(VerificationIssueCode || {});

// src/libs/verification/verification_issue.ts
function stringifyStereotypes(stereotypes) {
  return `\xAB${stereotypes.join("\xBB, \xAB")}\xBB`;
}
var VerificationIssue = class {
  constructor(source, code, title, severity = "warning" /* WARNING */, description, context) {
    this.code = code;
    this.title = title;
    this.severity = severity || "warning" /* WARNING */;
    this.description = description || null;
    this.data = {
      source,
      context: context || []
    };
  }
  isError() {
    return this.severity === "error" /* ERROR */;
  }
  isWarning() {
    return this.severity === "warning" /* WARNING */;
  }
  static createClassIdentityProviderSpecialization(source, specializedUltimateSortals) {
    const specializedStereotypes = specializedUltimateSortals.map((ultimateSortal) => ultimateSortal.stereotype).reduce((acc, stereotype) => acc.add(stereotype), /* @__PURE__ */ new Set());
    return new VerificationIssue(
      source,
      "class_identity_provider_specialization" /* class_identity_provider_specialization */,
      "Classes representing ultimate sortals cannot specialize other ultimate sortals",
      "error" /* ERROR */,
      `The class ${source.getNameOrId()} is specializing other classes that represent ultimate sortals: ${stringifyStereotypes([
        ...specializedStereotypes
      ])}`,
      specializedUltimateSortals
    );
  }
  static createClassMissingNatureRestrictions(source) {
    const description = `The meta-property 'restrictedTo' of class ${source.getNameOrId()} must specify the possible ontological natures of its instances`;
    return new VerificationIssue(
      source,
      "class_missing_nature_restrictions" /* class_missing_nature_restrictions */,
      "The meta-property 'restrictedTo' is not assigned",
      "error" /* ERROR */,
      description,
      []
    );
  }
  static createClassMissingIdentityProvider(source) {
    return new VerificationIssue(
      source,
      "class_missing_identity_provider" /* class_missing_identity_provider */,
      "Every sortal class must specialize a unique ultimate sortal",
      "error" /* ERROR */,
      `The class ${source.getNameOrId()} must specialize (directly or indirectly) a unique class decorated as one of the following: ${stringifyStereotypes(
        stereotypeUtils.UltimateSortalStereotypes
      )}`,
      []
    );
  }
  static createClassMissingIsExtensional(source) {
    return new VerificationIssue(
      source,
      "class_missing_is_extensional" /* class_missing_is_extensional */,
      "The meta-property 'isExtensional' is not assigned",
      "error" /* ERROR */,
      `The meta-property 'isExtensional' of \xAB${"collective" /* COLLECTIVE */}\xBB class ${source.getNameOrId()} must be assigned`,
      []
    );
  }
  static createClassMissingIsPowertype(source) {
    return new VerificationIssue(
      source,
      "class_missing_is_powertype" /* class_missing_is_powertype */,
      "The meta-property 'isPowertype' is not assigned",
      "error" /* ERROR */,
      `The meta-property 'isPowertype' of \xAB${"type" /* TYPE */}\xBB class ${source.getNameOrId()} must be assigned.`,
      []
    );
  }
  static createClassMissingOrder(source) {
    return new VerificationIssue(
      source,
      "class_missing_order" /* class_missing_order */,
      "The meta-property 'order' is not assigned",
      "error" /* ERROR */,
      `The meta-property 'order' of \xAB${"type" /* TYPE */}\xBB class ${source.getNameOrId()} must be assigned.`,
      []
    );
  }
  static createClassMultipleIdentityProviders(source, specializedUltimateSortals) {
    const specializedStereotypes = specializedUltimateSortals.map((ultimateSortal) => ultimateSortal.stereotype).reduce((acc, stereotype) => acc.add(stereotype), /* @__PURE__ */ new Set());
    return new VerificationIssue(
      source,
      "class_multiple_identity_providers" /* class_multiple_identity_providers */,
      "Every sortal class must specialize a unique ultimate sortal",
      "error" /* ERROR */,
      `The class ${source.getNameOrId()} is specializing multiple classes that represent ultimate sortals: ${stringifyStereotypes(
        [...specializedStereotypes]
      )}`,
      specializedUltimateSortals
    );
  }
  static createClassNotUniqueStereotype(source) {
    return new VerificationIssue(
      source,
      "class_not_unique_stereotype" /* class_not_unique_stereotype */,
      "Not unique class stereotype",
      "error" /* ERROR */,
      `The class ${source.getNameOrId()} must have a unique OntoUML stereotype.`,
      []
    );
  }
  static createClassInvalidOntoumlStereotype(source) {
    return new VerificationIssue(
      source,
      "class_invalid_ontouml_stereotype" /* class_invalid_ontouml_stereotype */,
      "No valid OntoUML stereotype",
      "error" /* ERROR */,
      `The class ${source.getNameOrId()} must have a unique OntoUML stereotype.`,
      []
    );
  }
  static createClassNonEnumerationWithLiterals(source) {
    return new VerificationIssue(
      source,
      "class_non_enumeration_with_literals" /* class_non_enumeration_with_literals */,
      "Only enumerations may have literals",
      "error" /* ERROR */,
      `The class ${source.getNameOrId()} is not decorated as \xAB${"enumeration" /* ENUMERATION */}\xBB and thus cannot have literals.`,
      []
    );
  }
  static createClassEnumerationWithProperties(source) {
    return new VerificationIssue(
      source,
      "class_enumeration_with_properties" /* class_enumeration_with_properties */,
      "Enumerations may not have attributes",
      "error" /* ERROR */,
      `The class ${source.getNameOrId()} decorated as \xAB${"enumeration" /* ENUMERATION */}\xBB cannot have attributes.`,
      []
    );
  }
  static createClassIncompatibleNatures(source) {
    return new VerificationIssue(
      source,
      "class_incompatible_natures" /* class_incompatible_natures */,
      "Incompatible stereotype and 'restrictedTo' combination",
      "error" /* ERROR */,
      `The \xAB${source.stereotype}\xBB class ${source.getNameOrId()} has its value for 'restrictedTo' incompatible with the stereotype`,
      []
    );
  }
  static createGeneralizationInconsistentSpecialization(source) {
    throw new Error("Unimplemented: generalization_inconsistent_specialization");
    return new VerificationIssue(
      source,
      "generalization_inconsistent_specialization" /* generalization_inconsistent_specialization */,
      "",
      "error" /* ERROR */,
      "",
      []
    );
  }
  static createGeneralizationIncompatibleNatures(source) {
    const general = source.general;
    const specific = source.specific;
    return new VerificationIssue(
      source,
      "generalization_incompatible_natures" /* generalization_incompatible_natures */,
      "Prohibited generalization: incompatible 'restrictedTo' values",
      "error" /* ERROR */,
      `The allowed ontological natures of instances of ${specific.getNameOrId()} are not among the allowed ontological natures of its superclass ${general.getNameOrId()}`,
      [general, specific]
    );
  }
  static createGeneralizationIncompatibleEnumeration(source) {
    const general = source.general;
    const specific = source.specific;
    return new VerificationIssue(
      source,
      "generalization_incompatible_enumeration" /* generalization_incompatible_enumeration */,
      "Prohibited generalization: enumeration specialization",
      "error" /* ERROR */,
      `An enumeration can only be in generalization relation with other enumerations`,
      [general, specific]
    );
  }
  static createGeneralizationIncompatibleDatatype(source) {
    const general = source.general;
    const specific = source.specific;
    return new VerificationIssue(
      source,
      "generalization_incompatible_datatype" /* generalization_incompatible_datatype */,
      "Prohibited generalization: datatype specialization",
      "error" /* ERROR */,
      "A datatype can only be in generalization relation with other datatypes",
      [general, specific]
    );
  }
  static createGeneralizationIncompatibleClassRigidity(source) {
    const general = source.general;
    const specific = source.specific;
    return new VerificationIssue(
      source,
      "generalization_incompatible_class_rigidity" /* generalization_incompatible_class_rigidity */,
      "Prohibited generalization: rigid/semi-rigid specializing an anti-rigid",
      "error" /* ERROR */,
      `The rigid/semi-rigid class ${specific.getNameOrId()} cannot specialize the anti-rigid class ${general.getNameOrId()}`,
      [general, specific]
    );
  }
  static createGeneralizationIncompatibleClassSortality(source) {
    const general = source.general;
    const specific = source.specific;
    return new VerificationIssue(
      source,
      "generalization_incompatible_class_sortality" /* generalization_incompatible_class_sortality */,
      "Prohibited generalization: non-sortal specializing a sortal",
      "error" /* ERROR */,
      `The non-sortal class ${specific.getNameOrId()} cannot specialize the sortal class ${general.getNameOrId()}`,
      [general, specific]
    );
  }
  static createGeneralizationIncompatibleGeneralAndSpecificTypes(source) {
    return new VerificationIssue(
      source,
      "generalization_incompatible_general_and_specific_types" /* generalization_incompatible_general_and_specific_types */,
      "Prohibited generalization: specific and general of distinct types",
      "error" /* ERROR */,
      `Generalizations must exclusively involve classes or relations, never a combination`,
      [source.general, source.specific]
    );
  }
  static createGeneralizationCircular(source) {
    return new VerificationIssue(
      source,
      "generalization_circular" /* generalization_circular */,
      "Prohibited generalization: circular generalization",
      "error" /* ERROR */,
      `Generalizations must be defined between two distinct classes/relations`,
      [source.general, source.specific]
    );
  }
  static createGeneralizationIncompatibleRelationType(source) {
    throw new Error("Unimplemented: generalization_incompatible_relation_type");
    return new VerificationIssue(
      source,
      "generalization_incompatible_relation_type" /* generalization_incompatible_relation_type */,
      "",
      "error" /* ERROR */,
      "",
      []
    );
  }
  static createRelationMultipleStereotypes(source) {
    throw new Error("Unimplemented: relation_multiple_stereotypes");
    return new VerificationIssue(
      source,
      "relation_multiple_stereotypes" /* relation_multiple_stereotypes */,
      "",
      "error" /* ERROR */,
      "",
      []
    );
  }
  static createRelationMissingIsReadOnly(source) {
    throw new Error("Unimplemented: relation_missing_is_read_only");
    return new VerificationIssue(
      source,
      "relation_missing_is_read_only" /* relation_missing_is_read_only */,
      "",
      "error" /* ERROR */,
      "",
      []
    );
  }
  static createRelationImproperDerivation(source) {
    throw new Error("Unimplemented: relation_improper_derivation");
    return new VerificationIssue(
      source,
      "relation_improper_derivation" /* relation_improper_derivation */,
      "",
      "error" /* ERROR */,
      "",
      []
    );
  }
};

// src/libs/verification/ontouml_verification.ts
var OntoumlVerification = class {
  constructor(input, options) {
    this.options = options || null;
    this.issues = [];
    this.elementToVerify = input;
  }
  run() {
    return {
      result: this.issues = OntoumlVerification.verify(this.elementToVerify)
    };
  }
  static verify(element) {
    switch (element && element.constructor) {
      case Class:
        return ClassVerification.verifyClass(element);
      case GeneralizationSet3:
        return GeneralizationSetVerification.verifyGeneralizationSet(element);
      case Generalization:
        return GeneralizationVerification.verifyGeneralization(element);
      case Literal:
        return LiteralVerification.verifyLiteral(element);
      case Package:
        return PackageVerification.verifyPackage(element);
      case Project2:
        return ProjectVerification.verifyProject(element);
      case Property2:
        return PropertyVerification.verifyProperty(element);
      case Relation3:
        return RelationVerification.verifyRelation(element);
      default:
        throw new Error(`Unexpected element to be verified.`);
    }
  }
};

// src/libs/verification/class_verification.ts
var allowedStereotypeRestrictedToMatches = {
  ["abstract" /* ABSTRACT */]: ["abstract" /* abstract */],
  ["datatype" /* DATATYPE */]: ["abstract" /* abstract */],
  ["enumeration" /* ENUMERATION */]: ["abstract" /* abstract */],
  ["event" /* EVENT */]: ["event" /* event */],
  ["situation" /* SITUATION */]: ["situation" /* situation */],
  ["category" /* CATEGORY */]: natureUtils.EndurantNatures,
  ["mixin" /* MIXIN */]: natureUtils.EndurantNatures,
  ["roleMixin" /* ROLE_MIXIN */]: natureUtils.EndurantNatures,
  ["phaseMixin" /* PHASE_MIXIN */]: natureUtils.EndurantNatures,
  ["historicalRoleMixin" /* HISTORICAL_ROLE_MIXIN */]: natureUtils.EndurantNatures,
  ["kind" /* KIND */]: ["functional-complex" /* functional_complex */],
  ["collective" /* COLLECTIVE */]: ["collective" /* collective */],
  ["quantity" /* QUANTITY */]: ["quantity" /* quantity */],
  ["relator" /* RELATOR */]: ["relator" /* relator */],
  ["mode" /* MODE */]: ["extrinsic-mode" /* extrinsic_mode */, "intrinsic-mode" /* intrinsic_mode */],
  ["quality" /* QUALITY */]: ["quality" /* quality */],
  ["subkind" /* SUBKIND */]: natureUtils.EndurantNatures,
  ["role" /* ROLE */]: natureUtils.EndurantNatures,
  ["phase" /* PHASE */]: natureUtils.EndurantNatures,
  ["historicalRole" /* HISTORICAL_ROLE */]: natureUtils.EndurantNatures,
  ["type" /* TYPE */]: ["type" /* type */]
};
var ClassVerification = class {
  static verifyClass(_class) {
    let foundIssues = ClassVerification.checkMinimalConsistency(_class);
    if (foundIssues.some((issue) => issue.isError())) {
      return foundIssues;
    }
    utils2.pushItemsToArrayIfNotNull(
      foundIssues,
      ClassVerification.checkKindSpecialization(_class),
      ClassVerification.checkCompatibleNatures(_class),
      ClassVerification.checkMissingNatures(_class),
      ClassVerification.checkMissingIsExtensional(_class),
      ClassVerification.checkMissingIsPowertype(_class),
      ClassVerification.checkMissingOrder(_class)
    );
    return foundIssues;
  }
  static checkMinimalConsistency(_class) {
    const issues = [];
    const classStereotypes = stereotypeUtils.ClassStereotypes;
    if (!_class.stereotype) {
      issues.push(VerificationIssue.createClassNotUniqueStereotype(_class));
    } else if (!classStereotypes.includes(_class.stereotype)) {
      issues.push(VerificationIssue.createClassInvalidOntoumlStereotype(_class));
    }
    if (_class.hasEnumerationStereotype() && _class.hasAttributes()) {
      issues.push(VerificationIssue.createClassEnumerationWithProperties(_class));
    } else if (!_class.hasEnumerationStereotype() && _class.hasLiterals()) {
      issues.push(VerificationIssue.createClassNonEnumerationWithLiterals(_class));
    }
    return issues;
  }
  static checkKindSpecialization(_class) {
    if (_class.hasSortalStereotype()) {
      const ultimateSortalAncestors = _class.getUltimateSortalAncestors();
      if (_class.hasUltimateSortalStereotype() && ultimateSortalAncestors.length > 0) {
        return VerificationIssue.createClassIdentityProviderSpecialization(_class, ultimateSortalAncestors);
      } else if (!_class.hasUltimateSortalStereotype() && ultimateSortalAncestors.length > 1) {
        return VerificationIssue.createClassMultipleIdentityProviders(_class, ultimateSortalAncestors);
      } else if (!_class.hasUltimateSortalStereotype() && ultimateSortalAncestors.length === 0 && !_class.isRestrictedToType()) {
        return VerificationIssue.createClassMissingIdentityProvider(_class);
      }
    }
    return null;
  }
  static checkCompatibleNatures(_class) {
    if (!_class.restrictedTo || !_class.stereotype) {
      return null;
    }
    const stereotype = _class.stereotype;
    const incompatibleNatures = !_class.restrictedTo ? [] : _class.restrictedTo.filter(
      (nature) => allowedStereotypeRestrictedToMatches[stereotype] && !allowedStereotypeRestrictedToMatches[stereotype].includes(nature)
    );
    return incompatibleNatures.length < 1 ? null : VerificationIssue.createClassIncompatibleNatures(_class);
  }
  static checkMissingNatures(_class) {
    if (!_class.stereotype) {
      return null;
    }
    return !Array.isArray(_class.restrictedTo) || !_class.restrictedTo.length ? VerificationIssue.createClassMissingNatureRestrictions(_class) : null;
  }
  static checkMissingIsExtensional(_class) {
    if (!_class.hasEndurantOnlyStereotype()) {
      return null;
    }
    return _class.isExtensional === null ? VerificationIssue.createClassMissingIsExtensional(_class) : null;
  }
  static checkMissingIsPowertype(_class) {
    if (!_class.hasTypeStereotype()) {
      return null;
    }
    return _class.isPowertype === null ? VerificationIssue.createClassMissingIsPowertype(_class) : null;
  }
  static checkMissingOrder(_class) {
    if (!_class.hasTypeStereotype()) {
      return null;
    }
    return !_class.order ? VerificationIssue.createClassMissingOrder(_class) : null;
  }
};

// src/libs/verification/generalization_set_verification.ts
var GeneralizationSetVerification = class {
  static verifyGeneralizationSet(_generalizationSet) {
    const foundIssues = [];
    return foundIssues;
  }
};

// src/libs/verification/generalization_verification.ts
var GeneralizationVerification = class {
  static verifyGeneralization(generalization) {
    let foundIssues = GeneralizationVerification.checkMinimalConsistency(generalization);
    if (foundIssues.some((issue) => issue.isError())) {
      return foundIssues;
    }
    utils2.pushItemsToArrayIfNotNull(
      foundIssues,
      GeneralizationVerification.checkGeneralizationSortality(generalization),
      GeneralizationVerification.checkGeneralizationRigidity(generalization),
      GeneralizationVerification.checkGeneralizationDatatype(generalization),
      GeneralizationVerification.checkGeneralizationEnumeration(generalization),
      GeneralizationVerification.checkGeneralizationCompatibleNatures(generalization)
    );
    return foundIssues;
  }
  static checkMinimalConsistency(generalization) {
    const consistencyIssues = [];
    const general = generalization.general;
    const specific = generalization.specific;
    if (general.type !== specific.type) {
      consistencyIssues.push(VerificationIssue.createGeneralizationIncompatibleGeneralAndSpecificTypes(generalization));
    }
    if (general.id === specific.id) {
      consistencyIssues.push(VerificationIssue.createGeneralizationCircular(generalization));
    }
    return consistencyIssues;
  }
  static checkGeneralizationSortality(generalization) {
    if (!generalization.involvesClasses()) {
      return null;
    }
    const general = generalization.getGeneralClass();
    const specific = generalization.getSpecificClass();
    return general.hasSortalStereotype() && specific.hasNonSortalStereotype() ? VerificationIssue.createGeneralizationIncompatibleClassSortality(generalization) : null;
  }
  static checkGeneralizationRigidity(generalization) {
    if (!generalization.involvesClasses()) {
      return null;
    }
    const general = generalization.getGeneralClass();
    const specific = generalization.getSpecificClass();
    return general.hasAntiRigidStereotype() && (specific.hasRigidStereotype() || specific.hasSemiRigidStereotype()) ? VerificationIssue.createGeneralizationIncompatibleClassRigidity(generalization) : null;
  }
  static checkGeneralizationDatatype(generalization) {
    if (!generalization.involvesClasses() || !generalization.general.stereotype || !generalization.specific.stereotype) {
      return null;
    }
    const general = generalization.getGeneralClass();
    const specific = generalization.getSpecificClass();
    return (general.hasDatatypeStereotype() || specific.hasDatatypeStereotype()) && general.stereotype !== specific.stereotype ? VerificationIssue.createGeneralizationIncompatibleDatatype(generalization) : null;
  }
  static checkGeneralizationEnumeration(generalization) {
    if (!generalization.involvesClasses() || !generalization.general.stereotype || !generalization.specific.stereotype) {
      return null;
    }
    const general = generalization.getGeneralClass();
    const specific = generalization.getSpecificClass();
    return (general.hasEnumerationStereotype() || specific.hasEnumerationStereotype()) && general.stereotype !== specific.stereotype ? VerificationIssue.createGeneralizationIncompatibleEnumeration(generalization) : null;
  }
  static checkGeneralizationCompatibleNatures(generalization) {
    if (!generalization.involvesClasses()) {
      return null;
    }
    const general = generalization.getGeneralClass();
    const specific = generalization.getSpecificClass();
    return !general.restrictedToContains(specific.restrictedTo) ? VerificationIssue.createGeneralizationIncompatibleNatures(generalization) : null;
  }
};

// src/libs/verification/literal_verification.ts
var LiteralVerification = class {
  static verifyLiteral(_literal) {
    const foundIssues = [];
    return foundIssues;
  }
};

// src/libs/verification/package_verification.ts
var import_lodash10 = __toESM(require_lodash());
var PackageVerification = class {
  static verifyPackage(_package) {
    let foundIssues = [];
    _package.getContents().forEach((element) => foundIssues = import_lodash10.default.concat(foundIssues, OntoumlVerification.verify(element)));
    return foundIssues;
  }
};

// src/libs/verification/project_verification.ts
var import_lodash11 = __toESM(require_lodash());
var ProjectVerification = class {
  static verifyProject(project) {
    let foundIssues = [];
    const model = project.model;
    if (model) {
      foundIssues = import_lodash11.default.concat(foundIssues, OntoumlVerification.verify(model));
    }
    return foundIssues;
  }
};

// src/libs/verification/property_verification.ts
var PropertyVerification = class {
  static verifyProperty(_property) {
    const foundIssues = [];
    return foundIssues;
  }
};

// src/libs/verification/relation_verification.ts
var RelationVerification = class {
  static verifyRelation(_relation) {
    const foundIssues = [];
    return foundIssues;
  }
};

// src/libs/verification/utils.ts
function pushItemsToArrayIfNotNull(array, ...issues) {
  for (const issue of issues) {
    if (issue) {
      array.push(issue);
    }
  }
}
var utils2 = {
  pushItemsToArrayIfNotNull
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AggregationKind,
  CARDINALITY_MAX,
  CARDINALITY_MAX_AS_NUMBER,
  Cardinality,
  CardinalityValues,
  Class,
  ClassStereotype,
  ClassView,
  Classifier,
  ConnectorView,
  Decoratable,
  Diagram,
  DiagramElement,
  ElementView,
  Generalization,
  GeneralizationSet,
  GeneralizationSetView,
  GeneralizationView,
  Literal,
  ModelElement,
  Modularizer,
  MultilingualText,
  NodeView,
  ORDERLESS_LEVEL,
  OntologicalNature,
  Ontouml2Db,
  Ontouml2DbOptions,
  Ontouml2Gufo,
  Ontouml2GufoOptions,
  OntoumlElement,
  OntoumlType,
  OntoumlVerification,
  Package,
  PackageView,
  Path,
  Point,
  Project,
  Property,
  PropertyStereotype,
  Rectangle,
  RectangularShape,
  Relation,
  RelationStereotype,
  RelationView,
  ServiceIssueSeverity,
  Shape,
  Text,
  VerificationIssue,
  VerificationIssueCode,
  containerUtils,
  natureUtils,
  serializationUtils,
  stereotypeUtils,
  utils
});
/*! Bundled license information:

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

language-tags/lib/Subtag.js:
  (**
   * @author Matthew Caruana Galizia <m@m.cg>
   * @license MIT: http://mattcg.mit-license.org/
   * @copyright Copyright (c) 2013, Matthew Caruana Galizia
   *)

language-tags/lib/Tag.js:
  (**
   * @author Matthew Caruana Galizia <m@m.cg>
   * @license MIT: http://mattcg.mit-license.org/
   * @copyright Copyright (c) 2013, Matthew Caruana Galizia
   *)

language-tags/lib/index.js:
  (**
   * @author Matthew Caruana Galizia <m@m.cg>
   * @license MIT: http://mattcg.mit-license.org/
   * @copyright Copyright (c) 2013, Matthew Caruana Galizia
   *)

uri-js/dist/es5/uri.all.js:
  (** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js *)

queue-microtask/index.js:
  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/
//# sourceMappingURL=index.js.map
